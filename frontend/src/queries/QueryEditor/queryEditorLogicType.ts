// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:22 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { QueryEditorLogicProps } from './queryEditorLogic'
import type { Node } from '../schema'

export interface queryEditorLogicType extends Logic {
    actionCreators: {
        saveQuery: () => {
            type: 'save query (queries.QueryEditor.queryEditorLogic)'
            payload: {
                value: true
            }
        }
        setQueryInput: (queryInput: string) => {
            type: 'set query input (queries.QueryEditor.queryEditorLogic)'
            payload: {
                queryInput: string
            }
        }
    }
    actionKeys: {
        'save query (queries.QueryEditor.queryEditorLogic)': 'saveQuery'
        'set query input (queries.QueryEditor.queryEditorLogic)': 'setQueryInput'
    }
    actionTypes: {
        saveQuery: 'save query (queries.QueryEditor.queryEditorLogic)'
        setQueryInput: 'set query input (queries.QueryEditor.queryEditorLogic)'
    }
    actions: {
        saveQuery: () => void
        setQueryInput: (queryInput: string) => void
    }
    asyncActions: {
        saveQuery: () => Promise<any>
        setQueryInput: (queryInput: string) => Promise<any>
    }
    defaults: {
        queryInput: string
    }
    events: {}
    key: number
    listeners: {
        saveQuery: ((
            action: {
                type: 'save query (queries.QueryEditor.queryEditorLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['queries', 'QueryEditor', 'queryEditorLogic']
    pathString: 'queries.QueryEditor.queryEditorLogic'
    props: QueryEditorLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        queryInput: string
    }
    reducers: {
        queryInput: (state: string, action: any, fullState: any) => string
    }
    selector: (state: any) => {
        queryInput: string
    }
    selectors: {
        queryInput: (state: any, props?: any) => string
        parsedQuery: (
            state: any,
            props?: any
        ) => {
            JSONQuery: Node | null
            error: string | null
        }
        JSONQuery: (state: any, props?: any) => Node | null
        error: (state: any, props?: any) => string | null
        inputChanged: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        queryInput: string
        parsedQuery: {
            JSONQuery: Node | null
            error: string | null
        }
        JSONQuery: Node | null
        error: string | null
        inputChanged: boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        parsedQuery: (queryInput: string) => {
            JSONQuery: Node | null
            error: string | null
        }
        JSONQuery: (parsedQuery: { JSONQuery: Node | null; error: string | null }) => Node | null
        error: (parsedQuery: { JSONQuery: Node | null; error: string | null }) => string | null
        inputChanged: (arg: any, queryInput: string) => boolean
    }
}
