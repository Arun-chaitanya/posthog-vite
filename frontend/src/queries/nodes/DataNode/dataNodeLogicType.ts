// Generated by kea-typegen on Thu, 20 Jul 2023 11:18:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { EventType, UserType } from '../../../types'
import type { DataNodeLogicProps } from './dataNodeLogic'
import type { AnyResponseType, DataNode, EventsQueryResponse, HogQLMetadataResponse, HogQLQueryResponse } from '../../schema'

export interface dataNodeLogicType extends Logic {
    actionCreators: {
        loadData: (refresh?: any) => {
            type: 'load data (queries.nodes.dataNodeLogic)'
            payload: {
                refresh: any
                queryId: string
            }
        }
        abortAnyRunningQuery: () => {
            type: 'abort any running query (queries.nodes.dataNodeLogic)'
            payload: {
                value: true
            }
        }
        abortQuery: (payload: { queryId: string }) => {
            type: 'abort query (queries.nodes.dataNodeLogic)'
            payload: {
                queryId: string
            }
        }
        cancelQuery: () => {
            type: 'cancel query (queries.nodes.dataNodeLogic)'
            payload: {
                value: true
            }
        }
        setResponse: (response: Exclude<AnyResponseType, undefined>) => {
            type: 'set response (queries.nodes.dataNodeLogic)'
            payload:
                | Record<string, any>
                | HogQLQueryResponse
                | HogQLMetadataResponse
                | {
                      results: EventType[]
                      next?: string | undefined
                  }
                | EventsQueryResponse
        }
        clearResponse: () => {
            type: 'clear response (queries.nodes.dataNodeLogic)'
            payload: {
                value: true
            }
        }
        startAutoLoad: () => {
            type: 'start auto load (queries.nodes.dataNodeLogic)'
            payload: {
                value: true
            }
        }
        stopAutoLoad: () => {
            type: 'stop auto load (queries.nodes.dataNodeLogic)'
            payload: {
                value: true
            }
        }
        toggleAutoLoad: () => {
            type: 'toggle auto load (queries.nodes.dataNodeLogic)'
            payload: {
                value: true
            }
        }
        highlightRows: (rows: any[]) => {
            type: 'highlight rows (queries.nodes.dataNodeLogic)'
            payload: {
                rows: any[]
            }
        }
        setElapsedTime: (elapsedTime: number) => {
            type: 'set elapsed time (queries.nodes.dataNodeLogic)'
            payload: {
                elapsedTime: number
            }
        }
        setResponseSuccess: (
            response:
                | Record<string, any>
                | HogQLQueryResponse
                | HogQLMetadataResponse
                | EventsQueryResponse
                | { results: EventType[]; next?: string | undefined },
            payload?:
                | Record<string, any>
                | HogQLQueryResponse
                | HogQLMetadataResponse
                | {
                      results: EventType[]
                      next?: string | undefined
                  }
                | EventsQueryResponse
        ) => {
            type: 'set response success (queries.nodes.dataNodeLogic)'
            payload: {
                response:
                    | Record<string, any>
                    | HogQLQueryResponse
                    | HogQLMetadataResponse
                    | EventsQueryResponse
                    | { results: EventType[]; next?: string | undefined }
                payload?:
                    | Record<string, any>
                    | HogQLQueryResponse
                    | HogQLMetadataResponse
                    | {
                          results: EventType[]
                          next?: string | undefined
                      }
                    | EventsQueryResponse
            }
        }
        setResponseFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'set response failure (queries.nodes.dataNodeLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        clearResponseSuccess: (
            response: null,
            payload?: {
                value: true
            }
        ) => {
            type: 'clear response success (queries.nodes.dataNodeLogic)'
            payload: {
                response: null
                payload?: {
                    value: true
                }
            }
        }
        clearResponseFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'clear response failure (queries.nodes.dataNodeLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadDataSuccess: (
            response: Record<string, any> | null,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => {
            type: 'load data success (queries.nodes.dataNodeLogic)'
            payload: {
                response: Record<string, any> | null
                payload?: {
                    refresh: any
                    queryId: string
                }
            }
        }
        loadDataFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load data failure (queries.nodes.dataNodeLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadNewData: () => {
            type: 'load new data (queries.nodes.dataNodeLogic)'
            payload: any
        }
        loadNewDataSuccess: (
            response: Record<string, any> | null,
            payload?: any
        ) => {
            type: 'load new data success (queries.nodes.dataNodeLogic)'
            payload: {
                response: Record<string, any> | null
                payload?: any
            }
        }
        loadNewDataFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load new data failure (queries.nodes.dataNodeLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadNextData: () => {
            type: 'load next data (queries.nodes.dataNodeLogic)'
            payload: any
        }
        loadNextDataSuccess: (
            response: Record<string, any> | null,
            payload?: any
        ) => {
            type: 'load next data success (queries.nodes.dataNodeLogic)'
            payload: {
                response: Record<string, any> | null
                payload?: any
            }
        }
        loadNextDataFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load next data failure (queries.nodes.dataNodeLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load data (queries.nodes.dataNodeLogic)': 'loadData'
        'abort any running query (queries.nodes.dataNodeLogic)': 'abortAnyRunningQuery'
        'abort query (queries.nodes.dataNodeLogic)': 'abortQuery'
        'cancel query (queries.nodes.dataNodeLogic)': 'cancelQuery'
        'set response (queries.nodes.dataNodeLogic)': 'setResponse'
        'clear response (queries.nodes.dataNodeLogic)': 'clearResponse'
        'start auto load (queries.nodes.dataNodeLogic)': 'startAutoLoad'
        'stop auto load (queries.nodes.dataNodeLogic)': 'stopAutoLoad'
        'toggle auto load (queries.nodes.dataNodeLogic)': 'toggleAutoLoad'
        'highlight rows (queries.nodes.dataNodeLogic)': 'highlightRows'
        'set elapsed time (queries.nodes.dataNodeLogic)': 'setElapsedTime'
        'set response success (queries.nodes.dataNodeLogic)': 'setResponseSuccess'
        'set response failure (queries.nodes.dataNodeLogic)': 'setResponseFailure'
        'clear response success (queries.nodes.dataNodeLogic)': 'clearResponseSuccess'
        'clear response failure (queries.nodes.dataNodeLogic)': 'clearResponseFailure'
        'load data success (queries.nodes.dataNodeLogic)': 'loadDataSuccess'
        'load data failure (queries.nodes.dataNodeLogic)': 'loadDataFailure'
        'load new data (queries.nodes.dataNodeLogic)': 'loadNewData'
        'load new data success (queries.nodes.dataNodeLogic)': 'loadNewDataSuccess'
        'load new data failure (queries.nodes.dataNodeLogic)': 'loadNewDataFailure'
        'load next data (queries.nodes.dataNodeLogic)': 'loadNextData'
        'load next data success (queries.nodes.dataNodeLogic)': 'loadNextDataSuccess'
        'load next data failure (queries.nodes.dataNodeLogic)': 'loadNextDataFailure'
    }
    actionTypes: {
        loadData: 'load data (queries.nodes.dataNodeLogic)'
        abortAnyRunningQuery: 'abort any running query (queries.nodes.dataNodeLogic)'
        abortQuery: 'abort query (queries.nodes.dataNodeLogic)'
        cancelQuery: 'cancel query (queries.nodes.dataNodeLogic)'
        setResponse: 'set response (queries.nodes.dataNodeLogic)'
        clearResponse: 'clear response (queries.nodes.dataNodeLogic)'
        startAutoLoad: 'start auto load (queries.nodes.dataNodeLogic)'
        stopAutoLoad: 'stop auto load (queries.nodes.dataNodeLogic)'
        toggleAutoLoad: 'toggle auto load (queries.nodes.dataNodeLogic)'
        highlightRows: 'highlight rows (queries.nodes.dataNodeLogic)'
        setElapsedTime: 'set elapsed time (queries.nodes.dataNodeLogic)'
        setResponseSuccess: 'set response success (queries.nodes.dataNodeLogic)'
        setResponseFailure: 'set response failure (queries.nodes.dataNodeLogic)'
        clearResponseSuccess: 'clear response success (queries.nodes.dataNodeLogic)'
        clearResponseFailure: 'clear response failure (queries.nodes.dataNodeLogic)'
        loadDataSuccess: 'load data success (queries.nodes.dataNodeLogic)'
        loadDataFailure: 'load data failure (queries.nodes.dataNodeLogic)'
        loadNewData: 'load new data (queries.nodes.dataNodeLogic)'
        loadNewDataSuccess: 'load new data success (queries.nodes.dataNodeLogic)'
        loadNewDataFailure: 'load new data failure (queries.nodes.dataNodeLogic)'
        loadNextData: 'load next data (queries.nodes.dataNodeLogic)'
        loadNextDataSuccess: 'load next data success (queries.nodes.dataNodeLogic)'
        loadNextDataFailure: 'load next data failure (queries.nodes.dataNodeLogic)'
    }
    actions: {
        loadData: (refresh?: any) => void
        abortAnyRunningQuery: () => void
        abortQuery: (payload: { queryId: string }) => void
        cancelQuery: () => void
        setResponse: (response: Exclude<AnyResponseType, undefined>) => void
        clearResponse: () => void
        startAutoLoad: () => void
        stopAutoLoad: () => void
        toggleAutoLoad: () => void
        highlightRows: (rows: any[]) => void
        setElapsedTime: (elapsedTime: number) => void
        setResponseSuccess: (
            response:
                | Record<string, any>
                | HogQLQueryResponse
                | HogQLMetadataResponse
                | EventsQueryResponse
                | { results: EventType[]; next?: string | undefined },
            payload?:
                | Record<string, any>
                | HogQLQueryResponse
                | HogQLMetadataResponse
                | {
                      results: EventType[]
                      next?: string | undefined
                  }
                | EventsQueryResponse
        ) => void
        setResponseFailure: (error: string, errorObject?: any) => void
        clearResponseSuccess: (
            response: null,
            payload?: {
                value: true
            }
        ) => void
        clearResponseFailure: (error: string, errorObject?: any) => void
        loadDataSuccess: (
            response: Record<string, any> | null,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => void
        loadDataFailure: (error: string, errorObject?: any) => void
        loadNewData: () => void
        loadNewDataSuccess: (response: Record<string, any> | null, payload?: any) => void
        loadNewDataFailure: (error: string, errorObject?: any) => void
        loadNextData: () => void
        loadNextDataSuccess: (response: Record<string, any> | null, payload?: any) => void
        loadNextDataFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadData: (refresh?: any) => Promise<any>
        abortAnyRunningQuery: () => Promise<any>
        abortQuery: (payload: { queryId: string }) => Promise<any>
        cancelQuery: () => Promise<any>
        setResponse: (response: Exclude<AnyResponseType, undefined>) => Promise<any>
        clearResponse: () => Promise<any>
        startAutoLoad: () => Promise<any>
        stopAutoLoad: () => Promise<any>
        toggleAutoLoad: () => Promise<any>
        highlightRows: (rows: any[]) => Promise<any>
        setElapsedTime: (elapsedTime: number) => Promise<any>
        setResponseSuccess: (
            response:
                | Record<string, any>
                | HogQLQueryResponse
                | HogQLMetadataResponse
                | EventsQueryResponse
                | { results: EventType[]; next?: string | undefined },
            payload?:
                | Record<string, any>
                | HogQLQueryResponse
                | HogQLMetadataResponse
                | {
                      results: EventType[]
                      next?: string | undefined
                  }
                | EventsQueryResponse
        ) => Promise<any>
        setResponseFailure: (error: string, errorObject?: any) => Promise<any>
        clearResponseSuccess: (
            response: null,
            payload?: {
                value: true
            }
        ) => Promise<any>
        clearResponseFailure: (error: string, errorObject?: any) => Promise<any>
        loadDataSuccess: (
            response: Record<string, any> | null,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => Promise<any>
        loadDataFailure: (error: string, errorObject?: any) => Promise<any>
        loadNewData: () => Promise<any>
        loadNewDataSuccess: (response: Record<string, any> | null, payload?: any) => Promise<any>
        loadNewDataFailure: (error: string, errorObject?: any) => Promise<any>
        loadNextData: () => Promise<any>
        loadNextDataSuccess: (response: Record<string, any> | null, payload?: any) => Promise<any>
        loadNextDataFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        response: Record<string, any> | null
        responseLoading: boolean
        dataLoading: boolean
        newDataLoading: boolean
        nextDataLoading: boolean
        queryCancelled: boolean
        autoLoadToggled: boolean
        autoLoadStarted: boolean
        highlightedRows: Set<any>
        loadingStart: number | null
        responseErrorObject: Record<string, any> | null
        responseError: string | null
        elapsedTime: number | null
    }
    events: {}
    key: string
    listeners: {
        abortAnyRunningQuery: ((
            action: {
                type: 'abort any running query (queries.nodes.dataNodeLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        abortQuery: ((
            action: {
                type: 'abort query (queries.nodes.dataNodeLogic)'
                payload: {
                    queryId: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        cancelQuery: ((
            action: {
                type: 'cancel query (queries.nodes.dataNodeLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['queries', 'nodes', 'dataNodeLogic']
    pathString: 'queries.nodes.dataNodeLogic'
    props: DataNodeLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        response: Record<string, any> | null
        responseLoading: boolean
        dataLoading: boolean
        newDataLoading: boolean
        nextDataLoading: boolean
        queryCancelled: boolean
        autoLoadToggled: boolean
        autoLoadStarted: boolean
        highlightedRows: Set<any>
        loadingStart: number | null
        responseErrorObject: Record<string, any> | null
        responseError: string | null
        elapsedTime: number | null
    }
    reducers: {
        response: (state: Record<string, any> | null, action: any, fullState: any) => Record<string, any> | null
        responseLoading: (state: boolean, action: any, fullState: any) => boolean
        dataLoading: (state: boolean, action: any, fullState: any) => boolean
        newDataLoading: (state: boolean, action: any, fullState: any) => boolean
        nextDataLoading: (state: boolean, action: any, fullState: any) => boolean
        queryCancelled: (state: boolean, action: any, fullState: any) => boolean
        autoLoadToggled: (state: boolean, action: any, fullState: any) => boolean
        autoLoadStarted: (state: boolean, action: any, fullState: any) => boolean
        highlightedRows: (state: Set<any>, action: any, fullState: any) => Set<any>
        loadingStart: (state: number | null, action: any, fullState: any) => number | null
        responseErrorObject: (
            state: Record<string, any> | null,
            action: any,
            fullState: any
        ) => Record<string, any> | null
        responseError: (state: string | null, action: any, fullState: any) => string | null
        elapsedTime: (state: number | null, action: any, fullState: any) => number | null
    }
    selector: (state: any) => {
        response: Record<string, any> | null
        responseLoading: boolean
        dataLoading: boolean
        newDataLoading: boolean
        nextDataLoading: boolean
        queryCancelled: boolean
        autoLoadToggled: boolean
        autoLoadStarted: boolean
        highlightedRows: Set<any>
        loadingStart: number | null
        responseErrorObject: Record<string, any> | null
        responseError: string | null
        elapsedTime: number | null
    }
    selectors: {
        response: (state: any, props?: any) => Record<string, any> | null
        responseLoading: (state: any, props?: any) => boolean
        dataLoading: (state: any, props?: any) => boolean
        newDataLoading: (state: any, props?: any) => boolean
        nextDataLoading: (state: any, props?: any) => boolean
        queryCancelled: (state: any, props?: any) => boolean
        autoLoadToggled: (state: any, props?: any) => boolean
        autoLoadStarted: (state: any, props?: any) => boolean
        highlightedRows: (state: any, props?: any) => Set<any>
        loadingStart: (state: any, props?: any) => number | null
        responseErrorObject: (state: any, props?: any) => Record<string, any> | null
        responseError: (state: any, props?: any) => string | null
        elapsedTime: (state: any, props?: any) => number | null
        user: (state: any, props?: any) => UserType | null
        currentTeamId: (state: any, props?: any) => number | null
        isShowingCachedResults: (state: any, props?: any) => boolean
        query: (state: any, props?: any) => DataNode
        newQuery: (state: any, props?: any) => DataNode | null
        canLoadNewData: (state: any, props?: any) => boolean
        nextQuery: (state: any, props?: any) => DataNode | null
        canLoadNextData: (state: any, props?: any) => boolean
        autoLoadRunning: (state: any, props?: any) => boolean
        lastRefresh: (state: any, props?: any) => string | null
        nextAllowedRefresh: (state: any, props?: any) => string | null
        getInsightRefreshButtonDisabledReason: (state: any, props?: any) => () => string
    }
    sharedListeners: {}
    values: {
        response: Record<string, any> | null
        responseLoading: boolean
        dataLoading: boolean
        newDataLoading: boolean
        nextDataLoading: boolean
        queryCancelled: boolean
        autoLoadToggled: boolean
        autoLoadStarted: boolean
        highlightedRows: Set<any>
        loadingStart: number | null
        responseErrorObject: Record<string, any> | null
        responseError: string | null
        elapsedTime: number | null
        user: UserType | null
        currentTeamId: number | null
        isShowingCachedResults: boolean
        query: DataNode
        newQuery: DataNode | null
        canLoadNewData: boolean
        nextQuery: DataNode | null
        canLoadNextData: boolean
        autoLoadRunning: boolean
        lastRefresh: string | null
        nextAllowedRefresh: string | null
        getInsightRefreshButtonDisabledReason: () => string
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        isShowingCachedResults: (arg: any) => boolean
        query: (query: DataNode) => DataNode
        newQuery: (query: DataNode, response: Record<string, any> | null) => DataNode | null
        canLoadNewData: (newQuery: DataNode | null, isShowingCachedResults: boolean) => boolean
        nextQuery: (
            query: DataNode,
            response: Record<string, any> | null,
            responseError: string | null,
            dataLoading: boolean,
            isShowingCachedResults: boolean
        ) => DataNode | null
        canLoadNextData: (nextQuery: DataNode | null, isShowingCachedResults: boolean) => boolean
        autoLoadRunning: (autoLoadToggled: boolean, autoLoadStarted: boolean, dataLoading: boolean) => boolean
        lastRefresh: (response: Record<string, any> | null) => string | null
        nextAllowedRefresh: (query: DataNode, response: Record<string, any> | null) => string | null
        getInsightRefreshButtonDisabledReason: (
            nextAllowedRefresh: string | null,
            lastRefresh: string | null
        ) => () => string
    }
}
