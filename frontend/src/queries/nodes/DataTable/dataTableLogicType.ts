// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:58 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DataTableLogicProps, DataTableRow } from './dataTableLogic'
import type { DataTableNode, HogQLExpression, NodeKind } from '../../schema'
import type { FeatureFlagsSet } from '../../../lib/logic/featureFlagLogic'

export interface dataTableLogicType extends Logic {
    actionCreators: {
        setColumnsInQuery: (columns: HogQLExpression[]) => {
            type: 'set columns in query (queries.nodes.DataTable.dataTableLogic)'
            payload: {
                columns: string[]
            }
        }
    }
    actionKeys: {
        'set columns in query (queries.nodes.DataTable.dataTableLogic)': 'setColumnsInQuery'
    }
    actionTypes: {
        setColumnsInQuery: 'set columns in query (queries.nodes.DataTable.dataTableLogic)'
    }
    actions: {
        setColumnsInQuery: (columns: HogQLExpression[]) => void
    }
    asyncActions: {
        setColumnsInQuery: (columns: HogQLExpression[]) => Promise<any>
    }
    defaults: {
        columnsInQuery: string[]
    }
    events: {}
    key: string
    listeners: {}
    path: ['queries', 'nodes', 'DataTable', 'dataTableLogic']
    pathString: 'queries.nodes.DataTable.dataTableLogic'
    props: DataTableLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        columnsInQuery: string[]
    }
    reducers: {
        columnsInQuery: (state: string[], action: any, fullState: any) => string[]
    }
    selector: (state: any) => {
        columnsInQuery: string[]
    }
    selectors: {
        columnsInQuery: (state: any, props?: any) => string[]
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
        response: (state: any, props?: any) => Record<string, any> | null
        responseLoading: (state: any, props?: any) => boolean
        responseError: (state: any, props?: any) => string | null
        sourceKind: (state: any, props?: any) => NodeKind | null
        orderBy: (state: any, props?: any) => string[] | null
        columnsInResponse: (state: any, props?: any) => string[] | null
        dataTableRows: (state: any, props?: any) => DataTableRow[] | null
        queryWithDefaults: (state: any, props?: any) => Required<DataTableNode>
        canSort: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        columnsInQuery: string[]
        featureFlags: FeatureFlagsSet
        response: Record<string, any> | null
        responseLoading: boolean
        responseError: string | null
        sourceKind: NodeKind | null
        orderBy: string[] | null
        columnsInResponse: string[] | null
        dataTableRows: DataTableRow[] | null
        queryWithDefaults: Required<DataTableNode>
        canSort: boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        sourceKind: (query: DataTableNode) => NodeKind | null
        orderBy: (query: DataTableNode) => string[] | null
        columnsInResponse: (response: Record<string, any> | null) => string[] | null
        dataTableRows: (
            sourceKind: NodeKind | null,
            orderBy: string[] | null,
            response: Record<string, any> | null,
            columnsInQuery: string[],
            columnsInResponse: string[] | null
        ) => DataTableRow[] | null
        queryWithDefaults: (
            query: DataTableNode,
            columnsInQuery: string[],
            featureFlags: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/lib/logic/featureFlagLogic').FeatureFlagsSet,
            arg: any
        ) => Required<DataTableNode>
        canSort: (queryWithDefaults: Required<DataTableNode>) => boolean
    }
}
