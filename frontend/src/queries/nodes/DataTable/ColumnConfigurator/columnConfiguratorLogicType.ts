// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:22 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ColumnConfiguratorLogicProps } from './columnConfiguratorLogic'

export interface columnConfiguratorLogicType extends Logic {
    actionCreators: {
        showModal: () => {
            type: 'show modal (queries.nodes.DataTable.columnConfiguratorLogic)'
            payload: {
                value: true
            }
        }
        hideModal: () => {
            type: 'hide modal (queries.nodes.DataTable.columnConfiguratorLogic)'
            payload: {
                value: true
            }
        }
        selectColumn: (column: string) => {
            type: 'select column (queries.nodes.DataTable.columnConfiguratorLogic)'
            payload: {
                column: string
            }
        }
        unselectColumn: (column: string) => {
            type: 'unselect column (queries.nodes.DataTable.columnConfiguratorLogic)'
            payload: {
                column: string
            }
        }
        setColumns: (columns: string[]) => {
            type: 'set columns (queries.nodes.DataTable.columnConfiguratorLogic)'
            payload: {
                columns: string[]
            }
        }
        moveColumn: (
            oldIndex: number,
            newIndex: number
        ) => {
            type: 'move column (queries.nodes.DataTable.columnConfiguratorLogic)'
            payload: {
                oldIndex: number
                newIndex: number
            }
        }
        save: () => {
            type: 'save (queries.nodes.DataTable.columnConfiguratorLogic)'
            payload: {
                value: true
            }
        }
        toggleSaveAsDefault: () => {
            type: 'toggle save as default (queries.nodes.DataTable.columnConfiguratorLogic)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'show modal (queries.nodes.DataTable.columnConfiguratorLogic)': 'showModal'
        'hide modal (queries.nodes.DataTable.columnConfiguratorLogic)': 'hideModal'
        'select column (queries.nodes.DataTable.columnConfiguratorLogic)': 'selectColumn'
        'unselect column (queries.nodes.DataTable.columnConfiguratorLogic)': 'unselectColumn'
        'set columns (queries.nodes.DataTable.columnConfiguratorLogic)': 'setColumns'
        'move column (queries.nodes.DataTable.columnConfiguratorLogic)': 'moveColumn'
        'save (queries.nodes.DataTable.columnConfiguratorLogic)': 'save'
        'toggle save as default (queries.nodes.DataTable.columnConfiguratorLogic)': 'toggleSaveAsDefault'
    }
    actionTypes: {
        showModal: 'show modal (queries.nodes.DataTable.columnConfiguratorLogic)'
        hideModal: 'hide modal (queries.nodes.DataTable.columnConfiguratorLogic)'
        selectColumn: 'select column (queries.nodes.DataTable.columnConfiguratorLogic)'
        unselectColumn: 'unselect column (queries.nodes.DataTable.columnConfiguratorLogic)'
        setColumns: 'set columns (queries.nodes.DataTable.columnConfiguratorLogic)'
        moveColumn: 'move column (queries.nodes.DataTable.columnConfiguratorLogic)'
        save: 'save (queries.nodes.DataTable.columnConfiguratorLogic)'
        toggleSaveAsDefault: 'toggle save as default (queries.nodes.DataTable.columnConfiguratorLogic)'
    }
    actions: {
        showModal: () => void
        hideModal: () => void
        selectColumn: (column: string) => void
        unselectColumn: (column: string) => void
        setColumns: (columns: string[]) => void
        moveColumn: (oldIndex: number, newIndex: number) => void
        save: () => void
        toggleSaveAsDefault: () => void
    }
    asyncActions: {
        showModal: () => Promise<any>
        hideModal: () => Promise<any>
        selectColumn: (column: string) => Promise<any>
        unselectColumn: (column: string) => Promise<any>
        setColumns: (columns: string[]) => Promise<any>
        moveColumn: (oldIndex: number, newIndex: number) => Promise<any>
        save: () => Promise<any>
        toggleSaveAsDefault: () => Promise<any>
    }
    defaults: {
        saveAsDefault: boolean
        modalVisible: boolean
        columns: string[]
    }
    events: {}
    key: string
    listeners: {
        save: ((
            action: {
                type: 'save (queries.nodes.DataTable.columnConfiguratorLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['queries', 'nodes', 'DataTable', 'columnConfiguratorLogic']
    pathString: 'queries.nodes.DataTable.columnConfiguratorLogic'
    props: ColumnConfiguratorLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        saveAsDefault: boolean
        modalVisible: boolean
        columns: string[]
    }
    reducers: {
        saveAsDefault: (state: boolean, action: any, fullState: any) => boolean
        modalVisible: (state: boolean, action: any, fullState: any) => boolean
        columns: (state: string[], action: any, fullState: any) => string[]
    }
    selector: (state: any) => {
        saveAsDefault: boolean
        modalVisible: boolean
        columns: string[]
    }
    selectors: {
        saveAsDefault: (state: any, props?: any) => boolean
        modalVisible: (state: any, props?: any) => boolean
        columns: (state: any, props?: any) => string[]
    }
    sharedListeners: {}
    values: {
        saveAsDefault: boolean
        modalVisible: boolean
        columns: string[]
    }
    _isKea: true
    _isKeaWithKey: true
}
