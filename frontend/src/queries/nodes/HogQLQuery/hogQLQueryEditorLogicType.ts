// Generated by kea-typegen on Sun, 06 Aug 2023 18:18:16 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { HogQLQueryEditorLogicProps, ModelMarker } from './hogQLQueryEditorLogic'

export interface hogQLQueryEditorLogicType extends Logic {
    actionCreators: {
        saveQuery: () => {
            type: 'save query (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
            payload: {
                value: true
            }
        }
        setQueryInput: (queryInput: string) => {
            type: 'set query input (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
            payload: {
                queryInput: string
            }
        }
        setModelMarkers: (markers: ModelMarker[]) => {
            type: 'set model markers (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
            payload: {
                markers: ModelMarker[]
            }
        }
        setPrompt: (prompt: string) => {
            type: 'set prompt (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
            payload: {
                prompt: string
            }
        }
        setPromptError: (error: string | null) => {
            type: 'set prompt error (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
            payload: {
                error: string | null
            }
        }
        draftFromPrompt: () => {
            type: 'draft from prompt (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
            payload: {
                value: true
            }
        }
        draftFromPromptComplete: () => {
            type: 'draft from prompt complete (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'save query (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)': 'saveQuery'
        'set query input (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)': 'setQueryInput'
        'set model markers (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)': 'setModelMarkers'
        'set prompt (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)': 'setPrompt'
        'set prompt error (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)': 'setPromptError'
        'draft from prompt (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)': 'draftFromPrompt'
        'draft from prompt complete (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)': 'draftFromPromptComplete'
    }
    actionTypes: {
        saveQuery: 'save query (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
        setQueryInput: 'set query input (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
        setModelMarkers: 'set model markers (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
        setPrompt: 'set prompt (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
        setPromptError: 'set prompt error (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
        draftFromPrompt: 'draft from prompt (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
        draftFromPromptComplete: 'draft from prompt complete (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
    }
    actions: {
        saveQuery: () => void
        setQueryInput: (queryInput: string) => void
        setModelMarkers: (markers: ModelMarker[]) => void
        setPrompt: (prompt: string) => void
        setPromptError: (error: string | null) => void
        draftFromPrompt: () => void
        draftFromPromptComplete: () => void
    }
    asyncActions: {
        saveQuery: () => Promise<any>
        setQueryInput: (queryInput: string) => Promise<any>
        setModelMarkers: (markers: ModelMarker[]) => Promise<any>
        setPrompt: (prompt: string) => Promise<any>
        setPromptError: (error: string | null) => Promise<any>
        draftFromPrompt: () => Promise<any>
        draftFromPromptComplete: () => Promise<any>
    }
    defaults: {
        queryInput: string
        modelMarkers: ModelMarker[]
        prompt: string
        promptError: string | null
        promptLoading: boolean
    }
    events: {}
    key: number
    listeners: {
        saveQuery: ((
            action: {
                type: 'save query (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setQueryInput: ((
            action: {
                type: 'set query input (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
                payload: {
                    queryInput: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        draftFromPrompt: ((
            action: {
                type: 'draft from prompt (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setModelMarkers: ((
            action: {
                type: 'set model markers (queries.nodes.HogQLQuery.hogQLQueryEditorLogic)'
                payload: {
                    markers: ModelMarker[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['queries', 'nodes', 'HogQLQuery', 'hogQLQueryEditorLogic']
    pathString: 'queries.nodes.HogQLQuery.hogQLQueryEditorLogic'
    props: HogQLQueryEditorLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        queryInput: string
        modelMarkers: ModelMarker[]
        prompt: string
        promptError: string | null
        promptLoading: boolean
    }
    reducers: {
        queryInput: (state: string, action: any, fullState: any) => string
        modelMarkers: (state: ModelMarker[], action: any, fullState: any) => ModelMarker[]
        prompt: (state: string, action: any, fullState: any) => string
        promptError: (state: string | null, action: any, fullState: any) => string | null
        promptLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        queryInput: string
        modelMarkers: ModelMarker[]
        prompt: string
        promptError: string | null
        promptLoading: boolean
    }
    selectors: {
        queryInput: (state: any, props?: any) => string
        modelMarkers: (state: any, props?: any) => ModelMarker[]
        prompt: (state: any, props?: any) => string
        promptError: (state: any, props?: any) => string | null
        promptLoading: (state: any, props?: any) => boolean
        hasErrors: (state: any, props?: any) => boolean
        error: (state: any, props?: any) => string | null
        aiAvailable: (state: any, props?: any) => boolean | undefined
    }
    sharedListeners: {}
    values: {
        queryInput: string
        modelMarkers: ModelMarker[]
        prompt: string
        promptError: string | null
        promptLoading: boolean
        hasErrors: boolean
        error: string | null
        aiAvailable: boolean | undefined
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        hasErrors: (modelMarkers: ModelMarker[]) => boolean
        error: (hasErrors: boolean, modelMarkers: ModelMarker[]) => string | null
        aiAvailable: (
            preflight:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').PreflightStatus
                | null
        ) => boolean | undefined
    }
}
