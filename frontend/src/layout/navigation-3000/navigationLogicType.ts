// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:27 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { BasicListItem, ExtendedListItem, SidebarNavbarItem } from './types'

export interface navigation3000LogicType extends Logic {
    actionCreators: {
        hideSidebar: () => {
            type: 'hide sidebar (layout.navigation-3000.navigationLogic)'
            payload: {
                value: true
            }
        }
        showSidebar: (newNavbarItemId?: string) => {
            type: 'show sidebar (layout.navigation-3000.navigationLogic)'
            payload: {
                newNavbarItemId: string | undefined
            }
        }
        toggleSidebar: () => {
            type: 'toggle sidebar (layout.navigation-3000.navigationLogic)'
            payload: {
                value: true
            }
        }
        setSidebarWidth: (width: number) => {
            type: 'set sidebar width (layout.navigation-3000.navigationLogic)'
            payload: {
                width: number
            }
        }
        setSidebarOverslide: (overslide: number) => {
            type: 'set sidebar overslide (layout.navigation-3000.navigationLogic)'
            payload: {
                overslide: number
            }
        }
        syncSidebarWidthWithMouseMove: (delta: number) => {
            type: 'sync sidebar width with mouse move (layout.navigation-3000.navigationLogic)'
            payload: {
                delta: number
            }
        }
        syncSidebarWidthWithViewport: () => {
            type: 'sync sidebar width with viewport (layout.navigation-3000.navigationLogic)'
            payload: {
                value: true
            }
        }
        beginResize: () => {
            type: 'begin resize (layout.navigation-3000.navigationLogic)'
            payload: {
                value: true
            }
        }
        endResize: () => {
            type: 'end resize (layout.navigation-3000.navigationLogic)'
            payload: {
                value: true
            }
        }
        acknowledgeSidebarKeyboardShortcut: () => {
            type: 'acknowledge sidebar keyboard shortcut (layout.navigation-3000.navigationLogic)'
            payload: {
                value: true
            }
        }
        setIsSearchShown: (isSearchShown: boolean) => {
            type: 'set is search shown (layout.navigation-3000.navigationLogic)'
            payload: {
                isSearchShown: boolean
            }
        }
        setSearchTerm: (searchTerm: string) => {
            type: 'set search term (layout.navigation-3000.navigationLogic)'
            payload: {
                searchTerm: string
            }
        }
        initiateNewItemInCategory: (category: string) => {
            type: 'initiate new item in category (layout.navigation-3000.navigationLogic)'
            payload: {
                category: string
            }
        }
        initiateNewItemInlineInCategory: (category: string) => {
            type: 'initiate new item inline in category (layout.navigation-3000.navigationLogic)'
            payload: {
                category: string
            }
        }
        cancelNewItem: () => {
            type: 'cancel new item (layout.navigation-3000.navigationLogic)'
            payload: {
                value: true
            }
        }
        saveNewItem: (itemName: string) => {
            type: 'save new item (layout.navigation-3000.navigationLogic)'
            payload: {
                itemName: string
            }
        }
        saveNewItemComplete: () => {
            type: 'save new item complete (layout.navigation-3000.navigationLogic)'
            payload: {
                value: true
            }
        }
        setLastFocusedItemIndex: (index: number) => {
            type: 'set last focused item index (layout.navigation-3000.navigationLogic)'
            payload: {
                index: number
            }
        }
        setLastFocusedItemByKey: (key: string | number) => {
            type: 'set last focused item by key (layout.navigation-3000.navigationLogic)'
            payload: {
                key: string | number
            }
        }
        focusNextItem: () => {
            type: 'focus next item (layout.navigation-3000.navigationLogic)'
            payload: {
                value: true
            }
        }
        focusPreviousItem: () => {
            type: 'focus previous item (layout.navigation-3000.navigationLogic)'
            payload: {
                value: true
            }
        }
        toggleAccordion: (key: string) => {
            type: 'toggle accordion (layout.navigation-3000.navigationLogic)'
            payload: {
                key: string
            }
        }
    }
    actionKeys: {
        'hide sidebar (layout.navigation-3000.navigationLogic)': 'hideSidebar'
        'show sidebar (layout.navigation-3000.navigationLogic)': 'showSidebar'
        'toggle sidebar (layout.navigation-3000.navigationLogic)': 'toggleSidebar'
        'set sidebar width (layout.navigation-3000.navigationLogic)': 'setSidebarWidth'
        'set sidebar overslide (layout.navigation-3000.navigationLogic)': 'setSidebarOverslide'
        'sync sidebar width with mouse move (layout.navigation-3000.navigationLogic)': 'syncSidebarWidthWithMouseMove'
        'sync sidebar width with viewport (layout.navigation-3000.navigationLogic)': 'syncSidebarWidthWithViewport'
        'begin resize (layout.navigation-3000.navigationLogic)': 'beginResize'
        'end resize (layout.navigation-3000.navigationLogic)': 'endResize'
        'acknowledge sidebar keyboard shortcut (layout.navigation-3000.navigationLogic)': 'acknowledgeSidebarKeyboardShortcut'
        'set is search shown (layout.navigation-3000.navigationLogic)': 'setIsSearchShown'
        'set search term (layout.navigation-3000.navigationLogic)': 'setSearchTerm'
        'initiate new item in category (layout.navigation-3000.navigationLogic)': 'initiateNewItemInCategory'
        'initiate new item inline in category (layout.navigation-3000.navigationLogic)': 'initiateNewItemInlineInCategory'
        'cancel new item (layout.navigation-3000.navigationLogic)': 'cancelNewItem'
        'save new item (layout.navigation-3000.navigationLogic)': 'saveNewItem'
        'save new item complete (layout.navigation-3000.navigationLogic)': 'saveNewItemComplete'
        'set last focused item index (layout.navigation-3000.navigationLogic)': 'setLastFocusedItemIndex'
        'set last focused item by key (layout.navigation-3000.navigationLogic)': 'setLastFocusedItemByKey'
        'focus next item (layout.navigation-3000.navigationLogic)': 'focusNextItem'
        'focus previous item (layout.navigation-3000.navigationLogic)': 'focusPreviousItem'
        'toggle accordion (layout.navigation-3000.navigationLogic)': 'toggleAccordion'
    }
    actionTypes: {
        hideSidebar: 'hide sidebar (layout.navigation-3000.navigationLogic)'
        showSidebar: 'show sidebar (layout.navigation-3000.navigationLogic)'
        toggleSidebar: 'toggle sidebar (layout.navigation-3000.navigationLogic)'
        setSidebarWidth: 'set sidebar width (layout.navigation-3000.navigationLogic)'
        setSidebarOverslide: 'set sidebar overslide (layout.navigation-3000.navigationLogic)'
        syncSidebarWidthWithMouseMove: 'sync sidebar width with mouse move (layout.navigation-3000.navigationLogic)'
        syncSidebarWidthWithViewport: 'sync sidebar width with viewport (layout.navigation-3000.navigationLogic)'
        beginResize: 'begin resize (layout.navigation-3000.navigationLogic)'
        endResize: 'end resize (layout.navigation-3000.navigationLogic)'
        acknowledgeSidebarKeyboardShortcut: 'acknowledge sidebar keyboard shortcut (layout.navigation-3000.navigationLogic)'
        setIsSearchShown: 'set is search shown (layout.navigation-3000.navigationLogic)'
        setSearchTerm: 'set search term (layout.navigation-3000.navigationLogic)'
        initiateNewItemInCategory: 'initiate new item in category (layout.navigation-3000.navigationLogic)'
        initiateNewItemInlineInCategory: 'initiate new item inline in category (layout.navigation-3000.navigationLogic)'
        cancelNewItem: 'cancel new item (layout.navigation-3000.navigationLogic)'
        saveNewItem: 'save new item (layout.navigation-3000.navigationLogic)'
        saveNewItemComplete: 'save new item complete (layout.navigation-3000.navigationLogic)'
        setLastFocusedItemIndex: 'set last focused item index (layout.navigation-3000.navigationLogic)'
        setLastFocusedItemByKey: 'set last focused item by key (layout.navigation-3000.navigationLogic)'
        focusNextItem: 'focus next item (layout.navigation-3000.navigationLogic)'
        focusPreviousItem: 'focus previous item (layout.navigation-3000.navigationLogic)'
        toggleAccordion: 'toggle accordion (layout.navigation-3000.navigationLogic)'
    }
    actions: {
        hideSidebar: () => void
        showSidebar: (newNavbarItemId?: string) => void
        toggleSidebar: () => void
        setSidebarWidth: (width: number) => void
        setSidebarOverslide: (overslide: number) => void
        syncSidebarWidthWithMouseMove: (delta: number) => void
        syncSidebarWidthWithViewport: () => void
        beginResize: () => void
        endResize: () => void
        acknowledgeSidebarKeyboardShortcut: () => void
        setIsSearchShown: (isSearchShown: boolean) => void
        setSearchTerm: (searchTerm: string) => void
        initiateNewItemInCategory: (category: string) => void
        initiateNewItemInlineInCategory: (category: string) => void
        cancelNewItem: () => void
        saveNewItem: (itemName: string) => void
        saveNewItemComplete: () => void
        setLastFocusedItemIndex: (index: number) => void
        setLastFocusedItemByKey: (key: string | number) => void
        focusNextItem: () => void
        focusPreviousItem: () => void
        toggleAccordion: (key: string) => void
    }
    asyncActions: {
        hideSidebar: () => Promise<any>
        showSidebar: (newNavbarItemId?: string) => Promise<any>
        toggleSidebar: () => Promise<any>
        setSidebarWidth: (width: number) => Promise<any>
        setSidebarOverslide: (overslide: number) => Promise<any>
        syncSidebarWidthWithMouseMove: (delta: number) => Promise<any>
        syncSidebarWidthWithViewport: () => Promise<any>
        beginResize: () => Promise<any>
        endResize: () => Promise<any>
        acknowledgeSidebarKeyboardShortcut: () => Promise<any>
        setIsSearchShown: (isSearchShown: boolean) => Promise<any>
        setSearchTerm: (searchTerm: string) => Promise<any>
        initiateNewItemInCategory: (category: string) => Promise<any>
        initiateNewItemInlineInCategory: (category: string) => Promise<any>
        cancelNewItem: () => Promise<any>
        saveNewItem: (itemName: string) => Promise<any>
        saveNewItemComplete: () => Promise<any>
        setLastFocusedItemIndex: (index: number) => Promise<any>
        setLastFocusedItemByKey: (key: string | number) => Promise<any>
        focusNextItem: () => Promise<any>
        focusPreviousItem: () => Promise<any>
        toggleAccordion: (key: string) => Promise<any>
    }
    defaults: {
        isSidebarShown: boolean
        sidebarWidth: number
        sidebarOverslide: number
        isResizeInProgress: boolean
        isSidebarKeyboardShortcutAcknowledged: boolean
        activeNavbarItemId: string
        isSearchShown: boolean
        internalSearchTerm: string
        lastFocusedItemIndex: number
        accordionCollapseMapping: Record<string, boolean>
        newItemInlineCategory: string | null
        savingNewItem: boolean
    }
    events: {
        afterMount: () => void
        beforeUnmount: () => void
    }
    key: undefined
    listeners: {
        initiateNewItemInCategory: ((
            action: {
                type: 'initiate new item in category (layout.navigation-3000.navigationLogic)'
                payload: {
                    category: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        saveNewItem: ((
            action: {
                type: 'save new item (layout.navigation-3000.navigationLogic)'
                payload: {
                    itemName: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        syncSidebarWidthWithMouseMove: ((
            action: {
                type: 'sync sidebar width with mouse move (layout.navigation-3000.navigationLogic)'
                payload: {
                    delta: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        syncSidebarWidthWithViewport: ((
            action: {
                type: 'sync sidebar width with viewport (layout.navigation-3000.navigationLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        endResize: ((
            action: {
                type: 'end resize (layout.navigation-3000.navigationLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        toggleSidebar: ((
            action: {
                type: 'toggle sidebar (layout.navigation-3000.navigationLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        focusNextItem: ((
            action: {
                type: 'focus next item (layout.navigation-3000.navigationLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        focusPreviousItem: ((
            action: {
                type: 'focus previous item (layout.navigation-3000.navigationLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setLastFocusedItemByKey: ((
            action: {
                type: 'set last focused item by key (layout.navigation-3000.navigationLogic)'
                payload: {
                    key: string | number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['layout', 'navigation-3000', 'navigationLogic']
    pathString: 'layout.navigation-3000.navigationLogic'
    props: {
        inputElement?: HTMLInputElement | null
    }
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        isSidebarShown: boolean
        sidebarWidth: number
        sidebarOverslide: number
        isResizeInProgress: boolean
        isSidebarKeyboardShortcutAcknowledged: boolean
        activeNavbarItemId: string
        isSearchShown: boolean
        internalSearchTerm: string
        lastFocusedItemIndex: number
        accordionCollapseMapping: Record<string, boolean>
        newItemInlineCategory: string | null
        savingNewItem: boolean
    }
    reducers: {
        isSidebarShown: (state: boolean, action: any, fullState: any) => boolean
        sidebarWidth: (state: number, action: any, fullState: any) => number
        sidebarOverslide: (state: number, action: any, fullState: any) => number
        isResizeInProgress: (state: boolean, action: any, fullState: any) => boolean
        isSidebarKeyboardShortcutAcknowledged: (state: boolean, action: any, fullState: any) => boolean
        activeNavbarItemId: (state: string, action: any, fullState: any) => string
        isSearchShown: (state: boolean, action: any, fullState: any) => boolean
        internalSearchTerm: (state: string, action: any, fullState: any) => string
        lastFocusedItemIndex: (state: number, action: any, fullState: any) => number
        accordionCollapseMapping: (
            state: Record<string, boolean>,
            action: any,
            fullState: any
        ) => Record<string, boolean>
        newItemInlineCategory: (state: string | null, action: any, fullState: any) => string | null
        savingNewItem: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        isSidebarShown: boolean
        sidebarWidth: number
        sidebarOverslide: number
        isResizeInProgress: boolean
        isSidebarKeyboardShortcutAcknowledged: boolean
        activeNavbarItemId: string
        isSearchShown: boolean
        internalSearchTerm: string
        lastFocusedItemIndex: number
        accordionCollapseMapping: Record<string, boolean>
        newItemInlineCategory: string | null
        savingNewItem: boolean
    }
    selectors: {
        isSidebarShown: (state: any, props?: any) => boolean
        sidebarWidth: (state: any, props?: any) => number
        sidebarOverslide: (state: any, props?: any) => number
        isResizeInProgress: (state: any, props?: any) => boolean
        isSidebarKeyboardShortcutAcknowledged: (state: any, props?: any) => boolean
        activeNavbarItemId: (state: any, props?: any) => string
        isSearchShown: (state: any, props?: any) => boolean
        internalSearchTerm: (state: any, props?: any) => string
        lastFocusedItemIndex: (state: any, props?: any) => number
        accordionCollapseMapping: (state: any, props?: any) => Record<string, boolean>
        newItemInlineCategory: (state: any, props?: any) => string | null
        savingNewItem: (state: any, props?: any) => boolean
        sidebarOverslideDirection: (state: any, props?: any) => 'min' | 'max' | null
        activeNavbarItem: (state: any, props?: any) => SidebarNavbarItem | null
        searchTerm: (state: any, props?: any) => string
        sidebarContentsFlattened: (state: any, props?: any) => BasicListItem[] | ExtendedListItem[]
        normalizedActiveListItemKey: (state: any, props?: any) => string | number | string[] | null
        newItemCategory: (state: any, props?: any) => string | null
    }
    sharedListeners: {}
    values: {
        isSidebarShown: boolean
        sidebarWidth: number
        sidebarOverslide: number
        isResizeInProgress: boolean
        isSidebarKeyboardShortcutAcknowledged: boolean
        activeNavbarItemId: string
        isSearchShown: boolean
        internalSearchTerm: string
        lastFocusedItemIndex: number
        accordionCollapseMapping: Record<string, boolean>
        newItemInlineCategory: string | null
        savingNewItem: boolean
        sidebarOverslideDirection: 'min' | 'max' | null
        activeNavbarItem: SidebarNavbarItem | null
        searchTerm: string
        sidebarContentsFlattened: BasicListItem[] | ExtendedListItem[]
        normalizedActiveListItemKey: string | number | string[] | null
        newItemCategory: string | null
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        sidebarOverslideDirection: (sidebarOverslide: number) => 'min' | 'max' | null
        activeNavbarItem: (activeNavbarItemId: string) => SidebarNavbarItem | null
        searchTerm: (internalSearchTerm: string, isSearchShown: boolean) => string
        sidebarContentsFlattened: (
            arg:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/layout/navigation-3000/types').SidebarCategory[]
                | null
        ) => BasicListItem[] | ExtendedListItem[]
        normalizedActiveListItemKey: (
            arg: string | number | [string, string | number] | null
        ) => string | number | string[] | null
        newItemCategory: (
            arg:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/layout/navigation-3000/types').SidebarCategory[]
                | null,
            newItemInlineCategory: string | null,
            location: {
                pathname: string
                search: string
                hash: string
            }
        ) => string | null
    }
}
