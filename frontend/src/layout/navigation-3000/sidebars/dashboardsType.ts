// Generated by kea-typegen on Wed, 02 Aug 2023 17:23:25 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DashboardBasicType, DashboardType } from '../../../types'
import type { Scene, SceneParams } from '../../../scenes/sceneTypes'
import type { DashboardEventSource } from '../../../lib/utils/eventUsageLogic'
import type { FuseSearchMatch } from './utils'
import type { SidebarCategory } from '../types'

export interface dashboardsSidebarLogicType extends Logic {
    actionCreators: {
        pinDashboard: (
            id: number,
            source: DashboardEventSource
        ) => {
            type: 'pin dashboard (layout.navigation-3000.sidebars.dashboardsSidebarLogic)'
            payload: {
                id: number
                source: DashboardEventSource
            }
        }
        unpinDashboard: (
            id: number,
            source: DashboardEventSource
        ) => {
            type: 'unpin dashboard (layout.navigation-3000.sidebars.dashboardsSidebarLogic)'
            payload: {
                id: number
                source: DashboardEventSource
            }
        }
        showDuplicateDashboardModal: (
            id: number,
            name: string
        ) => {
            type: 'show duplicate dashboard modal (layout.navigation-3000.sidebars.dashboardsSidebarLogic)'
            payload: {
                id: number
                name: string
            }
        }
        showDeleteDashboardModal: (id: number) => {
            type: 'show delete dashboard modal (layout.navigation-3000.sidebars.dashboardsSidebarLogic)'
            payload: {
                id: number
            }
        }
        showNewDashboardModal: () => {
            type: 'show new dashboard modal (layout.navigation-3000.sidebars.dashboardsSidebarLogic)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'pin dashboard (layout.navigation-3000.sidebars.dashboardsSidebarLogic)': 'pinDashboard'
        'unpin dashboard (layout.navigation-3000.sidebars.dashboardsSidebarLogic)': 'unpinDashboard'
        'show duplicate dashboard modal (layout.navigation-3000.sidebars.dashboardsSidebarLogic)': 'showDuplicateDashboardModal'
        'show delete dashboard modal (layout.navigation-3000.sidebars.dashboardsSidebarLogic)': 'showDeleteDashboardModal'
        'show new dashboard modal (layout.navigation-3000.sidebars.dashboardsSidebarLogic)': 'showNewDashboardModal'
    }
    actionTypes: {
        pinDashboard: 'pin dashboard (layout.navigation-3000.sidebars.dashboardsSidebarLogic)'
        unpinDashboard: 'unpin dashboard (layout.navigation-3000.sidebars.dashboardsSidebarLogic)'
        showDuplicateDashboardModal: 'show duplicate dashboard modal (layout.navigation-3000.sidebars.dashboardsSidebarLogic)'
        showDeleteDashboardModal: 'show delete dashboard modal (layout.navigation-3000.sidebars.dashboardsSidebarLogic)'
        showNewDashboardModal: 'show new dashboard modal (layout.navigation-3000.sidebars.dashboardsSidebarLogic)'
    }
    actions: {
        pinDashboard: (id: number, source: DashboardEventSource) => void
        unpinDashboard: (id: number, source: DashboardEventSource) => void
        showDuplicateDashboardModal: (id: number, name: string) => void
        showDeleteDashboardModal: (id: number) => void
        showNewDashboardModal: () => void
    }
    asyncActions: {
        pinDashboard: (id: number, source: DashboardEventSource) => Promise<any>
        unpinDashboard: (id: number, source: DashboardEventSource) => Promise<any>
        showDuplicateDashboardModal: (id: number, name: string) => Promise<any>
        showDeleteDashboardModal: (id: number) => Promise<any>
        showNewDashboardModal: () => Promise<any>
    }
    defaults: {}
    events: {}
    key: undefined
    listeners: {}
    path: ['layout', 'navigation-3000', 'sidebars', 'dashboardsSidebarLogic']
    pathString: 'layout.navigation-3000.sidebars.dashboardsSidebarLogic'
    props: Record<string, unknown>
    reducer: (state: any, action: any, fullState: any) => {}
    reducers: {}
    selector: (state: any) => {}
    selectors: {
        pinSortedDashboards: (state: any, props?: any) => (DashboardType | DashboardBasicType)[]
        dashboardsLoading: (state: any, props?: any) => boolean
        activeScene: (state: any, props?: any) => Scene | null
        sceneParams: (state: any, props?: any) => SceneParams
        contents: (state: any, props?: any) => SidebarCategory[]
        activeListItemKey: (state: any, props?: any) => [string, number] | null
        relevantDashboards: (state: any, props?: any) => [DashboardBasicType, FuseSearchMatch[] | null][]
    }
    sharedListeners: {}
    values: {
        pinSortedDashboards: (DashboardType | DashboardBasicType)[]
        dashboardsLoading: boolean
        activeScene: Scene | null
        sceneParams: SceneParams
        contents: SidebarCategory[]
        activeListItemKey: [string, number] | null
        relevantDashboards: [DashboardBasicType, FuseSearchMatch[] | null][]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        contents: (
            relevantDashboards: [DashboardBasicType, FuseSearchMatch[] | null][],
            dashboardsLoading: boolean
        ) => SidebarCategory[]
        activeListItemKey: (
            activeScene: Scene | null,
            sceneParams: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/scenes/sceneTypes').SceneParams
        ) => [string, number] | null
        relevantDashboards: (
            pinSortedDashboards: (DashboardType | DashboardBasicType)[],
            searchTerm: string
        ) => [DashboardBasicType, FuseSearchMatch[] | null][]
    }
}
