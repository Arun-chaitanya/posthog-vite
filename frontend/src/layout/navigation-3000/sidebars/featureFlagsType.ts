// Generated by kea-typegen on Thu, 20 Jul 2023 11:24:06 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FeatureFlagType } from '../../../types'
import type { Scene, SceneParams } from '../../../scenes/sceneTypes'
import type { Noun } from '../../../models/groupsModel'
import type { FuseSearchMatch } from './utils'
import type { SidebarCategory } from '../types'

export interface featureFlagsSidebarLogicType extends Logic {
    actionCreators: {
        loadFeatureFlags: () => {
            type: 'load feature flags (layout.navigation-3000.sidebars.featureFlagsSidebarLogic)'
            payload: any
        }
        updateFeatureFlag: ({ id, payload }: { id: number; payload: Partial<FeatureFlagType> }) => {
            type: 'update feature flag (layout.navigation-3000.sidebars.featureFlagsSidebarLogic)'
            payload: {
                id: number
                payload: Partial<FeatureFlagType>
            }
        }
    }
    actionKeys: {
        'load feature flags (layout.navigation-3000.sidebars.featureFlagsSidebarLogic)': 'loadFeatureFlags'
        'update feature flag (layout.navigation-3000.sidebars.featureFlagsSidebarLogic)': 'updateFeatureFlag'
    }
    actionTypes: {
        loadFeatureFlags: 'load feature flags (layout.navigation-3000.sidebars.featureFlagsSidebarLogic)'
        updateFeatureFlag: 'update feature flag (layout.navigation-3000.sidebars.featureFlagsSidebarLogic)'
    }
    actions: {
        loadFeatureFlags: () => void
        updateFeatureFlag: ({ id, payload }: { id: number; payload: Partial<FeatureFlagType> }) => void
    }
    asyncActions: {
        loadFeatureFlags: () => Promise<any>
        updateFeatureFlag: ({ id, payload }: { id: number; payload: Partial<FeatureFlagType> }) => Promise<any>
    }
    defaults: {}
    events: {}
    key: undefined
    listeners: {}
    path: ['layout', 'navigation-3000', 'sidebars', 'featureFlagsSidebarLogic']
    pathString: 'layout.navigation-3000.sidebars.featureFlagsSidebarLogic'
    props: Record<string, unknown>
    reducer: (state: any, action: any, fullState: any) => {}
    reducers: {}
    selector: (state: any) => {}
    selectors: {
        featureFlags: (state: any, props?: any) => FeatureFlagType[]
        featureFlagsLoading: (state: any, props?: any) => boolean
        currentTeamId: (state: any, props?: any) => number | null
        activeScene: (state: any, props?: any) => Scene | null
        sceneParams: (state: any, props?: any) => SceneParams
        aggregationLabel: (
            state: any,
            props?: any
        ) => (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun
        contents: (state: any, props?: any) => SidebarCategory[]
        activeListItemKey: (state: any, props?: any) => [string, number] | null
        relevantFeatureFlags: (state: any, props?: any) => [FeatureFlagType, FuseSearchMatch[] | null][]
    }
    sharedListeners: {}
    values: {
        featureFlags: FeatureFlagType[]
        featureFlagsLoading: boolean
        currentTeamId: number | null
        activeScene: Scene | null
        sceneParams: SceneParams
        aggregationLabel: (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun
        contents: SidebarCategory[]
        activeListItemKey: [string, number] | null
        relevantFeatureFlags: [FeatureFlagType, FuseSearchMatch[] | null][]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        contents: (
            relevantFeatureFlags: [FeatureFlagType, FuseSearchMatch[] | null][],
            featureFlagsLoading: boolean,
            currentTeamId: number | null,
            aggregationLabel: (
                groupTypeIndex: number | null | undefined,
                deferToUserWording?: boolean | undefined
            ) => import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/models/groupsModel').Noun
        ) => SidebarCategory[]
        activeListItemKey: (
            activeScene: Scene | null,
            sceneParams: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/scenes/sceneTypes').SceneParams
        ) => [string, number] | null
        relevantFeatureFlags: (
            featureFlags: FeatureFlagType[],
            searchTerm: string
        ) => [FeatureFlagType, FuseSearchMatch[] | null][]
    }
}
