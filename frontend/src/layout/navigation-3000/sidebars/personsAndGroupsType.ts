// Generated by kea-typegen on Thu, 20 Jul 2023 11:24:06 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { CountedPaginatedResponse } from '../../../lib/api'
import type { GroupType, PersonListParams, PersonType } from '../../../types'
import type { Scene, SceneParams } from '../../../scenes/sceneTypes'
import type { GroupsPaginatedResponse } from '../../../scenes/groups/groupsListLogic'
import type { SidebarCategory } from '../types'

export interface personsAndGroupsSidebarLogicType extends Logic {
    actionCreators: {
        loadPersons: (url?: string | null) => {
            type: 'load persons (layout.navigation-3000.sidebars.personsAndGroupsSidebarLogic)'
            payload: {
                url: string | null
            }
        }
        setPersonsListFilters: (payload: PersonListParams) => {
            type: 'set persons list filters (layout.navigation-3000.sidebars.personsAndGroupsSidebarLogic)'
            payload: {
                payload: PersonListParams
            }
        }
    }
    actionKeys: {
        'load persons (layout.navigation-3000.sidebars.personsAndGroupsSidebarLogic)': 'loadPersons'
        'set persons list filters (layout.navigation-3000.sidebars.personsAndGroupsSidebarLogic)': 'setPersonsListFilters'
    }
    actionTypes: {
        loadPersons: 'load persons (layout.navigation-3000.sidebars.personsAndGroupsSidebarLogic)'
        setPersonsListFilters: 'set persons list filters (layout.navigation-3000.sidebars.personsAndGroupsSidebarLogic)'
    }
    actions: {
        loadPersons: (url?: string | null) => void
        setPersonsListFilters: (payload: PersonListParams) => void
    }
    asyncActions: {
        loadPersons: (url?: string | null) => Promise<any>
        setPersonsListFilters: (payload: PersonListParams) => Promise<any>
    }
    defaults: {
        infinitePersons: (PersonType | undefined)[]
    }
    events: {}
    key: undefined
    listeners: {
        loadPersons: ((
            action: {
                type: 'load persons (layout.navigation-3000.sidebars.personsAndGroupsSidebarLogic)'
                payload: {
                    url: string | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['layout', 'navigation-3000', 'sidebars', 'personsAndGroupsSidebarLogic']
    pathString: 'layout.navigation-3000.sidebars.personsAndGroupsSidebarLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        infinitePersons: (PersonType | undefined)[]
    }
    reducers: {
        infinitePersons: (state: (PersonType | undefined)[], action: any, fullState: any) => (PersonType | undefined)[]
    }
    selector: (state: any) => {
        infinitePersons: (PersonType | undefined)[]
    }
    selectors: {
        infinitePersons: (state: any, props?: any) => (PersonType | undefined)[]
        persons: (
            state: any,
            props?: any
        ) => CountedPaginatedResponse<PersonType> & {
            offset: number
        }
        personsLoading: (state: any, props?: any) => boolean
        groupTypes: (state: any, props?: any) => Array<GroupType>
        activeScene: (state: any, props?: any) => Scene | null
        sceneParams: (state: any, props?: any) => SceneParams
        searchTerm: (state: any, props?: any) => string
        contents: (state: any, props?: any) => SidebarCategory[]
        groups: (state: any, props?: any) => GroupsPaginatedResponse[]
        groupsLoading: (state: any, props?: any) => boolean[]
        activeListItemKey: (state: any, props?: any) => [string, string] | null
        debounceSearch: (state: any, props?: any) => true
    }
    sharedListeners: {}
    values: {
        infinitePersons: (PersonType | undefined)[]
        persons: CountedPaginatedResponse<PersonType> & {
            offset: number
        }
        personsLoading: boolean
        groupTypes: Array<GroupType>
        activeScene: Scene | null
        sceneParams: SceneParams
        searchTerm: string
        contents: SidebarCategory[]
        groups: GroupsPaginatedResponse[]
        groupsLoading: boolean[]
        activeListItemKey: [string, string] | null
        debounceSearch: true
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        contents: (
            persons: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/lib/api').CountedPaginatedResponse<PersonType> & {
                offset: number
            },
            infinitePersons: (PersonType | undefined)[],
            personsLoading: boolean,
            groupTypes: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').GroupType[],
            groups: GroupsPaginatedResponse[],
            groupsLoading: boolean[]
        ) => SidebarCategory[]
        activeListItemKey: (
            activeScene: Scene | null,
            sceneParams: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/scenes/sceneTypes').SceneParams
        ) => [string, string] | null
        debounceSearch: (searchTerm: string) => true
    }
    __keaTypeGenInternalReducerActions: {
        'load persons success (scenes.persons.personsLogic.*)': (
            persons: CountedPaginatedResponse<PersonType> & {
                offset: number
            },
            payload?: {
                url: string | null
            }
        ) => {
            type: 'load persons success (scenes.persons.personsLogic.*)'
            payload: {
                persons: CountedPaginatedResponse<PersonType> & {
                    offset: number
                }
                payload?: {
                    url: string | null
                }
            }
        }
    }
}
