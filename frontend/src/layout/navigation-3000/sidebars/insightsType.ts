// Generated by kea-typegen on Thu, 20 Jul 2023 11:24:33 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { InsightsResult, SavedInsightFilters } from '../../../scenes/saved-insights/savedInsightsLogic'
import type { Dayjs } from '../../../../../node_modules/.pnpm/dayjs@1.11.6/node_modules/dayjs/index.d'
import type { Scene, SceneParams } from '../../../scenes/sceneTypes'
import type { InsightModel } from '../../../types'
import type { SidebarCategory } from '../types'

export interface insightsSidebarLogicType extends Logic {
    actionCreators: {
        setSavedInsightsFilters: (
            filters: Partial<SavedInsightFilters>,
            merge?: boolean,
            debounce?: boolean
        ) => {
            type: 'set saved insights filters (layout.navigation-3000.sidebars.insightsSidebarLogic)'
            payload: {
                filters: Partial<SavedInsightFilters>
                merge: boolean
                debounce: boolean
            }
        }
        duplicateInsight: (
            insight: InsightModel,
            redirectToInsight?: any
        ) => {
            type: 'duplicate insight (layout.navigation-3000.sidebars.insightsSidebarLogic)'
            payload: {
                insight: InsightModel
                redirectToInsight: any
            }
        }
        loadInsights: (debounce?: boolean) => {
            type: 'load insights (layout.navigation-3000.sidebars.insightsSidebarLogic)'
            payload: {
                debounce: boolean
            }
        }
    }
    actionKeys: {
        'set saved insights filters (layout.navigation-3000.sidebars.insightsSidebarLogic)': 'setSavedInsightsFilters'
        'duplicate insight (layout.navigation-3000.sidebars.insightsSidebarLogic)': 'duplicateInsight'
        'load insights (layout.navigation-3000.sidebars.insightsSidebarLogic)': 'loadInsights'
    }
    actionTypes: {
        setSavedInsightsFilters: 'set saved insights filters (layout.navigation-3000.sidebars.insightsSidebarLogic)'
        duplicateInsight: 'duplicate insight (layout.navigation-3000.sidebars.insightsSidebarLogic)'
        loadInsights: 'load insights (layout.navigation-3000.sidebars.insightsSidebarLogic)'
    }
    actions: {
        setSavedInsightsFilters: (filters: Partial<SavedInsightFilters>, merge?: boolean, debounce?: boolean) => void
        duplicateInsight: (insight: InsightModel, redirectToInsight?: any) => void
        loadInsights: (debounce?: boolean) => void
    }
    asyncActions: {
        setSavedInsightsFilters: (
            filters: Partial<SavedInsightFilters>,
            merge?: boolean,
            debounce?: boolean
        ) => Promise<any>
        duplicateInsight: (insight: InsightModel, redirectToInsight?: any) => Promise<any>
        loadInsights: (debounce?: boolean) => Promise<any>
    }
    defaults: {
        infiniteInsights: (InsightModel | undefined)[]
    }
    events: {}
    key: undefined
    listeners: {
        loadInsights: ((
            action: {
                type: 'load insights (layout.navigation-3000.sidebars.insightsSidebarLogic)'
                payload: {
                    debounce: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['layout', 'navigation-3000', 'sidebars', 'insightsSidebarLogic']
    pathString: 'layout.navigation-3000.sidebars.insightsSidebarLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        infiniteInsights: (InsightModel | undefined)[]
    }
    reducers: {
        infiniteInsights: (
            state: (InsightModel | undefined)[],
            action: any,
            fullState: any
        ) => (InsightModel | undefined)[]
    }
    selector: (state: any) => {
        infiniteInsights: (InsightModel | undefined)[]
    }
    selectors: {
        infiniteInsights: (state: any, props?: any) => (InsightModel | undefined)[]
        insights: (state: any, props?: any) => InsightsResult
        insightsLoading: (state: any, props?: any) => boolean
        paramsFromFilters: (
            state: any,
            props?: any
        ) => {
            dashboards?: number[] | undefined
            date_from?: string | Dayjs | undefined
            date_to?: string | Dayjs | null | undefined
            created_by?: number | undefined
            insight?: string | undefined
            search?: string | undefined
            favorited?: true | undefined
            user?: true | undefined
            order: string
            limit: number
            offset: number
            saved: true
        }
        activeScene: (state: any, props?: any) => Scene | null
        sceneParams: (state: any, props?: any) => SceneParams
        searchTerm: (state: any, props?: any) => string
        contents: (state: any, props?: any) => SidebarCategory[]
        activeListItemKey: (state: any, props?: any) => [string, string] | null
        debounceSearch: (state: any, props?: any) => true
    }
    sharedListeners: {}
    values: {
        infiniteInsights: (InsightModel | undefined)[]
        insights: InsightsResult
        insightsLoading: boolean
        paramsFromFilters: {
            dashboards?: number[] | undefined
            date_from?: string | Dayjs | undefined
            date_to?: string | Dayjs | null | undefined
            created_by?: number | undefined
            insight?: string | undefined
            search?: string | undefined
            favorited?: true | undefined
            user?: true | undefined
            order: string
            limit: number
            offset: number
            saved: true
        }
        activeScene: Scene | null
        sceneParams: SceneParams
        searchTerm: string
        contents: SidebarCategory[]
        activeListItemKey: [string, string] | null
        debounceSearch: true
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        contents: (
            insights: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/scenes/saved-insights/savedInsightsLogic').InsightsResult,
            infiniteInsights: (InsightModel | undefined)[],
            insightsLoading: boolean,
            currentTeamId: number | null
        ) => SidebarCategory[]
        activeListItemKey: (
            activeScene: Scene | null,
            sceneParams: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/scenes/sceneTypes').SceneParams
        ) => [string, string] | null
        debounceSearch: (searchTerm: string) => true
    }
    __keaTypeGenInternalReducerActions: {
        'load insights success (scenes.saved-insights.savedInsightsLogic)': (
            insights: InsightsResult,
            payload?: {
                debounce: boolean
            }
        ) => {
            type: 'load insights success (scenes.saved-insights.savedInsightsLogic)'
            payload: {
                insights: InsightsResult
                payload?: {
                    debounce: boolean
                }
            }
        }
    }
}
