// Generated by kea-typegen on Thu, 20 Jul 2023 11:24:06 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ChangesResponse } from './notificationsLogic'
import type { ActivityLogDetail, ActivityScope, ActivityUser, HumanizedActivityLogItem } from '../../../lib/components/ActivityLog/humanizeActivity'

export interface notificationsLogicType extends Logic {
    actionCreators: {
        toggleNotificationsPopover: () => {
            type: 'toggle notifications popover (layout.navigation.TopBar.notificationsLogic)'
            payload: {
                value: true
            }
        }
        togglePolling: (pageIsVisible: boolean) => {
            type: 'toggle polling (layout.navigation.TopBar.notificationsLogic)'
            payload: {
                pageIsVisible: boolean
            }
        }
        setPollTimeout: (pollTimeout: number) => {
            type: 'set poll timeout (layout.navigation.TopBar.notificationsLogic)'
            payload: {
                pollTimeout: number
            }
        }
        setMarkReadTimeout: (markReadTimeout: number) => {
            type: 'set mark read timeout (layout.navigation.TopBar.notificationsLogic)'
            payload: {
                markReadTimeout: number
            }
        }
        incrementErrorCount: () => {
            type: 'increment error count (layout.navigation.TopBar.notificationsLogic)'
            payload: {
                value: true
            }
        }
        clearErrorCount: () => {
            type: 'clear error count (layout.navigation.TopBar.notificationsLogic)'
            payload: {
                value: true
            }
        }
        markAllAsRead: (bookmarkDate: string) => {
            type: 'mark all as read (layout.navigation.TopBar.notificationsLogic)'
            payload: {
                bookmarkDate: string
            }
        }
        markAllAsReadSuccess: (
            importantChanges: {
                last_read: string
                results: {
                    unread: false
                    user: ActivityUser
                    activity: string
                    created_at: string
                    scope: ActivityScope
                    item_id?: string | undefined
                    detail: ActivityLogDetail
                    is_system?: boolean | undefined
                }[]
            } | null,
            payload?: {
                bookmarkDate: string
            }
        ) => {
            type: 'mark all as read success (layout.navigation.TopBar.notificationsLogic)'
            payload: {
                importantChanges: {
                    last_read: string
                    results: {
                        unread: false
                        user: ActivityUser
                        activity: string
                        created_at: string
                        scope: ActivityScope
                        item_id?: string | undefined
                        detail: ActivityLogDetail
                        is_system?: boolean | undefined
                    }[]
                } | null
                payload?: {
                    bookmarkDate: string
                }
            }
        }
        markAllAsReadFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'mark all as read failure (layout.navigation.TopBar.notificationsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadImportantChanges: (_: any) => {
            type: 'load important changes (layout.navigation.TopBar.notificationsLogic)'
            payload: any
        }
        loadImportantChangesSuccess: (
            importantChanges: ChangesResponse | null,
            payload?: any
        ) => {
            type: 'load important changes success (layout.navigation.TopBar.notificationsLogic)'
            payload: {
                importantChanges: ChangesResponse | null
                payload?: any
            }
        }
        loadImportantChangesFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load important changes failure (layout.navigation.TopBar.notificationsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'toggle notifications popover (layout.navigation.TopBar.notificationsLogic)': 'toggleNotificationsPopover'
        'toggle polling (layout.navigation.TopBar.notificationsLogic)': 'togglePolling'
        'set poll timeout (layout.navigation.TopBar.notificationsLogic)': 'setPollTimeout'
        'set mark read timeout (layout.navigation.TopBar.notificationsLogic)': 'setMarkReadTimeout'
        'increment error count (layout.navigation.TopBar.notificationsLogic)': 'incrementErrorCount'
        'clear error count (layout.navigation.TopBar.notificationsLogic)': 'clearErrorCount'
        'mark all as read (layout.navigation.TopBar.notificationsLogic)': 'markAllAsRead'
        'mark all as read success (layout.navigation.TopBar.notificationsLogic)': 'markAllAsReadSuccess'
        'mark all as read failure (layout.navigation.TopBar.notificationsLogic)': 'markAllAsReadFailure'
        'load important changes (layout.navigation.TopBar.notificationsLogic)': 'loadImportantChanges'
        'load important changes success (layout.navigation.TopBar.notificationsLogic)': 'loadImportantChangesSuccess'
        'load important changes failure (layout.navigation.TopBar.notificationsLogic)': 'loadImportantChangesFailure'
    }
    actionTypes: {
        toggleNotificationsPopover: 'toggle notifications popover (layout.navigation.TopBar.notificationsLogic)'
        togglePolling: 'toggle polling (layout.navigation.TopBar.notificationsLogic)'
        setPollTimeout: 'set poll timeout (layout.navigation.TopBar.notificationsLogic)'
        setMarkReadTimeout: 'set mark read timeout (layout.navigation.TopBar.notificationsLogic)'
        incrementErrorCount: 'increment error count (layout.navigation.TopBar.notificationsLogic)'
        clearErrorCount: 'clear error count (layout.navigation.TopBar.notificationsLogic)'
        markAllAsRead: 'mark all as read (layout.navigation.TopBar.notificationsLogic)'
        markAllAsReadSuccess: 'mark all as read success (layout.navigation.TopBar.notificationsLogic)'
        markAllAsReadFailure: 'mark all as read failure (layout.navigation.TopBar.notificationsLogic)'
        loadImportantChanges: 'load important changes (layout.navigation.TopBar.notificationsLogic)'
        loadImportantChangesSuccess: 'load important changes success (layout.navigation.TopBar.notificationsLogic)'
        loadImportantChangesFailure: 'load important changes failure (layout.navigation.TopBar.notificationsLogic)'
    }
    actions: {
        toggleNotificationsPopover: () => void
        togglePolling: (pageIsVisible: boolean) => void
        setPollTimeout: (pollTimeout: number) => void
        setMarkReadTimeout: (markReadTimeout: number) => void
        incrementErrorCount: () => void
        clearErrorCount: () => void
        markAllAsRead: (bookmarkDate: string) => void
        markAllAsReadSuccess: (
            importantChanges: {
                last_read: string
                results: {
                    unread: false
                    user: ActivityUser
                    activity: string
                    created_at: string
                    scope: ActivityScope
                    item_id?: string | undefined
                    detail: ActivityLogDetail
                    is_system?: boolean | undefined
                }[]
            } | null,
            payload?: {
                bookmarkDate: string
            }
        ) => void
        markAllAsReadFailure: (error: string, errorObject?: any) => void
        loadImportantChanges: (_: any) => void
        loadImportantChangesSuccess: (importantChanges: ChangesResponse | null, payload?: any) => void
        loadImportantChangesFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        toggleNotificationsPopover: () => Promise<any>
        togglePolling: (pageIsVisible: boolean) => Promise<any>
        setPollTimeout: (pollTimeout: number) => Promise<any>
        setMarkReadTimeout: (markReadTimeout: number) => Promise<any>
        incrementErrorCount: () => Promise<any>
        clearErrorCount: () => Promise<any>
        markAllAsRead: (bookmarkDate: string) => Promise<any>
        markAllAsReadSuccess: (
            importantChanges: {
                last_read: string
                results: {
                    unread: false
                    user: ActivityUser
                    activity: string
                    created_at: string
                    scope: ActivityScope
                    item_id?: string | undefined
                    detail: ActivityLogDetail
                    is_system?: boolean | undefined
                }[]
            } | null,
            payload?: {
                bookmarkDate: string
            }
        ) => Promise<any>
        markAllAsReadFailure: (error: string, errorObject?: any) => Promise<any>
        loadImportantChanges: (_: any) => Promise<any>
        loadImportantChangesSuccess: (importantChanges: ChangesResponse | null, payload?: any) => Promise<any>
        loadImportantChangesFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        importantChanges: ChangesResponse | null
        importantChangesLoading: boolean
        errorCounter: number
        isNotificationPopoverOpen: boolean
        isPolling: boolean
        pollTimeout: number
        markReadTimeout: number
    }
    events: {
        afterMount: () => void
        beforeUnmount: () => void
    }
    key: undefined
    listeners: {
        toggleNotificationsPopover: ((
            action: {
                type: 'toggle notifications popover (layout.navigation.TopBar.notificationsLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['layout', 'navigation', 'TopBar', 'notificationsLogic']
    pathString: 'layout.navigation.TopBar.notificationsLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        importantChanges: ChangesResponse | null
        importantChangesLoading: boolean
        errorCounter: number
        isNotificationPopoverOpen: boolean
        isPolling: boolean
        pollTimeout: number
        markReadTimeout: number
    }
    reducers: {
        importantChanges: (state: ChangesResponse | null, action: any, fullState: any) => ChangesResponse | null
        importantChangesLoading: (state: boolean, action: any, fullState: any) => boolean
        errorCounter: (state: number, action: any, fullState: any) => number
        isNotificationPopoverOpen: (state: boolean, action: any, fullState: any) => boolean
        isPolling: (state: boolean, action: any, fullState: any) => boolean
        pollTimeout: (state: number, action: any, fullState: any) => number
        markReadTimeout: (state: number, action: any, fullState: any) => number
    }
    selector: (state: any) => {
        importantChanges: ChangesResponse | null
        importantChangesLoading: boolean
        errorCounter: number
        isNotificationPopoverOpen: boolean
        isPolling: boolean
        pollTimeout: number
        markReadTimeout: number
    }
    selectors: {
        importantChanges: (state: any, props?: any) => ChangesResponse | null
        importantChangesLoading: (state: any, props?: any) => boolean
        errorCounter: (state: any, props?: any) => number
        isNotificationPopoverOpen: (state: any, props?: any) => boolean
        isPolling: (state: any, props?: any) => boolean
        pollTimeout: (state: any, props?: any) => number
        markReadTimeout: (state: any, props?: any) => number
        notifications: (state: any, props?: any) => HumanizedActivityLogItem[]
        hasNotifications: (state: any, props?: any) => boolean
        unread: (state: any, props?: any) => HumanizedActivityLogItem[]
        unreadCount: (state: any, props?: any) => number
        hasUnread: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        importantChanges: ChangesResponse | null
        importantChangesLoading: boolean
        errorCounter: number
        isNotificationPopoverOpen: boolean
        isPolling: boolean
        pollTimeout: number
        markReadTimeout: number
        notifications: HumanizedActivityLogItem[]
        hasNotifications: boolean
        unread: HumanizedActivityLogItem[]
        unreadCount: number
        hasUnread: boolean
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        notifications: (importantChanges: ChangesResponse | null) => HumanizedActivityLogItem[]
        hasNotifications: (notifications: HumanizedActivityLogItem[]) => boolean
        unread: (notifications: HumanizedActivityLogItem[]) => HumanizedActivityLogItem[]
        unreadCount: (unread: HumanizedActivityLogItem[]) => number
        hasUnread: (unreadCount: number) => boolean
    }
}
