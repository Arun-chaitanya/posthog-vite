// Generated by kea-typegen on Thu, 20 Jul 2023 11:31:48 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AnnotationsOverlayLogicProps } from './annotationsOverlayLogic'
import type { AnnotationType, DatedAnnotationType, IntervalType, RawAnnotationType } from '../../../types'
import type { AnnotationData, AnnotationDataWithoutInsight } from '../../../models/annotationsModel'
import type { Dayjs } from '../../dayjs'
import type { Tick } from '../../../../../node_modules/.pnpm/chart.js@3.9.1/node_modules/chart.js/types/index.esm.d'

export interface annotationsOverlayLogicType extends Logic {
    actionCreators: {
        deleteAnnotation: (annotation: AnnotationType) => {
            type: 'delete annotation (lib.components.Annotations.annotationsOverlayLogic.*)'
            payload: {
                annotation: AnnotationType
            }
        }
        createAnnotationGenerically: (annotationData: AnnotationData) => {
            type: 'create annotation generically (lib.components.Annotations.annotationsOverlayLogic.*)'
            payload: AnnotationData
        }
        updateAnnotation: ({
            annotationId,
            annotationData,
        }: {
            annotationId: RawAnnotationType['id']
            annotationData: AnnotationDataWithoutInsight
        }) => {
            type: 'update annotation (lib.components.Annotations.annotationsOverlayLogic.*)'
            payload: {
                annotationId: RawAnnotationType[]
                annotationData: AnnotationDataWithoutInsight
            }
        }
        createAnnotation: (annotationData: AnnotationDataWithoutInsight) => {
            type: 'create annotation (lib.components.Annotations.annotationsOverlayLogic.*)'
            payload: {
                annotationData: AnnotationDataWithoutInsight
            }
        }
        activateDate: (
            date: Dayjs,
            badgeElement: HTMLButtonElement
        ) => {
            type: 'activate date (lib.components.Annotations.annotationsOverlayLogic.*)'
            payload: {
                date: Dayjs
                badgeElement: HTMLButtonElement
            }
        }
        deactivateDate: () => {
            type: 'deactivate date (lib.components.Annotations.annotationsOverlayLogic.*)'
            payload: {
                value: true
            }
        }
        lockDate: () => {
            type: 'lock date (lib.components.Annotations.annotationsOverlayLogic.*)'
            payload: {
                value: true
            }
        }
        unlockDate: () => {
            type: 'unlock date (lib.components.Annotations.annotationsOverlayLogic.*)'
            payload: {
                value: true
            }
        }
        closePopover: () => {
            type: 'close popover (lib.components.Annotations.annotationsOverlayLogic.*)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'delete annotation (lib.components.Annotations.annotationsOverlayLogic.*)': 'deleteAnnotation'
        'create annotation generically (lib.components.Annotations.annotationsOverlayLogic.*)': 'createAnnotationGenerically'
        'update annotation (lib.components.Annotations.annotationsOverlayLogic.*)': 'updateAnnotation'
        'create annotation (lib.components.Annotations.annotationsOverlayLogic.*)': 'createAnnotation'
        'activate date (lib.components.Annotations.annotationsOverlayLogic.*)': 'activateDate'
        'deactivate date (lib.components.Annotations.annotationsOverlayLogic.*)': 'deactivateDate'
        'lock date (lib.components.Annotations.annotationsOverlayLogic.*)': 'lockDate'
        'unlock date (lib.components.Annotations.annotationsOverlayLogic.*)': 'unlockDate'
        'close popover (lib.components.Annotations.annotationsOverlayLogic.*)': 'closePopover'
    }
    actionTypes: {
        deleteAnnotation: 'delete annotation (lib.components.Annotations.annotationsOverlayLogic.*)'
        createAnnotationGenerically: 'create annotation generically (lib.components.Annotations.annotationsOverlayLogic.*)'
        updateAnnotation: 'update annotation (lib.components.Annotations.annotationsOverlayLogic.*)'
        createAnnotation: 'create annotation (lib.components.Annotations.annotationsOverlayLogic.*)'
        activateDate: 'activate date (lib.components.Annotations.annotationsOverlayLogic.*)'
        deactivateDate: 'deactivate date (lib.components.Annotations.annotationsOverlayLogic.*)'
        lockDate: 'lock date (lib.components.Annotations.annotationsOverlayLogic.*)'
        unlockDate: 'unlock date (lib.components.Annotations.annotationsOverlayLogic.*)'
        closePopover: 'close popover (lib.components.Annotations.annotationsOverlayLogic.*)'
    }
    actions: {
        deleteAnnotation: (annotation: AnnotationType) => void
        createAnnotationGenerically: (annotationData: AnnotationData) => void
        updateAnnotation: ({
            annotationId,
            annotationData,
        }: {
            annotationId: RawAnnotationType['id']
            annotationData: AnnotationDataWithoutInsight
        }) => void
        createAnnotation: (annotationData: AnnotationDataWithoutInsight) => void
        activateDate: (date: Dayjs, badgeElement: HTMLButtonElement) => void
        deactivateDate: () => void
        lockDate: () => void
        unlockDate: () => void
        closePopover: () => void
    }
    asyncActions: {
        deleteAnnotation: (annotation: AnnotationType) => Promise<any>
        createAnnotationGenerically: (annotationData: AnnotationData) => Promise<any>
        updateAnnotation: ({
            annotationId,
            annotationData,
        }: {
            annotationId: RawAnnotationType['id']
            annotationData: AnnotationDataWithoutInsight
        }) => Promise<any>
        createAnnotation: (annotationData: AnnotationDataWithoutInsight) => Promise<any>
        activateDate: (date: Dayjs, badgeElement: HTMLButtonElement) => Promise<any>
        deactivateDate: () => Promise<any>
        lockDate: () => Promise<any>
        unlockDate: () => Promise<any>
        closePopover: () => Promise<any>
    }
    defaults: {
        isPopoverShown: boolean
        activeDate: Dayjs | null
        activeBadgeElement: HTMLButtonElement | null
        isDateLocked: boolean
    }
    events: {}
    key: number | 'new'
    listeners: {
        createAnnotation: ((
            action: {
                type: 'create annotation (lib.components.Annotations.annotationsOverlayLogic.*)'
                payload: {
                    annotationData: AnnotationDataWithoutInsight
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'Annotations', 'annotationsOverlayLogic', '*']
    pathString: 'lib.components.Annotations.annotationsOverlayLogic.*'
    props: AnnotationsOverlayLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        isPopoverShown: boolean
        activeDate: Dayjs | null
        activeBadgeElement: HTMLButtonElement | null
        isDateLocked: boolean
    }
    reducers: {
        isPopoverShown: (state: boolean, action: any, fullState: any) => boolean
        activeDate: (state: Dayjs | null, action: any, fullState: any) => Dayjs | null
        activeBadgeElement: (state: HTMLButtonElement | null, action: any, fullState: any) => HTMLButtonElement | null
        isDateLocked: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        isPopoverShown: boolean
        activeDate: Dayjs | null
        activeBadgeElement: HTMLButtonElement | null
        isDateLocked: boolean
    }
    selectors: {
        isPopoverShown: (state: any, props?: any) => boolean
        activeDate: (state: any, props?: any) => Dayjs | null
        activeBadgeElement: (state: any, props?: any) => HTMLButtonElement | null
        isDateLocked: (state: any, props?: any) => boolean
        insightId: (state: any, props?: any) => number | null
        intervalUnit: (state: any, props?: any) => IntervalType
        annotations: (state: any, props?: any) => AnnotationType[]
        annotationsLoading: (state: any, props?: any) => boolean
        timezone: (state: any, props?: any) => string
        pointsPerTick: (state: any, props?: any) => number
        tickDates: (state: any, props?: any) => Dayjs[]
        dateRange: (state: any, props?: any) => [Dayjs, Dayjs] | null
        relevantAnnotations: (state: any, props?: any) => DatedAnnotationType[]
        groupedAnnotations: (state: any, props?: any) => Record<string | number, DatedAnnotationType[]>
        popoverAnnotations: (state: any, props?: any) => DatedAnnotationType[]
    }
    sharedListeners: {}
    values: {
        isPopoverShown: boolean
        activeDate: Dayjs | null
        activeBadgeElement: HTMLButtonElement | null
        isDateLocked: boolean
        insightId: number | null
        intervalUnit: IntervalType
        annotations: AnnotationType[]
        annotationsLoading: boolean
        timezone: string
        pointsPerTick: number
        tickDates: Dayjs[]
        dateRange: [Dayjs, Dayjs] | null
        relevantAnnotations: DatedAnnotationType[]
        groupedAnnotations: Record<string | number, DatedAnnotationType[]>
        popoverAnnotations: DatedAnnotationType[]
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        pointsPerTick: (arg: any) => number
        tickDates: (timezone: string, arg: string[], arg2: Tick[]) => Dayjs[]
        dateRange: (tickDates: Dayjs[], intervalUnit: IntervalType, pointsPerTick: number) => [Dayjs, Dayjs] | null
        relevantAnnotations: (
            annotations: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').AnnotationType[],
            dateRange: [Dayjs, Dayjs] | null,
            arg: any
        ) => DatedAnnotationType[]
        groupedAnnotations: (
            relevantAnnotations: DatedAnnotationType[],
            intervalUnit: IntervalType,
            dateRange: [Dayjs, Dayjs] | null,
            pointsPerTick: number
        ) => Record<string | number, DatedAnnotationType[]>
        popoverAnnotations: (
            groupedAnnotations: Record<string | number, DatedAnnotationType[]>,
            activeDate: Dayjs | null,
            intervalUnit: IntervalType,
            dateRange: [Dayjs, Dayjs] | null,
            pointsPerTick: number
        ) => DatedAnnotationType[]
    }
}
