// Generated by kea-typegen on Thu, 20 Jul 2023 10:57:33 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ResizerLogicProps } from './resizerLogic'

export interface resizerLogicType extends Logic {
    actionCreators: {
        beginResize: (startX: number) => {
            type: 'begin resize (components.resizer.resizerLogic)'
            payload: {
                startX: number
            }
        }
        endResize: () => {
            type: 'end resize (components.resizer.resizerLogic)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'begin resize (components.resizer.resizerLogic)': 'beginResize'
        'end resize (components.resizer.resizerLogic)': 'endResize'
    }
    actionTypes: {
        beginResize: 'begin resize (components.resizer.resizerLogic)'
        endResize: 'end resize (components.resizer.resizerLogic)'
    }
    actions: {
        beginResize: (startX: number) => void
        endResize: () => void
    }
    asyncActions: {
        beginResize: (startX: number) => Promise<any>
        endResize: () => Promise<any>
    }
    defaults: {
        isResizeInProgress: boolean
    }
    events: {}
    key: undefined
    listeners: {
        beginResize: ((
            action: {
                type: 'begin resize (components.resizer.resizerLogic)'
                payload: {
                    startX: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        endResize: ((
            action: {
                type: 'end resize (components.resizer.resizerLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['components', 'resizer', 'resizerLogic']
    pathString: 'components.resizer.resizerLogic'
    props: ResizerLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        isResizeInProgress: boolean
    }
    reducers: {
        isResizeInProgress: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        isResizeInProgress: boolean
    }
    selectors: {
        isResizeInProgress: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        isResizeInProgress: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
