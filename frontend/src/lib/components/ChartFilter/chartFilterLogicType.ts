// Generated by kea-typegen on Thu, 20 Jul 2023 11:18:05 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ChartDisplayType, InsightLogicProps } from '../../../types'
import type { ActionsNode, BreakdownFilter, EventsNode, InsightFilter } from '../../../queries/schema'

export interface chartFilterLogicType extends Logic {
    actionCreators: {
        updateInsightFilter: (insightFilter: InsightFilter) => {
            type: 'update insight filter (lib.components.ChartFilter.chartFilterLogic.*)'
            payload: {
                insightFilter: InsightFilter
            }
        }
        updateBreakdown: (breakdown: BreakdownFilter) => {
            type: 'update breakdown (lib.components.ChartFilter.chartFilterLogic.*)'
            payload: {
                breakdown: BreakdownFilter
            }
        }
        setChartFilter: (chartFilter: ChartDisplayType) => {
            type: 'set chart filter (lib.components.ChartFilter.chartFilterLogic.*)'
            payload: {
                chartFilter: ChartDisplayType
            }
        }
    }
    actionKeys: {
        'update insight filter (lib.components.ChartFilter.chartFilterLogic.*)': 'updateInsightFilter'
        'update breakdown (lib.components.ChartFilter.chartFilterLogic.*)': 'updateBreakdown'
        'set chart filter (lib.components.ChartFilter.chartFilterLogic.*)': 'setChartFilter'
    }
    actionTypes: {
        updateInsightFilter: 'update insight filter (lib.components.ChartFilter.chartFilterLogic.*)'
        updateBreakdown: 'update breakdown (lib.components.ChartFilter.chartFilterLogic.*)'
        setChartFilter: 'set chart filter (lib.components.ChartFilter.chartFilterLogic.*)'
    }
    actions: {
        updateInsightFilter: (insightFilter: InsightFilter) => void
        updateBreakdown: (breakdown: BreakdownFilter) => void
        setChartFilter: (chartFilter: ChartDisplayType) => void
    }
    asyncActions: {
        updateInsightFilter: (insightFilter: InsightFilter) => Promise<any>
        updateBreakdown: (breakdown: BreakdownFilter) => Promise<any>
        setChartFilter: (chartFilter: ChartDisplayType) => Promise<any>
    }
    defaults: {}
    events: {}
    key: string
    listeners: {
        setChartFilter: ((
            action: {
                type: 'set chart filter (lib.components.ChartFilter.chartFilterLogic.*)'
                payload: {
                    chartFilter: ChartDisplayType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'ChartFilter', 'chartFilterLogic', '*']
    pathString: 'lib.components.ChartFilter.chartFilterLogic.*'
    props: InsightLogicProps
    reducer: (state: any, action: any, fullState: any) => {}
    reducers: {}
    selector: (state: any) => {}
    selectors: {
        isTrends: (state: any, props?: any) => boolean
        isStickiness: (state: any, props?: any) => boolean
        display: (state: any, props?: any) => ChartDisplayType | null | undefined
        series: (state: any, props?: any) => (EventsNode | ActionsNode)[] | null | undefined
        chartFilter: (state: any, props?: any) => ChartDisplayType | null | undefined
    }
    sharedListeners: {}
    values: {
        isTrends: boolean
        isStickiness: boolean
        display: ChartDisplayType | null | undefined
        series: (EventsNode | ActionsNode)[] | null | undefined
        chartFilter: ChartDisplayType | null | undefined
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        chartFilter: (display: ChartDisplayType | null | undefined) => ChartDisplayType | null | undefined
    }
}
