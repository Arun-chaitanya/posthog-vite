// Generated by kea-typegen on Tue, 08 Aug 2023 10:01:11 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { HtmlElementDisplayLogicProps } from './htmlElementsDisplayLogic'
import type { ParsedCSSSelector } from './preselectWithCSS'
import type { ElementType } from '../../../types'

export interface htmlElementsDisplayLogicType extends Logic {
    actionCreators: {
        setParsedSelectors: (selectors: Record<number, ParsedCSSSelector>) => {
            type: 'set parsed selectors (lib.components.HtmlElementsDisplay.htmlElementsDisplayLogic)'
            payload: {
                selectors: Record<number, ParsedCSSSelector>
            }
        }
        setElements: (providedElements: ElementType[]) => {
            type: 'set elements (lib.components.HtmlElementsDisplay.htmlElementsDisplayLogic)'
            payload: {
                providedElements: ElementType[]
            }
        }
    }
    actionKeys: {
        'set parsed selectors (lib.components.HtmlElementsDisplay.htmlElementsDisplayLogic)': 'setParsedSelectors'
        'set elements (lib.components.HtmlElementsDisplay.htmlElementsDisplayLogic)': 'setElements'
    }
    actionTypes: {
        setParsedSelectors: 'set parsed selectors (lib.components.HtmlElementsDisplay.htmlElementsDisplayLogic)'
        setElements: 'set elements (lib.components.HtmlElementsDisplay.htmlElementsDisplayLogic)'
    }
    actions: {
        setParsedSelectors: (selectors: Record<number, ParsedCSSSelector>) => void
        setElements: (providedElements: ElementType[]) => void
    }
    asyncActions: {
        setParsedSelectors: (selectors: Record<number, ParsedCSSSelector>) => Promise<any>
        setElements: (providedElements: ElementType[]) => Promise<any>
    }
    defaults: {
        elements: ElementType[]
        parsedSelectorsRaw: Record<number, ParsedCSSSelector>
    }
    events: {}
    key: string
    listeners: {}
    path: ['lib', 'components', 'HtmlElementsDisplay', 'htmlElementsDisplayLogic']
    pathString: 'lib.components.HtmlElementsDisplay.htmlElementsDisplayLogic'
    props: HtmlElementDisplayLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        elements: ElementType[]
        parsedSelectorsRaw: Record<number, ParsedCSSSelector>
    }
    reducers: {
        elements: (state: ElementType[], action: any, fullState: any) => ElementType[]
        parsedSelectorsRaw: (
            state: Record<number, ParsedCSSSelector>,
            action: any,
            fullState: any
        ) => Record<number, ParsedCSSSelector>
    }
    selector: (state: any) => {
        elements: ElementType[]
        parsedSelectorsRaw: Record<number, ParsedCSSSelector>
    }
    selectors: {
        elements: (state: any, props?: any) => ElementType[]
        parsedSelectorsRaw: (state: any, props?: any) => Record<number, ParsedCSSSelector>
        parsedSelectors: (state: any, props?: any) => Record<number, ParsedCSSSelector>
        chosenSelector: (state: any, props?: any) => string
        chosenSelectorMatchCount: (state: any, props?: any) => number | null
        messageStatus: (state: any, props?: any) => 'warning' | 'success' | 'info'
    }
    sharedListeners: {}
    values: {
        elements: ElementType[]
        parsedSelectorsRaw: Record<number, ParsedCSSSelector>
        parsedSelectors: Record<number, ParsedCSSSelector>
        chosenSelector: string
        chosenSelectorMatchCount: number | null
        messageStatus: 'warning' | 'success' | 'info'
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        parsedSelectors: (
            parsedSelectorsRaw: Record<number, ParsedCSSSelector>,
            arg: any,
            elements: ElementType[]
        ) => Record<number, ParsedCSSSelector>
        chosenSelector: (parsedSelectors: Record<number, ParsedCSSSelector>) => string
        chosenSelectorMatchCount: (chosenSelector: string, arg: any) => number | null
        messageStatus: (chosenSelectorMatchCount: number | null) => 'warning' | 'success' | 'info'
    }
}
