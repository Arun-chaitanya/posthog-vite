// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:20 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { RollingDateFilterLogicPropsType } from './rollingDateRangeFilterLogic'

export interface rollingDateRangeFilterLogicType extends Logic {
    actionCreators: {
        increaseCounter: () => {
            type: 'increase counter (lib.components.DateFilter.RollingDateRangeFilterLogic)'
            payload: {
                value: true
            }
        }
        decreaseCounter: () => {
            type: 'decrease counter (lib.components.DateFilter.RollingDateRangeFilterLogic)'
            payload: {
                value: true
            }
        }
        setCounter: (counter: number | null | undefined) => {
            type: 'set counter (lib.components.DateFilter.RollingDateRangeFilterLogic)'
            payload: {
                counter: number | null | undefined
            }
        }
        setDateOption: (option: string) => {
            type: 'set date option (lib.components.DateFilter.RollingDateRangeFilterLogic)'
            payload: {
                option: string
            }
        }
        toggleDateOptionsSelector: () => {
            type: 'toggle date options selector (lib.components.DateFilter.RollingDateRangeFilterLogic)'
            payload: {
                value: true
            }
        }
        select: () => {
            type: 'select (lib.components.DateFilter.RollingDateRangeFilterLogic)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'increase counter (lib.components.DateFilter.RollingDateRangeFilterLogic)': 'increaseCounter'
        'decrease counter (lib.components.DateFilter.RollingDateRangeFilterLogic)': 'decreaseCounter'
        'set counter (lib.components.DateFilter.RollingDateRangeFilterLogic)': 'setCounter'
        'set date option (lib.components.DateFilter.RollingDateRangeFilterLogic)': 'setDateOption'
        'toggle date options selector (lib.components.DateFilter.RollingDateRangeFilterLogic)': 'toggleDateOptionsSelector'
        'select (lib.components.DateFilter.RollingDateRangeFilterLogic)': 'select'
    }
    actionTypes: {
        increaseCounter: 'increase counter (lib.components.DateFilter.RollingDateRangeFilterLogic)'
        decreaseCounter: 'decrease counter (lib.components.DateFilter.RollingDateRangeFilterLogic)'
        setCounter: 'set counter (lib.components.DateFilter.RollingDateRangeFilterLogic)'
        setDateOption: 'set date option (lib.components.DateFilter.RollingDateRangeFilterLogic)'
        toggleDateOptionsSelector: 'toggle date options selector (lib.components.DateFilter.RollingDateRangeFilterLogic)'
        select: 'select (lib.components.DateFilter.RollingDateRangeFilterLogic)'
    }
    actions: {
        increaseCounter: () => void
        decreaseCounter: () => void
        setCounter: (counter: number | null | undefined) => void
        setDateOption: (option: string) => void
        toggleDateOptionsSelector: () => void
        select: () => void
    }
    asyncActions: {
        increaseCounter: () => Promise<any>
        decreaseCounter: () => Promise<any>
        setCounter: (counter: number | null | undefined) => Promise<any>
        setDateOption: (option: string) => Promise<any>
        toggleDateOptionsSelector: () => Promise<any>
        select: () => Promise<any>
    }
    defaults: {
        counter: number | null
        dateOption: string
        isDateOptionsSelectorOpen: boolean
    }
    events: {}
    key: undefined
    listeners: {
        select: ((
            action: {
                type: 'select (lib.components.DateFilter.RollingDateRangeFilterLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'DateFilter', 'RollingDateRangeFilterLogic']
    pathString: 'lib.components.DateFilter.RollingDateRangeFilterLogic'
    props: RollingDateFilterLogicPropsType
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        counter: number | null
        dateOption: string
        isDateOptionsSelectorOpen: boolean
    }
    reducers: {
        counter: (state: number | null, action: any, fullState: any) => number | null
        dateOption: (state: string, action: any, fullState: any) => string
        isDateOptionsSelectorOpen: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        counter: number | null
        dateOption: string
        isDateOptionsSelectorOpen: boolean
    }
    selectors: {
        counter: (state: any, props?: any) => number | null
        dateOption: (state: any, props?: any) => string
        isDateOptionsSelectorOpen: (state: any, props?: any) => boolean
        value: (state: any, props?: any) => string
        formattedDate: (state: any, props?: any) => string | null
    }
    sharedListeners: {}
    values: {
        counter: number | null
        dateOption: string
        isDateOptionsSelectorOpen: boolean
        value: string
        formattedDate: string | null
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        value: (counter: number | null, dateOption: string) => string
        formattedDate: (value: string) => string | null
    }
}
