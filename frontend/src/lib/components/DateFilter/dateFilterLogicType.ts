// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:20 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DateFilterLogicProps, DateFilterView } from './types'
import type { Dayjs } from '../../dayjs'
import type { DateMappingOption } from '../../../types'

export interface dateFilterLogicType extends Logic {
    actionCreators: {
        open: () => {
            type: 'open (lib.components.DateFilter.DateFilterLogic)'
            payload: {
                value: true
            }
        }
        openFixedRange: () => {
            type: 'open fixed range (lib.components.DateFilter.DateFilterLogic)'
            payload: {
                value: true
            }
        }
        openDateToNow: () => {
            type: 'open date to now (lib.components.DateFilter.DateFilterLogic)'
            payload: {
                value: true
            }
        }
        close: () => {
            type: 'close (lib.components.DateFilter.DateFilterLogic)'
            payload: {
                value: true
            }
        }
        applyRange: () => {
            type: 'apply range (lib.components.DateFilter.DateFilterLogic)'
            payload: {
                value: true
            }
        }
        setDate: (
            dateFrom: string | null,
            dateTo: string | null
        ) => {
            type: 'set date (lib.components.DateFilter.DateFilterLogic)'
            payload: {
                dateFrom: string | null
                dateTo: string | null
            }
        }
        setRangeDateFrom: (range: Dayjs | null) => {
            type: 'set range date from (lib.components.DateFilter.DateFilterLogic)'
            payload: {
                range: Dayjs | null
            }
        }
        setRangeDateTo: (range: Dayjs | null) => {
            type: 'set range date to (lib.components.DateFilter.DateFilterLogic)'
            payload: {
                range: Dayjs | null
            }
        }
    }
    actionKeys: {
        'open (lib.components.DateFilter.DateFilterLogic)': 'open'
        'open fixed range (lib.components.DateFilter.DateFilterLogic)': 'openFixedRange'
        'open date to now (lib.components.DateFilter.DateFilterLogic)': 'openDateToNow'
        'close (lib.components.DateFilter.DateFilterLogic)': 'close'
        'apply range (lib.components.DateFilter.DateFilterLogic)': 'applyRange'
        'set date (lib.components.DateFilter.DateFilterLogic)': 'setDate'
        'set range date from (lib.components.DateFilter.DateFilterLogic)': 'setRangeDateFrom'
        'set range date to (lib.components.DateFilter.DateFilterLogic)': 'setRangeDateTo'
    }
    actionTypes: {
        open: 'open (lib.components.DateFilter.DateFilterLogic)'
        openFixedRange: 'open fixed range (lib.components.DateFilter.DateFilterLogic)'
        openDateToNow: 'open date to now (lib.components.DateFilter.DateFilterLogic)'
        close: 'close (lib.components.DateFilter.DateFilterLogic)'
        applyRange: 'apply range (lib.components.DateFilter.DateFilterLogic)'
        setDate: 'set date (lib.components.DateFilter.DateFilterLogic)'
        setRangeDateFrom: 'set range date from (lib.components.DateFilter.DateFilterLogic)'
        setRangeDateTo: 'set range date to (lib.components.DateFilter.DateFilterLogic)'
    }
    actions: {
        open: () => void
        openFixedRange: () => void
        openDateToNow: () => void
        close: () => void
        applyRange: () => void
        setDate: (dateFrom: string | null, dateTo: string | null) => void
        setRangeDateFrom: (range: Dayjs | null) => void
        setRangeDateTo: (range: Dayjs | null) => void
    }
    asyncActions: {
        open: () => Promise<any>
        openFixedRange: () => Promise<any>
        openDateToNow: () => Promise<any>
        close: () => Promise<any>
        applyRange: () => Promise<any>
        setDate: (dateFrom: string | null, dateTo: string | null) => Promise<any>
        setRangeDateFrom: (range: Dayjs | null) => Promise<any>
        setRangeDateTo: (range: Dayjs | null) => Promise<any>
    }
    defaults: {
        view: DateFilterView
        isVisible: boolean
        rangeDateFrom: Dayjs | null
        rangeDateTo: Dayjs | null
    }
    events: {}
    key: string
    listeners: {
        applyRange: ((
            action: {
                type: 'apply range (lib.components.DateFilter.DateFilterLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setDate: ((
            action: {
                type: 'set date (lib.components.DateFilter.DateFilterLogic)'
                payload: {
                    dateFrom: string | null
                    dateTo: string | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'DateFilter', 'DateFilterLogic']
    pathString: 'lib.components.DateFilter.DateFilterLogic'
    props: DateFilterLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        view: DateFilterView
        isVisible: boolean
        rangeDateFrom: Dayjs | null
        rangeDateTo: Dayjs | null
    }
    reducers: {
        view: (state: DateFilterView, action: any, fullState: any) => DateFilterView
        isVisible: (state: boolean, action: any, fullState: any) => boolean
        rangeDateFrom: (state: Dayjs | null, action: any, fullState: any) => Dayjs | null
        rangeDateTo: (state: Dayjs | null, action: any, fullState: any) => Dayjs | null
    }
    selector: (state: any) => {
        view: DateFilterView
        isVisible: boolean
        rangeDateFrom: Dayjs | null
        rangeDateTo: Dayjs | null
    }
    selectors: {
        view: (state: any, props?: any) => DateFilterView
        isVisible: (state: any, props?: any) => boolean
        rangeDateFrom: (state: any, props?: any) => Dayjs | null
        rangeDateTo: (state: any, props?: any) => Dayjs | null
        dateFrom: (state: any, props?: any) => any
        dateTo: (state: any, props?: any) => any
        dateOptions: (state: any, props?: any) => DateMappingOption[] | undefined
        isFixedRange: (state: any, props?: any) => boolean
        isDateToNow: (state: any, props?: any) => boolean
        isRollingDateRange: (state: any, props?: any) => boolean
        label: (state: any, props?: any) => string | null
    }
    sharedListeners: {}
    values: {
        view: DateFilterView
        isVisible: boolean
        rangeDateFrom: Dayjs | null
        rangeDateTo: Dayjs | null
        dateFrom: any
        dateTo: any
        dateOptions: DateMappingOption[] | undefined
        isFixedRange: boolean
        isDateToNow: boolean
        isRollingDateRange: boolean
        label: string | null
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        dateFrom: (arg: any) => any
        dateTo: (arg: any) => any
        dateOptions: (arg: any) => DateMappingOption[] | undefined
        isFixedRange: (dateFrom: any, dateTo: any) => boolean
        isDateToNow: (dateFrom: any, dateTo: any) => boolean
        isRollingDateRange: (
            isFixedRange: boolean,
            isDateToNow: boolean,
            dateOptions: DateMappingOption[] | undefined,
            dateFrom: any,
            dateTo: any
        ) => boolean
        label: (
            dateFrom: any,
            dateTo: any,
            isFixedRange: boolean,
            isDateToNow: boolean,
            dateOptions: DateMappingOption[] | undefined
        ) => string | null
    }
}
