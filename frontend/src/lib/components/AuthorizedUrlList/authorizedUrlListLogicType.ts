// Generated by kea-typegen on Thu, 20 Jul 2023 11:18:06 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic, BreakPointFunction } from 'kea'

import type { AuthorizedUrlListLogicProps, AuthorizedUrlListType, KeyedAppUrl, ProposeNewUrlFormType } from './authorizedUrlListLogic'
import type { TeamPublicType, TeamType } from '../../../types'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../../node_modules/kea-forms'

export interface authorizedUrlListLogicType extends Logic {
    actionCreators: {
        updateCurrentTeam: (payload: Partial<TeamType>) => {
            type: 'update current team (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: Partial<TeamType>
        }
        setAuthorizedUrls: (authorizedUrls: string[]) => {
            type: 'set authorized urls (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                authorizedUrls: string[]
            }
        }
        addUrl: (
            url: string,
            launch?: boolean
        ) => {
            type: 'add url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                url: string
                launch: boolean | undefined
            }
        }
        newUrl: () => {
            type: 'new url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                value: true
            }
        }
        removeUrl: (index: number) => {
            type: 'remove url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                index: number
            }
        }
        updateUrl: (
            index: number,
            url: string
        ) => {
            type: 'update url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                index: number
                url: string
            }
        }
        launchAtUrl: (url: string) => {
            type: 'launch at url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                url: string
            }
        }
        setSearchTerm: (term: string) => {
            type: 'set search term (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                term: string
            }
        }
        setEditUrlIndex: (originalIndex: number | null) => {
            type: 'set edit url index (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                originalIndex: number | null
            }
        }
        cancelProposingUrl: () => {
            type: 'cancel proposing url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                value: true
            }
        }
        loadSuggestions: () => {
            type: 'load suggestions (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: any
        }
        loadSuggestionsSuccess: (
            suggestions: string[],
            payload?: any
        ) => {
            type: 'load suggestions success (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                suggestions: string[]
                payload?: any
            }
        }
        loadSuggestionsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load suggestions failure (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setProposedUrlValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set proposed url value (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setProposedUrlValues: (values: DeepPartial<ProposeNewUrlFormType>) => {
            type: 'set proposed url values (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                values: DeepPartial<ProposeNewUrlFormType>
            }
        }
        setProposedUrlManualErrors: (errors: Record<string, any>) => {
            type: 'set proposed url manual errors (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchProposedUrlField: (key: string) => {
            type: 'touch proposed url field (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                key: string
            }
        }
        resetProposedUrl: (values?: ProposeNewUrlFormType) => {
            type: 'reset proposed url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                values?: ProposeNewUrlFormType
            }
        }
        submitProposedUrl: () => {
            type: 'submit proposed url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                value: boolean
            }
        }
        submitProposedUrlRequest: (proposedUrl: ProposeNewUrlFormType) => {
            type: 'submit proposed url request (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                proposedUrl: ProposeNewUrlFormType
            }
        }
        submitProposedUrlSuccess: (proposedUrl: ProposeNewUrlFormType) => {
            type: 'submit proposed url success (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                proposedUrl: ProposeNewUrlFormType
            }
        }
        submitProposedUrlFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit proposed url failure (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'update current team (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'updateCurrentTeam'
        'set authorized urls (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'setAuthorizedUrls'
        'add url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'addUrl'
        'new url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'newUrl'
        'remove url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'removeUrl'
        'update url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'updateUrl'
        'launch at url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'launchAtUrl'
        'set search term (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'setSearchTerm'
        'set edit url index (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'setEditUrlIndex'
        'cancel proposing url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'cancelProposingUrl'
        'load suggestions (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'loadSuggestions'
        'load suggestions success (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'loadSuggestionsSuccess'
        'load suggestions failure (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'loadSuggestionsFailure'
        'set proposed url value (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'setProposedUrlValue'
        'set proposed url values (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'setProposedUrlValues'
        'set proposed url manual errors (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'setProposedUrlManualErrors'
        'touch proposed url field (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'touchProposedUrlField'
        'reset proposed url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'resetProposedUrl'
        'submit proposed url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'submitProposedUrl'
        'submit proposed url request (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'submitProposedUrlRequest'
        'submit proposed url success (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'submitProposedUrlSuccess'
        'submit proposed url failure (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)': 'submitProposedUrlFailure'
    }
    actionTypes: {
        updateCurrentTeam: 'update current team (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        setAuthorizedUrls: 'set authorized urls (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        addUrl: 'add url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        newUrl: 'new url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        removeUrl: 'remove url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        updateUrl: 'update url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        launchAtUrl: 'launch at url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        setSearchTerm: 'set search term (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        setEditUrlIndex: 'set edit url index (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        cancelProposingUrl: 'cancel proposing url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        loadSuggestions: 'load suggestions (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        loadSuggestionsSuccess: 'load suggestions success (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        loadSuggestionsFailure: 'load suggestions failure (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        setProposedUrlValue: 'set proposed url value (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        setProposedUrlValues: 'set proposed url values (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        setProposedUrlManualErrors: 'set proposed url manual errors (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        touchProposedUrlField: 'touch proposed url field (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        resetProposedUrl: 'reset proposed url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        submitProposedUrl: 'submit proposed url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        submitProposedUrlRequest: 'submit proposed url request (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        submitProposedUrlSuccess: 'submit proposed url success (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
        submitProposedUrlFailure: 'submit proposed url failure (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
    }
    actions: {
        updateCurrentTeam: (payload: Partial<TeamType>) => void
        setAuthorizedUrls: (authorizedUrls: string[]) => void
        addUrl: (url: string, launch?: boolean) => void
        newUrl: () => void
        removeUrl: (index: number) => void
        updateUrl: (index: number, url: string) => void
        launchAtUrl: (url: string) => void
        setSearchTerm: (term: string) => void
        setEditUrlIndex: (originalIndex: number | null) => void
        cancelProposingUrl: () => void
        loadSuggestions: () => void
        loadSuggestionsSuccess: (suggestions: string[], payload?: any) => void
        loadSuggestionsFailure: (error: string, errorObject?: any) => void
        setProposedUrlValue: (key: FieldName, value: any) => void
        setProposedUrlValues: (values: DeepPartial<ProposeNewUrlFormType>) => void
        setProposedUrlManualErrors: (errors: Record<string, any>) => void
        touchProposedUrlField: (key: string) => void
        resetProposedUrl: (values?: ProposeNewUrlFormType) => void
        submitProposedUrl: () => void
        submitProposedUrlRequest: (proposedUrl: ProposeNewUrlFormType) => void
        submitProposedUrlSuccess: (proposedUrl: ProposeNewUrlFormType) => void
        submitProposedUrlFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        updateCurrentTeam: (payload: Partial<TeamType>) => Promise<any>
        setAuthorizedUrls: (authorizedUrls: string[]) => Promise<any>
        addUrl: (url: string, launch?: boolean) => Promise<any>
        newUrl: () => Promise<any>
        removeUrl: (index: number) => Promise<any>
        updateUrl: (index: number, url: string) => Promise<any>
        launchAtUrl: (url: string) => Promise<any>
        setSearchTerm: (term: string) => Promise<any>
        setEditUrlIndex: (originalIndex: number | null) => Promise<any>
        cancelProposingUrl: () => Promise<any>
        loadSuggestions: () => Promise<any>
        loadSuggestionsSuccess: (suggestions: string[], payload?: any) => Promise<any>
        loadSuggestionsFailure: (error: string, errorObject?: any) => Promise<any>
        setProposedUrlValue: (key: FieldName, value: any) => Promise<any>
        setProposedUrlValues: (values: DeepPartial<ProposeNewUrlFormType>) => Promise<any>
        setProposedUrlManualErrors: (errors: Record<string, any>) => Promise<any>
        touchProposedUrlField: (key: string) => Promise<any>
        resetProposedUrl: (values?: ProposeNewUrlFormType) => Promise<any>
        submitProposedUrl: () => Promise<any>
        submitProposedUrlRequest: (proposedUrl: ProposeNewUrlFormType) => Promise<any>
        submitProposedUrlSuccess: (proposedUrl: ProposeNewUrlFormType) => Promise<any>
        submitProposedUrlFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        suggestions: any[]
        suggestionsLoading: boolean
        proposedUrl: ProposeNewUrlFormType
        isProposedUrlSubmitting: boolean
        showProposedUrlErrors: boolean
        proposedUrlChanged: boolean
        proposedUrlTouches: Record<string, boolean>
        proposedUrlManualErrors: Record<string, any>
        showProposedURLForm: boolean
        authorizedUrls: string[]
        searchTerm: string
        editUrlIndex: number | null
    }
    events: {}
    key: string
    listeners: {
        setEditUrlIndex: ((
            action: {
                type: 'set edit url index (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
                payload: {
                    originalIndex: number | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        newUrl: ((
            action: {
                type: 'new url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        addUrl: ((
            action: {
                type: 'add url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
                payload: {
                    url: string
                    launch: boolean | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        removeUrl: ((
            action: {
                type: 'remove url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
                payload: {
                    index: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateUrl: ((
            action: {
                type: 'update url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
                payload: {
                    index: number
                    url: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        launchAtUrl: ((
            action: {
                type: 'launch at url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
                payload: {
                    url: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        cancelProposingUrl: ((
            action: {
                type: 'cancel proposing url (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        submitProposedUrlSuccess: ((
            action: {
                type: 'submit proposed url success (lib.components.AuthorizedUrlList.authorizedUrlListLogic.*)'
                payload: {
                    proposedUrl: ProposeNewUrlFormType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'AuthorizedUrlList', 'authorizedUrlListLogic', '*']
    pathString: 'lib.components.AuthorizedUrlList.authorizedUrlListLogic.*'
    props: AuthorizedUrlListLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        suggestions: any[]
        suggestionsLoading: boolean
        proposedUrl: ProposeNewUrlFormType
        isProposedUrlSubmitting: boolean
        showProposedUrlErrors: boolean
        proposedUrlChanged: boolean
        proposedUrlTouches: Record<string, boolean>
        proposedUrlManualErrors: Record<string, any>
        showProposedURLForm: boolean
        authorizedUrls: string[]
        searchTerm: string
        editUrlIndex: number | null
    }
    reducers: {
        suggestions: (state: any[], action: any, fullState: any) => any[]
        suggestionsLoading: (state: boolean, action: any, fullState: any) => boolean
        proposedUrl: (state: ProposeNewUrlFormType, action: any, fullState: any) => ProposeNewUrlFormType
        isProposedUrlSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showProposedUrlErrors: (state: boolean, action: any, fullState: any) => boolean
        proposedUrlChanged: (state: boolean, action: any, fullState: any) => boolean
        proposedUrlTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        proposedUrlManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
        showProposedURLForm: (state: boolean, action: any, fullState: any) => boolean
        authorizedUrls: (state: string[], action: any, fullState: any) => string[]
        searchTerm: (state: string, action: any, fullState: any) => string
        editUrlIndex: (state: number | null, action: any, fullState: any) => number | null
    }
    selector: (state: any) => {
        suggestions: any[]
        suggestionsLoading: boolean
        proposedUrl: ProposeNewUrlFormType
        isProposedUrlSubmitting: boolean
        showProposedUrlErrors: boolean
        proposedUrlChanged: boolean
        proposedUrlTouches: Record<string, boolean>
        proposedUrlManualErrors: Record<string, any>
        showProposedURLForm: boolean
        authorizedUrls: string[]
        searchTerm: string
        editUrlIndex: number | null
    }
    selectors: {
        suggestions: (state: any, props?: any) => any[]
        suggestionsLoading: (state: any, props?: any) => boolean
        proposedUrl: (state: any, props?: any) => ProposeNewUrlFormType
        isProposedUrlSubmitting: (state: any, props?: any) => boolean
        showProposedUrlErrors: (state: any, props?: any) => boolean
        proposedUrlChanged: (state: any, props?: any) => boolean
        proposedUrlTouches: (state: any, props?: any) => Record<string, boolean>
        proposedUrlManualErrors: (state: any, props?: any) => Record<string, any>
        showProposedURLForm: (state: any, props?: any) => boolean
        authorizedUrls: (state: any, props?: any) => string[]
        searchTerm: (state: any, props?: any) => string
        editUrlIndex: (state: any, props?: any) => number | null
        currentTeam: (state: any, props?: any) => TeamType | TeamPublicType | null
        currentTeamId: (state: any, props?: any) => number | null
        proposedUrlTouched: (state: any, props?: any) => boolean
        proposedUrlValidationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<ProposeNewUrlFormType, ValidationErrorType>
        proposedUrlAllErrors: (state: any, props?: any) => Record<string, any>
        proposedUrlHasErrors: (state: any, props?: any) => boolean
        proposedUrlErrors: (state: any, props?: any) => DeepPartialMap<ProposeNewUrlFormType, ValidationErrorType>
        isProposedUrlValid: (state: any, props?: any) => boolean
        urlToEdit: (state: any, props?: any) => string
        urlsKeyed: (state: any, props?: any) => KeyedAppUrl[]
        launchUrl: (state: any, props?: any) => (url: string) => string
        isAddUrlFormVisible: (state: any, props?: any) => boolean
        onlyAllowDomains: (state: any, props?: any) => boolean
    }
    sharedListeners: {
        saveUrls: (
            payload: any,
            breakpoint: BreakPointFunction,
            action: {
                type: string
                payload: any
            },
            previousState: any
        ) => void | Promise<void>
    }
    values: {
        suggestions: any[]
        suggestionsLoading: boolean
        proposedUrl: ProposeNewUrlFormType
        isProposedUrlSubmitting: boolean
        showProposedUrlErrors: boolean
        proposedUrlChanged: boolean
        proposedUrlTouches: Record<string, boolean>
        proposedUrlManualErrors: Record<string, any>
        showProposedURLForm: boolean
        authorizedUrls: string[]
        searchTerm: string
        editUrlIndex: number | null
        currentTeam: TeamType | TeamPublicType | null
        currentTeamId: number | null
        proposedUrlTouched: boolean
        proposedUrlValidationErrors: DeepPartialMap<ProposeNewUrlFormType, ValidationErrorType>
        proposedUrlAllErrors: Record<string, any>
        proposedUrlHasErrors: boolean
        proposedUrlErrors: DeepPartialMap<ProposeNewUrlFormType, ValidationErrorType>
        isProposedUrlValid: boolean
        urlToEdit: string
        urlsKeyed: KeyedAppUrl[]
        launchUrl: (url: string) => string
        isAddUrlFormVisible: boolean
        onlyAllowDomains: boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        urlToEdit: (authorizedUrls: string[], editUrlIndex: number | null) => string
        urlsKeyed: (authorizedUrls: string[], suggestions: any[], searchTerm: string) => KeyedAppUrl[]
        launchUrl: (actionId: number | null) => (url: string) => string
        isAddUrlFormVisible: (editUrlIndex: number | null) => boolean
        onlyAllowDomains: (type: AuthorizedUrlListType) => boolean
    }
}
