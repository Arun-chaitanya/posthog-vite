// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:58 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PropertyGroupFilterLogicProps } from '../PropertyFilters/types'
import type { FilterLogicalOperator, PropertyGroupFilter } from '../../../types'

export interface propertyGroupFilterLogicType extends Logic {
    actionCreators: {
        update: (propertyGroupIndex?: number) => {
            type: 'update (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
            payload: {
                propertyGroupIndex: number | undefined
            }
        }
        setFilters: (filters: PropertyGroupFilter) => {
            type: 'set filters (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
            payload: {
                filters: PropertyGroupFilter
            }
        }
        removeFilterGroup: (filterGroup: number) => {
            type: 'remove filter group (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
            payload: {
                filterGroup: number
            }
        }
        setOuterPropertyGroupsType: (type: FilterLogicalOperator) => {
            type: 'set outer property groups type (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
            payload: {
                type: FilterLogicalOperator
            }
        }
        setPropertyFilters: (
            properties: any,
            index: number
        ) => {
            type: 'set property filters (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
            payload: {
                properties: any
                index: number
            }
        }
        setInnerPropertyGroupType: (
            type: FilterLogicalOperator,
            index: number
        ) => {
            type: 'set inner property group type (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
            payload: {
                type: FilterLogicalOperator
                index: number
            }
        }
        duplicateFilterGroup: (propertyGroupIndex: number) => {
            type: 'duplicate filter group (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
            payload: {
                propertyGroupIndex: number
            }
        }
        addFilterGroup: () => {
            type: 'add filter group (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'update (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)': 'update'
        'set filters (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)': 'setFilters'
        'remove filter group (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)': 'removeFilterGroup'
        'set outer property groups type (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)': 'setOuterPropertyGroupsType'
        'set property filters (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)': 'setPropertyFilters'
        'set inner property group type (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)': 'setInnerPropertyGroupType'
        'duplicate filter group (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)': 'duplicateFilterGroup'
        'add filter group (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)': 'addFilterGroup'
    }
    actionTypes: {
        update: 'update (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
        setFilters: 'set filters (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
        removeFilterGroup: 'remove filter group (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
        setOuterPropertyGroupsType: 'set outer property groups type (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
        setPropertyFilters: 'set property filters (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
        setInnerPropertyGroupType: 'set inner property group type (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
        duplicateFilterGroup: 'duplicate filter group (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
        addFilterGroup: 'add filter group (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
    }
    actions: {
        update: (propertyGroupIndex?: number) => void
        setFilters: (filters: PropertyGroupFilter) => void
        removeFilterGroup: (filterGroup: number) => void
        setOuterPropertyGroupsType: (type: FilterLogicalOperator) => void
        setPropertyFilters: (properties: any, index: number) => void
        setInnerPropertyGroupType: (type: FilterLogicalOperator, index: number) => void
        duplicateFilterGroup: (propertyGroupIndex: number) => void
        addFilterGroup: () => void
    }
    asyncActions: {
        update: (propertyGroupIndex?: number) => Promise<any>
        setFilters: (filters: PropertyGroupFilter) => Promise<any>
        removeFilterGroup: (filterGroup: number) => Promise<any>
        setOuterPropertyGroupsType: (type: FilterLogicalOperator) => Promise<any>
        setPropertyFilters: (properties: any, index: number) => Promise<any>
        setInnerPropertyGroupType: (type: FilterLogicalOperator, index: number) => Promise<any>
        duplicateFilterGroup: (propertyGroupIndex: number) => Promise<any>
        addFilterGroup: () => Promise<any>
    }
    defaults: {
        filters: PropertyGroupFilter
    }
    events: {}
    key: string
    listeners: {
        setFilters: ((
            action: {
                type: 'set filters (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
                payload: {
                    filters: PropertyGroupFilter
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setPropertyFilters: ((
            action: {
                type: 'set property filters (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
                payload: {
                    properties: any
                    index: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setInnerPropertyGroupType: ((
            action: {
                type: 'set inner property group type (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
                payload: {
                    type: FilterLogicalOperator
                    index: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setOuterPropertyGroupsType: ((
            action: {
                type: 'set outer property groups type (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
                payload: {
                    type: FilterLogicalOperator
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        removeFilterGroup: ((
            action: {
                type: 'remove filter group (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
                payload: {
                    filterGroup: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        addFilterGroup: ((
            action: {
                type: 'add filter group (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        update: ((
            action: {
                type: 'update (lib.components.PropertyGroupFilters.propertyGroupFilterLogic)'
                payload: {
                    propertyGroupIndex: number | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'PropertyGroupFilters', 'propertyGroupFilterLogic']
    pathString: 'lib.components.PropertyGroupFilters.propertyGroupFilterLogic'
    props: PropertyGroupFilterLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        filters: PropertyGroupFilter
    }
    reducers: {
        filters: (state: PropertyGroupFilter, action: any, fullState: any) => PropertyGroupFilter
    }
    selector: (state: any) => {
        filters: PropertyGroupFilter
    }
    selectors: {
        filters: (state: any, props?: any) => PropertyGroupFilter
        propertyGroupFilter: (state: any, props?: any) => PropertyGroupFilter
    }
    sharedListeners: {}
    values: {
        filters: PropertyGroupFilter
        propertyGroupFilter: PropertyGroupFilter
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        propertyGroupFilter: (filters: PropertyGroupFilter) => PropertyGroupFilter
    }
}
