// Generated by kea-typegen on Thu, 27 Jul 2023 19:37:19 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Query } from './DebugCHQueries'

export interface debugCHQueriesLogicType extends Logic {
    actionCreators: {
        setPathFilter: (path: string | null) => {
            type: 'set path filter (lib.components.CommandPalette.DebugCHQueries)'
            payload: {
                path: string | null
            }
        }
        loadQueries: () => {
            type: 'load queries (lib.components.CommandPalette.DebugCHQueries)'
            payload: any
        }
        loadQueriesSuccess: (
            queries: Query[],
            payload?: any
        ) => {
            type: 'load queries success (lib.components.CommandPalette.DebugCHQueries)'
            payload: {
                queries: Query[]
                payload?: any
            }
        }
        loadQueriesFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load queries failure (lib.components.CommandPalette.DebugCHQueries)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set path filter (lib.components.CommandPalette.DebugCHQueries)': 'setPathFilter'
        'load queries (lib.components.CommandPalette.DebugCHQueries)': 'loadQueries'
        'load queries success (lib.components.CommandPalette.DebugCHQueries)': 'loadQueriesSuccess'
        'load queries failure (lib.components.CommandPalette.DebugCHQueries)': 'loadQueriesFailure'
    }
    actionTypes: {
        setPathFilter: 'set path filter (lib.components.CommandPalette.DebugCHQueries)'
        loadQueries: 'load queries (lib.components.CommandPalette.DebugCHQueries)'
        loadQueriesSuccess: 'load queries success (lib.components.CommandPalette.DebugCHQueries)'
        loadQueriesFailure: 'load queries failure (lib.components.CommandPalette.DebugCHQueries)'
    }
    actions: {
        setPathFilter: (path: string | null) => void
        loadQueries: () => void
        loadQueriesSuccess: (queries: Query[], payload?: any) => void
        loadQueriesFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setPathFilter: (path: string | null) => Promise<any>
        loadQueries: () => Promise<any>
        loadQueriesSuccess: (queries: Query[], payload?: any) => Promise<any>
        loadQueriesFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        pathFilter: string | null
        queries: Query[]
        queriesLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['lib', 'components', 'CommandPalette', 'DebugCHQueries']
    pathString: 'lib.components.CommandPalette.DebugCHQueries'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        pathFilter: string | null
        queries: Query[]
        queriesLoading: boolean
    }
    reducers: {
        pathFilter: (state: string | null, action: any, fullState: any) => string | null
        queries: (state: Query[], action: any, fullState: any) => Query[]
        queriesLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        pathFilter: string | null
        queries: Query[]
        queriesLoading: boolean
    }
    selectors: {
        pathFilter: (state: any, props?: any) => string | null
        queries: (state: any, props?: any) => Query[]
        queriesLoading: (state: any, props?: any) => boolean
        paths: (state: any, props?: any) => [string, unknown][] | null
        filteredQueries: (state: any, props?: any) => Query[]
    }
    sharedListeners: {}
    values: {
        pathFilter: string | null
        queries: Query[]
        queriesLoading: boolean
        paths: [string, unknown][] | null
        filteredQueries: Query[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        paths: (queries: Query[]) => [string, unknown][] | null
        filteredQueries: (queries: Query[], pathFilter: string | null) => Query[]
    }
}
