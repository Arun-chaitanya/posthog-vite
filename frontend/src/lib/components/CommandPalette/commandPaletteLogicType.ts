// Generated by kea-typegen on Wed, 02 Aug 2023 17:21:43 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DashboardType, TeamPublicType, TeamType, UserType } from '../../../types'
import type { Command, CommandFlow, CommandRegistrations, CommandResult, CommandResultDisplayable, RegExpCommandPairs } from './commandPaletteLogic'

export interface commandPaletteLogicType extends Logic {
    actionCreators: {
        createKey: (label: string) => {
            type: 'create key (lib.components.CommandPalette.commandPaletteLogic)'
            payload: string
        }
        push: (
            url: string,
            searchInput?: string | Record<string, any>,
            hashInput?: string | Record<string, any>
        ) => {
            type: 'push (lib.components.CommandPalette.commandPaletteLogic)'
            payload: {
                url: string
                searchInput: string | Record<string, any>
                hashInput: string | Record<string, any>
            }
        }
        hidePalette: () => {
            type: 'hide palette (lib.components.CommandPalette.commandPaletteLogic)'
            payload: {
                value: true
            }
        }
        showPalette: () => {
            type: 'show palette (lib.components.CommandPalette.commandPaletteLogic)'
            payload: {
                value: true
            }
        }
        togglePalette: () => {
            type: 'toggle palette (lib.components.CommandPalette.commandPaletteLogic)'
            payload: {
                value: true
            }
        }
        setInput: (input: string) => {
            type: 'set input (lib.components.CommandPalette.commandPaletteLogic)'
            payload: {
                input: string
            }
        }
        onArrowUp: () => {
            type: 'on arrow up (lib.components.CommandPalette.commandPaletteLogic)'
            payload: {
                value: true
            }
        }
        onArrowDown: (maxIndex: number) => {
            type: 'on arrow down (lib.components.CommandPalette.commandPaletteLogic)'
            payload: {
                maxIndex: number
            }
        }
        onMouseEnterResult: (index: number) => {
            type: 'on mouse enter result (lib.components.CommandPalette.commandPaletteLogic)'
            payload: {
                index: number
            }
        }
        onMouseLeaveResult: () => {
            type: 'on mouse leave result (lib.components.CommandPalette.commandPaletteLogic)'
            payload: {
                value: true
            }
        }
        executeResult: (result: CommandResult) => {
            type: 'execute result (lib.components.CommandPalette.commandPaletteLogic)'
            payload: {
                result: CommandResult
            }
        }
        activateFlow: (flow: CommandFlow | null) => {
            type: 'activate flow (lib.components.CommandPalette.commandPaletteLogic)'
            payload: {
                flow: CommandFlow | null
            }
        }
        backFlow: () => {
            type: 'back flow (lib.components.CommandPalette.commandPaletteLogic)'
            payload: {
                value: true
            }
        }
        registerCommand: (command: Command) => {
            type: 'register command (lib.components.CommandPalette.commandPaletteLogic)'
            payload: {
                command: Command
            }
        }
        deregisterCommand: (commandKey: string) => {
            type: 'deregister command (lib.components.CommandPalette.commandPaletteLogic)'
            payload: {
                commandKey: string
            }
        }
        setCustomCommand: (commandKey: string) => {
            type: 'set custom command (lib.components.CommandPalette.commandPaletteLogic)'
            payload: {
                commandKey: string
            }
        }
        deregisterScope: (scope: string) => {
            type: 'deregister scope (lib.components.CommandPalette.commandPaletteLogic)'
            payload: {
                scope: string
            }
        }
    }
    actionKeys: {
        'create key (lib.components.CommandPalette.commandPaletteLogic)': 'createKey'
        'push (lib.components.CommandPalette.commandPaletteLogic)': 'push'
        'hide palette (lib.components.CommandPalette.commandPaletteLogic)': 'hidePalette'
        'show palette (lib.components.CommandPalette.commandPaletteLogic)': 'showPalette'
        'toggle palette (lib.components.CommandPalette.commandPaletteLogic)': 'togglePalette'
        'set input (lib.components.CommandPalette.commandPaletteLogic)': 'setInput'
        'on arrow up (lib.components.CommandPalette.commandPaletteLogic)': 'onArrowUp'
        'on arrow down (lib.components.CommandPalette.commandPaletteLogic)': 'onArrowDown'
        'on mouse enter result (lib.components.CommandPalette.commandPaletteLogic)': 'onMouseEnterResult'
        'on mouse leave result (lib.components.CommandPalette.commandPaletteLogic)': 'onMouseLeaveResult'
        'execute result (lib.components.CommandPalette.commandPaletteLogic)': 'executeResult'
        'activate flow (lib.components.CommandPalette.commandPaletteLogic)': 'activateFlow'
        'back flow (lib.components.CommandPalette.commandPaletteLogic)': 'backFlow'
        'register command (lib.components.CommandPalette.commandPaletteLogic)': 'registerCommand'
        'deregister command (lib.components.CommandPalette.commandPaletteLogic)': 'deregisterCommand'
        'set custom command (lib.components.CommandPalette.commandPaletteLogic)': 'setCustomCommand'
        'deregister scope (lib.components.CommandPalette.commandPaletteLogic)': 'deregisterScope'
    }
    actionTypes: {
        createKey: 'create key (lib.components.CommandPalette.commandPaletteLogic)'
        push: 'push (lib.components.CommandPalette.commandPaletteLogic)'
        hidePalette: 'hide palette (lib.components.CommandPalette.commandPaletteLogic)'
        showPalette: 'show palette (lib.components.CommandPalette.commandPaletteLogic)'
        togglePalette: 'toggle palette (lib.components.CommandPalette.commandPaletteLogic)'
        setInput: 'set input (lib.components.CommandPalette.commandPaletteLogic)'
        onArrowUp: 'on arrow up (lib.components.CommandPalette.commandPaletteLogic)'
        onArrowDown: 'on arrow down (lib.components.CommandPalette.commandPaletteLogic)'
        onMouseEnterResult: 'on mouse enter result (lib.components.CommandPalette.commandPaletteLogic)'
        onMouseLeaveResult: 'on mouse leave result (lib.components.CommandPalette.commandPaletteLogic)'
        executeResult: 'execute result (lib.components.CommandPalette.commandPaletteLogic)'
        activateFlow: 'activate flow (lib.components.CommandPalette.commandPaletteLogic)'
        backFlow: 'back flow (lib.components.CommandPalette.commandPaletteLogic)'
        registerCommand: 'register command (lib.components.CommandPalette.commandPaletteLogic)'
        deregisterCommand: 'deregister command (lib.components.CommandPalette.commandPaletteLogic)'
        setCustomCommand: 'set custom command (lib.components.CommandPalette.commandPaletteLogic)'
        deregisterScope: 'deregister scope (lib.components.CommandPalette.commandPaletteLogic)'
    }
    actions: {
        createKey: (label: string) => void
        push: (
            url: string,
            searchInput?: string | Record<string, any>,
            hashInput?: string | Record<string, any>
        ) => void
        hidePalette: () => void
        showPalette: () => void
        togglePalette: () => void
        setInput: (input: string) => void
        onArrowUp: () => void
        onArrowDown: (maxIndex: number) => void
        onMouseEnterResult: (index: number) => void
        onMouseLeaveResult: () => void
        executeResult: (result: CommandResult) => void
        activateFlow: (flow: CommandFlow | null) => void
        backFlow: () => void
        registerCommand: (command: Command) => void
        deregisterCommand: (commandKey: string) => void
        setCustomCommand: (commandKey: string) => void
        deregisterScope: (scope: string) => void
    }
    asyncActions: {
        createKey: (label: string) => Promise<any>
        push: (
            url: string,
            searchInput?: string | Record<string, any>,
            hashInput?: string | Record<string, any>
        ) => Promise<any>
        hidePalette: () => Promise<any>
        showPalette: () => Promise<any>
        togglePalette: () => Promise<any>
        setInput: (input: string) => Promise<any>
        onArrowUp: () => Promise<any>
        onArrowDown: (maxIndex: number) => Promise<any>
        onMouseEnterResult: (index: number) => Promise<any>
        onMouseLeaveResult: () => Promise<any>
        executeResult: (result: CommandResult) => Promise<any>
        activateFlow: (flow: CommandFlow | null) => Promise<any>
        backFlow: () => Promise<any>
        registerCommand: (command: Command) => Promise<any>
        deregisterCommand: (commandKey: string) => Promise<any>
        setCustomCommand: (commandKey: string) => Promise<any>
        deregisterScope: (scope: string) => Promise<any>
    }
    defaults: {
        isPaletteShown: boolean
        keyboardResultIndex: number
        hoverResultIndex: number | null
        input: string
        activeFlow: CommandFlow | null
        rawCommandRegistrations: CommandRegistrations
    }
    events: {
        afterMount: () => void
        beforeUnmount: () => void
    }
    key: undefined
    listeners: {
        showPalette: ((
            action: {
                type: 'show palette (lib.components.CommandPalette.commandPaletteLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        togglePalette: ((
            action: {
                type: 'toggle palette (lib.components.CommandPalette.commandPaletteLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        executeResult: ((
            action: {
                type: 'execute result (lib.components.CommandPalette.commandPaletteLogic)'
                payload: {
                    result: CommandResult
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        deregisterScope: ((
            action: {
                type: 'deregister scope (lib.components.CommandPalette.commandPaletteLogic)'
                payload: {
                    scope: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setInput: ((
            action: {
                type: 'set input (lib.components.CommandPalette.commandPaletteLogic)'
                payload: {
                    input: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'CommandPalette', 'commandPaletteLogic']
    pathString: 'lib.components.CommandPalette.commandPaletteLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        isPaletteShown: boolean
        keyboardResultIndex: number
        hoverResultIndex: number | null
        input: string
        activeFlow: CommandFlow | null
        rawCommandRegistrations: CommandRegistrations
    }
    reducers: {
        isPaletteShown: (state: boolean, action: any, fullState: any) => boolean
        keyboardResultIndex: (state: number, action: any, fullState: any) => number
        hoverResultIndex: (state: number | null, action: any, fullState: any) => number | null
        input: (state: string, action: any, fullState: any) => string
        activeFlow: (state: CommandFlow | null, action: any, fullState: any) => CommandFlow | null
        rawCommandRegistrations: (state: CommandRegistrations, action: any, fullState: any) => CommandRegistrations
    }
    selector: (state: any) => {
        isPaletteShown: boolean
        keyboardResultIndex: number
        hoverResultIndex: number | null
        input: string
        activeFlow: CommandFlow | null
        rawCommandRegistrations: CommandRegistrations
    }
    selectors: {
        isPaletteShown: (state: any, props?: any) => boolean
        keyboardResultIndex: (state: any, props?: any) => number
        hoverResultIndex: (state: any, props?: any) => number | null
        input: (state: any, props?: any) => string
        activeFlow: (state: any, props?: any) => CommandFlow | null
        rawCommandRegistrations: (state: any, props?: any) => CommandRegistrations
        currentTeam: (state: any, props?: any) => TeamType | TeamPublicType | null
        user: (state: any, props?: any) => UserType | null
        isSqueak: (state: any, props?: any) => boolean
        activeResultIndex: (state: any, props?: any) => number
        commandRegistrations: (state: any, props?: any) => CommandRegistrations
        regexpCommandPairs: (state: any, props?: any) => RegExpCommandPairs
        commandSearchResults: (state: any, props?: any) => CommandResult[]
        commandSearchResultsGrouped: (state: any, props?: any) => [string, CommandResultDisplayable[]][]
    }
    sharedListeners: {}
    values: {
        isPaletteShown: boolean
        keyboardResultIndex: number
        hoverResultIndex: number | null
        input: string
        activeFlow: CommandFlow | null
        rawCommandRegistrations: CommandRegistrations
        currentTeam: TeamType | TeamPublicType | null
        user: UserType | null
        isSqueak: boolean
        activeResultIndex: number
        commandRegistrations: CommandRegistrations
        regexpCommandPairs: RegExpCommandPairs
        commandSearchResults: CommandResult[]
        commandSearchResultsGrouped: [string, CommandResultDisplayable[]][]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        isSqueak: (input: string) => boolean
        activeResultIndex: (keyboardResultIndex: number, hoverResultIndex: number | null) => number
        commandRegistrations: (
            rawCommandRegistrations: CommandRegistrations,
            nameSortedDashboards: (
                | DashboardType
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').DashboardBasicType
            )[],
            currentTeam:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamType
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamPublicType
                | null
        ) => CommandRegistrations
        regexpCommandPairs: (commandRegistrations: CommandRegistrations) => RegExpCommandPairs
        commandSearchResults: (
            isPaletteShown: boolean,
            regexpCommandPairs: RegExpCommandPairs,
            input: string,
            activeFlow: CommandFlow | null,
            isSqueak: boolean
        ) => CommandResult[]
        commandSearchResultsGrouped: (
            commandSearchResults: CommandResult[],
            activeFlow: CommandFlow | null
        ) => [string, CommandResultDisplayable[]][]
    }
}
