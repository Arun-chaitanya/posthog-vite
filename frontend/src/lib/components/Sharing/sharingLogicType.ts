// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:50 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { EmbedConfig, SharingLogicProps } from './sharingLogic'
import type { SharingConfigurationType } from '../../../types'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../../node_modules/kea-forms'

export interface sharingLogicType extends Logic {
    actionCreators: {
        togglePreview: () => {
            type: 'toggle preview (lib.components.Sharing.sharingLogic)'
            payload: {
                value: true
            }
        }
        loadSharingConfiguration: () => {
            type: 'load sharing configuration (lib.components.Sharing.sharingLogic)'
            payload: any
        }
        loadSharingConfigurationSuccess: (
            sharingConfiguration: SharingConfigurationType | null,
            payload?: any
        ) => {
            type: 'load sharing configuration success (lib.components.Sharing.sharingLogic)'
            payload: {
                sharingConfiguration: SharingConfigurationType | null
                payload?: any
            }
        }
        loadSharingConfigurationFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load sharing configuration failure (lib.components.Sharing.sharingLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setIsEnabled: (enabled: boolean) => {
            type: 'set is enabled (lib.components.Sharing.sharingLogic)'
            payload: boolean
        }
        setIsEnabledSuccess: (
            sharingConfiguration: SharingConfigurationType | null,
            payload?: boolean
        ) => {
            type: 'set is enabled success (lib.components.Sharing.sharingLogic)'
            payload: {
                sharingConfiguration: SharingConfigurationType | null
                payload?: boolean
            }
        }
        setIsEnabledFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'set is enabled failure (lib.components.Sharing.sharingLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setEmbedConfigValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set embed config value (lib.components.Sharing.sharingLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setEmbedConfigValues: (values: DeepPartial<EmbedConfig>) => {
            type: 'set embed config values (lib.components.Sharing.sharingLogic)'
            payload: {
                values: DeepPartial<EmbedConfig>
            }
        }
        setEmbedConfigManualErrors: (errors: Record<string, any>) => {
            type: 'set embed config manual errors (lib.components.Sharing.sharingLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchEmbedConfigField: (key: string) => {
            type: 'touch embed config field (lib.components.Sharing.sharingLogic)'
            payload: {
                key: string
            }
        }
        resetEmbedConfig: (values?: EmbedConfig) => {
            type: 'reset embed config (lib.components.Sharing.sharingLogic)'
            payload: {
                values?: EmbedConfig
            }
        }
        submitEmbedConfig: () => {
            type: 'submit embed config (lib.components.Sharing.sharingLogic)'
            payload: {
                value: boolean
            }
        }
        submitEmbedConfigRequest: (embedConfig: EmbedConfig) => {
            type: 'submit embed config request (lib.components.Sharing.sharingLogic)'
            payload: {
                embedConfig: EmbedConfig
            }
        }
        submitEmbedConfigSuccess: (embedConfig: EmbedConfig) => {
            type: 'submit embed config success (lib.components.Sharing.sharingLogic)'
            payload: {
                embedConfig: EmbedConfig
            }
        }
        submitEmbedConfigFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit embed config failure (lib.components.Sharing.sharingLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'toggle preview (lib.components.Sharing.sharingLogic)': 'togglePreview'
        'load sharing configuration (lib.components.Sharing.sharingLogic)': 'loadSharingConfiguration'
        'load sharing configuration success (lib.components.Sharing.sharingLogic)': 'loadSharingConfigurationSuccess'
        'load sharing configuration failure (lib.components.Sharing.sharingLogic)': 'loadSharingConfigurationFailure'
        'set is enabled (lib.components.Sharing.sharingLogic)': 'setIsEnabled'
        'set is enabled success (lib.components.Sharing.sharingLogic)': 'setIsEnabledSuccess'
        'set is enabled failure (lib.components.Sharing.sharingLogic)': 'setIsEnabledFailure'
        'set embed config value (lib.components.Sharing.sharingLogic)': 'setEmbedConfigValue'
        'set embed config values (lib.components.Sharing.sharingLogic)': 'setEmbedConfigValues'
        'set embed config manual errors (lib.components.Sharing.sharingLogic)': 'setEmbedConfigManualErrors'
        'touch embed config field (lib.components.Sharing.sharingLogic)': 'touchEmbedConfigField'
        'reset embed config (lib.components.Sharing.sharingLogic)': 'resetEmbedConfig'
        'submit embed config (lib.components.Sharing.sharingLogic)': 'submitEmbedConfig'
        'submit embed config request (lib.components.Sharing.sharingLogic)': 'submitEmbedConfigRequest'
        'submit embed config success (lib.components.Sharing.sharingLogic)': 'submitEmbedConfigSuccess'
        'submit embed config failure (lib.components.Sharing.sharingLogic)': 'submitEmbedConfigFailure'
    }
    actionTypes: {
        togglePreview: 'toggle preview (lib.components.Sharing.sharingLogic)'
        loadSharingConfiguration: 'load sharing configuration (lib.components.Sharing.sharingLogic)'
        loadSharingConfigurationSuccess: 'load sharing configuration success (lib.components.Sharing.sharingLogic)'
        loadSharingConfigurationFailure: 'load sharing configuration failure (lib.components.Sharing.sharingLogic)'
        setIsEnabled: 'set is enabled (lib.components.Sharing.sharingLogic)'
        setIsEnabledSuccess: 'set is enabled success (lib.components.Sharing.sharingLogic)'
        setIsEnabledFailure: 'set is enabled failure (lib.components.Sharing.sharingLogic)'
        setEmbedConfigValue: 'set embed config value (lib.components.Sharing.sharingLogic)'
        setEmbedConfigValues: 'set embed config values (lib.components.Sharing.sharingLogic)'
        setEmbedConfigManualErrors: 'set embed config manual errors (lib.components.Sharing.sharingLogic)'
        touchEmbedConfigField: 'touch embed config field (lib.components.Sharing.sharingLogic)'
        resetEmbedConfig: 'reset embed config (lib.components.Sharing.sharingLogic)'
        submitEmbedConfig: 'submit embed config (lib.components.Sharing.sharingLogic)'
        submitEmbedConfigRequest: 'submit embed config request (lib.components.Sharing.sharingLogic)'
        submitEmbedConfigSuccess: 'submit embed config success (lib.components.Sharing.sharingLogic)'
        submitEmbedConfigFailure: 'submit embed config failure (lib.components.Sharing.sharingLogic)'
    }
    actions: {
        togglePreview: () => void
        loadSharingConfiguration: () => void
        loadSharingConfigurationSuccess: (sharingConfiguration: SharingConfigurationType | null, payload?: any) => void
        loadSharingConfigurationFailure: (error: string, errorObject?: any) => void
        setIsEnabled: (enabled: boolean) => void
        setIsEnabledSuccess: (sharingConfiguration: SharingConfigurationType | null, payload?: boolean) => void
        setIsEnabledFailure: (error: string, errorObject?: any) => void
        setEmbedConfigValue: (key: FieldName, value: any) => void
        setEmbedConfigValues: (values: DeepPartial<EmbedConfig>) => void
        setEmbedConfigManualErrors: (errors: Record<string, any>) => void
        touchEmbedConfigField: (key: string) => void
        resetEmbedConfig: (values?: EmbedConfig) => void
        submitEmbedConfig: () => void
        submitEmbedConfigRequest: (embedConfig: EmbedConfig) => void
        submitEmbedConfigSuccess: (embedConfig: EmbedConfig) => void
        submitEmbedConfigFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        togglePreview: () => Promise<any>
        loadSharingConfiguration: () => Promise<any>
        loadSharingConfigurationSuccess: (
            sharingConfiguration: SharingConfigurationType | null,
            payload?: any
        ) => Promise<any>
        loadSharingConfigurationFailure: (error: string, errorObject?: any) => Promise<any>
        setIsEnabled: (enabled: boolean) => Promise<any>
        setIsEnabledSuccess: (sharingConfiguration: SharingConfigurationType | null, payload?: boolean) => Promise<any>
        setIsEnabledFailure: (error: string, errorObject?: any) => Promise<any>
        setEmbedConfigValue: (key: FieldName, value: any) => Promise<any>
        setEmbedConfigValues: (values: DeepPartial<EmbedConfig>) => Promise<any>
        setEmbedConfigManualErrors: (errors: Record<string, any>) => Promise<any>
        touchEmbedConfigField: (key: string) => Promise<any>
        resetEmbedConfig: (values?: EmbedConfig) => Promise<any>
        submitEmbedConfig: () => Promise<any>
        submitEmbedConfigRequest: (embedConfig: EmbedConfig) => Promise<any>
        submitEmbedConfigSuccess: (embedConfig: EmbedConfig) => Promise<any>
        submitEmbedConfigFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        showPreview: boolean
        sharingConfiguration: SharingConfigurationType | null
        sharingConfigurationLoading: boolean
        embedConfig: EmbedConfig
        isEmbedConfigSubmitting: boolean
        showEmbedConfigErrors: boolean
        embedConfigChanged: boolean
        embedConfigTouches: Record<string, boolean>
        embedConfigManualErrors: Record<string, any>
    }
    events: {}
    key: string
    listeners: {
        setIsEnabled: ((
            action: {
                type: 'set is enabled (lib.components.Sharing.sharingLogic)'
                payload: boolean
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'Sharing', 'sharingLogic']
    pathString: 'lib.components.Sharing.sharingLogic'
    props: SharingLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        showPreview: boolean
        sharingConfiguration: SharingConfigurationType | null
        sharingConfigurationLoading: boolean
        embedConfig: EmbedConfig
        isEmbedConfigSubmitting: boolean
        showEmbedConfigErrors: boolean
        embedConfigChanged: boolean
        embedConfigTouches: Record<string, boolean>
        embedConfigManualErrors: Record<string, any>
    }
    reducers: {
        showPreview: (state: boolean, action: any, fullState: any) => boolean
        sharingConfiguration: (
            state: SharingConfigurationType | null,
            action: any,
            fullState: any
        ) => SharingConfigurationType | null
        sharingConfigurationLoading: (state: boolean, action: any, fullState: any) => boolean
        embedConfig: (state: EmbedConfig, action: any, fullState: any) => EmbedConfig
        isEmbedConfigSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showEmbedConfigErrors: (state: boolean, action: any, fullState: any) => boolean
        embedConfigChanged: (state: boolean, action: any, fullState: any) => boolean
        embedConfigTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        embedConfigManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        showPreview: boolean
        sharingConfiguration: SharingConfigurationType | null
        sharingConfigurationLoading: boolean
        embedConfig: EmbedConfig
        isEmbedConfigSubmitting: boolean
        showEmbedConfigErrors: boolean
        embedConfigChanged: boolean
        embedConfigTouches: Record<string, boolean>
        embedConfigManualErrors: Record<string, any>
    }
    selectors: {
        showPreview: (state: any, props?: any) => boolean
        sharingConfiguration: (state: any, props?: any) => SharingConfigurationType | null
        sharingConfigurationLoading: (state: any, props?: any) => boolean
        embedConfig: (state: any, props?: any) => EmbedConfig
        isEmbedConfigSubmitting: (state: any, props?: any) => boolean
        showEmbedConfigErrors: (state: any, props?: any) => boolean
        embedConfigChanged: (state: any, props?: any) => boolean
        embedConfigTouches: (state: any, props?: any) => Record<string, boolean>
        embedConfigManualErrors: (state: any, props?: any) => Record<string, any>
        embedConfigTouched: (state: any, props?: any) => boolean
        embedConfigValidationErrors: (state: any, props?: any) => DeepPartialMap<EmbedConfig, ValidationErrorType>
        embedConfigAllErrors: (state: any, props?: any) => Record<string, any>
        embedConfigHasErrors: (state: any, props?: any) => boolean
        embedConfigErrors: (state: any, props?: any) => DeepPartialMap<EmbedConfig, ValidationErrorType>
        isEmbedConfigValid: (state: any, props?: any) => boolean
        siteUrl: (state: any, props?: any) => string | undefined
        whitelabelAvailable: (state: any, props?: any) => boolean
        params: (state: any, props?: any) => any
        shareLink: (state: any, props?: any) => string
        embedLink: (state: any, props?: any) => string
        iframeProperties: (
            state: any,
            props?: any
        ) => { width: string; height: string; frameBorder: number; allowfullscreen: true; src: string }
        embedCode: (state: any, props?: any) => string
    }
    sharedListeners: {}
    values: {
        showPreview: boolean
        sharingConfiguration: SharingConfigurationType | null
        sharingConfigurationLoading: boolean
        embedConfig: EmbedConfig
        isEmbedConfigSubmitting: boolean
        showEmbedConfigErrors: boolean
        embedConfigChanged: boolean
        embedConfigTouches: Record<string, boolean>
        embedConfigManualErrors: Record<string, any>
        embedConfigTouched: boolean
        embedConfigValidationErrors: DeepPartialMap<EmbedConfig, ValidationErrorType>
        embedConfigAllErrors: Record<string, any>
        embedConfigHasErrors: boolean
        embedConfigErrors: DeepPartialMap<EmbedConfig, ValidationErrorType>
        isEmbedConfigValid: boolean
        siteUrl: string | undefined
        whitelabelAvailable: boolean
        params: any
        shareLink: string
        embedLink: string
        iframeProperties: { width: string; height: string; frameBorder: number; allowfullscreen: true; src: string }
        embedCode: string
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        siteUrl: (
            preflight:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').PreflightStatus
                | null
        ) => string | undefined
        whitelabelAvailable: (
            user:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').UserType
                | null
        ) => boolean
        params: (embedConfig: EmbedConfig, arg: any) => any
        shareLink: (
            siteUrl: string | undefined,
            sharingConfiguration: SharingConfigurationType | null,
            params: any
        ) => string
        embedLink: (
            siteUrl: string | undefined,
            sharingConfiguration: SharingConfigurationType | null,
            params: any
        ) => string
        iframeProperties: (
            embedLink: string,
            embedConfig: EmbedConfig
        ) => { width: string; height: string; frameBorder: number; allowfullscreen: true; src: string }
        embedCode: (iframeProperties: {
            width: string
            height: string
            frameBorder: number
            allowfullscreen: true
            src: string
        }) => string
    }
}
