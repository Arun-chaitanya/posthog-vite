// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:22 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PersonalAPIKeyType } from '../../../types'

export interface personalAPIKeysLogicType extends Logic {
    actionCreators: {
        loadKeys: () => {
            type: 'load keys (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
            payload: any
        }
        loadKeysSuccess: (
            keys: PersonalAPIKeyType[],
            payload?: any
        ) => {
            type: 'load keys success (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
            payload: {
                keys: PersonalAPIKeyType[]
                payload?: any
            }
        }
        loadKeysFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load keys failure (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        createKey: (label: string) => {
            type: 'create key (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
            payload: string
        }
        createKeySuccess: (
            keys: PersonalAPIKeyType[],
            payload?: string
        ) => {
            type: 'create key success (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
            payload: {
                keys: PersonalAPIKeyType[]
                payload?: string
            }
        }
        createKeyFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'create key failure (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deleteKey: (key: PersonalAPIKeyType) => {
            type: 'delete key (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
            payload: PersonalAPIKeyType
        }
        deleteKeySuccess: (
            keys: PersonalAPIKeyType[],
            payload?: PersonalAPIKeyType
        ) => {
            type: 'delete key success (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
            payload: {
                keys: PersonalAPIKeyType[]
                payload?: PersonalAPIKeyType
            }
        }
        deleteKeyFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete key failure (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load keys (lib.components.PersonalAPIKeys.personalAPIKeysLogic)': 'loadKeys'
        'load keys success (lib.components.PersonalAPIKeys.personalAPIKeysLogic)': 'loadKeysSuccess'
        'load keys failure (lib.components.PersonalAPIKeys.personalAPIKeysLogic)': 'loadKeysFailure'
        'create key (lib.components.PersonalAPIKeys.personalAPIKeysLogic)': 'createKey'
        'create key success (lib.components.PersonalAPIKeys.personalAPIKeysLogic)': 'createKeySuccess'
        'create key failure (lib.components.PersonalAPIKeys.personalAPIKeysLogic)': 'createKeyFailure'
        'delete key (lib.components.PersonalAPIKeys.personalAPIKeysLogic)': 'deleteKey'
        'delete key success (lib.components.PersonalAPIKeys.personalAPIKeysLogic)': 'deleteKeySuccess'
        'delete key failure (lib.components.PersonalAPIKeys.personalAPIKeysLogic)': 'deleteKeyFailure'
    }
    actionTypes: {
        loadKeys: 'load keys (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
        loadKeysSuccess: 'load keys success (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
        loadKeysFailure: 'load keys failure (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
        createKey: 'create key (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
        createKeySuccess: 'create key success (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
        createKeyFailure: 'create key failure (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
        deleteKey: 'delete key (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
        deleteKeySuccess: 'delete key success (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
        deleteKeyFailure: 'delete key failure (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
    }
    actions: {
        loadKeys: () => void
        loadKeysSuccess: (keys: PersonalAPIKeyType[], payload?: any) => void
        loadKeysFailure: (error: string, errorObject?: any) => void
        createKey: (label: string) => void
        createKeySuccess: (keys: PersonalAPIKeyType[], payload?: string) => void
        createKeyFailure: (error: string, errorObject?: any) => void
        deleteKey: (key: PersonalAPIKeyType) => void
        deleteKeySuccess: (keys: PersonalAPIKeyType[], payload?: PersonalAPIKeyType) => void
        deleteKeyFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadKeys: () => Promise<any>
        loadKeysSuccess: (keys: PersonalAPIKeyType[], payload?: any) => Promise<any>
        loadKeysFailure: (error: string, errorObject?: any) => Promise<any>
        createKey: (label: string) => Promise<any>
        createKeySuccess: (keys: PersonalAPIKeyType[], payload?: string) => Promise<any>
        createKeyFailure: (error: string, errorObject?: any) => Promise<any>
        deleteKey: (key: PersonalAPIKeyType) => Promise<any>
        deleteKeySuccess: (keys: PersonalAPIKeyType[], payload?: PersonalAPIKeyType) => Promise<any>
        deleteKeyFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        keys: PersonalAPIKeyType[]
        keysLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {
        createKeySuccess: ((
            action: {
                type: 'create key success (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
                payload: {
                    keys: PersonalAPIKeyType[]
                    payload?: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        deleteKeySuccess: ((
            action: {
                type: 'delete key success (lib.components.PersonalAPIKeys.personalAPIKeysLogic)'
                payload: {
                    keys: PersonalAPIKeyType[]
                    payload?: PersonalAPIKeyType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'PersonalAPIKeys', 'personalAPIKeysLogic']
    pathString: 'lib.components.PersonalAPIKeys.personalAPIKeysLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        keys: PersonalAPIKeyType[]
        keysLoading: boolean
    }
    reducers: {
        keys: (state: PersonalAPIKeyType[], action: any, fullState: any) => PersonalAPIKeyType[]
        keysLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        keys: PersonalAPIKeyType[]
        keysLoading: boolean
    }
    selectors: {
        keys: (state: any, props?: any) => PersonalAPIKeyType[]
        keysLoading: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        keys: PersonalAPIKeyType[]
        keysLoading: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
