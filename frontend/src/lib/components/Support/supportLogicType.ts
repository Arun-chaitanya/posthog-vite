// Generated by kea-typegen on Tue, 08 Aug 2023 10:01:02 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PreflightStatus, UserType } from '../../../types'
import type { SupportTicketKind, SupportTicketTargetArea } from './supportLogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../../node_modules/kea-forms'

export interface supportLogicType extends Logic {
    actionCreators: {
        closeSupportForm: () => {
            type: 'close support form (lib.components.support.supportLogic)'
            payload: boolean
        }
        openSupportForm: (
            kind?: SupportTicketKind | null,
            target_area?: SupportTicketTargetArea | null
        ) => {
            type: 'open support form (lib.components.support.supportLogic)'
            payload: {
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
            }
        }
        openSupportLoggedOutForm: (
            name?: string | null,
            email?: string | null,
            kind?: SupportTicketKind | null,
            target_area?: SupportTicketTargetArea | null
        ) => {
            type: 'open support logged out form (lib.components.support.supportLogic)'
            payload: {
                name: string | null
                email: string | null
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
            }
        }
        submitZendeskTicket: (
            name: string,
            email: string,
            kind: SupportTicketKind | null,
            target_area: string | null,
            message: string
        ) => {
            type: 'submit zendesk ticket (lib.components.support.supportLogic)'
            payload: {
                name: string
                email: string
                kind: 'feedback' | 'support' | 'bug' | null
                target_area: string | null
                message: string
            }
        }
        setSendSupportRequestValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set send support request value (lib.components.support.supportLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setSendSupportRequestValues: (
            values: DeepPartial<{
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
                message: string
            }>
        ) => {
            type: 'set send support request values (lib.components.support.supportLogic)'
            payload: {
                values: DeepPartial<{
                    kind: 'feedback' | 'support' | 'bug' | null
                    target_area:
                        | 'cohorts'
                        | 'surveys'
                        | 'analytics'
                        | 'billing'
                        | 'experiments'
                        | 'ingestion'
                        | 'app_performance'
                        | 'apps'
                        | 'login'
                        | 'data_integrity'
                        | 'data_management'
                        | 'data_warehouse'
                        | 'feature_flags'
                        | 'session_replay'
                        | null
                    message: string
                }>
            }
        }
        setSendSupportRequestManualErrors: (errors: Record<string, any>) => {
            type: 'set send support request manual errors (lib.components.support.supportLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchSendSupportRequestField: (key: string) => {
            type: 'touch send support request field (lib.components.support.supportLogic)'
            payload: {
                key: string
            }
        }
        resetSendSupportRequest: (values?: {
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => {
            type: 'reset send support request (lib.components.support.supportLogic)'
            payload: {
                values?: {
                    kind: 'feedback' | 'support' | 'bug' | null
                    target_area:
                        | 'cohorts'
                        | 'surveys'
                        | 'analytics'
                        | 'billing'
                        | 'experiments'
                        | 'ingestion'
                        | 'app_performance'
                        | 'apps'
                        | 'login'
                        | 'data_integrity'
                        | 'data_management'
                        | 'data_warehouse'
                        | 'feature_flags'
                        | 'session_replay'
                        | null
                    message: string
                }
            }
        }
        submitSendSupportRequest: () => {
            type: 'submit send support request (lib.components.support.supportLogic)'
            payload: {
                value: boolean
            }
        }
        submitSendSupportRequestRequest: (sendSupportRequest: {
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => {
            type: 'submit send support request request (lib.components.support.supportLogic)'
            payload: {
                sendSupportRequest: {
                    kind: 'feedback' | 'support' | 'bug' | null
                    target_area:
                        | 'cohorts'
                        | 'surveys'
                        | 'analytics'
                        | 'billing'
                        | 'experiments'
                        | 'ingestion'
                        | 'app_performance'
                        | 'apps'
                        | 'login'
                        | 'data_integrity'
                        | 'data_management'
                        | 'data_warehouse'
                        | 'feature_flags'
                        | 'session_replay'
                        | null
                    message: string
                }
            }
        }
        submitSendSupportRequestSuccess: (sendSupportRequest: {
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => {
            type: 'submit send support request success (lib.components.support.supportLogic)'
            payload: {
                sendSupportRequest: {
                    kind: 'feedback' | 'support' | 'bug' | null
                    target_area:
                        | 'cohorts'
                        | 'surveys'
                        | 'analytics'
                        | 'billing'
                        | 'experiments'
                        | 'ingestion'
                        | 'app_performance'
                        | 'apps'
                        | 'login'
                        | 'data_integrity'
                        | 'data_management'
                        | 'data_warehouse'
                        | 'feature_flags'
                        | 'session_replay'
                        | null
                    message: string
                }
            }
        }
        submitSendSupportRequestFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit send support request failure (lib.components.support.supportLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
        setSendSupportLoggedOutRequestValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set send support logged out request value (lib.components.support.supportLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setSendSupportLoggedOutRequestValues: (
            values: DeepPartial<{
                name: string
                email: string
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
                message: string
            }>
        ) => {
            type: 'set send support logged out request values (lib.components.support.supportLogic)'
            payload: {
                values: DeepPartial<{
                    name: string
                    email: string
                    kind: 'feedback' | 'support' | 'bug' | null
                    target_area:
                        | 'cohorts'
                        | 'surveys'
                        | 'analytics'
                        | 'billing'
                        | 'experiments'
                        | 'ingestion'
                        | 'app_performance'
                        | 'apps'
                        | 'login'
                        | 'data_integrity'
                        | 'data_management'
                        | 'data_warehouse'
                        | 'feature_flags'
                        | 'session_replay'
                        | null
                    message: string
                }>
            }
        }
        setSendSupportLoggedOutRequestManualErrors: (errors: Record<string, any>) => {
            type: 'set send support logged out request manual errors (lib.components.support.supportLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchSendSupportLoggedOutRequestField: (key: string) => {
            type: 'touch send support logged out request field (lib.components.support.supportLogic)'
            payload: {
                key: string
            }
        }
        resetSendSupportLoggedOutRequest: (values?: {
            name: string
            email: string
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => {
            type: 'reset send support logged out request (lib.components.support.supportLogic)'
            payload: {
                values?: {
                    name: string
                    email: string
                    kind: 'feedback' | 'support' | 'bug' | null
                    target_area:
                        | 'cohorts'
                        | 'surveys'
                        | 'analytics'
                        | 'billing'
                        | 'experiments'
                        | 'ingestion'
                        | 'app_performance'
                        | 'apps'
                        | 'login'
                        | 'data_integrity'
                        | 'data_management'
                        | 'data_warehouse'
                        | 'feature_flags'
                        | 'session_replay'
                        | null
                    message: string
                }
            }
        }
        submitSendSupportLoggedOutRequest: () => {
            type: 'submit send support logged out request (lib.components.support.supportLogic)'
            payload: {
                value: boolean
            }
        }
        submitSendSupportLoggedOutRequestRequest: (sendSupportLoggedOutRequest: {
            name: string
            email: string
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => {
            type: 'submit send support logged out request request (lib.components.support.supportLogic)'
            payload: {
                sendSupportLoggedOutRequest: {
                    name: string
                    email: string
                    kind: 'feedback' | 'support' | 'bug' | null
                    target_area:
                        | 'cohorts'
                        | 'surveys'
                        | 'analytics'
                        | 'billing'
                        | 'experiments'
                        | 'ingestion'
                        | 'app_performance'
                        | 'apps'
                        | 'login'
                        | 'data_integrity'
                        | 'data_management'
                        | 'data_warehouse'
                        | 'feature_flags'
                        | 'session_replay'
                        | null
                    message: string
                }
            }
        }
        submitSendSupportLoggedOutRequestSuccess: (sendSupportLoggedOutRequest: {
            name: string
            email: string
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => {
            type: 'submit send support logged out request success (lib.components.support.supportLogic)'
            payload: {
                sendSupportLoggedOutRequest: {
                    name: string
                    email: string
                    kind: 'feedback' | 'support' | 'bug' | null
                    target_area:
                        | 'cohorts'
                        | 'surveys'
                        | 'analytics'
                        | 'billing'
                        | 'experiments'
                        | 'ingestion'
                        | 'app_performance'
                        | 'apps'
                        | 'login'
                        | 'data_integrity'
                        | 'data_management'
                        | 'data_warehouse'
                        | 'feature_flags'
                        | 'session_replay'
                        | null
                    message: string
                }
            }
        }
        submitSendSupportLoggedOutRequestFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit send support logged out request failure (lib.components.support.supportLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'close support form (lib.components.support.supportLogic)': 'closeSupportForm'
        'open support form (lib.components.support.supportLogic)': 'openSupportForm'
        'open support logged out form (lib.components.support.supportLogic)': 'openSupportLoggedOutForm'
        'submit zendesk ticket (lib.components.support.supportLogic)': 'submitZendeskTicket'
        'set send support request value (lib.components.support.supportLogic)': 'setSendSupportRequestValue'
        'set send support request values (lib.components.support.supportLogic)': 'setSendSupportRequestValues'
        'set send support request manual errors (lib.components.support.supportLogic)': 'setSendSupportRequestManualErrors'
        'touch send support request field (lib.components.support.supportLogic)': 'touchSendSupportRequestField'
        'reset send support request (lib.components.support.supportLogic)': 'resetSendSupportRequest'
        'submit send support request (lib.components.support.supportLogic)': 'submitSendSupportRequest'
        'submit send support request request (lib.components.support.supportLogic)': 'submitSendSupportRequestRequest'
        'submit send support request success (lib.components.support.supportLogic)': 'submitSendSupportRequestSuccess'
        'submit send support request failure (lib.components.support.supportLogic)': 'submitSendSupportRequestFailure'
        'set send support logged out request value (lib.components.support.supportLogic)': 'setSendSupportLoggedOutRequestValue'
        'set send support logged out request values (lib.components.support.supportLogic)': 'setSendSupportLoggedOutRequestValues'
        'set send support logged out request manual errors (lib.components.support.supportLogic)': 'setSendSupportLoggedOutRequestManualErrors'
        'touch send support logged out request field (lib.components.support.supportLogic)': 'touchSendSupportLoggedOutRequestField'
        'reset send support logged out request (lib.components.support.supportLogic)': 'resetSendSupportLoggedOutRequest'
        'submit send support logged out request (lib.components.support.supportLogic)': 'submitSendSupportLoggedOutRequest'
        'submit send support logged out request request (lib.components.support.supportLogic)': 'submitSendSupportLoggedOutRequestRequest'
        'submit send support logged out request success (lib.components.support.supportLogic)': 'submitSendSupportLoggedOutRequestSuccess'
        'submit send support logged out request failure (lib.components.support.supportLogic)': 'submitSendSupportLoggedOutRequestFailure'
    }
    actionTypes: {
        closeSupportForm: 'close support form (lib.components.support.supportLogic)'
        openSupportForm: 'open support form (lib.components.support.supportLogic)'
        openSupportLoggedOutForm: 'open support logged out form (lib.components.support.supportLogic)'
        submitZendeskTicket: 'submit zendesk ticket (lib.components.support.supportLogic)'
        setSendSupportRequestValue: 'set send support request value (lib.components.support.supportLogic)'
        setSendSupportRequestValues: 'set send support request values (lib.components.support.supportLogic)'
        setSendSupportRequestManualErrors: 'set send support request manual errors (lib.components.support.supportLogic)'
        touchSendSupportRequestField: 'touch send support request field (lib.components.support.supportLogic)'
        resetSendSupportRequest: 'reset send support request (lib.components.support.supportLogic)'
        submitSendSupportRequest: 'submit send support request (lib.components.support.supportLogic)'
        submitSendSupportRequestRequest: 'submit send support request request (lib.components.support.supportLogic)'
        submitSendSupportRequestSuccess: 'submit send support request success (lib.components.support.supportLogic)'
        submitSendSupportRequestFailure: 'submit send support request failure (lib.components.support.supportLogic)'
        setSendSupportLoggedOutRequestValue: 'set send support logged out request value (lib.components.support.supportLogic)'
        setSendSupportLoggedOutRequestValues: 'set send support logged out request values (lib.components.support.supportLogic)'
        setSendSupportLoggedOutRequestManualErrors: 'set send support logged out request manual errors (lib.components.support.supportLogic)'
        touchSendSupportLoggedOutRequestField: 'touch send support logged out request field (lib.components.support.supportLogic)'
        resetSendSupportLoggedOutRequest: 'reset send support logged out request (lib.components.support.supportLogic)'
        submitSendSupportLoggedOutRequest: 'submit send support logged out request (lib.components.support.supportLogic)'
        submitSendSupportLoggedOutRequestRequest: 'submit send support logged out request request (lib.components.support.supportLogic)'
        submitSendSupportLoggedOutRequestSuccess: 'submit send support logged out request success (lib.components.support.supportLogic)'
        submitSendSupportLoggedOutRequestFailure: 'submit send support logged out request failure (lib.components.support.supportLogic)'
    }
    actions: {
        closeSupportForm: () => void
        openSupportForm: (kind?: SupportTicketKind | null, target_area?: SupportTicketTargetArea | null) => void
        openSupportLoggedOutForm: (
            name?: string | null,
            email?: string | null,
            kind?: SupportTicketKind | null,
            target_area?: SupportTicketTargetArea | null
        ) => void
        submitZendeskTicket: (
            name: string,
            email: string,
            kind: SupportTicketKind | null,
            target_area: string | null,
            message: string
        ) => void
        setSendSupportRequestValue: (key: FieldName, value: any) => void
        setSendSupportRequestValues: (
            values: DeepPartial<{
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
                message: string
            }>
        ) => void
        setSendSupportRequestManualErrors: (errors: Record<string, any>) => void
        touchSendSupportRequestField: (key: string) => void
        resetSendSupportRequest: (values?: {
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => void
        submitSendSupportRequest: () => void
        submitSendSupportRequestRequest: (sendSupportRequest: {
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => void
        submitSendSupportRequestSuccess: (sendSupportRequest: {
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => void
        submitSendSupportRequestFailure: (error: Error, errors: Record<string, any>) => void
        setSendSupportLoggedOutRequestValue: (key: FieldName, value: any) => void
        setSendSupportLoggedOutRequestValues: (
            values: DeepPartial<{
                name: string
                email: string
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
                message: string
            }>
        ) => void
        setSendSupportLoggedOutRequestManualErrors: (errors: Record<string, any>) => void
        touchSendSupportLoggedOutRequestField: (key: string) => void
        resetSendSupportLoggedOutRequest: (values?: {
            name: string
            email: string
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => void
        submitSendSupportLoggedOutRequest: () => void
        submitSendSupportLoggedOutRequestRequest: (sendSupportLoggedOutRequest: {
            name: string
            email: string
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => void
        submitSendSupportLoggedOutRequestSuccess: (sendSupportLoggedOutRequest: {
            name: string
            email: string
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => void
        submitSendSupportLoggedOutRequestFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        closeSupportForm: () => Promise<any>
        openSupportForm: (kind?: SupportTicketKind | null, target_area?: SupportTicketTargetArea | null) => Promise<any>
        openSupportLoggedOutForm: (
            name?: string | null,
            email?: string | null,
            kind?: SupportTicketKind | null,
            target_area?: SupportTicketTargetArea | null
        ) => Promise<any>
        submitZendeskTicket: (
            name: string,
            email: string,
            kind: SupportTicketKind | null,
            target_area: string | null,
            message: string
        ) => Promise<any>
        setSendSupportRequestValue: (key: FieldName, value: any) => Promise<any>
        setSendSupportRequestValues: (
            values: DeepPartial<{
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
                message: string
            }>
        ) => Promise<any>
        setSendSupportRequestManualErrors: (errors: Record<string, any>) => Promise<any>
        touchSendSupportRequestField: (key: string) => Promise<any>
        resetSendSupportRequest: (values?: {
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => Promise<any>
        submitSendSupportRequest: () => Promise<any>
        submitSendSupportRequestRequest: (sendSupportRequest: {
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => Promise<any>
        submitSendSupportRequestSuccess: (sendSupportRequest: {
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => Promise<any>
        submitSendSupportRequestFailure: (error: Error, errors: Record<string, any>) => Promise<any>
        setSendSupportLoggedOutRequestValue: (key: FieldName, value: any) => Promise<any>
        setSendSupportLoggedOutRequestValues: (
            values: DeepPartial<{
                name: string
                email: string
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
                message: string
            }>
        ) => Promise<any>
        setSendSupportLoggedOutRequestManualErrors: (errors: Record<string, any>) => Promise<any>
        touchSendSupportLoggedOutRequestField: (key: string) => Promise<any>
        resetSendSupportLoggedOutRequest: (values?: {
            name: string
            email: string
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => Promise<any>
        submitSendSupportLoggedOutRequest: () => Promise<any>
        submitSendSupportLoggedOutRequestRequest: (sendSupportLoggedOutRequest: {
            name: string
            email: string
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => Promise<any>
        submitSendSupportLoggedOutRequestSuccess: (sendSupportLoggedOutRequest: {
            name: string
            email: string
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }) => Promise<any>
        submitSendSupportLoggedOutRequestFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        isSupportFormOpen: boolean
        sendSupportRequest: {
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }
        isSendSupportRequestSubmitting: boolean
        showSendSupportRequestErrors: boolean
        sendSupportRequestChanged: boolean
        sendSupportRequestTouches: Record<string, boolean>
        sendSupportRequestManualErrors: Record<string, any>
        sendSupportLoggedOutRequest: {
            name: string
            email: string
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }
        isSendSupportLoggedOutRequestSubmitting: boolean
        showSendSupportLoggedOutRequestErrors: boolean
        sendSupportLoggedOutRequestChanged: boolean
        sendSupportLoggedOutRequestTouches: Record<string, boolean>
        sendSupportLoggedOutRequestManualErrors: Record<string, any>
    }
    events: {}
    key: undefined
    listeners: {
        openSupportForm: ((
            action: {
                type: 'open support form (lib.components.support.supportLogic)'
                payload: {
                    kind: 'feedback' | 'support' | 'bug' | null
                    target_area:
                        | 'cohorts'
                        | 'surveys'
                        | 'analytics'
                        | 'billing'
                        | 'experiments'
                        | 'ingestion'
                        | 'app_performance'
                        | 'apps'
                        | 'login'
                        | 'data_integrity'
                        | 'data_management'
                        | 'data_warehouse'
                        | 'feature_flags'
                        | 'session_replay'
                        | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        openSupportLoggedOutForm: ((
            action: {
                type: 'open support logged out form (lib.components.support.supportLogic)'
                payload: {
                    name: string | null
                    email: string | null
                    kind: 'feedback' | 'support' | 'bug' | null
                    target_area:
                        | 'cohorts'
                        | 'surveys'
                        | 'analytics'
                        | 'billing'
                        | 'experiments'
                        | 'ingestion'
                        | 'app_performance'
                        | 'apps'
                        | 'login'
                        | 'data_integrity'
                        | 'data_management'
                        | 'data_warehouse'
                        | 'feature_flags'
                        | 'session_replay'
                        | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        submitZendeskTicket: ((
            action: {
                type: 'submit zendesk ticket (lib.components.support.supportLogic)'
                payload: {
                    name: string
                    email: string
                    kind: 'feedback' | 'support' | 'bug' | null
                    target_area: string | null
                    message: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'support', 'supportLogic']
    pathString: 'lib.components.support.supportLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        isSupportFormOpen: boolean
        sendSupportRequest: {
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }
        isSendSupportRequestSubmitting: boolean
        showSendSupportRequestErrors: boolean
        sendSupportRequestChanged: boolean
        sendSupportRequestTouches: Record<string, boolean>
        sendSupportRequestManualErrors: Record<string, any>
        sendSupportLoggedOutRequest: {
            name: string
            email: string
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }
        isSendSupportLoggedOutRequestSubmitting: boolean
        showSendSupportLoggedOutRequestErrors: boolean
        sendSupportLoggedOutRequestChanged: boolean
        sendSupportLoggedOutRequestTouches: Record<string, boolean>
        sendSupportLoggedOutRequestManualErrors: Record<string, any>
    }
    reducers: {
        isSupportFormOpen: (state: boolean, action: any, fullState: any) => boolean
        sendSupportRequest: (
            state: {
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
                message: string
            },
            action: any,
            fullState: any
        ) => {
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }
        isSendSupportRequestSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showSendSupportRequestErrors: (state: boolean, action: any, fullState: any) => boolean
        sendSupportRequestChanged: (state: boolean, action: any, fullState: any) => boolean
        sendSupportRequestTouches: (
            state: Record<string, boolean>,
            action: any,
            fullState: any
        ) => Record<string, boolean>
        sendSupportRequestManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
        sendSupportLoggedOutRequest: (
            state: {
                name: string
                email: string
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
                message: string
            },
            action: any,
            fullState: any
        ) => {
            name: string
            email: string
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }
        isSendSupportLoggedOutRequestSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showSendSupportLoggedOutRequestErrors: (state: boolean, action: any, fullState: any) => boolean
        sendSupportLoggedOutRequestChanged: (state: boolean, action: any, fullState: any) => boolean
        sendSupportLoggedOutRequestTouches: (
            state: Record<string, boolean>,
            action: any,
            fullState: any
        ) => Record<string, boolean>
        sendSupportLoggedOutRequestManualErrors: (
            state: Record<string, any>,
            action: any,
            fullState: any
        ) => Record<string, any>
    }
    selector: (state: any) => {
        isSupportFormOpen: boolean
        sendSupportRequest: {
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }
        isSendSupportRequestSubmitting: boolean
        showSendSupportRequestErrors: boolean
        sendSupportRequestChanged: boolean
        sendSupportRequestTouches: Record<string, boolean>
        sendSupportRequestManualErrors: Record<string, any>
        sendSupportLoggedOutRequest: {
            name: string
            email: string
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }
        isSendSupportLoggedOutRequestSubmitting: boolean
        showSendSupportLoggedOutRequestErrors: boolean
        sendSupportLoggedOutRequestChanged: boolean
        sendSupportLoggedOutRequestTouches: Record<string, boolean>
        sendSupportLoggedOutRequestManualErrors: Record<string, any>
    }
    selectors: {
        isSupportFormOpen: (state: any, props?: any) => boolean
        sendSupportRequest: (
            state: any,
            props?: any
        ) => {
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }
        isSendSupportRequestSubmitting: (state: any, props?: any) => boolean
        showSendSupportRequestErrors: (state: any, props?: any) => boolean
        sendSupportRequestChanged: (state: any, props?: any) => boolean
        sendSupportRequestTouches: (state: any, props?: any) => Record<string, boolean>
        sendSupportRequestManualErrors: (state: any, props?: any) => Record<string, any>
        sendSupportLoggedOutRequest: (
            state: any,
            props?: any
        ) => {
            name: string
            email: string
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }
        isSendSupportLoggedOutRequestSubmitting: (state: any, props?: any) => boolean
        showSendSupportLoggedOutRequestErrors: (state: any, props?: any) => boolean
        sendSupportLoggedOutRequestChanged: (state: any, props?: any) => boolean
        sendSupportLoggedOutRequestTouches: (state: any, props?: any) => Record<string, boolean>
        sendSupportLoggedOutRequestManualErrors: (state: any, props?: any) => Record<string, any>
        user: (state: any, props?: any) => UserType | null
        preflight: (state: any, props?: any) => PreflightStatus | null
        sendSupportRequestTouched: (state: any, props?: any) => boolean
        sendSupportRequestValidationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<
            {
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
                message: string
            },
            ValidationErrorType
        >
        sendSupportRequestAllErrors: (state: any, props?: any) => Record<string, any>
        sendSupportRequestHasErrors: (state: any, props?: any) => boolean
        sendSupportRequestErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<
            {
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
                message: string
            },
            ValidationErrorType
        >
        isSendSupportRequestValid: (state: any, props?: any) => boolean
        sendSupportLoggedOutRequestTouched: (state: any, props?: any) => boolean
        sendSupportLoggedOutRequestValidationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<
            {
                name: string
                email: string
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
                message: string
            },
            ValidationErrorType
        >
        sendSupportLoggedOutRequestAllErrors: (state: any, props?: any) => Record<string, any>
        sendSupportLoggedOutRequestHasErrors: (state: any, props?: any) => boolean
        sendSupportLoggedOutRequestErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<
            {
                name: string
                email: string
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
                message: string
            },
            ValidationErrorType
        >
        isSendSupportLoggedOutRequestValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        isSupportFormOpen: boolean
        sendSupportRequest: {
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }
        isSendSupportRequestSubmitting: boolean
        showSendSupportRequestErrors: boolean
        sendSupportRequestChanged: boolean
        sendSupportRequestTouches: Record<string, boolean>
        sendSupportRequestManualErrors: Record<string, any>
        sendSupportLoggedOutRequest: {
            name: string
            email: string
            kind: 'feedback' | 'support' | 'bug' | null
            target_area:
                | 'cohorts'
                | 'surveys'
                | 'analytics'
                | 'billing'
                | 'experiments'
                | 'ingestion'
                | 'app_performance'
                | 'apps'
                | 'login'
                | 'data_integrity'
                | 'data_management'
                | 'data_warehouse'
                | 'feature_flags'
                | 'session_replay'
                | null
            message: string
        }
        isSendSupportLoggedOutRequestSubmitting: boolean
        showSendSupportLoggedOutRequestErrors: boolean
        sendSupportLoggedOutRequestChanged: boolean
        sendSupportLoggedOutRequestTouches: Record<string, boolean>
        sendSupportLoggedOutRequestManualErrors: Record<string, any>
        user: UserType | null
        preflight: PreflightStatus | null
        sendSupportRequestTouched: boolean
        sendSupportRequestValidationErrors: DeepPartialMap<
            {
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
                message: string
            },
            ValidationErrorType
        >
        sendSupportRequestAllErrors: Record<string, any>
        sendSupportRequestHasErrors: boolean
        sendSupportRequestErrors: DeepPartialMap<
            {
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
                message: string
            },
            ValidationErrorType
        >
        isSendSupportRequestValid: boolean
        sendSupportLoggedOutRequestTouched: boolean
        sendSupportLoggedOutRequestValidationErrors: DeepPartialMap<
            {
                name: string
                email: string
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
                message: string
            },
            ValidationErrorType
        >
        sendSupportLoggedOutRequestAllErrors: Record<string, any>
        sendSupportLoggedOutRequestHasErrors: boolean
        sendSupportLoggedOutRequestErrors: DeepPartialMap<
            {
                name: string
                email: string
                kind: 'feedback' | 'support' | 'bug' | null
                target_area:
                    | 'cohorts'
                    | 'surveys'
                    | 'analytics'
                    | 'billing'
                    | 'experiments'
                    | 'ingestion'
                    | 'app_performance'
                    | 'apps'
                    | 'login'
                    | 'data_integrity'
                    | 'data_management'
                    | 'data_warehouse'
                    | 'feature_flags'
                    | 'session_replay'
                    | null
                message: string
            },
            ValidationErrorType
        >
        isSendSupportLoggedOutRequestValid: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
