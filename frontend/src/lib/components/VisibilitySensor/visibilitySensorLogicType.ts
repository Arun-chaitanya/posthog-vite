// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:51 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

export interface visibilitySensorLogicType extends Logic {
    actionCreators: {
        setVisible: (visible: boolean) => {
            type: 'set visible (lib.components.VisibilitySensor.visibilitySensorLogic.*)'
            payload: {
                visible: boolean
            }
        }
        scrolling: (element: HTMLElement) => {
            type: 'scrolling (lib.components.VisibilitySensor.visibilitySensorLogic.*)'
            payload: {
                element: HTMLElement
            }
        }
    }
    actionKeys: {
        'set visible (lib.components.VisibilitySensor.visibilitySensorLogic.*)': 'setVisible'
        'scrolling (lib.components.VisibilitySensor.visibilitySensorLogic.*)': 'scrolling'
    }
    actionTypes: {
        setVisible: 'set visible (lib.components.VisibilitySensor.visibilitySensorLogic.*)'
        scrolling: 'scrolling (lib.components.VisibilitySensor.visibilitySensorLogic.*)'
    }
    actions: {
        setVisible: (visible: boolean) => void
        scrolling: (element: HTMLElement) => void
    }
    asyncActions: {
        setVisible: (visible: boolean) => Promise<any>
        scrolling: (element: HTMLElement) => Promise<any>
    }
    defaults: {
        visible: boolean
        innerHeight: number
    }
    events: {}
    key: string
    listeners: {
        scrolling: ((
            action: {
                type: 'scrolling (lib.components.VisibilitySensor.visibilitySensorLogic.*)'
                payload: {
                    element: HTMLElement
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'VisibilitySensor', 'visibilitySensorLogic', '*']
    pathString: 'lib.components.VisibilitySensor.visibilitySensorLogic.*'
    props: {
        id: string
        offset?: number
    }
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        visible: boolean
        innerHeight: number
    }
    reducers: {
        visible: (state: boolean, action: any, fullState: any) => boolean
        innerHeight: (state: number, action: any, fullState: any) => number
    }
    selector: (state: any) => {
        visible: boolean
        innerHeight: number
    }
    selectors: {
        visible: (state: any, props?: any) => boolean
        innerHeight: (state: any, props?: any) => number
        checkIsVisible: (state: any, props?: any) => (element: HTMLElement) => boolean
    }
    sharedListeners: {}
    values: {
        visible: boolean
        innerHeight: number
        checkIsVisible: (element: HTMLElement) => boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        checkIsVisible: (innerHeight: number, arg: any) => (element: HTMLElement) => boolean
    }
}
