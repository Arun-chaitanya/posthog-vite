// Generated by kea-typegen on Tue, 08 Aug 2023 10:01:14 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { SubscriptionsLogicProps } from './subscriptionLogic'
import type { SubscriptionType, UserBasicType, WeekdayType } from '../../../types'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../../node_modules/kea-forms'

export interface subscriptionLogicType extends Logic {
    actionCreators: {
        loadSubscriptions: (_?: any) => {
            type: 'load subscriptions (lib.components.Subscriptions.subscriptionLogic)'
            payload: any
        }
        loadSubscription: () => {
            type: 'load subscription (lib.components.Subscriptions.subscriptionLogic)'
            payload: any
        }
        loadSubscriptionSuccess: (
            subscription: {
                id?: number | undefined
                insight?: number | undefined
                dashboard?: number | undefined
                target_type?: string | undefined
                target_value?: string | undefined
                frequency?: 'monthly' | 'daily' | 'weekly' | 'yearly' | undefined
                interval?: number | undefined
                byweekday?: WeekdayType[] | null | undefined
                bysetpos?: number | null | undefined
                start_date?: string | undefined
                until_date?: string | undefined
                title?: string | undefined
                summary?: string | undefined
                created_by?: UserBasicType | null | undefined
                created_at?: string | undefined
                updated_at?: string | undefined
                deleted?: boolean | undefined
            },
            payload?: any
        ) => {
            type: 'load subscription success (lib.components.Subscriptions.subscriptionLogic)'
            payload: {
                subscription: {
                    id?: number | undefined
                    insight?: number | undefined
                    dashboard?: number | undefined
                    target_type?: string | undefined
                    target_value?: string | undefined
                    frequency?: 'monthly' | 'daily' | 'weekly' | 'yearly' | undefined
                    interval?: number | undefined
                    byweekday?: WeekdayType[] | null | undefined
                    bysetpos?: number | null | undefined
                    start_date?: string | undefined
                    until_date?: string | undefined
                    title?: string | undefined
                    summary?: string | undefined
                    created_by?: UserBasicType | null | undefined
                    created_at?: string | undefined
                    updated_at?: string | undefined
                    deleted?: boolean | undefined
                }
                payload?: any
            }
        }
        loadSubscriptionFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load subscription failure (lib.components.Subscriptions.subscriptionLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setSubscriptionValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set subscription value (lib.components.Subscriptions.subscriptionLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setSubscriptionValues: (values: DeepPartial<SubscriptionType>) => {
            type: 'set subscription values (lib.components.Subscriptions.subscriptionLogic)'
            payload: {
                values: DeepPartial<SubscriptionType>
            }
        }
        setSubscriptionManualErrors: (errors: Record<string, any>) => {
            type: 'set subscription manual errors (lib.components.Subscriptions.subscriptionLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchSubscriptionField: (key: string) => {
            type: 'touch subscription field (lib.components.Subscriptions.subscriptionLogic)'
            payload: {
                key: string
            }
        }
        resetSubscription: (values?: SubscriptionType) => {
            type: 'reset subscription (lib.components.Subscriptions.subscriptionLogic)'
            payload: {
                values?: SubscriptionType
            }
        }
        submitSubscription: () => {
            type: 'submit subscription (lib.components.Subscriptions.subscriptionLogic)'
            payload: {
                value: boolean
            }
        }
        submitSubscriptionRequest: (subscription: SubscriptionType) => {
            type: 'submit subscription request (lib.components.Subscriptions.subscriptionLogic)'
            payload: {
                subscription: SubscriptionType
            }
        }
        submitSubscriptionSuccess: (subscription: SubscriptionType) => {
            type: 'submit subscription success (lib.components.Subscriptions.subscriptionLogic)'
            payload: {
                subscription: SubscriptionType
            }
        }
        submitSubscriptionFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit subscription failure (lib.components.Subscriptions.subscriptionLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'load subscriptions (lib.components.Subscriptions.subscriptionLogic)': 'loadSubscriptions'
        'load subscription (lib.components.Subscriptions.subscriptionLogic)': 'loadSubscription'
        'load subscription success (lib.components.Subscriptions.subscriptionLogic)': 'loadSubscriptionSuccess'
        'load subscription failure (lib.components.Subscriptions.subscriptionLogic)': 'loadSubscriptionFailure'
        'set subscription value (lib.components.Subscriptions.subscriptionLogic)': 'setSubscriptionValue'
        'set subscription values (lib.components.Subscriptions.subscriptionLogic)': 'setSubscriptionValues'
        'set subscription manual errors (lib.components.Subscriptions.subscriptionLogic)': 'setSubscriptionManualErrors'
        'touch subscription field (lib.components.Subscriptions.subscriptionLogic)': 'touchSubscriptionField'
        'reset subscription (lib.components.Subscriptions.subscriptionLogic)': 'resetSubscription'
        'submit subscription (lib.components.Subscriptions.subscriptionLogic)': 'submitSubscription'
        'submit subscription request (lib.components.Subscriptions.subscriptionLogic)': 'submitSubscriptionRequest'
        'submit subscription success (lib.components.Subscriptions.subscriptionLogic)': 'submitSubscriptionSuccess'
        'submit subscription failure (lib.components.Subscriptions.subscriptionLogic)': 'submitSubscriptionFailure'
    }
    actionTypes: {
        loadSubscriptions: 'load subscriptions (lib.components.Subscriptions.subscriptionLogic)'
        loadSubscription: 'load subscription (lib.components.Subscriptions.subscriptionLogic)'
        loadSubscriptionSuccess: 'load subscription success (lib.components.Subscriptions.subscriptionLogic)'
        loadSubscriptionFailure: 'load subscription failure (lib.components.Subscriptions.subscriptionLogic)'
        setSubscriptionValue: 'set subscription value (lib.components.Subscriptions.subscriptionLogic)'
        setSubscriptionValues: 'set subscription values (lib.components.Subscriptions.subscriptionLogic)'
        setSubscriptionManualErrors: 'set subscription manual errors (lib.components.Subscriptions.subscriptionLogic)'
        touchSubscriptionField: 'touch subscription field (lib.components.Subscriptions.subscriptionLogic)'
        resetSubscription: 'reset subscription (lib.components.Subscriptions.subscriptionLogic)'
        submitSubscription: 'submit subscription (lib.components.Subscriptions.subscriptionLogic)'
        submitSubscriptionRequest: 'submit subscription request (lib.components.Subscriptions.subscriptionLogic)'
        submitSubscriptionSuccess: 'submit subscription success (lib.components.Subscriptions.subscriptionLogic)'
        submitSubscriptionFailure: 'submit subscription failure (lib.components.Subscriptions.subscriptionLogic)'
    }
    actions: {
        loadSubscriptions: (_?: any) => void
        loadSubscription: () => void
        loadSubscriptionSuccess: (
            subscription: {
                id?: number | undefined
                insight?: number | undefined
                dashboard?: number | undefined
                target_type?: string | undefined
                target_value?: string | undefined
                frequency?: 'monthly' | 'daily' | 'weekly' | 'yearly' | undefined
                interval?: number | undefined
                byweekday?: WeekdayType[] | null | undefined
                bysetpos?: number | null | undefined
                start_date?: string | undefined
                until_date?: string | undefined
                title?: string | undefined
                summary?: string | undefined
                created_by?: UserBasicType | null | undefined
                created_at?: string | undefined
                updated_at?: string | undefined
                deleted?: boolean | undefined
            },
            payload?: any
        ) => void
        loadSubscriptionFailure: (error: string, errorObject?: any) => void
        setSubscriptionValue: (key: FieldName, value: any) => void
        setSubscriptionValues: (values: DeepPartial<SubscriptionType>) => void
        setSubscriptionManualErrors: (errors: Record<string, any>) => void
        touchSubscriptionField: (key: string) => void
        resetSubscription: (values?: SubscriptionType) => void
        submitSubscription: () => void
        submitSubscriptionRequest: (subscription: SubscriptionType) => void
        submitSubscriptionSuccess: (subscription: SubscriptionType) => void
        submitSubscriptionFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        loadSubscriptions: (_?: any) => Promise<any>
        loadSubscription: () => Promise<any>
        loadSubscriptionSuccess: (
            subscription: {
                id?: number | undefined
                insight?: number | undefined
                dashboard?: number | undefined
                target_type?: string | undefined
                target_value?: string | undefined
                frequency?: 'monthly' | 'daily' | 'weekly' | 'yearly' | undefined
                interval?: number | undefined
                byweekday?: WeekdayType[] | null | undefined
                bysetpos?: number | null | undefined
                start_date?: string | undefined
                until_date?: string | undefined
                title?: string | undefined
                summary?: string | undefined
                created_by?: UserBasicType | null | undefined
                created_at?: string | undefined
                updated_at?: string | undefined
                deleted?: boolean | undefined
            },
            payload?: any
        ) => Promise<any>
        loadSubscriptionFailure: (error: string, errorObject?: any) => Promise<any>
        setSubscriptionValue: (key: FieldName, value: any) => Promise<any>
        setSubscriptionValues: (values: DeepPartial<SubscriptionType>) => Promise<any>
        setSubscriptionManualErrors: (errors: Record<string, any>) => Promise<any>
        touchSubscriptionField: (key: string) => Promise<any>
        resetSubscription: (values?: SubscriptionType) => Promise<any>
        submitSubscription: () => Promise<any>
        submitSubscriptionRequest: (subscription: SubscriptionType) => Promise<any>
        submitSubscriptionSuccess: (subscription: SubscriptionType) => Promise<any>
        submitSubscriptionFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        subscription: SubscriptionType
        subscriptionLoading: boolean
        isSubscriptionSubmitting: boolean
        showSubscriptionErrors: boolean
        subscriptionChanged: boolean
        subscriptionTouches: Record<string, boolean>
        subscriptionManualErrors: Record<string, any>
    }
    events: {}
    key: string
    listeners: {
        setSubscriptionValue: ((
            action: {
                type: 'set subscription value (lib.components.Subscriptions.subscriptionLogic)'
                payload: {
                    name: FieldName
                    value: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'Subscriptions', 'subscriptionLogic']
    pathString: 'lib.components.Subscriptions.subscriptionLogic'
    props: SubscriptionsLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        subscription: SubscriptionType
        subscriptionLoading: boolean
        isSubscriptionSubmitting: boolean
        showSubscriptionErrors: boolean
        subscriptionChanged: boolean
        subscriptionTouches: Record<string, boolean>
        subscriptionManualErrors: Record<string, any>
    }
    reducers: {
        subscription: (state: SubscriptionType, action: any, fullState: any) => SubscriptionType
        subscriptionLoading: (state: boolean, action: any, fullState: any) => boolean
        isSubscriptionSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showSubscriptionErrors: (state: boolean, action: any, fullState: any) => boolean
        subscriptionChanged: (state: boolean, action: any, fullState: any) => boolean
        subscriptionTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        subscriptionManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        subscription: SubscriptionType
        subscriptionLoading: boolean
        isSubscriptionSubmitting: boolean
        showSubscriptionErrors: boolean
        subscriptionChanged: boolean
        subscriptionTouches: Record<string, boolean>
        subscriptionManualErrors: Record<string, any>
    }
    selectors: {
        subscription: (state: any, props?: any) => SubscriptionType
        subscriptionLoading: (state: any, props?: any) => boolean
        isSubscriptionSubmitting: (state: any, props?: any) => boolean
        showSubscriptionErrors: (state: any, props?: any) => boolean
        subscriptionChanged: (state: any, props?: any) => boolean
        subscriptionTouches: (state: any, props?: any) => Record<string, boolean>
        subscriptionManualErrors: (state: any, props?: any) => Record<string, any>
        isMemberOfSlackChannel: (state: any, props?: any) => (channel: string) => boolean | null | undefined
        subscriptionTouched: (state: any, props?: any) => boolean
        subscriptionValidationErrors: (state: any, props?: any) => DeepPartialMap<SubscriptionType, ValidationErrorType>
        subscriptionAllErrors: (state: any, props?: any) => Record<string, any>
        subscriptionHasErrors: (state: any, props?: any) => boolean
        subscriptionErrors: (state: any, props?: any) => DeepPartialMap<SubscriptionType, ValidationErrorType>
        isSubscriptionValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        subscription: SubscriptionType
        subscriptionLoading: boolean
        isSubscriptionSubmitting: boolean
        showSubscriptionErrors: boolean
        subscriptionChanged: boolean
        subscriptionTouches: Record<string, boolean>
        subscriptionManualErrors: Record<string, any>
        isMemberOfSlackChannel: (channel: string) => boolean | null | undefined
        subscriptionTouched: boolean
        subscriptionValidationErrors: DeepPartialMap<SubscriptionType, ValidationErrorType>
        subscriptionAllErrors: Record<string, any>
        subscriptionHasErrors: boolean
        subscriptionErrors: DeepPartialMap<SubscriptionType, ValidationErrorType>
        isSubscriptionValid: boolean
    }
    _isKea: true
    _isKeaWithKey: true
}
