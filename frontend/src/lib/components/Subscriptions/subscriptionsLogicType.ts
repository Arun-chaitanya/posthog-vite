// Generated by kea-typegen on Thu, 20 Jul 2023 10:56:10 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { SubscriptionBaseProps } from './utils'
import type { SubscriptionType } from '../../../types'

export interface subscriptionsLogicType extends Logic {
    actionCreators: {
        deleteSubscription: (id: number) => {
            type: 'delete subscription (lib.components.Subscriptions.subscriptionsLogic)'
            payload: {
                id: number
            }
        }
        loadSubscriptions: (_?: any) => {
            type: 'load subscriptions (lib.components.Subscriptions.subscriptionsLogic)'
            payload: any
        }
        loadSubscriptionsSuccess: (
            subscriptions: SubscriptionType[],
            payload?: any
        ) => {
            type: 'load subscriptions success (lib.components.Subscriptions.subscriptionsLogic)'
            payload: {
                subscriptions: SubscriptionType[]
                payload?: any
            }
        }
        loadSubscriptionsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load subscriptions failure (lib.components.Subscriptions.subscriptionsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'delete subscription (lib.components.Subscriptions.subscriptionsLogic)': 'deleteSubscription'
        'load subscriptions (lib.components.Subscriptions.subscriptionsLogic)': 'loadSubscriptions'
        'load subscriptions success (lib.components.Subscriptions.subscriptionsLogic)': 'loadSubscriptionsSuccess'
        'load subscriptions failure (lib.components.Subscriptions.subscriptionsLogic)': 'loadSubscriptionsFailure'
    }
    actionTypes: {
        deleteSubscription: 'delete subscription (lib.components.Subscriptions.subscriptionsLogic)'
        loadSubscriptions: 'load subscriptions (lib.components.Subscriptions.subscriptionsLogic)'
        loadSubscriptionsSuccess: 'load subscriptions success (lib.components.Subscriptions.subscriptionsLogic)'
        loadSubscriptionsFailure: 'load subscriptions failure (lib.components.Subscriptions.subscriptionsLogic)'
    }
    actions: {
        deleteSubscription: (id: number) => void
        loadSubscriptions: (_?: any) => void
        loadSubscriptionsSuccess: (subscriptions: SubscriptionType[], payload?: any) => void
        loadSubscriptionsFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        deleteSubscription: (id: number) => Promise<any>
        loadSubscriptions: (_?: any) => Promise<any>
        loadSubscriptionsSuccess: (subscriptions: SubscriptionType[], payload?: any) => Promise<any>
        loadSubscriptionsFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        subscriptions: SubscriptionType[]
        subscriptionsLoading: boolean
    }
    events: {}
    key: string
    listeners: {
        deleteSubscription: ((
            action: {
                type: 'delete subscription (lib.components.Subscriptions.subscriptionsLogic)'
                payload: {
                    id: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'Subscriptions', 'subscriptionsLogic']
    pathString: 'lib.components.Subscriptions.subscriptionsLogic'
    props: SubscriptionBaseProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        subscriptions: SubscriptionType[]
        subscriptionsLoading: boolean
    }
    reducers: {
        subscriptions: (state: SubscriptionType[], action: any, fullState: any) => SubscriptionType[]
        subscriptionsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        subscriptions: SubscriptionType[]
        subscriptionsLoading: boolean
    }
    selectors: {
        subscriptions: (state: any, props?: any) => SubscriptionType[]
        subscriptionsLoading: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        subscriptions: SubscriptionType[]
        subscriptionsLoading: boolean
    }
    _isKea: true
    _isKeaWithKey: true
}
