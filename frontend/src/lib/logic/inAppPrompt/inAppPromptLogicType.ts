// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:20 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Prompt, PromptSequence, PromptState, PromptUserState, ValidSequenceWithState } from './inAppPromptLogic'

export interface inAppPromptLogicType extends Logic {
    actionCreators: {
        findValidSequences: () => {
            type: 'find valid sequences (lib.logic.inAppPrompt)'
            payload: {
                value: true
            }
        }
        setValidSequences: (validSequences: ValidSequenceWithState[]) => {
            type: 'set valid sequences (lib.logic.inAppPrompt)'
            payload: {
                validSequences: ValidSequenceWithState[]
            }
        }
        runFirstValidSequence: (options: { runDismissedOrCompleted?: boolean }) => {
            type: 'run first valid sequence (lib.logic.inAppPrompt)'
            payload: {
                options: {
                    runDismissedOrCompleted?: boolean | undefined
                }
            }
        }
        runSequence: (
            sequence: PromptSequence,
            step: number
        ) => {
            type: 'run sequence (lib.logic.inAppPrompt)'
            payload: {
                sequence: PromptSequence
                step: number
            }
        }
        promptShownSuccessfully: () => {
            type: 'prompt shown successfully (lib.logic.inAppPrompt)'
            payload: {
                value: true
            }
        }
        closePrompts: () => {
            type: 'close prompts (lib.logic.inAppPrompt)'
            payload: {
                value: true
            }
        }
        dismissSequence: () => {
            type: 'dismiss sequence (lib.logic.inAppPrompt)'
            payload: {
                value: true
            }
        }
        clearSequence: () => {
            type: 'clear sequence (lib.logic.inAppPrompt)'
            payload: {
                value: true
            }
        }
        nextPrompt: () => {
            type: 'next prompt (lib.logic.inAppPrompt)'
            payload: {
                value: true
            }
        }
        previousPrompt: () => {
            type: 'previous prompt (lib.logic.inAppPrompt)'
            payload: {
                value: true
            }
        }
        updatePromptState: (update: Partial<PromptState>) => {
            type: 'update prompt state (lib.logic.inAppPrompt)'
            payload: {
                update: Partial<PromptState>
            }
        }
        setUserState: (
            state: PromptUserState,
            sync?: any
        ) => {
            type: 'set user state (lib.logic.inAppPrompt)'
            payload: {
                state: PromptUserState
                sync: any
            }
        }
        syncState: (options: { forceRun?: boolean }) => {
            type: 'sync state (lib.logic.inAppPrompt)'
            payload: {
                options: {
                    forceRun?: boolean | undefined
                }
            }
        }
        setSequences: (sequences: PromptSequence[]) => {
            type: 'set sequences (lib.logic.inAppPrompt)'
            payload: {
                sequences: PromptSequence[]
            }
        }
        promptAction: (action: string) => {
            type: 'prompt action (lib.logic.inAppPrompt)'
            payload: {
                action: string
            }
        }
        optInProductTour: () => {
            type: 'opt in product tour (lib.logic.inAppPrompt)'
            payload: {
                value: true
            }
        }
        optOutProductTour: () => {
            type: 'opt out product tour (lib.logic.inAppPrompt)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'find valid sequences (lib.logic.inAppPrompt)': 'findValidSequences'
        'set valid sequences (lib.logic.inAppPrompt)': 'setValidSequences'
        'run first valid sequence (lib.logic.inAppPrompt)': 'runFirstValidSequence'
        'run sequence (lib.logic.inAppPrompt)': 'runSequence'
        'prompt shown successfully (lib.logic.inAppPrompt)': 'promptShownSuccessfully'
        'close prompts (lib.logic.inAppPrompt)': 'closePrompts'
        'dismiss sequence (lib.logic.inAppPrompt)': 'dismissSequence'
        'clear sequence (lib.logic.inAppPrompt)': 'clearSequence'
        'next prompt (lib.logic.inAppPrompt)': 'nextPrompt'
        'previous prompt (lib.logic.inAppPrompt)': 'previousPrompt'
        'update prompt state (lib.logic.inAppPrompt)': 'updatePromptState'
        'set user state (lib.logic.inAppPrompt)': 'setUserState'
        'sync state (lib.logic.inAppPrompt)': 'syncState'
        'set sequences (lib.logic.inAppPrompt)': 'setSequences'
        'prompt action (lib.logic.inAppPrompt)': 'promptAction'
        'opt in product tour (lib.logic.inAppPrompt)': 'optInProductTour'
        'opt out product tour (lib.logic.inAppPrompt)': 'optOutProductTour'
    }
    actionTypes: {
        findValidSequences: 'find valid sequences (lib.logic.inAppPrompt)'
        setValidSequences: 'set valid sequences (lib.logic.inAppPrompt)'
        runFirstValidSequence: 'run first valid sequence (lib.logic.inAppPrompt)'
        runSequence: 'run sequence (lib.logic.inAppPrompt)'
        promptShownSuccessfully: 'prompt shown successfully (lib.logic.inAppPrompt)'
        closePrompts: 'close prompts (lib.logic.inAppPrompt)'
        dismissSequence: 'dismiss sequence (lib.logic.inAppPrompt)'
        clearSequence: 'clear sequence (lib.logic.inAppPrompt)'
        nextPrompt: 'next prompt (lib.logic.inAppPrompt)'
        previousPrompt: 'previous prompt (lib.logic.inAppPrompt)'
        updatePromptState: 'update prompt state (lib.logic.inAppPrompt)'
        setUserState: 'set user state (lib.logic.inAppPrompt)'
        syncState: 'sync state (lib.logic.inAppPrompt)'
        setSequences: 'set sequences (lib.logic.inAppPrompt)'
        promptAction: 'prompt action (lib.logic.inAppPrompt)'
        optInProductTour: 'opt in product tour (lib.logic.inAppPrompt)'
        optOutProductTour: 'opt out product tour (lib.logic.inAppPrompt)'
    }
    actions: {
        findValidSequences: () => void
        setValidSequences: (validSequences: ValidSequenceWithState[]) => void
        runFirstValidSequence: (options: { runDismissedOrCompleted?: boolean }) => void
        runSequence: (sequence: PromptSequence, step: number) => void
        promptShownSuccessfully: () => void
        closePrompts: () => void
        dismissSequence: () => void
        clearSequence: () => void
        nextPrompt: () => void
        previousPrompt: () => void
        updatePromptState: (update: Partial<PromptState>) => void
        setUserState: (state: PromptUserState, sync?: any) => void
        syncState: (options: { forceRun?: boolean }) => void
        setSequences: (sequences: PromptSequence[]) => void
        promptAction: (action: string) => void
        optInProductTour: () => void
        optOutProductTour: () => void
    }
    asyncActions: {
        findValidSequences: () => Promise<any>
        setValidSequences: (validSequences: ValidSequenceWithState[]) => Promise<any>
        runFirstValidSequence: (options: { runDismissedOrCompleted?: boolean }) => Promise<any>
        runSequence: (sequence: PromptSequence, step: number) => Promise<any>
        promptShownSuccessfully: () => Promise<any>
        closePrompts: () => Promise<any>
        dismissSequence: () => Promise<any>
        clearSequence: () => Promise<any>
        nextPrompt: () => Promise<any>
        previousPrompt: () => Promise<any>
        updatePromptState: (update: Partial<PromptState>) => Promise<any>
        setUserState: (state: PromptUserState, sync?: any) => Promise<any>
        syncState: (options: { forceRun?: boolean }) => Promise<any>
        setSequences: (sequences: PromptSequence[]) => Promise<any>
        promptAction: (action: string) => Promise<any>
        optInProductTour: () => Promise<any>
        optOutProductTour: () => Promise<any>
    }
    defaults: {
        sequences: PromptSequence[]
        currentSequence: PromptSequence | null
        currentStep: number
        userState: PromptUserState
        canShowProductTour: boolean
        validSequences: ValidSequenceWithState[]
        validProductTourSequences: ValidSequenceWithState[]
        isPromptVisible: boolean
    }
    events: {}
    key: undefined
    listeners: {
        syncState: ((
            action: {
                type: 'sync state (lib.logic.inAppPrompt)'
                payload: {
                    options: {
                        forceRun?: boolean | undefined
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        closePrompts: ((
            action: {
                type: 'close prompts (lib.logic.inAppPrompt)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setSequences: ((
            action: {
                type: 'set sequences (lib.logic.inAppPrompt)'
                payload: {
                    sequences: PromptSequence[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        runSequence: ((
            action: {
                type: 'run sequence (lib.logic.inAppPrompt)'
                payload: {
                    sequence: PromptSequence
                    step: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updatePromptState: ((
            action: {
                type: 'update prompt state (lib.logic.inAppPrompt)'
                payload: {
                    update: Partial<PromptState>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        previousPrompt: ((
            action: {
                type: 'previous prompt (lib.logic.inAppPrompt)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        nextPrompt: ((
            action: {
                type: 'next prompt (lib.logic.inAppPrompt)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        findValidSequences: ((
            action: {
                type: 'find valid sequences (lib.logic.inAppPrompt)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setValidSequences: ((
            action: {
                type: 'set valid sequences (lib.logic.inAppPrompt)'
                payload: {
                    validSequences: ValidSequenceWithState[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        runFirstValidSequence: ((
            action: {
                type: 'run first valid sequence (lib.logic.inAppPrompt)'
                payload: {
                    options: {
                        runDismissedOrCompleted?: boolean | undefined
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        dismissSequence: ((
            action: {
                type: 'dismiss sequence (lib.logic.inAppPrompt)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setUserState: ((
            action: {
                type: 'set user state (lib.logic.inAppPrompt)'
                payload: {
                    state: PromptUserState
                    sync: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        promptAction: ((
            action: {
                type: 'prompt action (lib.logic.inAppPrompt)'
                payload: {
                    action: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'logic', 'inAppPrompt']
    pathString: 'lib.logic.inAppPrompt'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        sequences: PromptSequence[]
        currentSequence: PromptSequence | null
        currentStep: number
        userState: PromptUserState
        canShowProductTour: boolean
        validSequences: ValidSequenceWithState[]
        validProductTourSequences: ValidSequenceWithState[]
        isPromptVisible: boolean
    }
    reducers: {
        sequences: (state: PromptSequence[], action: any, fullState: any) => PromptSequence[]
        currentSequence: (state: PromptSequence | null, action: any, fullState: any) => PromptSequence | null
        currentStep: (state: number, action: any, fullState: any) => number
        userState: (state: PromptUserState, action: any, fullState: any) => PromptUserState
        canShowProductTour: (state: boolean, action: any, fullState: any) => boolean
        validSequences: (state: ValidSequenceWithState[], action: any, fullState: any) => ValidSequenceWithState[]
        validProductTourSequences: (
            state: ValidSequenceWithState[],
            action: any,
            fullState: any
        ) => ValidSequenceWithState[]
        isPromptVisible: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        sequences: PromptSequence[]
        currentSequence: PromptSequence | null
        currentStep: number
        userState: PromptUserState
        canShowProductTour: boolean
        validSequences: ValidSequenceWithState[]
        validProductTourSequences: ValidSequenceWithState[]
        isPromptVisible: boolean
    }
    selectors: {
        sequences: (state: any, props?: any) => PromptSequence[]
        currentSequence: (state: any, props?: any) => PromptSequence | null
        currentStep: (state: any, props?: any) => number
        userState: (state: any, props?: any) => PromptUserState
        canShowProductTour: (state: any, props?: any) => boolean
        validSequences: (state: any, props?: any) => ValidSequenceWithState[]
        validProductTourSequences: (state: any, props?: any) => ValidSequenceWithState[]
        isPromptVisible: (state: any, props?: any) => boolean
        prompts: (state: any, props?: any) => Prompt[]
        sequenceKey: (state: any, props?: any) => string | undefined
    }
    sharedListeners: {}
    values: {
        sequences: PromptSequence[]
        currentSequence: PromptSequence | null
        currentStep: number
        userState: PromptUserState
        canShowProductTour: boolean
        validSequences: ValidSequenceWithState[]
        validProductTourSequences: ValidSequenceWithState[]
        isPromptVisible: boolean
        prompts: Prompt[]
        sequenceKey: string | undefined
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        prompts: (currentSequence: PromptSequence | null) => Prompt[]
        sequenceKey: (currentSequence: PromptSequence | null) => string | undefined
    }
}
