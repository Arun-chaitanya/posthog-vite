// Generated by kea-typegen on Thu, 20 Jul 2023 11:24:06 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PromptButtonType, PromptFlag, PromptPayload } from '../../../types'
import type { LocationChangedPayload } from '../../../../../node_modules/.pnpm/kea-router@3.1.3_kea@3.1.5/node_modules/kea-router/lib/types.d'

export interface promptLogicType extends Logic {
    actionCreators: {
        closePrompt: (
            promptFlag: PromptFlag,
            buttonType: PromptButtonType
        ) => {
            type: 'close prompt (lib.logic.newPrompt.promptLogic)'
            payload: {
                promptFlag: PromptFlag
                buttonType: PromptButtonType
            }
        }
        setPromptFlags: (promptFlags: PromptFlag[]) => {
            type: 'set prompt flags (lib.logic.newPrompt.promptLogic)'
            payload: {
                promptFlags: PromptFlag[]
            }
        }
        searchForValidFlags: () => {
            type: 'search for valid flags (lib.logic.newPrompt.promptLogic)'
            payload: {
                value: true
            }
        }
        setOpenPromptFlag: (promptFlag: PromptFlag) => {
            type: 'set open prompt flag (lib.logic.newPrompt.promptLogic)'
            payload: {
                promptFlag: PromptFlag
            }
        }
        hidePromptWithoutSaving: (promptFlag: PromptFlag) => {
            type: 'hide prompt without saving (lib.logic.newPrompt.promptLogic)'
            payload: {
                promptFlag: PromptFlag
            }
        }
        setFeatureFlags: (
            flags: string[],
            variants: Record<string, string | boolean>
        ) => {
            type: 'set feature flags (lib.logic.newPrompt.promptLogic)'
            payload: {
                flags: string[]
                variants: Record<string, string | boolean>
            }
        }
        locationChanged: ({
            method,
            pathname,
            search,
            searchParams,
            hash,
            hashParams,
            initial,
        }: LocationChangedPayload) => {
            type: 'location changed (lib.logic.newPrompt.promptLogic)'
            payload: {
                method: 'PUSH' | 'REPLACE' | 'POP'
                pathname: string
                search: string
                searchParams: Record<string, any>
                hash: string
                hashParams: Record<string, any>
                initial: boolean
            }
        }
    }
    actionKeys: {
        'close prompt (lib.logic.newPrompt.promptLogic)': 'closePrompt'
        'set prompt flags (lib.logic.newPrompt.promptLogic)': 'setPromptFlags'
        'search for valid flags (lib.logic.newPrompt.promptLogic)': 'searchForValidFlags'
        'set open prompt flag (lib.logic.newPrompt.promptLogic)': 'setOpenPromptFlag'
        'hide prompt without saving (lib.logic.newPrompt.promptLogic)': 'hidePromptWithoutSaving'
        'set feature flags (lib.logic.newPrompt.promptLogic)': 'setFeatureFlags'
        'location changed (lib.logic.newPrompt.promptLogic)': 'locationChanged'
    }
    actionTypes: {
        closePrompt: 'close prompt (lib.logic.newPrompt.promptLogic)'
        setPromptFlags: 'set prompt flags (lib.logic.newPrompt.promptLogic)'
        searchForValidFlags: 'search for valid flags (lib.logic.newPrompt.promptLogic)'
        setOpenPromptFlag: 'set open prompt flag (lib.logic.newPrompt.promptLogic)'
        hidePromptWithoutSaving: 'hide prompt without saving (lib.logic.newPrompt.promptLogic)'
        setFeatureFlags: 'set feature flags (lib.logic.newPrompt.promptLogic)'
        locationChanged: 'location changed (lib.logic.newPrompt.promptLogic)'
    }
    actions: {
        closePrompt: (promptFlag: PromptFlag, buttonType: PromptButtonType) => void
        setPromptFlags: (promptFlags: PromptFlag[]) => void
        searchForValidFlags: () => void
        setOpenPromptFlag: (promptFlag: PromptFlag) => void
        hidePromptWithoutSaving: (promptFlag: PromptFlag) => void
        setFeatureFlags: (flags: string[], variants: Record<string, string | boolean>) => void
        locationChanged: ({
            method,
            pathname,
            search,
            searchParams,
            hash,
            hashParams,
            initial,
        }: LocationChangedPayload) => void
    }
    asyncActions: {
        closePrompt: (promptFlag: PromptFlag, buttonType: PromptButtonType) => Promise<any>
        setPromptFlags: (promptFlags: PromptFlag[]) => Promise<any>
        searchForValidFlags: () => Promise<any>
        setOpenPromptFlag: (promptFlag: PromptFlag) => Promise<any>
        hidePromptWithoutSaving: (promptFlag: PromptFlag) => Promise<any>
        setFeatureFlags: (flags: string[], variants: Record<string, string | boolean>) => Promise<any>
        locationChanged: ({
            method,
            pathname,
            search,
            searchParams,
            hash,
            hashParams,
            initial,
        }: LocationChangedPayload) => Promise<any>
    }
    defaults: {
        promptFlags: PromptFlag[]
    }
    events: {}
    key: undefined
    listeners: {
        setFeatureFlags: ((
            action: {
                type: 'set feature flags (lib.logic.newPrompt.promptLogic)'
                payload: {
                    flags: string[]
                    variants: Record<string, string | boolean>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        searchForValidFlags: ((
            action: {
                type: 'search for valid flags (lib.logic.newPrompt.promptLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setOpenPromptFlag: ((
            action: {
                type: 'set open prompt flag (lib.logic.newPrompt.promptLogic)'
                payload: {
                    promptFlag: PromptFlag
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        closePrompt: ((
            action: {
                type: 'close prompt (lib.logic.newPrompt.promptLogic)'
                payload: {
                    promptFlag: PromptFlag
                    buttonType: PromptButtonType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        locationChanged: ((
            action: {
                type: 'location changed (lib.logic.newPrompt.promptLogic)'
                payload: {
                    method: 'PUSH' | 'REPLACE' | 'POP'
                    pathname: string
                    search: string
                    searchParams: Record<string, any>
                    hash: string
                    hashParams: Record<string, any>
                    initial: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'logic', 'newPrompt', 'promptLogic']
    pathString: 'lib.logic.newPrompt.promptLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        promptFlags: PromptFlag[]
    }
    reducers: {
        promptFlags: (state: PromptFlag[], action: any, fullState: any) => PromptFlag[]
    }
    selector: (state: any) => {
        promptFlags: PromptFlag[]
    }
    selectors: {
        promptFlags: (state: any, props?: any) => PromptFlag[]
        openPromptFlag: (state: any, props?: any) => PromptFlag | undefined
        payload: (state: any, props?: any) => PromptPayload
    }
    sharedListeners: {}
    values: {
        promptFlags: PromptFlag[]
        openPromptFlag: PromptFlag | undefined
        payload: PromptPayload
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        openPromptFlag: (promptFlags: PromptFlag[]) => PromptFlag | undefined
        payload: (openPromptFlag: PromptFlag | undefined) => PromptPayload
    }
}
