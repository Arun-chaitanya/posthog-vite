// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:57 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { IntegrationType, PreflightStatus, SlackChannelType } from '../../../types'

export interface integrationsLogicType extends Logic {
    actionCreators: {
        handleRedirect: (
            kind: string,
            searchParams: any
        ) => {
            type: 'handle redirect (scenes.project.Settings.integrationsLogic)'
            payload: {
                kind: string
                searchParams: any
            }
        }
        deleteIntegration: (id: number) => {
            type: 'delete integration (scenes.project.Settings.integrationsLogic)'
            payload: {
                id: number
            }
        }
        loadIntegrations: () => {
            type: 'load integrations (scenes.project.Settings.integrationsLogic)'
            payload: any
        }
        loadIntegrationsSuccess: (
            integrations: IntegrationType[],
            payload?: any
        ) => {
            type: 'load integrations success (scenes.project.Settings.integrationsLogic)'
            payload: {
                integrations: IntegrationType[]
                payload?: any
            }
        }
        loadIntegrationsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load integrations failure (scenes.project.Settings.integrationsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadSlackChannels: () => {
            type: 'load slack channels (scenes.project.Settings.integrationsLogic)'
            payload: any
        }
        loadSlackChannelsSuccess: (
            slackChannels: SlackChannelType[] | null,
            payload?: any
        ) => {
            type: 'load slack channels success (scenes.project.Settings.integrationsLogic)'
            payload: {
                slackChannels: SlackChannelType[] | null
                payload?: any
            }
        }
        loadSlackChannelsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load slack channels failure (scenes.project.Settings.integrationsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'handle redirect (scenes.project.Settings.integrationsLogic)': 'handleRedirect'
        'delete integration (scenes.project.Settings.integrationsLogic)': 'deleteIntegration'
        'load integrations (scenes.project.Settings.integrationsLogic)': 'loadIntegrations'
        'load integrations success (scenes.project.Settings.integrationsLogic)': 'loadIntegrationsSuccess'
        'load integrations failure (scenes.project.Settings.integrationsLogic)': 'loadIntegrationsFailure'
        'load slack channels (scenes.project.Settings.integrationsLogic)': 'loadSlackChannels'
        'load slack channels success (scenes.project.Settings.integrationsLogic)': 'loadSlackChannelsSuccess'
        'load slack channels failure (scenes.project.Settings.integrationsLogic)': 'loadSlackChannelsFailure'
    }
    actionTypes: {
        handleRedirect: 'handle redirect (scenes.project.Settings.integrationsLogic)'
        deleteIntegration: 'delete integration (scenes.project.Settings.integrationsLogic)'
        loadIntegrations: 'load integrations (scenes.project.Settings.integrationsLogic)'
        loadIntegrationsSuccess: 'load integrations success (scenes.project.Settings.integrationsLogic)'
        loadIntegrationsFailure: 'load integrations failure (scenes.project.Settings.integrationsLogic)'
        loadSlackChannels: 'load slack channels (scenes.project.Settings.integrationsLogic)'
        loadSlackChannelsSuccess: 'load slack channels success (scenes.project.Settings.integrationsLogic)'
        loadSlackChannelsFailure: 'load slack channels failure (scenes.project.Settings.integrationsLogic)'
    }
    actions: {
        handleRedirect: (kind: string, searchParams: any) => void
        deleteIntegration: (id: number) => void
        loadIntegrations: () => void
        loadIntegrationsSuccess: (integrations: IntegrationType[], payload?: any) => void
        loadIntegrationsFailure: (error: string, errorObject?: any) => void
        loadSlackChannels: () => void
        loadSlackChannelsSuccess: (slackChannels: SlackChannelType[] | null, payload?: any) => void
        loadSlackChannelsFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        handleRedirect: (kind: string, searchParams: any) => Promise<any>
        deleteIntegration: (id: number) => Promise<any>
        loadIntegrations: () => Promise<any>
        loadIntegrationsSuccess: (integrations: IntegrationType[], payload?: any) => Promise<any>
        loadIntegrationsFailure: (error: string, errorObject?: any) => Promise<any>
        loadSlackChannels: () => Promise<any>
        loadSlackChannelsSuccess: (slackChannels: SlackChannelType[] | null, payload?: any) => Promise<any>
        loadSlackChannelsFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        integrations: IntegrationType[] | null
        integrationsLoading: boolean
        slackChannels: SlackChannelType[] | null
        slackChannelsLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {
        handleRedirect: ((
            action: {
                type: 'handle redirect (scenes.project.Settings.integrationsLogic)'
                payload: {
                    kind: string
                    searchParams: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        deleteIntegration: ((
            action: {
                type: 'delete integration (scenes.project.Settings.integrationsLogic)'
                payload: {
                    id: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'project', 'Settings', 'integrationsLogic']
    pathString: 'scenes.project.Settings.integrationsLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        integrations: IntegrationType[] | null
        integrationsLoading: boolean
        slackChannels: SlackChannelType[] | null
        slackChannelsLoading: boolean
    }
    reducers: {
        integrations: (state: IntegrationType[] | null, action: any, fullState: any) => IntegrationType[] | null
        integrationsLoading: (state: boolean, action: any, fullState: any) => boolean
        slackChannels: (state: SlackChannelType[] | null, action: any, fullState: any) => SlackChannelType[] | null
        slackChannelsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        integrations: IntegrationType[] | null
        integrationsLoading: boolean
        slackChannels: SlackChannelType[] | null
        slackChannelsLoading: boolean
    }
    selectors: {
        integrations: (state: any, props?: any) => IntegrationType[] | null
        integrationsLoading: (state: any, props?: any) => boolean
        slackChannels: (state: any, props?: any) => SlackChannelType[] | null
        slackChannelsLoading: (state: any, props?: any) => boolean
        preflight: (state: any, props?: any) => PreflightStatus | null
        siteUrlMisconfigured: (state: any, props?: any) => boolean
        slackIntegration: (state: any, props?: any) => IntegrationType | undefined
        isMemberOfSlackChannel: (state: any, props?: any) => (channel: string) => boolean | null | undefined
        addToSlackButtonUrl: (state: any, props?: any) => (next?: string) => string | null
    }
    sharedListeners: {}
    values: {
        integrations: IntegrationType[] | null
        integrationsLoading: boolean
        slackChannels: SlackChannelType[] | null
        slackChannelsLoading: boolean
        preflight: PreflightStatus | null
        siteUrlMisconfigured: boolean
        slackIntegration: IntegrationType | undefined
        isMemberOfSlackChannel: (channel: string) => boolean | null | undefined
        addToSlackButtonUrl: (next?: string) => string | null
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        slackIntegration: (integrations: IntegrationType[] | null) => IntegrationType | undefined
        isMemberOfSlackChannel: (
            slackChannels: SlackChannelType[] | null
        ) => (channel: string) => boolean | null | undefined
        addToSlackButtonUrl: (
            preflight:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').PreflightStatus
                | null
        ) => (next?: string) => string | null
    }
}
