// Generated by kea-typegen on Thu, 20 Jul 2023 11:23:56 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { TeamPublicType, TeamType } from '../../../types'

export interface autocaptureExceptionsLogicType extends Logic {
    actionCreators: {
        updateCurrentTeam: (payload: Partial<TeamType>) => {
            type: 'update current team (scenes.project.Settings.autocaptureExceptionsLogic)'
            payload: Partial<TeamType>
        }
        setErrorsToIgnoreRules: (newRules: string) => {
            type: 'set errors to ignore rules (scenes.project.Settings.autocaptureExceptionsLogic)'
            payload: {
                newRules: string
            }
        }
    }
    actionKeys: {
        'update current team (scenes.project.Settings.autocaptureExceptionsLogic)': 'updateCurrentTeam'
        'set errors to ignore rules (scenes.project.Settings.autocaptureExceptionsLogic)': 'setErrorsToIgnoreRules'
    }
    actionTypes: {
        updateCurrentTeam: 'update current team (scenes.project.Settings.autocaptureExceptionsLogic)'
        setErrorsToIgnoreRules: 'set errors to ignore rules (scenes.project.Settings.autocaptureExceptionsLogic)'
    }
    actions: {
        updateCurrentTeam: (payload: Partial<TeamType>) => void
        setErrorsToIgnoreRules: (newRules: string) => void
    }
    asyncActions: {
        updateCurrentTeam: (payload: Partial<TeamType>) => Promise<any>
        setErrorsToIgnoreRules: (newRules: string) => Promise<any>
    }
    defaults: {
        errorsToIgnoreRules: string
    }
    events: {}
    key: undefined
    listeners: {
        setErrorsToIgnoreRules: ((
            action: {
                type: 'set errors to ignore rules (scenes.project.Settings.autocaptureExceptionsLogic)'
                payload: {
                    newRules: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'project', 'Settings', 'autocaptureExceptionsLogic']
    pathString: 'scenes.project.Settings.autocaptureExceptionsLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        errorsToIgnoreRules: string
    }
    reducers: {
        errorsToIgnoreRules: (state: string, action: any, fullState: any) => string
    }
    selector: (state: any) => {
        errorsToIgnoreRules: string
    }
    selectors: {
        errorsToIgnoreRules: (state: any, props?: any) => string
        currentTeam: (state: any, props?: any) => TeamType | TeamPublicType | null
        currentTeamErrorsToIgnoreRules: (state: any, props?: any) => string
        rulesCharacters: (state: any, props?: any) => number
    }
    sharedListeners: {}
    values: {
        errorsToIgnoreRules: string
        currentTeam: TeamType | TeamPublicType | null
        currentTeamErrorsToIgnoreRules: string
        rulesCharacters: number
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        currentTeamErrorsToIgnoreRules: (
            currentTeam:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamType
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamPublicType
                | null
        ) => string
        rulesCharacters: (errorsToIgnoreRules: string) => number
    }
}
