// Generated by kea-typegen on Thu, 20 Jul 2023 11:18:06 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AvailableFeature, BaseMemberType, ExplicitTeamMemberType, FusedTeamMemberType, OrganizationMemberType, UserBasicType, UserType } from '../../../types'
import type { TeamMembershipLevel } from '../../../lib/constants'
import type { AddMembersFields } from './teamMembersLogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../../node_modules/kea-forms'

export interface teamMembersLogicType extends Logic {
    actionCreators: {
        changeUserAccessLevel: (
            user: UserBasicType,
            newLevel: TeamMembershipLevel
        ) => {
            type: 'change user access level (scenes.project.Settings.teamMembersLogic)'
            payload: {
                user: UserBasicType
                newLevel: TeamMembershipLevel
            }
        }
        loadMembers: () => {
            type: 'load members (scenes.project.Settings.teamMembersLogic)'
            payload: any
        }
        loadMembersSuccess: (
            explicitMembers: ExplicitTeamMemberType[],
            payload?: any
        ) => {
            type: 'load members success (scenes.project.Settings.teamMembersLogic)'
            payload: {
                explicitMembers: ExplicitTeamMemberType[]
                payload?: any
            }
        }
        loadMembersFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load members failure (scenes.project.Settings.teamMembersLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        addMembers: ({ userUuids, level }: AddMembersFields) => {
            type: 'add members (scenes.project.Settings.teamMembersLogic)'
            payload: AddMembersFields
        }
        addMembersSuccess: (
            explicitMembers: ExplicitTeamMemberType[],
            payload?: AddMembersFields
        ) => {
            type: 'add members success (scenes.project.Settings.teamMembersLogic)'
            payload: {
                explicitMembers: ExplicitTeamMemberType[]
                payload?: AddMembersFields
            }
        }
        addMembersFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'add members failure (scenes.project.Settings.teamMembersLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        removeMember: ({ member }: { member: BaseMemberType }) => {
            type: 'remove member (scenes.project.Settings.teamMembersLogic)'
            payload: {
                member: BaseMemberType
            }
        }
        removeMemberSuccess: (
            explicitMembers: ExplicitTeamMemberType[],
            payload?: {
                member: BaseMemberType
            }
        ) => {
            type: 'remove member success (scenes.project.Settings.teamMembersLogic)'
            payload: {
                explicitMembers: ExplicitTeamMemberType[]
                payload?: {
                    member: BaseMemberType
                }
            }
        }
        removeMemberFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'remove member failure (scenes.project.Settings.teamMembersLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setAddMembersValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set add members value (scenes.project.Settings.teamMembersLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setAddMembersValues: (values: DeepPartial<AddMembersFields>) => {
            type: 'set add members values (scenes.project.Settings.teamMembersLogic)'
            payload: {
                values: DeepPartial<AddMembersFields>
            }
        }
        setAddMembersManualErrors: (errors: Record<string, any>) => {
            type: 'set add members manual errors (scenes.project.Settings.teamMembersLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchAddMembersField: (key: string) => {
            type: 'touch add members field (scenes.project.Settings.teamMembersLogic)'
            payload: {
                key: string
            }
        }
        resetAddMembers: (values?: AddMembersFields) => {
            type: 'reset add members (scenes.project.Settings.teamMembersLogic)'
            payload: {
                values?: AddMembersFields
            }
        }
        submitAddMembers: () => {
            type: 'submit add members (scenes.project.Settings.teamMembersLogic)'
            payload: {
                value: boolean
            }
        }
        submitAddMembersRequest: (addMembers: AddMembersFields) => {
            type: 'submit add members request (scenes.project.Settings.teamMembersLogic)'
            payload: {
                addMembers: AddMembersFields
            }
        }
        submitAddMembersSuccess: (addMembers: AddMembersFields) => {
            type: 'submit add members success (scenes.project.Settings.teamMembersLogic)'
            payload: {
                addMembers: AddMembersFields
            }
        }
        submitAddMembersFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit add members failure (scenes.project.Settings.teamMembersLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'change user access level (scenes.project.Settings.teamMembersLogic)': 'changeUserAccessLevel'
        'load members (scenes.project.Settings.teamMembersLogic)': 'loadMembers'
        'load members success (scenes.project.Settings.teamMembersLogic)': 'loadMembersSuccess'
        'load members failure (scenes.project.Settings.teamMembersLogic)': 'loadMembersFailure'
        'add members (scenes.project.Settings.teamMembersLogic)': 'addMembers'
        'add members success (scenes.project.Settings.teamMembersLogic)': 'addMembersSuccess'
        'add members failure (scenes.project.Settings.teamMembersLogic)': 'addMembersFailure'
        'remove member (scenes.project.Settings.teamMembersLogic)': 'removeMember'
        'remove member success (scenes.project.Settings.teamMembersLogic)': 'removeMemberSuccess'
        'remove member failure (scenes.project.Settings.teamMembersLogic)': 'removeMemberFailure'
        'set add members value (scenes.project.Settings.teamMembersLogic)': 'setAddMembersValue'
        'set add members values (scenes.project.Settings.teamMembersLogic)': 'setAddMembersValues'
        'set add members manual errors (scenes.project.Settings.teamMembersLogic)': 'setAddMembersManualErrors'
        'touch add members field (scenes.project.Settings.teamMembersLogic)': 'touchAddMembersField'
        'reset add members (scenes.project.Settings.teamMembersLogic)': 'resetAddMembers'
        'submit add members (scenes.project.Settings.teamMembersLogic)': 'submitAddMembers'
        'submit add members request (scenes.project.Settings.teamMembersLogic)': 'submitAddMembersRequest'
        'submit add members success (scenes.project.Settings.teamMembersLogic)': 'submitAddMembersSuccess'
        'submit add members failure (scenes.project.Settings.teamMembersLogic)': 'submitAddMembersFailure'
    }
    actionTypes: {
        changeUserAccessLevel: 'change user access level (scenes.project.Settings.teamMembersLogic)'
        loadMembers: 'load members (scenes.project.Settings.teamMembersLogic)'
        loadMembersSuccess: 'load members success (scenes.project.Settings.teamMembersLogic)'
        loadMembersFailure: 'load members failure (scenes.project.Settings.teamMembersLogic)'
        addMembers: 'add members (scenes.project.Settings.teamMembersLogic)'
        addMembersSuccess: 'add members success (scenes.project.Settings.teamMembersLogic)'
        addMembersFailure: 'add members failure (scenes.project.Settings.teamMembersLogic)'
        removeMember: 'remove member (scenes.project.Settings.teamMembersLogic)'
        removeMemberSuccess: 'remove member success (scenes.project.Settings.teamMembersLogic)'
        removeMemberFailure: 'remove member failure (scenes.project.Settings.teamMembersLogic)'
        setAddMembersValue: 'set add members value (scenes.project.Settings.teamMembersLogic)'
        setAddMembersValues: 'set add members values (scenes.project.Settings.teamMembersLogic)'
        setAddMembersManualErrors: 'set add members manual errors (scenes.project.Settings.teamMembersLogic)'
        touchAddMembersField: 'touch add members field (scenes.project.Settings.teamMembersLogic)'
        resetAddMembers: 'reset add members (scenes.project.Settings.teamMembersLogic)'
        submitAddMembers: 'submit add members (scenes.project.Settings.teamMembersLogic)'
        submitAddMembersRequest: 'submit add members request (scenes.project.Settings.teamMembersLogic)'
        submitAddMembersSuccess: 'submit add members success (scenes.project.Settings.teamMembersLogic)'
        submitAddMembersFailure: 'submit add members failure (scenes.project.Settings.teamMembersLogic)'
    }
    actions: {
        changeUserAccessLevel: (user: UserBasicType, newLevel: TeamMembershipLevel) => void
        loadMembers: () => void
        loadMembersSuccess: (explicitMembers: ExplicitTeamMemberType[], payload?: any) => void
        loadMembersFailure: (error: string, errorObject?: any) => void
        addMembers: ({ userUuids, level }: AddMembersFields) => void
        addMembersSuccess: (explicitMembers: ExplicitTeamMemberType[], payload?: AddMembersFields) => void
        addMembersFailure: (error: string, errorObject?: any) => void
        removeMember: ({ member }: { member: BaseMemberType }) => void
        removeMemberSuccess: (
            explicitMembers: ExplicitTeamMemberType[],
            payload?: {
                member: BaseMemberType
            }
        ) => void
        removeMemberFailure: (error: string, errorObject?: any) => void
        setAddMembersValue: (key: FieldName, value: any) => void
        setAddMembersValues: (values: DeepPartial<AddMembersFields>) => void
        setAddMembersManualErrors: (errors: Record<string, any>) => void
        touchAddMembersField: (key: string) => void
        resetAddMembers: (values?: AddMembersFields) => void
        submitAddMembers: () => void
        submitAddMembersRequest: (addMembers: AddMembersFields) => void
        submitAddMembersSuccess: (addMembers: AddMembersFields) => void
        submitAddMembersFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        changeUserAccessLevel: (user: UserBasicType, newLevel: TeamMembershipLevel) => Promise<any>
        loadMembers: () => Promise<any>
        loadMembersSuccess: (explicitMembers: ExplicitTeamMemberType[], payload?: any) => Promise<any>
        loadMembersFailure: (error: string, errorObject?: any) => Promise<any>
        addMembers: ({ userUuids, level }: AddMembersFields) => Promise<any>
        addMembersSuccess: (explicitMembers: ExplicitTeamMemberType[], payload?: AddMembersFields) => Promise<any>
        addMembersFailure: (error: string, errorObject?: any) => Promise<any>
        removeMember: ({ member }: { member: BaseMemberType }) => Promise<any>
        removeMemberSuccess: (
            explicitMembers: ExplicitTeamMemberType[],
            payload?: {
                member: BaseMemberType
            }
        ) => Promise<any>
        removeMemberFailure: (error: string, errorObject?: any) => Promise<any>
        setAddMembersValue: (key: FieldName, value: any) => Promise<any>
        setAddMembersValues: (values: DeepPartial<AddMembersFields>) => Promise<any>
        setAddMembersManualErrors: (errors: Record<string, any>) => Promise<any>
        touchAddMembersField: (key: string) => Promise<any>
        resetAddMembers: (values?: AddMembersFields) => Promise<any>
        submitAddMembers: () => Promise<any>
        submitAddMembersRequest: (addMembers: AddMembersFields) => Promise<any>
        submitAddMembersSuccess: (addMembers: AddMembersFields) => Promise<any>
        submitAddMembersFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        explicitMembers: ExplicitTeamMemberType[]
        explicitMembersLoading: boolean
        addMembers: AddMembersFields
        isAddMembersSubmitting: boolean
        showAddMembersErrors: boolean
        addMembersChanged: boolean
        addMembersTouches: Record<string, boolean>
        addMembersManualErrors: Record<string, any>
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {
        changeUserAccessLevel: ((
            action: {
                type: 'change user access level (scenes.project.Settings.teamMembersLogic)'
                payload: {
                    user: UserBasicType
                    newLevel: TeamMembershipLevel
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'project', 'Settings', 'teamMembersLogic']
    pathString: 'scenes.project.Settings.teamMembersLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        explicitMembers: ExplicitTeamMemberType[]
        explicitMembersLoading: boolean
        addMembers: AddMembersFields
        isAddMembersSubmitting: boolean
        showAddMembersErrors: boolean
        addMembersChanged: boolean
        addMembersTouches: Record<string, boolean>
        addMembersManualErrors: Record<string, any>
    }
    reducers: {
        explicitMembers: (state: ExplicitTeamMemberType[], action: any, fullState: any) => ExplicitTeamMemberType[]
        explicitMembersLoading: (state: boolean, action: any, fullState: any) => boolean
        addMembers: (state: AddMembersFields, action: any, fullState: any) => AddMembersFields
        isAddMembersSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showAddMembersErrors: (state: boolean, action: any, fullState: any) => boolean
        addMembersChanged: (state: boolean, action: any, fullState: any) => boolean
        addMembersTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        addMembersManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        explicitMembers: ExplicitTeamMemberType[]
        explicitMembersLoading: boolean
        addMembers: AddMembersFields
        isAddMembersSubmitting: boolean
        showAddMembersErrors: boolean
        addMembersChanged: boolean
        addMembersTouches: Record<string, boolean>
        addMembersManualErrors: Record<string, any>
    }
    selectors: {
        explicitMembers: (state: any, props?: any) => ExplicitTeamMemberType[]
        explicitMembersLoading: (state: any, props?: any) => boolean
        addMembers: (state: any, props?: any) => AddMembersFields
        isAddMembersSubmitting: (state: any, props?: any) => boolean
        showAddMembersErrors: (state: any, props?: any) => boolean
        addMembersChanged: (state: any, props?: any) => boolean
        addMembersTouches: (state: any, props?: any) => Record<string, boolean>
        addMembersManualErrors: (state: any, props?: any) => Record<string, any>
        allMembers: (state: any, props?: any) => FusedTeamMemberType[]
        allMembersLoading: (state: any, props?: any) => boolean
        admins: (state: any, props?: any) => FusedTeamMemberType[]
        plainMembers: (state: any, props?: any) => FusedTeamMemberType[]
        addableMembers: (state: any, props?: any) => FusedTeamMemberType[]
        addMembersTouched: (state: any, props?: any) => boolean
        addMembersValidationErrors: (state: any, props?: any) => DeepPartialMap<AddMembersFields, ValidationErrorType>
        addMembersAllErrors: (state: any, props?: any) => Record<string, any>
        addMembersHasErrors: (state: any, props?: any) => boolean
        addMembersErrors: (state: any, props?: any) => DeepPartialMap<AddMembersFields, ValidationErrorType>
        isAddMembersValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        explicitMembers: ExplicitTeamMemberType[]
        explicitMembersLoading: boolean
        addMembers: AddMembersFields
        isAddMembersSubmitting: boolean
        showAddMembersErrors: boolean
        addMembersChanged: boolean
        addMembersTouches: Record<string, boolean>
        addMembersManualErrors: Record<string, any>
        allMembers: FusedTeamMemberType[]
        allMembersLoading: boolean
        admins: FusedTeamMemberType[]
        plainMembers: FusedTeamMemberType[]
        addableMembers: FusedTeamMemberType[]
        addMembersTouched: boolean
        addMembersValidationErrors: DeepPartialMap<AddMembersFields, ValidationErrorType>
        addMembersAllErrors: Record<string, any>
        addMembersHasErrors: boolean
        addMembersErrors: DeepPartialMap<AddMembersFields, ValidationErrorType>
        isAddMembersValid: boolean
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        allMembers: (
            currentTeam:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamType
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamPublicType
                | null,
            hasAvailableFeature: (feature: AvailableFeature, currentUsage?: number | undefined) => boolean,
            explicitMembers: ExplicitTeamMemberType[],
            members: OrganizationMemberType[]
        ) => FusedTeamMemberType[]
        allMembersLoading: (explicitMembersLoading: boolean, membersLoading: boolean) => boolean
        admins: (allMembers: FusedTeamMemberType[]) => FusedTeamMemberType[]
        plainMembers: (allMembers: FusedTeamMemberType[]) => FusedTeamMemberType[]
        addableMembers: (
            explicitMembers: ExplicitTeamMemberType[],
            members: OrganizationMemberType[],
            user: UserType | null
        ) => FusedTeamMemberType[]
    }
}
