// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:25 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { GroupType } from '../../../types'

export interface groupAnalyticsConfigLogicType extends Logic {
    actionCreators: {
        updateGroupTypesMetadata: (payload: Array<GroupType>) => {
            type: 'update group types metadata (scenes.project.Settings.groupAnalyticsConfigLogic)'
            payload: Array<GroupType>
        }
        setSingular: (
            groupTypeIndex: number,
            value: string
        ) => {
            type: 'set singular (scenes.project.Settings.groupAnalyticsConfigLogic)'
            payload: {
                groupTypeIndex: number
                value: string
            }
        }
        setPlural: (
            groupTypeIndex: number,
            value: string
        ) => {
            type: 'set plural (scenes.project.Settings.groupAnalyticsConfigLogic)'
            payload: {
                groupTypeIndex: number
                value: string
            }
        }
        reset: () => {
            type: 'reset (scenes.project.Settings.groupAnalyticsConfigLogic)'
            payload: {
                value: true
            }
        }
        save: () => {
            type: 'save (scenes.project.Settings.groupAnalyticsConfigLogic)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'update group types metadata (scenes.project.Settings.groupAnalyticsConfigLogic)': 'updateGroupTypesMetadata'
        'set singular (scenes.project.Settings.groupAnalyticsConfigLogic)': 'setSingular'
        'set plural (scenes.project.Settings.groupAnalyticsConfigLogic)': 'setPlural'
        'reset (scenes.project.Settings.groupAnalyticsConfigLogic)': 'reset'
        'save (scenes.project.Settings.groupAnalyticsConfigLogic)': 'save'
    }
    actionTypes: {
        updateGroupTypesMetadata: 'update group types metadata (scenes.project.Settings.groupAnalyticsConfigLogic)'
        setSingular: 'set singular (scenes.project.Settings.groupAnalyticsConfigLogic)'
        setPlural: 'set plural (scenes.project.Settings.groupAnalyticsConfigLogic)'
        reset: 'reset (scenes.project.Settings.groupAnalyticsConfigLogic)'
        save: 'save (scenes.project.Settings.groupAnalyticsConfigLogic)'
    }
    actions: {
        updateGroupTypesMetadata: (payload: Array<GroupType>) => void
        setSingular: (groupTypeIndex: number, value: string) => void
        setPlural: (groupTypeIndex: number, value: string) => void
        reset: () => void
        save: () => void
    }
    asyncActions: {
        updateGroupTypesMetadata: (payload: Array<GroupType>) => Promise<any>
        setSingular: (groupTypeIndex: number, value: string) => Promise<any>
        setPlural: (groupTypeIndex: number, value: string) => Promise<any>
        reset: () => Promise<any>
        save: () => Promise<any>
    }
    defaults: {
        singularChanges: Record<number, string | undefined>
        pluralChanges: Record<number, string | undefined>
    }
    events: {}
    key: undefined
    listeners: {
        save: ((
            action: {
                type: 'save (scenes.project.Settings.groupAnalyticsConfigLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'project', 'Settings', 'groupAnalyticsConfigLogic']
    pathString: 'scenes.project.Settings.groupAnalyticsConfigLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        singularChanges: Record<number, string | undefined>
        pluralChanges: Record<number, string | undefined>
    }
    reducers: {
        singularChanges: (
            state: Record<number, string | undefined>,
            action: any,
            fullState: any
        ) => Record<number, string | undefined>
        pluralChanges: (
            state: Record<number, string | undefined>,
            action: any,
            fullState: any
        ) => Record<number, string | undefined>
    }
    selector: (state: any) => {
        singularChanges: Record<number, string | undefined>
        pluralChanges: Record<number, string | undefined>
    }
    selectors: {
        singularChanges: (state: any, props?: any) => Record<number, string | undefined>
        pluralChanges: (state: any, props?: any) => Record<number, string | undefined>
        groupTypes: (state: any, props?: any) => Array<GroupType>
        groupTypesLoading: (state: any, props?: any) => boolean
        hasChanges: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        singularChanges: Record<number, string | undefined>
        pluralChanges: Record<number, string | undefined>
        groupTypes: Array<GroupType>
        groupTypesLoading: boolean
        hasChanges: boolean
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        hasChanges: (
            singularChanges: Record<number, string | undefined>,
            pluralChanges: Record<number, string | undefined>
        ) => boolean
    }
}
