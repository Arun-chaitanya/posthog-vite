// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:25 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

export interface webhookIntegrationLogicType extends Logic {
    actionCreators: {
        testWebhook: (webhook: string) => {
            type: 'test webhook (scenes.project.Settings.webhookIntegrationLogic)'
            payload: string
        }
        testWebhookSuccess: (
            testedWebhook: string | null,
            payload?: string
        ) => {
            type: 'test webhook success (scenes.project.Settings.webhookIntegrationLogic)'
            payload: {
                testedWebhook: string | null
                payload?: string
            }
        }
        testWebhookFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'test webhook failure (scenes.project.Settings.webhookIntegrationLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        removeWebhook: () => {
            type: 'remove webhook (scenes.project.Settings.webhookIntegrationLogic)'
            payload: any
        }
        removeWebhookSuccess: (
            removedWebhook: null,
            payload?: any
        ) => {
            type: 'remove webhook success (scenes.project.Settings.webhookIntegrationLogic)'
            payload: {
                removedWebhook: null
                payload?: any
            }
        }
        removeWebhookFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'remove webhook failure (scenes.project.Settings.webhookIntegrationLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'test webhook (scenes.project.Settings.webhookIntegrationLogic)': 'testWebhook'
        'test webhook success (scenes.project.Settings.webhookIntegrationLogic)': 'testWebhookSuccess'
        'test webhook failure (scenes.project.Settings.webhookIntegrationLogic)': 'testWebhookFailure'
        'remove webhook (scenes.project.Settings.webhookIntegrationLogic)': 'removeWebhook'
        'remove webhook success (scenes.project.Settings.webhookIntegrationLogic)': 'removeWebhookSuccess'
        'remove webhook failure (scenes.project.Settings.webhookIntegrationLogic)': 'removeWebhookFailure'
    }
    actionTypes: {
        testWebhook: 'test webhook (scenes.project.Settings.webhookIntegrationLogic)'
        testWebhookSuccess: 'test webhook success (scenes.project.Settings.webhookIntegrationLogic)'
        testWebhookFailure: 'test webhook failure (scenes.project.Settings.webhookIntegrationLogic)'
        removeWebhook: 'remove webhook (scenes.project.Settings.webhookIntegrationLogic)'
        removeWebhookSuccess: 'remove webhook success (scenes.project.Settings.webhookIntegrationLogic)'
        removeWebhookFailure: 'remove webhook failure (scenes.project.Settings.webhookIntegrationLogic)'
    }
    actions: {
        testWebhook: (webhook: string) => void
        testWebhookSuccess: (testedWebhook: string | null, payload?: string) => void
        testWebhookFailure: (error: string, errorObject?: any) => void
        removeWebhook: () => void
        removeWebhookSuccess: (removedWebhook: null, payload?: any) => void
        removeWebhookFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        testWebhook: (webhook: string) => Promise<any>
        testWebhookSuccess: (testedWebhook: string | null, payload?: string) => Promise<any>
        testWebhookFailure: (error: string, errorObject?: any) => Promise<any>
        removeWebhook: () => Promise<any>
        removeWebhookSuccess: (removedWebhook: null, payload?: any) => Promise<any>
        removeWebhookFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        testedWebhook: string | null
        testedWebhookLoading: boolean
        removedWebhook: null
        removedWebhookLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {
        testWebhookSuccess: ((
            action: {
                type: 'test webhook success (scenes.project.Settings.webhookIntegrationLogic)'
                payload: {
                    testedWebhook: string | null
                    payload?: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        testWebhookFailure: ((
            action: {
                type: 'test webhook failure (scenes.project.Settings.webhookIntegrationLogic)'
                payload: {
                    error: string
                    errorObject?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'project', 'Settings', 'webhookIntegrationLogic']
    pathString: 'scenes.project.Settings.webhookIntegrationLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        testedWebhook: string | null
        testedWebhookLoading: boolean
        removedWebhook: null
        removedWebhookLoading: boolean
    }
    reducers: {
        testedWebhook: (state: string | null, action: any, fullState: any) => string | null
        testedWebhookLoading: (state: boolean, action: any, fullState: any) => boolean
        removedWebhook: (state: null, action: any, fullState: any) => null
        removedWebhookLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        testedWebhook: string | null
        testedWebhookLoading: boolean
        removedWebhook: null
        removedWebhookLoading: boolean
    }
    selectors: {
        testedWebhook: (state: any, props?: any) => string | null
        testedWebhookLoading: (state: any, props?: any) => boolean
        removedWebhook: (state: any, props?: any) => null
        removedWebhookLoading: (state: any, props?: any) => boolean
        loading: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        testedWebhook: string | null
        testedWebhookLoading: boolean
        removedWebhook: null
        removedWebhookLoading: boolean
        loading: boolean
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        loading: (testedWebhookLoading: boolean, currentTeamLoading: boolean) => boolean
    }
}
