// Generated by kea-typegen on Sun, 06 Aug 2023 09:52:26 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ChartDisplayType, EventType, InsightLogicProps, IntervalType, TrendResult } from '../../types'
import type { ActionsNode, AnyResponseType, BreakdownFilter, EventsNode, EventsQueryResponse, HogQLMetadataResponse, HogQLQueryResponse, InsightFilter, LifecycleFilter, TrendsFilter } from '../../queries/schema'
import type { ShownAsValue } from '../../lib/constants'
import type { IndexedTrendResult } from './types'

export interface trendsDataLogicType extends Logic {
    actionCreators: {
        setInsightData: (response: Exclude<AnyResponseType, undefined>) => {
            type: 'set insight data (scenes.trends.trendsDataLogic.*)'
            payload:
                | Record<string, any>
                | HogQLQueryResponse
                | HogQLMetadataResponse
                | {
                      results: EventType[]
                      next?: string | undefined
                  }
                | EventsQueryResponse
        }
        updateInsightFilter: (insightFilter: InsightFilter) => {
            type: 'update insight filter (scenes.trends.trendsDataLogic.*)'
            payload: {
                insightFilter: InsightFilter
            }
        }
        loadMoreBreakdownValues: () => {
            type: 'load more breakdown values (scenes.trends.trendsDataLogic.*)'
            payload: {
                value: true
            }
        }
        setBreakdownValuesLoading: (loading: boolean) => {
            type: 'set breakdown values loading (scenes.trends.trendsDataLogic.*)'
            payload: {
                loading: boolean
            }
        }
    }
    actionKeys: {
        'set insight data (scenes.trends.trendsDataLogic.*)': 'setInsightData'
        'update insight filter (scenes.trends.trendsDataLogic.*)': 'updateInsightFilter'
        'load more breakdown values (scenes.trends.trendsDataLogic.*)': 'loadMoreBreakdownValues'
        'set breakdown values loading (scenes.trends.trendsDataLogic.*)': 'setBreakdownValuesLoading'
    }
    actionTypes: {
        setInsightData: 'set insight data (scenes.trends.trendsDataLogic.*)'
        updateInsightFilter: 'update insight filter (scenes.trends.trendsDataLogic.*)'
        loadMoreBreakdownValues: 'load more breakdown values (scenes.trends.trendsDataLogic.*)'
        setBreakdownValuesLoading: 'set breakdown values loading (scenes.trends.trendsDataLogic.*)'
    }
    actions: {
        setInsightData: (response: Exclude<AnyResponseType, undefined>) => void
        updateInsightFilter: (insightFilter: InsightFilter) => void
        loadMoreBreakdownValues: () => void
        setBreakdownValuesLoading: (loading: boolean) => void
    }
    asyncActions: {
        setInsightData: (response: Exclude<AnyResponseType, undefined>) => Promise<any>
        updateInsightFilter: (insightFilter: InsightFilter) => Promise<any>
        loadMoreBreakdownValues: () => Promise<any>
        setBreakdownValuesLoading: (loading: boolean) => Promise<any>
    }
    defaults: {
        breakdownValuesLoading: boolean
    }
    events: {}
    key: string
    listeners: {
        loadMoreBreakdownValues: ((
            action: {
                type: 'load more breakdown values (scenes.trends.trendsDataLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'trends', 'trendsDataLogic', '*']
    pathString: 'scenes.trends.trendsDataLogic.*'
    props: InsightLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        breakdownValuesLoading: boolean
    }
    reducers: {
        breakdownValuesLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        breakdownValuesLoading: boolean
    }
    selectors: {
        breakdownValuesLoading: (state: any, props?: any) => boolean
        insightData: (state: any, props?: any) => Record<string, any> | null
        insightDataLoading: (state: any, props?: any) => boolean
        isTrends: (state: any, props?: any) => boolean
        isStickiness: (state: any, props?: any) => boolean
        isLifecycle: (state: any, props?: any) => boolean
        supportsPercentStackView: (state: any, props?: any) => boolean
        breakdown: (state: any, props?: any) => BreakdownFilter | null | undefined
        display: (state: any, props?: any) => ChartDisplayType | null | undefined
        compare: (state: any, props?: any) => boolean | null | undefined
        formula: (state: any, props?: any) => string | null | undefined
        series: (state: any, props?: any) => (EventsNode | ActionsNode)[] | null | undefined
        interval: (state: any, props?: any) => IntervalType | null | undefined
        shownAs: (state: any, props?: any) => ShownAsValue | null | undefined
        showValueOnSeries: (state: any, props?: any) => boolean | null | undefined
        showPercentStackView: (state: any, props?: any) => boolean | null | undefined
        trendsFilter: (state: any, props?: any) => TrendsFilter | null | undefined
        lifecycleFilter: (state: any, props?: any) => LifecycleFilter | null | undefined
        isNonTimeSeriesDisplay: (state: any, props?: any) => boolean
        isSingleSeries: (state: any, props?: any) => boolean
        hasLegend: (state: any, props?: any) => boolean
        results: (state: any, props?: any) => TrendResult[]
        loadMoreBreakdownUrl: (state: any, props?: any) => any
        indexedResults: (state: any, props?: any) => IndexedTrendResult[]
        labelGroupType: (state: any, props?: any) => 'people' | 'none' | number
        incompletenessOffsetFromEnd: (state: any, props?: any) => number
    }
    sharedListeners: {}
    values: {
        breakdownValuesLoading: boolean
        insightData: Record<string, any> | null
        insightDataLoading: boolean
        isTrends: boolean
        isStickiness: boolean
        isLifecycle: boolean
        supportsPercentStackView: boolean
        breakdown: BreakdownFilter | null | undefined
        display: ChartDisplayType | null | undefined
        compare: boolean | null | undefined
        formula: string | null | undefined
        series: (EventsNode | ActionsNode)[] | null | undefined
        interval: IntervalType | null | undefined
        shownAs: ShownAsValue | null | undefined
        showValueOnSeries: boolean | null | undefined
        showPercentStackView: boolean | null | undefined
        trendsFilter: TrendsFilter | null | undefined
        lifecycleFilter: LifecycleFilter | null | undefined
        isNonTimeSeriesDisplay: boolean
        isSingleSeries: boolean
        hasLegend: boolean
        results: TrendResult[]
        loadMoreBreakdownUrl: any
        indexedResults: IndexedTrendResult[]
        labelGroupType: 'people' | 'none' | number
        incompletenessOffsetFromEnd: number
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        results: (insightData: Record<string, any> | null) => TrendResult[]
        loadMoreBreakdownUrl: (insightData: Record<string, any> | null, isTrends: boolean) => any
        indexedResults: (
            results: TrendResult[],
            display: ChartDisplayType | null | undefined,
            lifecycleFilter:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').LifecycleFilter
                | null
                | undefined
        ) => IndexedTrendResult[]
        labelGroupType: (
            series:
                | (
                      | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').EventsNode
                      | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').ActionsNode
                  )[]
                | null
                | undefined
        ) => 'people' | 'none' | number
        incompletenessOffsetFromEnd: (
            results: TrendResult[],
            interval:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').IntervalType
                | null
                | undefined
        ) => number
    }
}
