// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:26 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PreflightStatus } from '../../types'
import type { FeatureFlagsSet } from '../../lib/logic/featureFlagLogic'
import type { LoginStep, TwoFactorForm } from './login2FALogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../node_modules/kea-forms'

export interface login2FALogicType extends Logic {
    actionCreators: {
        setGeneralError: (
            code: string,
            detail: string
        ) => {
            type: 'set general error (scenes.authentication.login2FALogic)'
            payload: {
                code: string
                detail: string
            }
        }
        setLoginStep: (step: LoginStep) => {
            type: 'set login step (scenes.authentication.login2FALogic)'
            payload: {
                step: LoginStep
            }
        }
        clearGeneralError: () => {
            type: 'clear general error (scenes.authentication.login2FALogic)'
            payload: {
                value: true
            }
        }
        setTwofactortokenValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set twofactortoken value (scenes.authentication.login2FALogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setTwofactortokenValues: (values: DeepPartial<TwoFactorForm>) => {
            type: 'set twofactortoken values (scenes.authentication.login2FALogic)'
            payload: {
                values: DeepPartial<TwoFactorForm>
            }
        }
        setTwofactortokenManualErrors: (errors: Record<string, any>) => {
            type: 'set twofactortoken manual errors (scenes.authentication.login2FALogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchTwofactortokenField: (key: string) => {
            type: 'touch twofactortoken field (scenes.authentication.login2FALogic)'
            payload: {
                key: string
            }
        }
        resetTwofactortoken: (values?: TwoFactorForm) => {
            type: 'reset twofactortoken (scenes.authentication.login2FALogic)'
            payload: {
                values?: TwoFactorForm
            }
        }
        submitTwofactortoken: () => {
            type: 'submit twofactortoken (scenes.authentication.login2FALogic)'
            payload: {
                value: boolean
            }
        }
        submitTwofactortokenRequest: (twofactortoken: TwoFactorForm) => {
            type: 'submit twofactortoken request (scenes.authentication.login2FALogic)'
            payload: {
                twofactortoken: TwoFactorForm
            }
        }
        submitTwofactortokenSuccess: (twofactortoken: TwoFactorForm) => {
            type: 'submit twofactortoken success (scenes.authentication.login2FALogic)'
            payload: {
                twofactortoken: TwoFactorForm
            }
        }
        submitTwofactortokenFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit twofactortoken failure (scenes.authentication.login2FALogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'set general error (scenes.authentication.login2FALogic)': 'setGeneralError'
        'set login step (scenes.authentication.login2FALogic)': 'setLoginStep'
        'clear general error (scenes.authentication.login2FALogic)': 'clearGeneralError'
        'set twofactortoken value (scenes.authentication.login2FALogic)': 'setTwofactortokenValue'
        'set twofactortoken values (scenes.authentication.login2FALogic)': 'setTwofactortokenValues'
        'set twofactortoken manual errors (scenes.authentication.login2FALogic)': 'setTwofactortokenManualErrors'
        'touch twofactortoken field (scenes.authentication.login2FALogic)': 'touchTwofactortokenField'
        'reset twofactortoken (scenes.authentication.login2FALogic)': 'resetTwofactortoken'
        'submit twofactortoken (scenes.authentication.login2FALogic)': 'submitTwofactortoken'
        'submit twofactortoken request (scenes.authentication.login2FALogic)': 'submitTwofactortokenRequest'
        'submit twofactortoken success (scenes.authentication.login2FALogic)': 'submitTwofactortokenSuccess'
        'submit twofactortoken failure (scenes.authentication.login2FALogic)': 'submitTwofactortokenFailure'
    }
    actionTypes: {
        setGeneralError: 'set general error (scenes.authentication.login2FALogic)'
        setLoginStep: 'set login step (scenes.authentication.login2FALogic)'
        clearGeneralError: 'clear general error (scenes.authentication.login2FALogic)'
        setTwofactortokenValue: 'set twofactortoken value (scenes.authentication.login2FALogic)'
        setTwofactortokenValues: 'set twofactortoken values (scenes.authentication.login2FALogic)'
        setTwofactortokenManualErrors: 'set twofactortoken manual errors (scenes.authentication.login2FALogic)'
        touchTwofactortokenField: 'touch twofactortoken field (scenes.authentication.login2FALogic)'
        resetTwofactortoken: 'reset twofactortoken (scenes.authentication.login2FALogic)'
        submitTwofactortoken: 'submit twofactortoken (scenes.authentication.login2FALogic)'
        submitTwofactortokenRequest: 'submit twofactortoken request (scenes.authentication.login2FALogic)'
        submitTwofactortokenSuccess: 'submit twofactortoken success (scenes.authentication.login2FALogic)'
        submitTwofactortokenFailure: 'submit twofactortoken failure (scenes.authentication.login2FALogic)'
    }
    actions: {
        setGeneralError: (code: string, detail: string) => void
        setLoginStep: (step: LoginStep) => void
        clearGeneralError: () => void
        setTwofactortokenValue: (key: FieldName, value: any) => void
        setTwofactortokenValues: (values: DeepPartial<TwoFactorForm>) => void
        setTwofactortokenManualErrors: (errors: Record<string, any>) => void
        touchTwofactortokenField: (key: string) => void
        resetTwofactortoken: (values?: TwoFactorForm) => void
        submitTwofactortoken: () => void
        submitTwofactortokenRequest: (twofactortoken: TwoFactorForm) => void
        submitTwofactortokenSuccess: (twofactortoken: TwoFactorForm) => void
        submitTwofactortokenFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        setGeneralError: (code: string, detail: string) => Promise<any>
        setLoginStep: (step: LoginStep) => Promise<any>
        clearGeneralError: () => Promise<any>
        setTwofactortokenValue: (key: FieldName, value: any) => Promise<any>
        setTwofactortokenValues: (values: DeepPartial<TwoFactorForm>) => Promise<any>
        setTwofactortokenManualErrors: (errors: Record<string, any>) => Promise<any>
        touchTwofactortokenField: (key: string) => Promise<any>
        resetTwofactortoken: (values?: TwoFactorForm) => Promise<any>
        submitTwofactortoken: () => Promise<any>
        submitTwofactortokenRequest: (twofactortoken: TwoFactorForm) => Promise<any>
        submitTwofactortokenSuccess: (twofactortoken: TwoFactorForm) => Promise<any>
        submitTwofactortokenFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        generalError: {
            code: string
            detail: string
        } | null
        twofactortoken: TwoFactorForm
        isTwofactortokenSubmitting: boolean
        showTwofactortokenErrors: boolean
        twofactortokenChanged: boolean
        twofactortokenTouches: Record<string, boolean>
        twofactortokenManualErrors: Record<string, any>
    }
    events: {}
    key: undefined
    listeners: {
        submitTwofactortokenSuccess: ((
            action: {
                type: 'submit twofactortoken success (scenes.authentication.login2FALogic)'
                payload: {
                    twofactortoken: TwoFactorForm
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'authentication', 'login2FALogic']
    pathString: 'scenes.authentication.login2FALogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        generalError: {
            code: string
            detail: string
        } | null
        twofactortoken: TwoFactorForm
        isTwofactortokenSubmitting: boolean
        showTwofactortokenErrors: boolean
        twofactortokenChanged: boolean
        twofactortokenTouches: Record<string, boolean>
        twofactortokenManualErrors: Record<string, any>
    }
    reducers: {
        generalError: (
            state: {
                code: string
                detail: string
            } | null,
            action: any,
            fullState: any
        ) => {
            code: string
            detail: string
        } | null
        twofactortoken: (state: TwoFactorForm, action: any, fullState: any) => TwoFactorForm
        isTwofactortokenSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showTwofactortokenErrors: (state: boolean, action: any, fullState: any) => boolean
        twofactortokenChanged: (state: boolean, action: any, fullState: any) => boolean
        twofactortokenTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        twofactortokenManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        generalError: {
            code: string
            detail: string
        } | null
        twofactortoken: TwoFactorForm
        isTwofactortokenSubmitting: boolean
        showTwofactortokenErrors: boolean
        twofactortokenChanged: boolean
        twofactortokenTouches: Record<string, boolean>
        twofactortokenManualErrors: Record<string, any>
    }
    selectors: {
        generalError: (
            state: any,
            props?: any
        ) => {
            code: string
            detail: string
        } | null
        twofactortoken: (state: any, props?: any) => TwoFactorForm
        isTwofactortokenSubmitting: (state: any, props?: any) => boolean
        showTwofactortokenErrors: (state: any, props?: any) => boolean
        twofactortokenChanged: (state: any, props?: any) => boolean
        twofactortokenTouches: (state: any, props?: any) => Record<string, boolean>
        twofactortokenManualErrors: (state: any, props?: any) => Record<string, any>
        preflight: (state: any, props?: any) => PreflightStatus | null
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
        twofactortokenTouched: (state: any, props?: any) => boolean
        twofactortokenValidationErrors: (state: any, props?: any) => DeepPartialMap<TwoFactorForm, ValidationErrorType>
        twofactortokenAllErrors: (state: any, props?: any) => Record<string, any>
        twofactortokenHasErrors: (state: any, props?: any) => boolean
        twofactortokenErrors: (state: any, props?: any) => DeepPartialMap<TwoFactorForm, ValidationErrorType>
        isTwofactortokenValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        generalError: {
            code: string
            detail: string
        } | null
        twofactortoken: TwoFactorForm
        isTwofactortokenSubmitting: boolean
        showTwofactortokenErrors: boolean
        twofactortokenChanged: boolean
        twofactortokenTouches: Record<string, boolean>
        twofactortokenManualErrors: Record<string, any>
        preflight: PreflightStatus | null
        featureFlags: FeatureFlagsSet
        twofactortokenTouched: boolean
        twofactortokenValidationErrors: DeepPartialMap<TwoFactorForm, ValidationErrorType>
        twofactortokenAllErrors: Record<string, any>
        twofactortokenHasErrors: boolean
        twofactortokenErrors: DeepPartialMap<TwoFactorForm, ValidationErrorType>
        isTwofactortokenValid: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
