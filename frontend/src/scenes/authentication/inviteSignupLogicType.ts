// Generated by kea-typegen on Thu, 20 Jul 2023 10:57:06 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AcceptInvitePayloadInterface, ErrorInterface } from './inviteSignupLogic'
import type { PrevalidatedInvite } from '../../types'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../node_modules/kea-forms'

export interface inviteSignupLogicType extends Logic {
    actionCreators: {
        setError: (payload: ErrorInterface) => {
            type: 'set error (scenes.authentication.inviteSignupLogic)'
            payload: {
                payload: ErrorInterface
            }
        }
        prevalidateInvite: (id: string) => {
            type: 'prevalidate invite (scenes.authentication.inviteSignupLogic)'
            payload: string
        }
        prevalidateInviteSuccess: (
            invite: PrevalidatedInvite | null,
            payload?: string
        ) => {
            type: 'prevalidate invite success (scenes.authentication.inviteSignupLogic)'
            payload: {
                invite: PrevalidatedInvite | null
                payload?: string
            }
        }
        prevalidateInviteFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'prevalidate invite failure (scenes.authentication.inviteSignupLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        acceptInvite: (payload?: AcceptInvitePayloadInterface) => {
            type: 'accept invite (scenes.authentication.inviteSignupLogic)'
            payload: AcceptInvitePayloadInterface
        }
        acceptInviteSuccess: (
            acceptedInvite: null,
            payload?: AcceptInvitePayloadInterface
        ) => {
            type: 'accept invite success (scenes.authentication.inviteSignupLogic)'
            payload: {
                acceptedInvite: null
                payload?: AcceptInvitePayloadInterface
            }
        }
        acceptInviteFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'accept invite failure (scenes.authentication.inviteSignupLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setSignupValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set signup value (scenes.authentication.inviteSignupLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setSignupValues: (values: DeepPartial<AcceptInvitePayloadInterface>) => {
            type: 'set signup values (scenes.authentication.inviteSignupLogic)'
            payload: {
                values: DeepPartial<AcceptInvitePayloadInterface>
            }
        }
        setSignupManualErrors: (errors: Record<string, any>) => {
            type: 'set signup manual errors (scenes.authentication.inviteSignupLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchSignupField: (key: string) => {
            type: 'touch signup field (scenes.authentication.inviteSignupLogic)'
            payload: {
                key: string
            }
        }
        resetSignup: (values?: AcceptInvitePayloadInterface) => {
            type: 'reset signup (scenes.authentication.inviteSignupLogic)'
            payload: {
                values?: AcceptInvitePayloadInterface
            }
        }
        submitSignup: () => {
            type: 'submit signup (scenes.authentication.inviteSignupLogic)'
            payload: {
                value: boolean
            }
        }
        submitSignupRequest: (signup: AcceptInvitePayloadInterface) => {
            type: 'submit signup request (scenes.authentication.inviteSignupLogic)'
            payload: {
                signup: AcceptInvitePayloadInterface
            }
        }
        submitSignupSuccess: (signup: AcceptInvitePayloadInterface) => {
            type: 'submit signup success (scenes.authentication.inviteSignupLogic)'
            payload: {
                signup: AcceptInvitePayloadInterface
            }
        }
        submitSignupFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit signup failure (scenes.authentication.inviteSignupLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'set error (scenes.authentication.inviteSignupLogic)': 'setError'
        'prevalidate invite (scenes.authentication.inviteSignupLogic)': 'prevalidateInvite'
        'prevalidate invite success (scenes.authentication.inviteSignupLogic)': 'prevalidateInviteSuccess'
        'prevalidate invite failure (scenes.authentication.inviteSignupLogic)': 'prevalidateInviteFailure'
        'accept invite (scenes.authentication.inviteSignupLogic)': 'acceptInvite'
        'accept invite success (scenes.authentication.inviteSignupLogic)': 'acceptInviteSuccess'
        'accept invite failure (scenes.authentication.inviteSignupLogic)': 'acceptInviteFailure'
        'set signup value (scenes.authentication.inviteSignupLogic)': 'setSignupValue'
        'set signup values (scenes.authentication.inviteSignupLogic)': 'setSignupValues'
        'set signup manual errors (scenes.authentication.inviteSignupLogic)': 'setSignupManualErrors'
        'touch signup field (scenes.authentication.inviteSignupLogic)': 'touchSignupField'
        'reset signup (scenes.authentication.inviteSignupLogic)': 'resetSignup'
        'submit signup (scenes.authentication.inviteSignupLogic)': 'submitSignup'
        'submit signup request (scenes.authentication.inviteSignupLogic)': 'submitSignupRequest'
        'submit signup success (scenes.authentication.inviteSignupLogic)': 'submitSignupSuccess'
        'submit signup failure (scenes.authentication.inviteSignupLogic)': 'submitSignupFailure'
    }
    actionTypes: {
        setError: 'set error (scenes.authentication.inviteSignupLogic)'
        prevalidateInvite: 'prevalidate invite (scenes.authentication.inviteSignupLogic)'
        prevalidateInviteSuccess: 'prevalidate invite success (scenes.authentication.inviteSignupLogic)'
        prevalidateInviteFailure: 'prevalidate invite failure (scenes.authentication.inviteSignupLogic)'
        acceptInvite: 'accept invite (scenes.authentication.inviteSignupLogic)'
        acceptInviteSuccess: 'accept invite success (scenes.authentication.inviteSignupLogic)'
        acceptInviteFailure: 'accept invite failure (scenes.authentication.inviteSignupLogic)'
        setSignupValue: 'set signup value (scenes.authentication.inviteSignupLogic)'
        setSignupValues: 'set signup values (scenes.authentication.inviteSignupLogic)'
        setSignupManualErrors: 'set signup manual errors (scenes.authentication.inviteSignupLogic)'
        touchSignupField: 'touch signup field (scenes.authentication.inviteSignupLogic)'
        resetSignup: 'reset signup (scenes.authentication.inviteSignupLogic)'
        submitSignup: 'submit signup (scenes.authentication.inviteSignupLogic)'
        submitSignupRequest: 'submit signup request (scenes.authentication.inviteSignupLogic)'
        submitSignupSuccess: 'submit signup success (scenes.authentication.inviteSignupLogic)'
        submitSignupFailure: 'submit signup failure (scenes.authentication.inviteSignupLogic)'
    }
    actions: {
        setError: (payload: ErrorInterface) => void
        prevalidateInvite: (id: string) => void
        prevalidateInviteSuccess: (invite: PrevalidatedInvite | null, payload?: string) => void
        prevalidateInviteFailure: (error: string, errorObject?: any) => void
        acceptInvite: (payload?: AcceptInvitePayloadInterface) => void
        acceptInviteSuccess: (acceptedInvite: null, payload?: AcceptInvitePayloadInterface) => void
        acceptInviteFailure: (error: string, errorObject?: any) => void
        setSignupValue: (key: FieldName, value: any) => void
        setSignupValues: (values: DeepPartial<AcceptInvitePayloadInterface>) => void
        setSignupManualErrors: (errors: Record<string, any>) => void
        touchSignupField: (key: string) => void
        resetSignup: (values?: AcceptInvitePayloadInterface) => void
        submitSignup: () => void
        submitSignupRequest: (signup: AcceptInvitePayloadInterface) => void
        submitSignupSuccess: (signup: AcceptInvitePayloadInterface) => void
        submitSignupFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        setError: (payload: ErrorInterface) => Promise<any>
        prevalidateInvite: (id: string) => Promise<any>
        prevalidateInviteSuccess: (invite: PrevalidatedInvite | null, payload?: string) => Promise<any>
        prevalidateInviteFailure: (error: string, errorObject?: any) => Promise<any>
        acceptInvite: (payload?: AcceptInvitePayloadInterface) => Promise<any>
        acceptInviteSuccess: (acceptedInvite: null, payload?: AcceptInvitePayloadInterface) => Promise<any>
        acceptInviteFailure: (error: string, errorObject?: any) => Promise<any>
        setSignupValue: (key: FieldName, value: any) => Promise<any>
        setSignupValues: (values: DeepPartial<AcceptInvitePayloadInterface>) => Promise<any>
        setSignupManualErrors: (errors: Record<string, any>) => Promise<any>
        touchSignupField: (key: string) => Promise<any>
        resetSignup: (values?: AcceptInvitePayloadInterface) => Promise<any>
        submitSignup: () => Promise<any>
        submitSignupRequest: (signup: AcceptInvitePayloadInterface) => Promise<any>
        submitSignupSuccess: (signup: AcceptInvitePayloadInterface) => Promise<any>
        submitSignupFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        error: ErrorInterface | null
        invite: PrevalidatedInvite | null
        inviteLoading: boolean
        acceptedInvite: null
        acceptedInviteLoading: boolean
        signup: AcceptInvitePayloadInterface
        isSignupSubmitting: boolean
        showSignupErrors: boolean
        signupChanged: boolean
        signupTouches: Record<string, boolean>
        signupManualErrors: Record<string, any>
    }
    events: {}
    key: undefined
    listeners: {
        prevalidateInviteSuccess: ((
            action: {
                type: 'prevalidate invite success (scenes.authentication.inviteSignupLogic)'
                payload: {
                    invite: PrevalidatedInvite | null
                    payload?: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'authentication', 'inviteSignupLogic']
    pathString: 'scenes.authentication.inviteSignupLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        error: ErrorInterface | null
        invite: PrevalidatedInvite | null
        inviteLoading: boolean
        acceptedInvite: null
        acceptedInviteLoading: boolean
        signup: AcceptInvitePayloadInterface
        isSignupSubmitting: boolean
        showSignupErrors: boolean
        signupChanged: boolean
        signupTouches: Record<string, boolean>
        signupManualErrors: Record<string, any>
    }
    reducers: {
        error: (state: ErrorInterface | null, action: any, fullState: any) => ErrorInterface | null
        invite: (state: PrevalidatedInvite | null, action: any, fullState: any) => PrevalidatedInvite | null
        inviteLoading: (state: boolean, action: any, fullState: any) => boolean
        acceptedInvite: (state: null, action: any, fullState: any) => null
        acceptedInviteLoading: (state: boolean, action: any, fullState: any) => boolean
        signup: (state: AcceptInvitePayloadInterface, action: any, fullState: any) => AcceptInvitePayloadInterface
        isSignupSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showSignupErrors: (state: boolean, action: any, fullState: any) => boolean
        signupChanged: (state: boolean, action: any, fullState: any) => boolean
        signupTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        signupManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        error: ErrorInterface | null
        invite: PrevalidatedInvite | null
        inviteLoading: boolean
        acceptedInvite: null
        acceptedInviteLoading: boolean
        signup: AcceptInvitePayloadInterface
        isSignupSubmitting: boolean
        showSignupErrors: boolean
        signupChanged: boolean
        signupTouches: Record<string, boolean>
        signupManualErrors: Record<string, any>
    }
    selectors: {
        error: (state: any, props?: any) => ErrorInterface | null
        invite: (state: any, props?: any) => PrevalidatedInvite | null
        inviteLoading: (state: any, props?: any) => boolean
        acceptedInvite: (state: any, props?: any) => null
        acceptedInviteLoading: (state: any, props?: any) => boolean
        signup: (state: any, props?: any) => AcceptInvitePayloadInterface
        isSignupSubmitting: (state: any, props?: any) => boolean
        showSignupErrors: (state: any, props?: any) => boolean
        signupChanged: (state: any, props?: any) => boolean
        signupTouches: (state: any, props?: any) => Record<string, boolean>
        signupManualErrors: (state: any, props?: any) => Record<string, any>
        signupTouched: (state: any, props?: any) => boolean
        signupValidationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<AcceptInvitePayloadInterface, ValidationErrorType>
        signupAllErrors: (state: any, props?: any) => Record<string, any>
        signupHasErrors: (state: any, props?: any) => boolean
        signupErrors: (state: any, props?: any) => DeepPartialMap<AcceptInvitePayloadInterface, ValidationErrorType>
        isSignupValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        error: ErrorInterface | null
        invite: PrevalidatedInvite | null
        inviteLoading: boolean
        acceptedInvite: null
        acceptedInviteLoading: boolean
        signup: AcceptInvitePayloadInterface
        isSignupSubmitting: boolean
        showSignupErrors: boolean
        signupChanged: boolean
        signupTouches: Record<string, boolean>
        signupManualErrors: Record<string, any>
        signupTouched: boolean
        signupValidationErrors: DeepPartialMap<AcceptInvitePayloadInterface, ValidationErrorType>
        signupAllErrors: Record<string, any>
        signupHasErrors: boolean
        signupErrors: DeepPartialMap<AcceptInvitePayloadInterface, ValidationErrorType>
        isSignupValid: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
