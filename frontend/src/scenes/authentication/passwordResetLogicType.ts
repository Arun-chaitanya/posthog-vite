// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:26 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PasswordResetForm, ValidatedTokenResponseType } from './passwordResetLogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../node_modules/kea-forms'

export interface passwordResetLogicType extends Logic {
    actionCreators: {
        validateResetToken: ({ uuid, token }: { uuid: string; token: string }) => {
            type: 'validate reset token (scenes.authentication.passwordResetLogic)'
            payload: {
                uuid: string
                token: string
            }
        }
        validateResetTokenSuccess: (
            validatedResetToken:
                | { success: true; token: string; uuid: string; errorCode?: undefined; errorDetail?: undefined }
                | { success: false; errorCode: any; errorDetail: any; token?: undefined; uuid?: undefined },
            payload?: {
                uuid: string
                token: string
            }
        ) => {
            type: 'validate reset token success (scenes.authentication.passwordResetLogic)'
            payload: {
                validatedResetToken:
                    | { success: true; token: string; uuid: string; errorCode?: undefined; errorDetail?: undefined }
                    | { success: false; errorCode: any; errorDetail: any; token?: undefined; uuid?: undefined }
                payload?: {
                    uuid: string
                    token: string
                }
            }
        }
        validateResetTokenFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'validate reset token failure (scenes.authentication.passwordResetLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setRequestPasswordResetValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set request password reset value (scenes.authentication.passwordResetLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setRequestPasswordResetValues: (
            values: DeepPartial<{
                email: string
            }>
        ) => {
            type: 'set request password reset values (scenes.authentication.passwordResetLogic)'
            payload: {
                values: DeepPartial<{
                    email: string
                }>
            }
        }
        setRequestPasswordResetManualErrors: (errors: Record<string, any>) => {
            type: 'set request password reset manual errors (scenes.authentication.passwordResetLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchRequestPasswordResetField: (key: string) => {
            type: 'touch request password reset field (scenes.authentication.passwordResetLogic)'
            payload: {
                key: string
            }
        }
        resetRequestPasswordReset: (values?: { email: string }) => {
            type: 'reset request password reset (scenes.authentication.passwordResetLogic)'
            payload: {
                values?: {
                    email: string
                }
            }
        }
        submitRequestPasswordReset: () => {
            type: 'submit request password reset (scenes.authentication.passwordResetLogic)'
            payload: {
                value: boolean
            }
        }
        submitRequestPasswordResetRequest: (requestPasswordReset: { email: string }) => {
            type: 'submit request password reset request (scenes.authentication.passwordResetLogic)'
            payload: {
                requestPasswordReset: {
                    email: string
                }
            }
        }
        submitRequestPasswordResetSuccess: (requestPasswordReset: { email: string }) => {
            type: 'submit request password reset success (scenes.authentication.passwordResetLogic)'
            payload: {
                requestPasswordReset: {
                    email: string
                }
            }
        }
        submitRequestPasswordResetFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit request password reset failure (scenes.authentication.passwordResetLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
        setPasswordResetValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set password reset value (scenes.authentication.passwordResetLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setPasswordResetValues: (values: DeepPartial<PasswordResetForm>) => {
            type: 'set password reset values (scenes.authentication.passwordResetLogic)'
            payload: {
                values: DeepPartial<PasswordResetForm>
            }
        }
        setPasswordResetManualErrors: (errors: Record<string, any>) => {
            type: 'set password reset manual errors (scenes.authentication.passwordResetLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchPasswordResetField: (key: string) => {
            type: 'touch password reset field (scenes.authentication.passwordResetLogic)'
            payload: {
                key: string
            }
        }
        resetPasswordReset: (values?: PasswordResetForm) => {
            type: 'reset password reset (scenes.authentication.passwordResetLogic)'
            payload: {
                values?: PasswordResetForm
            }
        }
        submitPasswordReset: () => {
            type: 'submit password reset (scenes.authentication.passwordResetLogic)'
            payload: {
                value: boolean
            }
        }
        submitPasswordResetRequest: (passwordReset: PasswordResetForm) => {
            type: 'submit password reset request (scenes.authentication.passwordResetLogic)'
            payload: {
                passwordReset: PasswordResetForm
            }
        }
        submitPasswordResetSuccess: (passwordReset: PasswordResetForm) => {
            type: 'submit password reset success (scenes.authentication.passwordResetLogic)'
            payload: {
                passwordReset: PasswordResetForm
            }
        }
        submitPasswordResetFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit password reset failure (scenes.authentication.passwordResetLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'validate reset token (scenes.authentication.passwordResetLogic)': 'validateResetToken'
        'validate reset token success (scenes.authentication.passwordResetLogic)': 'validateResetTokenSuccess'
        'validate reset token failure (scenes.authentication.passwordResetLogic)': 'validateResetTokenFailure'
        'set request password reset value (scenes.authentication.passwordResetLogic)': 'setRequestPasswordResetValue'
        'set request password reset values (scenes.authentication.passwordResetLogic)': 'setRequestPasswordResetValues'
        'set request password reset manual errors (scenes.authentication.passwordResetLogic)': 'setRequestPasswordResetManualErrors'
        'touch request password reset field (scenes.authentication.passwordResetLogic)': 'touchRequestPasswordResetField'
        'reset request password reset (scenes.authentication.passwordResetLogic)': 'resetRequestPasswordReset'
        'submit request password reset (scenes.authentication.passwordResetLogic)': 'submitRequestPasswordReset'
        'submit request password reset request (scenes.authentication.passwordResetLogic)': 'submitRequestPasswordResetRequest'
        'submit request password reset success (scenes.authentication.passwordResetLogic)': 'submitRequestPasswordResetSuccess'
        'submit request password reset failure (scenes.authentication.passwordResetLogic)': 'submitRequestPasswordResetFailure'
        'set password reset value (scenes.authentication.passwordResetLogic)': 'setPasswordResetValue'
        'set password reset values (scenes.authentication.passwordResetLogic)': 'setPasswordResetValues'
        'set password reset manual errors (scenes.authentication.passwordResetLogic)': 'setPasswordResetManualErrors'
        'touch password reset field (scenes.authentication.passwordResetLogic)': 'touchPasswordResetField'
        'reset password reset (scenes.authentication.passwordResetLogic)': 'resetPasswordReset'
        'submit password reset (scenes.authentication.passwordResetLogic)': 'submitPasswordReset'
        'submit password reset request (scenes.authentication.passwordResetLogic)': 'submitPasswordResetRequest'
        'submit password reset success (scenes.authentication.passwordResetLogic)': 'submitPasswordResetSuccess'
        'submit password reset failure (scenes.authentication.passwordResetLogic)': 'submitPasswordResetFailure'
    }
    actionTypes: {
        validateResetToken: 'validate reset token (scenes.authentication.passwordResetLogic)'
        validateResetTokenSuccess: 'validate reset token success (scenes.authentication.passwordResetLogic)'
        validateResetTokenFailure: 'validate reset token failure (scenes.authentication.passwordResetLogic)'
        setRequestPasswordResetValue: 'set request password reset value (scenes.authentication.passwordResetLogic)'
        setRequestPasswordResetValues: 'set request password reset values (scenes.authentication.passwordResetLogic)'
        setRequestPasswordResetManualErrors: 'set request password reset manual errors (scenes.authentication.passwordResetLogic)'
        touchRequestPasswordResetField: 'touch request password reset field (scenes.authentication.passwordResetLogic)'
        resetRequestPasswordReset: 'reset request password reset (scenes.authentication.passwordResetLogic)'
        submitRequestPasswordReset: 'submit request password reset (scenes.authentication.passwordResetLogic)'
        submitRequestPasswordResetRequest: 'submit request password reset request (scenes.authentication.passwordResetLogic)'
        submitRequestPasswordResetSuccess: 'submit request password reset success (scenes.authentication.passwordResetLogic)'
        submitRequestPasswordResetFailure: 'submit request password reset failure (scenes.authentication.passwordResetLogic)'
        setPasswordResetValue: 'set password reset value (scenes.authentication.passwordResetLogic)'
        setPasswordResetValues: 'set password reset values (scenes.authentication.passwordResetLogic)'
        setPasswordResetManualErrors: 'set password reset manual errors (scenes.authentication.passwordResetLogic)'
        touchPasswordResetField: 'touch password reset field (scenes.authentication.passwordResetLogic)'
        resetPasswordReset: 'reset password reset (scenes.authentication.passwordResetLogic)'
        submitPasswordReset: 'submit password reset (scenes.authentication.passwordResetLogic)'
        submitPasswordResetRequest: 'submit password reset request (scenes.authentication.passwordResetLogic)'
        submitPasswordResetSuccess: 'submit password reset success (scenes.authentication.passwordResetLogic)'
        submitPasswordResetFailure: 'submit password reset failure (scenes.authentication.passwordResetLogic)'
    }
    actions: {
        validateResetToken: ({ uuid, token }: { uuid: string; token: string }) => void
        validateResetTokenSuccess: (
            validatedResetToken:
                | { success: true; token: string; uuid: string; errorCode?: undefined; errorDetail?: undefined }
                | { success: false; errorCode: any; errorDetail: any; token?: undefined; uuid?: undefined },
            payload?: {
                uuid: string
                token: string
            }
        ) => void
        validateResetTokenFailure: (error: string, errorObject?: any) => void
        setRequestPasswordResetValue: (key: FieldName, value: any) => void
        setRequestPasswordResetValues: (
            values: DeepPartial<{
                email: string
            }>
        ) => void
        setRequestPasswordResetManualErrors: (errors: Record<string, any>) => void
        touchRequestPasswordResetField: (key: string) => void
        resetRequestPasswordReset: (values?: { email: string }) => void
        submitRequestPasswordReset: () => void
        submitRequestPasswordResetRequest: (requestPasswordReset: { email: string }) => void
        submitRequestPasswordResetSuccess: (requestPasswordReset: { email: string }) => void
        submitRequestPasswordResetFailure: (error: Error, errors: Record<string, any>) => void
        setPasswordResetValue: (key: FieldName, value: any) => void
        setPasswordResetValues: (values: DeepPartial<PasswordResetForm>) => void
        setPasswordResetManualErrors: (errors: Record<string, any>) => void
        touchPasswordResetField: (key: string) => void
        resetPasswordReset: (values?: PasswordResetForm) => void
        submitPasswordReset: () => void
        submitPasswordResetRequest: (passwordReset: PasswordResetForm) => void
        submitPasswordResetSuccess: (passwordReset: PasswordResetForm) => void
        submitPasswordResetFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        validateResetToken: ({ uuid, token }: { uuid: string; token: string }) => Promise<any>
        validateResetTokenSuccess: (
            validatedResetToken:
                | { success: true; token: string; uuid: string; errorCode?: undefined; errorDetail?: undefined }
                | { success: false; errorCode: any; errorDetail: any; token?: undefined; uuid?: undefined },
            payload?: {
                uuid: string
                token: string
            }
        ) => Promise<any>
        validateResetTokenFailure: (error: string, errorObject?: any) => Promise<any>
        setRequestPasswordResetValue: (key: FieldName, value: any) => Promise<any>
        setRequestPasswordResetValues: (
            values: DeepPartial<{
                email: string
            }>
        ) => Promise<any>
        setRequestPasswordResetManualErrors: (errors: Record<string, any>) => Promise<any>
        touchRequestPasswordResetField: (key: string) => Promise<any>
        resetRequestPasswordReset: (values?: { email: string }) => Promise<any>
        submitRequestPasswordReset: () => Promise<any>
        submitRequestPasswordResetRequest: (requestPasswordReset: { email: string }) => Promise<any>
        submitRequestPasswordResetSuccess: (requestPasswordReset: { email: string }) => Promise<any>
        submitRequestPasswordResetFailure: (error: Error, errors: Record<string, any>) => Promise<any>
        setPasswordResetValue: (key: FieldName, value: any) => Promise<any>
        setPasswordResetValues: (values: DeepPartial<PasswordResetForm>) => Promise<any>
        setPasswordResetManualErrors: (errors: Record<string, any>) => Promise<any>
        touchPasswordResetField: (key: string) => Promise<any>
        resetPasswordReset: (values?: PasswordResetForm) => Promise<any>
        submitPasswordReset: () => Promise<any>
        submitPasswordResetRequest: (passwordReset: PasswordResetForm) => Promise<any>
        submitPasswordResetSuccess: (passwordReset: PasswordResetForm) => Promise<any>
        submitPasswordResetFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        validatedResetToken: ValidatedTokenResponseType | null
        validatedResetTokenLoading: boolean
        requestPasswordResetSucceeded: boolean
        passwordResetSucceeded: boolean
        requestPasswordReset: {
            email: string
        }
        isRequestPasswordResetSubmitting: boolean
        showRequestPasswordResetErrors: boolean
        requestPasswordResetChanged: boolean
        requestPasswordResetTouches: Record<string, boolean>
        requestPasswordResetManualErrors: Record<string, any>
        passwordReset: PasswordResetForm
        isPasswordResetSubmitting: boolean
        showPasswordResetErrors: boolean
        passwordResetChanged: boolean
        passwordResetTouches: Record<string, boolean>
        passwordResetManualErrors: Record<string, any>
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'authentication', 'passwordResetLogic']
    pathString: 'scenes.authentication.passwordResetLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        validatedResetToken: ValidatedTokenResponseType | null
        validatedResetTokenLoading: boolean
        requestPasswordResetSucceeded: boolean
        passwordResetSucceeded: boolean
        requestPasswordReset: {
            email: string
        }
        isRequestPasswordResetSubmitting: boolean
        showRequestPasswordResetErrors: boolean
        requestPasswordResetChanged: boolean
        requestPasswordResetTouches: Record<string, boolean>
        requestPasswordResetManualErrors: Record<string, any>
        passwordReset: PasswordResetForm
        isPasswordResetSubmitting: boolean
        showPasswordResetErrors: boolean
        passwordResetChanged: boolean
        passwordResetTouches: Record<string, boolean>
        passwordResetManualErrors: Record<string, any>
    }
    reducers: {
        validatedResetToken: (
            state: ValidatedTokenResponseType | null,
            action: any,
            fullState: any
        ) => ValidatedTokenResponseType | null
        validatedResetTokenLoading: (state: boolean, action: any, fullState: any) => boolean
        requestPasswordResetSucceeded: (state: boolean, action: any, fullState: any) => boolean
        passwordResetSucceeded: (state: boolean, action: any, fullState: any) => boolean
        requestPasswordReset: (
            state: {
                email: string
            },
            action: any,
            fullState: any
        ) => {
            email: string
        }
        isRequestPasswordResetSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showRequestPasswordResetErrors: (state: boolean, action: any, fullState: any) => boolean
        requestPasswordResetChanged: (state: boolean, action: any, fullState: any) => boolean
        requestPasswordResetTouches: (
            state: Record<string, boolean>,
            action: any,
            fullState: any
        ) => Record<string, boolean>
        requestPasswordResetManualErrors: (
            state: Record<string, any>,
            action: any,
            fullState: any
        ) => Record<string, any>
        passwordReset: (state: PasswordResetForm, action: any, fullState: any) => PasswordResetForm
        isPasswordResetSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showPasswordResetErrors: (state: boolean, action: any, fullState: any) => boolean
        passwordResetChanged: (state: boolean, action: any, fullState: any) => boolean
        passwordResetTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        passwordResetManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        validatedResetToken: ValidatedTokenResponseType | null
        validatedResetTokenLoading: boolean
        requestPasswordResetSucceeded: boolean
        passwordResetSucceeded: boolean
        requestPasswordReset: {
            email: string
        }
        isRequestPasswordResetSubmitting: boolean
        showRequestPasswordResetErrors: boolean
        requestPasswordResetChanged: boolean
        requestPasswordResetTouches: Record<string, boolean>
        requestPasswordResetManualErrors: Record<string, any>
        passwordReset: PasswordResetForm
        isPasswordResetSubmitting: boolean
        showPasswordResetErrors: boolean
        passwordResetChanged: boolean
        passwordResetTouches: Record<string, boolean>
        passwordResetManualErrors: Record<string, any>
    }
    selectors: {
        validatedResetToken: (state: any, props?: any) => ValidatedTokenResponseType | null
        validatedResetTokenLoading: (state: any, props?: any) => boolean
        requestPasswordResetSucceeded: (state: any, props?: any) => boolean
        passwordResetSucceeded: (state: any, props?: any) => boolean
        requestPasswordReset: (
            state: any,
            props?: any
        ) => {
            email: string
        }
        isRequestPasswordResetSubmitting: (state: any, props?: any) => boolean
        showRequestPasswordResetErrors: (state: any, props?: any) => boolean
        requestPasswordResetChanged: (state: any, props?: any) => boolean
        requestPasswordResetTouches: (state: any, props?: any) => Record<string, boolean>
        requestPasswordResetManualErrors: (state: any, props?: any) => Record<string, any>
        passwordReset: (state: any, props?: any) => PasswordResetForm
        isPasswordResetSubmitting: (state: any, props?: any) => boolean
        showPasswordResetErrors: (state: any, props?: any) => boolean
        passwordResetChanged: (state: any, props?: any) => boolean
        passwordResetTouches: (state: any, props?: any) => Record<string, boolean>
        passwordResetManualErrors: (state: any, props?: any) => Record<string, any>
        requestPasswordResetTouched: (state: any, props?: any) => boolean
        requestPasswordResetValidationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<
            {
                email: string
            },
            ValidationErrorType
        >
        requestPasswordResetAllErrors: (state: any, props?: any) => Record<string, any>
        requestPasswordResetHasErrors: (state: any, props?: any) => boolean
        requestPasswordResetErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<
            {
                email: string
            },
            ValidationErrorType
        >
        isRequestPasswordResetValid: (state: any, props?: any) => boolean
        passwordResetTouched: (state: any, props?: any) => boolean
        passwordResetValidationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<PasswordResetForm, ValidationErrorType>
        passwordResetAllErrors: (state: any, props?: any) => Record<string, any>
        passwordResetHasErrors: (state: any, props?: any) => boolean
        passwordResetErrors: (state: any, props?: any) => DeepPartialMap<PasswordResetForm, ValidationErrorType>
        isPasswordResetValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        validatedResetToken: ValidatedTokenResponseType | null
        validatedResetTokenLoading: boolean
        requestPasswordResetSucceeded: boolean
        passwordResetSucceeded: boolean
        requestPasswordReset: {
            email: string
        }
        isRequestPasswordResetSubmitting: boolean
        showRequestPasswordResetErrors: boolean
        requestPasswordResetChanged: boolean
        requestPasswordResetTouches: Record<string, boolean>
        requestPasswordResetManualErrors: Record<string, any>
        passwordReset: PasswordResetForm
        isPasswordResetSubmitting: boolean
        showPasswordResetErrors: boolean
        passwordResetChanged: boolean
        passwordResetTouches: Record<string, boolean>
        passwordResetManualErrors: Record<string, any>
        requestPasswordResetTouched: boolean
        requestPasswordResetValidationErrors: DeepPartialMap<
            {
                email: string
            },
            ValidationErrorType
        >
        requestPasswordResetAllErrors: Record<string, any>
        requestPasswordResetHasErrors: boolean
        requestPasswordResetErrors: DeepPartialMap<
            {
                email: string
            },
            ValidationErrorType
        >
        isRequestPasswordResetValid: boolean
        passwordResetTouched: boolean
        passwordResetValidationErrors: DeepPartialMap<PasswordResetForm, ValidationErrorType>
        passwordResetAllErrors: Record<string, any>
        passwordResetHasErrors: boolean
        passwordResetErrors: DeepPartialMap<PasswordResetForm, ValidationErrorType>
        isPasswordResetValid: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
