// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:25 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Setup2FALogicProps, TwoFactorForm } from './setup2FALogic'
import type { PreflightStatus } from '../../types'
import type { FeatureFlagsSet } from '../../lib/logic/featureFlagLogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../node_modules/kea-forms'

export interface setup2FALogicType extends Logic {
    actionCreators: {
        setGeneralError: (
            code: string,
            detail: string
        ) => {
            type: 'set general error (scenes.authentication.loginLogic)'
            payload: {
                code: string
                detail: string
            }
        }
        clearGeneralError: () => {
            type: 'clear general error (scenes.authentication.loginLogic)'
            payload: {
                value: true
            }
        }
        setup: () => {
            type: 'setup (scenes.authentication.loginLogic)'
            payload: {
                value: true
            }
        }
        setupSuccess: (
            startSetup: { status: string },
            payload?: {
                value: true
            }
        ) => {
            type: 'setup success (scenes.authentication.loginLogic)'
            payload: {
                startSetup: { status: string }
                payload?: {
                    value: true
                }
            }
        }
        setupFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'setup failure (scenes.authentication.loginLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setTokenValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set token value (scenes.authentication.loginLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setTokenValues: (values: DeepPartial<TwoFactorForm>) => {
            type: 'set token values (scenes.authentication.loginLogic)'
            payload: {
                values: DeepPartial<TwoFactorForm>
            }
        }
        setTokenManualErrors: (errors: Record<string, any>) => {
            type: 'set token manual errors (scenes.authentication.loginLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchTokenField: (key: string) => {
            type: 'touch token field (scenes.authentication.loginLogic)'
            payload: {
                key: string
            }
        }
        resetToken: (values?: TwoFactorForm) => {
            type: 'reset token (scenes.authentication.loginLogic)'
            payload: {
                values?: TwoFactorForm
            }
        }
        submitToken: () => {
            type: 'submit token (scenes.authentication.loginLogic)'
            payload: {
                value: boolean
            }
        }
        submitTokenRequest: (token: TwoFactorForm) => {
            type: 'submit token request (scenes.authentication.loginLogic)'
            payload: {
                token: TwoFactorForm
            }
        }
        submitTokenSuccess: (token: TwoFactorForm) => {
            type: 'submit token success (scenes.authentication.loginLogic)'
            payload: {
                token: TwoFactorForm
            }
        }
        submitTokenFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit token failure (scenes.authentication.loginLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'set general error (scenes.authentication.loginLogic)': 'setGeneralError'
        'clear general error (scenes.authentication.loginLogic)': 'clearGeneralError'
        'setup (scenes.authentication.loginLogic)': 'setup'
        'setup success (scenes.authentication.loginLogic)': 'setupSuccess'
        'setup failure (scenes.authentication.loginLogic)': 'setupFailure'
        'set token value (scenes.authentication.loginLogic)': 'setTokenValue'
        'set token values (scenes.authentication.loginLogic)': 'setTokenValues'
        'set token manual errors (scenes.authentication.loginLogic)': 'setTokenManualErrors'
        'touch token field (scenes.authentication.loginLogic)': 'touchTokenField'
        'reset token (scenes.authentication.loginLogic)': 'resetToken'
        'submit token (scenes.authentication.loginLogic)': 'submitToken'
        'submit token request (scenes.authentication.loginLogic)': 'submitTokenRequest'
        'submit token success (scenes.authentication.loginLogic)': 'submitTokenSuccess'
        'submit token failure (scenes.authentication.loginLogic)': 'submitTokenFailure'
    }
    actionTypes: {
        setGeneralError: 'set general error (scenes.authentication.loginLogic)'
        clearGeneralError: 'clear general error (scenes.authentication.loginLogic)'
        setup: 'setup (scenes.authentication.loginLogic)'
        setupSuccess: 'setup success (scenes.authentication.loginLogic)'
        setupFailure: 'setup failure (scenes.authentication.loginLogic)'
        setTokenValue: 'set token value (scenes.authentication.loginLogic)'
        setTokenValues: 'set token values (scenes.authentication.loginLogic)'
        setTokenManualErrors: 'set token manual errors (scenes.authentication.loginLogic)'
        touchTokenField: 'touch token field (scenes.authentication.loginLogic)'
        resetToken: 'reset token (scenes.authentication.loginLogic)'
        submitToken: 'submit token (scenes.authentication.loginLogic)'
        submitTokenRequest: 'submit token request (scenes.authentication.loginLogic)'
        submitTokenSuccess: 'submit token success (scenes.authentication.loginLogic)'
        submitTokenFailure: 'submit token failure (scenes.authentication.loginLogic)'
    }
    actions: {
        setGeneralError: (code: string, detail: string) => void
        clearGeneralError: () => void
        setup: () => void
        setupSuccess: (
            startSetup: { status: string },
            payload?: {
                value: true
            }
        ) => void
        setupFailure: (error: string, errorObject?: any) => void
        setTokenValue: (key: FieldName, value: any) => void
        setTokenValues: (values: DeepPartial<TwoFactorForm>) => void
        setTokenManualErrors: (errors: Record<string, any>) => void
        touchTokenField: (key: string) => void
        resetToken: (values?: TwoFactorForm) => void
        submitToken: () => void
        submitTokenRequest: (token: TwoFactorForm) => void
        submitTokenSuccess: (token: TwoFactorForm) => void
        submitTokenFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        setGeneralError: (code: string, detail: string) => Promise<any>
        clearGeneralError: () => Promise<any>
        setup: () => Promise<any>
        setupSuccess: (
            startSetup: { status: string },
            payload?: {
                value: true
            }
        ) => Promise<any>
        setupFailure: (error: string, errorObject?: any) => Promise<any>
        setTokenValue: (key: FieldName, value: any) => Promise<any>
        setTokenValues: (values: DeepPartial<TwoFactorForm>) => Promise<any>
        setTokenManualErrors: (errors: Record<string, any>) => Promise<any>
        touchTokenField: (key: string) => Promise<any>
        resetToken: (values?: TwoFactorForm) => Promise<any>
        submitToken: () => Promise<any>
        submitTokenRequest: (token: TwoFactorForm) => Promise<any>
        submitTokenSuccess: (token: TwoFactorForm) => Promise<any>
        submitTokenFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        generalError: {
            code: string
            detail: string
        } | null
        startSetup: {}
        startSetupLoading: boolean
        token: TwoFactorForm
        isTokenSubmitting: boolean
        showTokenErrors: boolean
        tokenChanged: boolean
        tokenTouches: Record<string, boolean>
        tokenManualErrors: Record<string, any>
    }
    events: {}
    key: undefined
    listeners: {
        submitTokenSuccess: ((
            action: {
                type: 'submit token success (scenes.authentication.loginLogic)'
                payload: {
                    token: TwoFactorForm
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'authentication', 'loginLogic']
    pathString: 'scenes.authentication.loginLogic'
    props: Setup2FALogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        generalError: {
            code: string
            detail: string
        } | null
        startSetup: {}
        startSetupLoading: boolean
        token: TwoFactorForm
        isTokenSubmitting: boolean
        showTokenErrors: boolean
        tokenChanged: boolean
        tokenTouches: Record<string, boolean>
        tokenManualErrors: Record<string, any>
    }
    reducers: {
        generalError: (
            state: {
                code: string
                detail: string
            } | null,
            action: any,
            fullState: any
        ) => {
            code: string
            detail: string
        } | null
        startSetup: (state: {}, action: any, fullState: any) => {}
        startSetupLoading: (state: boolean, action: any, fullState: any) => boolean
        token: (state: TwoFactorForm, action: any, fullState: any) => TwoFactorForm
        isTokenSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showTokenErrors: (state: boolean, action: any, fullState: any) => boolean
        tokenChanged: (state: boolean, action: any, fullState: any) => boolean
        tokenTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        tokenManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        generalError: {
            code: string
            detail: string
        } | null
        startSetup: {}
        startSetupLoading: boolean
        token: TwoFactorForm
        isTokenSubmitting: boolean
        showTokenErrors: boolean
        tokenChanged: boolean
        tokenTouches: Record<string, boolean>
        tokenManualErrors: Record<string, any>
    }
    selectors: {
        generalError: (
            state: any,
            props?: any
        ) => {
            code: string
            detail: string
        } | null
        startSetup: (state: any, props?: any) => {}
        startSetupLoading: (state: any, props?: any) => boolean
        token: (state: any, props?: any) => TwoFactorForm
        isTokenSubmitting: (state: any, props?: any) => boolean
        showTokenErrors: (state: any, props?: any) => boolean
        tokenChanged: (state: any, props?: any) => boolean
        tokenTouches: (state: any, props?: any) => Record<string, boolean>
        tokenManualErrors: (state: any, props?: any) => Record<string, any>
        preflight: (state: any, props?: any) => PreflightStatus | null
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
        tokenTouched: (state: any, props?: any) => boolean
        tokenValidationErrors: (state: any, props?: any) => DeepPartialMap<TwoFactorForm, ValidationErrorType>
        tokenAllErrors: (state: any, props?: any) => Record<string, any>
        tokenHasErrors: (state: any, props?: any) => boolean
        tokenErrors: (state: any, props?: any) => DeepPartialMap<TwoFactorForm, ValidationErrorType>
        isTokenValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        generalError: {
            code: string
            detail: string
        } | null
        startSetup: {}
        startSetupLoading: boolean
        token: TwoFactorForm
        isTokenSubmitting: boolean
        showTokenErrors: boolean
        tokenChanged: boolean
        tokenTouches: Record<string, boolean>
        tokenManualErrors: Record<string, any>
        preflight: PreflightStatus | null
        featureFlags: FeatureFlagsSet
        tokenTouched: boolean
        tokenValidationErrors: DeepPartialMap<TwoFactorForm, ValidationErrorType>
        tokenAllErrors: Record<string, any>
        tokenHasErrors: boolean
        tokenErrors: DeepPartialMap<TwoFactorForm, ValidationErrorType>
        isTokenValid: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
