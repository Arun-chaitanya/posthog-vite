// Generated by kea-typegen on Tue, 08 Aug 2023 10:01:24 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ValidatedTokenResponseType } from './verifyEmailLogic'

export interface verifyEmailLogicType extends Logic {
    actionCreators: {
        setView: (view: 'verify' | 'pending' | 'invalid' | 'success' | null) => {
            type: 'set view (scenes.authentication.verifyEmailLogic)'
            payload: {
                view: 'success' | 'invalid' | 'verify' | 'pending' | null
            }
        }
        setUuid: (uuid: string | null) => {
            type: 'set uuid (scenes.authentication.verifyEmailLogic)'
            payload: {
                uuid: string | null
            }
        }
        requestVerificationLink: (uuid: string) => {
            type: 'request verification link (scenes.authentication.verifyEmailLogic)'
            payload: {
                uuid: string
            }
        }
        validateEmailTokenSuccess: (response: ValidatedTokenResponseType) => {
            type: 'validate email token success (scenes.authentication.verifyEmailLogic)'
            payload: {
                response: ValidatedTokenResponseType
            }
        }
        validateEmailToken: ({ uuid, token }: { uuid: string; token: string }) => {
            type: 'validate email token (scenes.authentication.verifyEmailLogic)'
            payload: {
                uuid: string
                token: string
            }
        }
        validateEmailTokenFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'validate email token failure (scenes.authentication.verifyEmailLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        requestVerificationLinkSuccess: (
            newlyRequestedVerificationLink: boolean,
            payload?: {
                uuid: string
            }
        ) => {
            type: 'request verification link success (scenes.authentication.verifyEmailLogic)'
            payload: {
                newlyRequestedVerificationLink: boolean
                payload?: {
                    uuid: string
                }
            }
        }
        requestVerificationLinkFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'request verification link failure (scenes.authentication.verifyEmailLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set view (scenes.authentication.verifyEmailLogic)': 'setView'
        'set uuid (scenes.authentication.verifyEmailLogic)': 'setUuid'
        'request verification link (scenes.authentication.verifyEmailLogic)': 'requestVerificationLink'
        'validate email token success (scenes.authentication.verifyEmailLogic)': 'validateEmailTokenSuccess'
        'validate email token (scenes.authentication.verifyEmailLogic)': 'validateEmailToken'
        'validate email token failure (scenes.authentication.verifyEmailLogic)': 'validateEmailTokenFailure'
        'request verification link success (scenes.authentication.verifyEmailLogic)': 'requestVerificationLinkSuccess'
        'request verification link failure (scenes.authentication.verifyEmailLogic)': 'requestVerificationLinkFailure'
    }
    actionTypes: {
        setView: 'set view (scenes.authentication.verifyEmailLogic)'
        setUuid: 'set uuid (scenes.authentication.verifyEmailLogic)'
        requestVerificationLink: 'request verification link (scenes.authentication.verifyEmailLogic)'
        validateEmailTokenSuccess: 'validate email token success (scenes.authentication.verifyEmailLogic)'
        validateEmailToken: 'validate email token (scenes.authentication.verifyEmailLogic)'
        validateEmailTokenFailure: 'validate email token failure (scenes.authentication.verifyEmailLogic)'
        requestVerificationLinkSuccess: 'request verification link success (scenes.authentication.verifyEmailLogic)'
        requestVerificationLinkFailure: 'request verification link failure (scenes.authentication.verifyEmailLogic)'
    }
    actions: {
        setView: (view: 'verify' | 'pending' | 'invalid' | 'success' | null) => void
        setUuid: (uuid: string | null) => void
        requestVerificationLink: (uuid: string) => void
        validateEmailTokenSuccess: (response: ValidatedTokenResponseType) => void
        validateEmailToken: ({ uuid, token }: { uuid: string; token: string }) => void
        validateEmailTokenFailure: (error: string, errorObject?: any) => void
        requestVerificationLinkSuccess: (
            newlyRequestedVerificationLink: boolean,
            payload?: {
                uuid: string
            }
        ) => void
        requestVerificationLinkFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setView: (view: 'verify' | 'pending' | 'invalid' | 'success' | null) => Promise<any>
        setUuid: (uuid: string | null) => Promise<any>
        requestVerificationLink: (uuid: string) => Promise<any>
        validateEmailTokenSuccess: (response: ValidatedTokenResponseType) => Promise<any>
        validateEmailToken: ({ uuid, token }: { uuid: string; token: string }) => Promise<any>
        validateEmailTokenFailure: (error: string, errorObject?: any) => Promise<any>
        requestVerificationLinkSuccess: (
            newlyRequestedVerificationLink: boolean,
            payload?: {
                uuid: string
            }
        ) => Promise<any>
        requestVerificationLinkFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        validatedEmailToken: ValidatedTokenResponseType | null
        validatedEmailTokenLoading: boolean
        newlyRequestedVerificationLink: boolean | null
        newlyRequestedVerificationLinkLoading: boolean
        view: 'pending' | 'verify' | 'invalid' | 'success' | null
        uuid: string | null
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'authentication', 'verifyEmailLogic']
    pathString: 'scenes.authentication.verifyEmailLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        validatedEmailToken: ValidatedTokenResponseType | null
        validatedEmailTokenLoading: boolean
        newlyRequestedVerificationLink: boolean | null
        newlyRequestedVerificationLinkLoading: boolean
        view: 'pending' | 'verify' | 'invalid' | 'success' | null
        uuid: string | null
    }
    reducers: {
        validatedEmailToken: (
            state: ValidatedTokenResponseType | null,
            action: any,
            fullState: any
        ) => ValidatedTokenResponseType | null
        validatedEmailTokenLoading: (state: boolean, action: any, fullState: any) => boolean
        newlyRequestedVerificationLink: (state: boolean | null, action: any, fullState: any) => boolean | null
        newlyRequestedVerificationLinkLoading: (state: boolean, action: any, fullState: any) => boolean
        view: (
            state: 'pending' | 'verify' | 'invalid' | 'success' | null,
            action: any,
            fullState: any
        ) => 'pending' | 'verify' | 'invalid' | 'success' | null
        uuid: (state: string | null, action: any, fullState: any) => string | null
    }
    selector: (state: any) => {
        validatedEmailToken: ValidatedTokenResponseType | null
        validatedEmailTokenLoading: boolean
        newlyRequestedVerificationLink: boolean | null
        newlyRequestedVerificationLinkLoading: boolean
        view: 'pending' | 'verify' | 'invalid' | 'success' | null
        uuid: string | null
    }
    selectors: {
        validatedEmailToken: (state: any, props?: any) => ValidatedTokenResponseType | null
        validatedEmailTokenLoading: (state: any, props?: any) => boolean
        newlyRequestedVerificationLink: (state: any, props?: any) => boolean | null
        newlyRequestedVerificationLinkLoading: (state: any, props?: any) => boolean
        view: (state: any, props?: any) => 'pending' | 'verify' | 'invalid' | 'success' | null
        uuid: (state: any, props?: any) => string | null
    }
    sharedListeners: {}
    values: {
        validatedEmailToken: ValidatedTokenResponseType | null
        validatedEmailTokenLoading: boolean
        newlyRequestedVerificationLink: boolean | null
        newlyRequestedVerificationLinkLoading: boolean
        view: 'pending' | 'verify' | 'invalid' | 'success' | null
        uuid: string | null
    }
    _isKea: true
    _isKeaWithKey: false
}
