// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:26 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PreflightStatus } from '../../../../types'
import type { SignupForm } from './signupLogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../../../node_modules/kea-forms'

export interface signupLogicType extends Logic {
    actionCreators: {
        setPanel: (panel: number) => {
            type: 'set panel (scenes.authentication.signupLogic)'
            payload: {
                panel: number
            }
        }
        setSignupPanel1Value: (
            key: FieldName,
            value: any
        ) => {
            type: 'set signup panel1 value (scenes.authentication.signupLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setSignupPanel1Values: (values: DeepPartial<SignupForm>) => {
            type: 'set signup panel1 values (scenes.authentication.signupLogic)'
            payload: {
                values: DeepPartial<SignupForm>
            }
        }
        setSignupPanel1ManualErrors: (errors: Record<string, any>) => {
            type: 'set signup panel1 manual errors (scenes.authentication.signupLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchSignupPanel1Field: (key: string) => {
            type: 'touch signup panel1 field (scenes.authentication.signupLogic)'
            payload: {
                key: string
            }
        }
        resetSignupPanel1: (values?: SignupForm) => {
            type: 'reset signup panel1 (scenes.authentication.signupLogic)'
            payload: {
                values?: SignupForm
            }
        }
        submitSignupPanel1: () => {
            type: 'submit signup panel1 (scenes.authentication.signupLogic)'
            payload: {
                value: boolean
            }
        }
        submitSignupPanel1Request: (signupPanel1: SignupForm) => {
            type: 'submit signup panel1 request (scenes.authentication.signupLogic)'
            payload: {
                signupPanel1: SignupForm
            }
        }
        submitSignupPanel1Success: (signupPanel1: SignupForm) => {
            type: 'submit signup panel1 success (scenes.authentication.signupLogic)'
            payload: {
                signupPanel1: SignupForm
            }
        }
        submitSignupPanel1Failure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit signup panel1 failure (scenes.authentication.signupLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
        setSignupPanel2Value: (
            key: FieldName,
            value: any
        ) => {
            type: 'set signup panel2 value (scenes.authentication.signupLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setSignupPanel2Values: (values: DeepPartial<SignupForm>) => {
            type: 'set signup panel2 values (scenes.authentication.signupLogic)'
            payload: {
                values: DeepPartial<SignupForm>
            }
        }
        setSignupPanel2ManualErrors: (errors: Record<string, any>) => {
            type: 'set signup panel2 manual errors (scenes.authentication.signupLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchSignupPanel2Field: (key: string) => {
            type: 'touch signup panel2 field (scenes.authentication.signupLogic)'
            payload: {
                key: string
            }
        }
        resetSignupPanel2: (values?: SignupForm) => {
            type: 'reset signup panel2 (scenes.authentication.signupLogic)'
            payload: {
                values?: SignupForm
            }
        }
        submitSignupPanel2: () => {
            type: 'submit signup panel2 (scenes.authentication.signupLogic)'
            payload: {
                value: boolean
            }
        }
        submitSignupPanel2Request: (signupPanel2: SignupForm) => {
            type: 'submit signup panel2 request (scenes.authentication.signupLogic)'
            payload: {
                signupPanel2: SignupForm
            }
        }
        submitSignupPanel2Success: (signupPanel2: SignupForm) => {
            type: 'submit signup panel2 success (scenes.authentication.signupLogic)'
            payload: {
                signupPanel2: SignupForm
            }
        }
        submitSignupPanel2Failure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit signup panel2 failure (scenes.authentication.signupLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'set panel (scenes.authentication.signupLogic)': 'setPanel'
        'set signup panel1 value (scenes.authentication.signupLogic)': 'setSignupPanel1Value'
        'set signup panel1 values (scenes.authentication.signupLogic)': 'setSignupPanel1Values'
        'set signup panel1 manual errors (scenes.authentication.signupLogic)': 'setSignupPanel1ManualErrors'
        'touch signup panel1 field (scenes.authentication.signupLogic)': 'touchSignupPanel1Field'
        'reset signup panel1 (scenes.authentication.signupLogic)': 'resetSignupPanel1'
        'submit signup panel1 (scenes.authentication.signupLogic)': 'submitSignupPanel1'
        'submit signup panel1 request (scenes.authentication.signupLogic)': 'submitSignupPanel1Request'
        'submit signup panel1 success (scenes.authentication.signupLogic)': 'submitSignupPanel1Success'
        'submit signup panel1 failure (scenes.authentication.signupLogic)': 'submitSignupPanel1Failure'
        'set signup panel2 value (scenes.authentication.signupLogic)': 'setSignupPanel2Value'
        'set signup panel2 values (scenes.authentication.signupLogic)': 'setSignupPanel2Values'
        'set signup panel2 manual errors (scenes.authentication.signupLogic)': 'setSignupPanel2ManualErrors'
        'touch signup panel2 field (scenes.authentication.signupLogic)': 'touchSignupPanel2Field'
        'reset signup panel2 (scenes.authentication.signupLogic)': 'resetSignupPanel2'
        'submit signup panel2 (scenes.authentication.signupLogic)': 'submitSignupPanel2'
        'submit signup panel2 request (scenes.authentication.signupLogic)': 'submitSignupPanel2Request'
        'submit signup panel2 success (scenes.authentication.signupLogic)': 'submitSignupPanel2Success'
        'submit signup panel2 failure (scenes.authentication.signupLogic)': 'submitSignupPanel2Failure'
    }
    actionTypes: {
        setPanel: 'set panel (scenes.authentication.signupLogic)'
        setSignupPanel1Value: 'set signup panel1 value (scenes.authentication.signupLogic)'
        setSignupPanel1Values: 'set signup panel1 values (scenes.authentication.signupLogic)'
        setSignupPanel1ManualErrors: 'set signup panel1 manual errors (scenes.authentication.signupLogic)'
        touchSignupPanel1Field: 'touch signup panel1 field (scenes.authentication.signupLogic)'
        resetSignupPanel1: 'reset signup panel1 (scenes.authentication.signupLogic)'
        submitSignupPanel1: 'submit signup panel1 (scenes.authentication.signupLogic)'
        submitSignupPanel1Request: 'submit signup panel1 request (scenes.authentication.signupLogic)'
        submitSignupPanel1Success: 'submit signup panel1 success (scenes.authentication.signupLogic)'
        submitSignupPanel1Failure: 'submit signup panel1 failure (scenes.authentication.signupLogic)'
        setSignupPanel2Value: 'set signup panel2 value (scenes.authentication.signupLogic)'
        setSignupPanel2Values: 'set signup panel2 values (scenes.authentication.signupLogic)'
        setSignupPanel2ManualErrors: 'set signup panel2 manual errors (scenes.authentication.signupLogic)'
        touchSignupPanel2Field: 'touch signup panel2 field (scenes.authentication.signupLogic)'
        resetSignupPanel2: 'reset signup panel2 (scenes.authentication.signupLogic)'
        submitSignupPanel2: 'submit signup panel2 (scenes.authentication.signupLogic)'
        submitSignupPanel2Request: 'submit signup panel2 request (scenes.authentication.signupLogic)'
        submitSignupPanel2Success: 'submit signup panel2 success (scenes.authentication.signupLogic)'
        submitSignupPanel2Failure: 'submit signup panel2 failure (scenes.authentication.signupLogic)'
    }
    actions: {
        setPanel: (panel: number) => void
        setSignupPanel1Value: (key: FieldName, value: any) => void
        setSignupPanel1Values: (values: DeepPartial<SignupForm>) => void
        setSignupPanel1ManualErrors: (errors: Record<string, any>) => void
        touchSignupPanel1Field: (key: string) => void
        resetSignupPanel1: (values?: SignupForm) => void
        submitSignupPanel1: () => void
        submitSignupPanel1Request: (signupPanel1: SignupForm) => void
        submitSignupPanel1Success: (signupPanel1: SignupForm) => void
        submitSignupPanel1Failure: (error: Error, errors: Record<string, any>) => void
        setSignupPanel2Value: (key: FieldName, value: any) => void
        setSignupPanel2Values: (values: DeepPartial<SignupForm>) => void
        setSignupPanel2ManualErrors: (errors: Record<string, any>) => void
        touchSignupPanel2Field: (key: string) => void
        resetSignupPanel2: (values?: SignupForm) => void
        submitSignupPanel2: () => void
        submitSignupPanel2Request: (signupPanel2: SignupForm) => void
        submitSignupPanel2Success: (signupPanel2: SignupForm) => void
        submitSignupPanel2Failure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        setPanel: (panel: number) => Promise<any>
        setSignupPanel1Value: (key: FieldName, value: any) => Promise<any>
        setSignupPanel1Values: (values: DeepPartial<SignupForm>) => Promise<any>
        setSignupPanel1ManualErrors: (errors: Record<string, any>) => Promise<any>
        touchSignupPanel1Field: (key: string) => Promise<any>
        resetSignupPanel1: (values?: SignupForm) => Promise<any>
        submitSignupPanel1: () => Promise<any>
        submitSignupPanel1Request: (signupPanel1: SignupForm) => Promise<any>
        submitSignupPanel1Success: (signupPanel1: SignupForm) => Promise<any>
        submitSignupPanel1Failure: (error: Error, errors: Record<string, any>) => Promise<any>
        setSignupPanel2Value: (key: FieldName, value: any) => Promise<any>
        setSignupPanel2Values: (values: DeepPartial<SignupForm>) => Promise<any>
        setSignupPanel2ManualErrors: (errors: Record<string, any>) => Promise<any>
        touchSignupPanel2Field: (key: string) => Promise<any>
        resetSignupPanel2: (values?: SignupForm) => Promise<any>
        submitSignupPanel2: () => Promise<any>
        submitSignupPanel2Request: (signupPanel2: SignupForm) => Promise<any>
        submitSignupPanel2Success: (signupPanel2: SignupForm) => Promise<any>
        submitSignupPanel2Failure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        panel: number
        signupPanel1: SignupForm
        isSignupPanel1Submitting: boolean
        showSignupPanel1Errors: boolean
        signupPanel1Changed: boolean
        signupPanel1Touches: Record<string, boolean>
        signupPanel1ManualErrors: Record<string, any>
        signupPanel2: SignupForm
        isSignupPanel2Submitting: boolean
        showSignupPanel2Errors: boolean
        signupPanel2Changed: boolean
        signupPanel2Touches: Record<string, boolean>
        signupPanel2ManualErrors: Record<string, any>
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'authentication', 'signupLogic']
    pathString: 'scenes.authentication.signupLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        panel: number
        signupPanel1: SignupForm
        isSignupPanel1Submitting: boolean
        showSignupPanel1Errors: boolean
        signupPanel1Changed: boolean
        signupPanel1Touches: Record<string, boolean>
        signupPanel1ManualErrors: Record<string, any>
        signupPanel2: SignupForm
        isSignupPanel2Submitting: boolean
        showSignupPanel2Errors: boolean
        signupPanel2Changed: boolean
        signupPanel2Touches: Record<string, boolean>
        signupPanel2ManualErrors: Record<string, any>
    }
    reducers: {
        panel: (state: number, action: any, fullState: any) => number
        signupPanel1: (state: SignupForm, action: any, fullState: any) => SignupForm
        isSignupPanel1Submitting: (state: boolean, action: any, fullState: any) => boolean
        showSignupPanel1Errors: (state: boolean, action: any, fullState: any) => boolean
        signupPanel1Changed: (state: boolean, action: any, fullState: any) => boolean
        signupPanel1Touches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        signupPanel1ManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
        signupPanel2: (state: SignupForm, action: any, fullState: any) => SignupForm
        isSignupPanel2Submitting: (state: boolean, action: any, fullState: any) => boolean
        showSignupPanel2Errors: (state: boolean, action: any, fullState: any) => boolean
        signupPanel2Changed: (state: boolean, action: any, fullState: any) => boolean
        signupPanel2Touches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        signupPanel2ManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        panel: number
        signupPanel1: SignupForm
        isSignupPanel1Submitting: boolean
        showSignupPanel1Errors: boolean
        signupPanel1Changed: boolean
        signupPanel1Touches: Record<string, boolean>
        signupPanel1ManualErrors: Record<string, any>
        signupPanel2: SignupForm
        isSignupPanel2Submitting: boolean
        showSignupPanel2Errors: boolean
        signupPanel2Changed: boolean
        signupPanel2Touches: Record<string, boolean>
        signupPanel2ManualErrors: Record<string, any>
    }
    selectors: {
        panel: (state: any, props?: any) => number
        signupPanel1: (state: any, props?: any) => SignupForm
        isSignupPanel1Submitting: (state: any, props?: any) => boolean
        showSignupPanel1Errors: (state: any, props?: any) => boolean
        signupPanel1Changed: (state: any, props?: any) => boolean
        signupPanel1Touches: (state: any, props?: any) => Record<string, boolean>
        signupPanel1ManualErrors: (state: any, props?: any) => Record<string, any>
        signupPanel2: (state: any, props?: any) => SignupForm
        isSignupPanel2Submitting: (state: any, props?: any) => boolean
        showSignupPanel2Errors: (state: any, props?: any) => boolean
        signupPanel2Changed: (state: any, props?: any) => boolean
        signupPanel2Touches: (state: any, props?: any) => Record<string, boolean>
        signupPanel2ManualErrors: (state: any, props?: any) => Record<string, any>
        preflight: (state: any, props?: any) => PreflightStatus | null
        signupPanel1Touched: (state: any, props?: any) => boolean
        signupPanel1ValidationErrors: (state: any, props?: any) => DeepPartialMap<SignupForm, ValidationErrorType>
        signupPanel1AllErrors: (state: any, props?: any) => Record<string, any>
        signupPanel1HasErrors: (state: any, props?: any) => boolean
        signupPanel1Errors: (state: any, props?: any) => DeepPartialMap<SignupForm, ValidationErrorType>
        isSignupPanel1Valid: (state: any, props?: any) => boolean
        signupPanel2Touched: (state: any, props?: any) => boolean
        signupPanel2ValidationErrors: (state: any, props?: any) => DeepPartialMap<SignupForm, ValidationErrorType>
        signupPanel2AllErrors: (state: any, props?: any) => Record<string, any>
        signupPanel2HasErrors: (state: any, props?: any) => boolean
        signupPanel2Errors: (state: any, props?: any) => DeepPartialMap<SignupForm, ValidationErrorType>
        isSignupPanel2Valid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        panel: number
        signupPanel1: SignupForm
        isSignupPanel1Submitting: boolean
        showSignupPanel1Errors: boolean
        signupPanel1Changed: boolean
        signupPanel1Touches: Record<string, boolean>
        signupPanel1ManualErrors: Record<string, any>
        signupPanel2: SignupForm
        isSignupPanel2Submitting: boolean
        showSignupPanel2Errors: boolean
        signupPanel2Changed: boolean
        signupPanel2Touches: Record<string, boolean>
        signupPanel2ManualErrors: Record<string, any>
        preflight: PreflightStatus | null
        signupPanel1Touched: boolean
        signupPanel1ValidationErrors: DeepPartialMap<SignupForm, ValidationErrorType>
        signupPanel1AllErrors: Record<string, any>
        signupPanel1HasErrors: boolean
        signupPanel1Errors: DeepPartialMap<SignupForm, ValidationErrorType>
        isSignupPanel1Valid: boolean
        signupPanel2Touched: boolean
        signupPanel2ValidationErrors: DeepPartialMap<SignupForm, ValidationErrorType>
        signupPanel2AllErrors: Record<string, any>
        signupPanel2HasErrors: boolean
        signupPanel2Errors: DeepPartialMap<SignupForm, ValidationErrorType>
        isSignupPanel2Valid: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
