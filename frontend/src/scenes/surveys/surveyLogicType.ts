// Generated by kea-typegen on Tue, 08 Aug 2023 10:01:23 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { NewSurvey, SurveyLogicProps, SurveyMetricsQueries } from './surveyLogic'
import type { BasicSurveyQuestion, Breadcrumb, FeatureFlagBasicType, FeatureFlagFilters, LinkSurveyQuestion, PluginType, RatingSurveyQuestion, Survey, SurveyAppearance, SurveyType } from '../../types'
import type { PluginTypeWithConfig } from '../plugins/types'
import type { DataTableNode } from '../../queries/schema'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../node_modules/kea-forms'

export interface surveyLogicType extends Logic {
    actionCreators: {
        loadSurveys: () => {
            type: 'load surveys (scenes.surveys.surveyLogic)'
            payload: any
        }
        reportSurveyViewed: (survey: Survey) => {
            type: 'report survey viewed (scenes.surveys.surveyLogic)'
            payload: {
                survey: Survey
            }
        }
        reportSurveyCreated: (survey: Survey) => {
            type: 'report survey created (scenes.surveys.surveyLogic)'
            payload: {
                survey: Survey
            }
        }
        reportSurveyEdited: (survey: Survey) => {
            type: 'report survey edited (scenes.surveys.surveyLogic)'
            payload: {
                survey: Survey
            }
        }
        reportSurveyLaunched: (survey: Survey) => {
            type: 'report survey launched (scenes.surveys.surveyLogic)'
            payload: {
                survey: Survey
            }
        }
        reportSurveyStopped: (survey: Survey) => {
            type: 'report survey stopped (scenes.surveys.surveyLogic)'
            payload: {
                survey: Survey
            }
        }
        reportSurveyResumed: (survey: Survey) => {
            type: 'report survey resumed (scenes.surveys.surveyLogic)'
            payload: {
                survey: Survey
            }
        }
        reportSurveyArchived: (survey: Survey) => {
            type: 'report survey archived (scenes.surveys.surveyLogic)'
            payload: {
                survey: Survey
            }
        }
        editingSurvey: (editing: boolean) => {
            type: 'editing survey (scenes.surveys.surveyLogic)'
            payload: {
                editing: boolean
            }
        }
        launchSurvey: () => {
            type: 'launch survey (scenes.surveys.surveyLogic)'
            payload: {
                value: true
            }
        }
        stopSurvey: () => {
            type: 'stop survey (scenes.surveys.surveyLogic)'
            payload: {
                value: true
            }
        }
        archiveSurvey: () => {
            type: 'archive survey (scenes.surveys.surveyLogic)'
            payload: {
                value: true
            }
        }
        resumeSurvey: () => {
            type: 'resume survey (scenes.surveys.surveyLogic)'
            payload: {
                value: true
            }
        }
        setDataTableQuery: (query: DataTableNode) => {
            type: 'set data table query (scenes.surveys.surveyLogic)'
            payload: {
                query: DataTableNode
            }
        }
        setSurveyMetricsQueries: (surveyMetricsQueries: SurveyMetricsQueries) => {
            type: 'set survey metrics queries (scenes.surveys.surveyLogic)'
            payload: {
                surveyMetricsQueries: SurveyMetricsQueries
            }
        }
        setHasTargetingFlag: (hasTargetingFlag: boolean) => {
            type: 'set has targeting flag (scenes.surveys.surveyLogic)'
            payload: {
                hasTargetingFlag: boolean
            }
        }
        loadSurvey: () => {
            type: 'load survey (scenes.surveys.surveyLogic)'
            payload: any
        }
        loadSurveySuccess: (
            survey:
                | Survey
                | {
                      linked_flag_id: number | undefined
                      targeting_flag_filters: Pick<FeatureFlagFilters, 'groups'> | undefined
                      name: string
                      description: string
                      id: string
                      type: SurveyType
                      end_date: string | null
                      start_date: string | null
                      conditions: { url: string; selector: string; is_headless?: boolean | undefined } | null
                      questions: (BasicSurveyQuestion | LinkSurveyQuestion | RatingSurveyQuestion)[]
                      linked_flag: FeatureFlagBasicType | null
                      targeting_flag: FeatureFlagBasicType | null
                      archived: boolean
                      appearance: SurveyAppearance
                  },
            payload?: any
        ) => {
            type: 'load survey success (scenes.surveys.surveyLogic)'
            payload: {
                survey:
                    | Survey
                    | {
                          linked_flag_id: number | undefined
                          targeting_flag_filters: Pick<FeatureFlagFilters, 'groups'> | undefined
                          name: string
                          description: string
                          id: string
                          type: SurveyType
                          end_date: string | null
                          start_date: string | null
                          conditions: { url: string; selector: string; is_headless?: boolean | undefined } | null
                          questions: (BasicSurveyQuestion | LinkSurveyQuestion | RatingSurveyQuestion)[]
                          linked_flag: FeatureFlagBasicType | null
                          targeting_flag: FeatureFlagBasicType | null
                          archived: boolean
                          appearance: SurveyAppearance
                      }
                payload?: any
            }
        }
        loadSurveyFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load survey failure (scenes.surveys.surveyLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        createSurvey: (surveyPayload: any) => {
            type: 'create survey (scenes.surveys.surveyLogic)'
            payload: any
        }
        createSurveySuccess: (
            survey: Survey,
            payload?: any
        ) => {
            type: 'create survey success (scenes.surveys.surveyLogic)'
            payload: {
                survey: Survey
                payload?: any
            }
        }
        createSurveyFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'create survey failure (scenes.surveys.surveyLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateSurvey: (surveyPayload: any) => {
            type: 'update survey (scenes.surveys.surveyLogic)'
            payload: any
        }
        updateSurveySuccess: (
            survey: Survey,
            payload?: any
        ) => {
            type: 'update survey success (scenes.surveys.surveyLogic)'
            payload: {
                survey: Survey
                payload?: any
            }
        }
        updateSurveyFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update survey failure (scenes.surveys.surveyLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        launchSurveySuccess: (
            survey: Survey,
            payload?: {
                value: true
            }
        ) => {
            type: 'launch survey success (scenes.surveys.surveyLogic)'
            payload: {
                survey: Survey
                payload?: {
                    value: true
                }
            }
        }
        launchSurveyFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'launch survey failure (scenes.surveys.surveyLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        stopSurveySuccess: (
            survey: Survey,
            payload?: {
                value: true
            }
        ) => {
            type: 'stop survey success (scenes.surveys.surveyLogic)'
            payload: {
                survey: Survey
                payload?: {
                    value: true
                }
            }
        }
        stopSurveyFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'stop survey failure (scenes.surveys.surveyLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        resumeSurveySuccess: (
            survey: Survey,
            payload?: {
                value: true
            }
        ) => {
            type: 'resume survey success (scenes.surveys.surveyLogic)'
            payload: {
                survey: Survey
                payload?: {
                    value: true
                }
            }
        }
        resumeSurveyFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'resume survey failure (scenes.surveys.surveyLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setSurveyValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set survey value (scenes.surveys.surveyLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setSurveyValues: (values: DeepPartial<Survey | NewSurvey>) => {
            type: 'set survey values (scenes.surveys.surveyLogic)'
            payload: {
                values: DeepPartial<Survey | NewSurvey>
            }
        }
        setSurveyManualErrors: (errors: Record<string, any>) => {
            type: 'set survey manual errors (scenes.surveys.surveyLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchSurveyField: (key: string) => {
            type: 'touch survey field (scenes.surveys.surveyLogic)'
            payload: {
                key: string
            }
        }
        resetSurvey: (values?: Survey | NewSurvey) => {
            type: 'reset survey (scenes.surveys.surveyLogic)'
            payload: {
                values?: Survey | NewSurvey
            }
        }
        submitSurvey: () => {
            type: 'submit survey (scenes.surveys.surveyLogic)'
            payload: {
                value: boolean
            }
        }
        submitSurveyRequest: (survey: Survey | NewSurvey) => {
            type: 'submit survey request (scenes.surveys.surveyLogic)'
            payload: {
                survey: Survey | NewSurvey
            }
        }
        submitSurveySuccess: (survey: Survey | NewSurvey) => {
            type: 'submit survey success (scenes.surveys.surveyLogic)'
            payload: {
                survey: Survey | NewSurvey
            }
        }
        submitSurveyFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit survey failure (scenes.surveys.surveyLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'load surveys (scenes.surveys.surveyLogic)': 'loadSurveys'
        'report survey viewed (scenes.surveys.surveyLogic)': 'reportSurveyViewed'
        'report survey created (scenes.surveys.surveyLogic)': 'reportSurveyCreated'
        'report survey edited (scenes.surveys.surveyLogic)': 'reportSurveyEdited'
        'report survey launched (scenes.surveys.surveyLogic)': 'reportSurveyLaunched'
        'report survey stopped (scenes.surveys.surveyLogic)': 'reportSurveyStopped'
        'report survey resumed (scenes.surveys.surveyLogic)': 'reportSurveyResumed'
        'report survey archived (scenes.surveys.surveyLogic)': 'reportSurveyArchived'
        'editing survey (scenes.surveys.surveyLogic)': 'editingSurvey'
        'launch survey (scenes.surveys.surveyLogic)': 'launchSurvey'
        'stop survey (scenes.surveys.surveyLogic)': 'stopSurvey'
        'archive survey (scenes.surveys.surveyLogic)': 'archiveSurvey'
        'resume survey (scenes.surveys.surveyLogic)': 'resumeSurvey'
        'set data table query (scenes.surveys.surveyLogic)': 'setDataTableQuery'
        'set survey metrics queries (scenes.surveys.surveyLogic)': 'setSurveyMetricsQueries'
        'set has targeting flag (scenes.surveys.surveyLogic)': 'setHasTargetingFlag'
        'load survey (scenes.surveys.surveyLogic)': 'loadSurvey'
        'load survey success (scenes.surveys.surveyLogic)': 'loadSurveySuccess'
        'load survey failure (scenes.surveys.surveyLogic)': 'loadSurveyFailure'
        'create survey (scenes.surveys.surveyLogic)': 'createSurvey'
        'create survey success (scenes.surveys.surveyLogic)': 'createSurveySuccess'
        'create survey failure (scenes.surveys.surveyLogic)': 'createSurveyFailure'
        'update survey (scenes.surveys.surveyLogic)': 'updateSurvey'
        'update survey success (scenes.surveys.surveyLogic)': 'updateSurveySuccess'
        'update survey failure (scenes.surveys.surveyLogic)': 'updateSurveyFailure'
        'launch survey success (scenes.surveys.surveyLogic)': 'launchSurveySuccess'
        'launch survey failure (scenes.surveys.surveyLogic)': 'launchSurveyFailure'
        'stop survey success (scenes.surveys.surveyLogic)': 'stopSurveySuccess'
        'stop survey failure (scenes.surveys.surveyLogic)': 'stopSurveyFailure'
        'resume survey success (scenes.surveys.surveyLogic)': 'resumeSurveySuccess'
        'resume survey failure (scenes.surveys.surveyLogic)': 'resumeSurveyFailure'
        'set survey value (scenes.surveys.surveyLogic)': 'setSurveyValue'
        'set survey values (scenes.surveys.surveyLogic)': 'setSurveyValues'
        'set survey manual errors (scenes.surveys.surveyLogic)': 'setSurveyManualErrors'
        'touch survey field (scenes.surveys.surveyLogic)': 'touchSurveyField'
        'reset survey (scenes.surveys.surveyLogic)': 'resetSurvey'
        'submit survey (scenes.surveys.surveyLogic)': 'submitSurvey'
        'submit survey request (scenes.surveys.surveyLogic)': 'submitSurveyRequest'
        'submit survey success (scenes.surveys.surveyLogic)': 'submitSurveySuccess'
        'submit survey failure (scenes.surveys.surveyLogic)': 'submitSurveyFailure'
    }
    actionTypes: {
        loadSurveys: 'load surveys (scenes.surveys.surveyLogic)'
        reportSurveyViewed: 'report survey viewed (scenes.surveys.surveyLogic)'
        reportSurveyCreated: 'report survey created (scenes.surveys.surveyLogic)'
        reportSurveyEdited: 'report survey edited (scenes.surveys.surveyLogic)'
        reportSurveyLaunched: 'report survey launched (scenes.surveys.surveyLogic)'
        reportSurveyStopped: 'report survey stopped (scenes.surveys.surveyLogic)'
        reportSurveyResumed: 'report survey resumed (scenes.surveys.surveyLogic)'
        reportSurveyArchived: 'report survey archived (scenes.surveys.surveyLogic)'
        editingSurvey: 'editing survey (scenes.surveys.surveyLogic)'
        launchSurvey: 'launch survey (scenes.surveys.surveyLogic)'
        stopSurvey: 'stop survey (scenes.surveys.surveyLogic)'
        archiveSurvey: 'archive survey (scenes.surveys.surveyLogic)'
        resumeSurvey: 'resume survey (scenes.surveys.surveyLogic)'
        setDataTableQuery: 'set data table query (scenes.surveys.surveyLogic)'
        setSurveyMetricsQueries: 'set survey metrics queries (scenes.surveys.surveyLogic)'
        setHasTargetingFlag: 'set has targeting flag (scenes.surveys.surveyLogic)'
        loadSurvey: 'load survey (scenes.surveys.surveyLogic)'
        loadSurveySuccess: 'load survey success (scenes.surveys.surveyLogic)'
        loadSurveyFailure: 'load survey failure (scenes.surveys.surveyLogic)'
        createSurvey: 'create survey (scenes.surveys.surveyLogic)'
        createSurveySuccess: 'create survey success (scenes.surveys.surveyLogic)'
        createSurveyFailure: 'create survey failure (scenes.surveys.surveyLogic)'
        updateSurvey: 'update survey (scenes.surveys.surveyLogic)'
        updateSurveySuccess: 'update survey success (scenes.surveys.surveyLogic)'
        updateSurveyFailure: 'update survey failure (scenes.surveys.surveyLogic)'
        launchSurveySuccess: 'launch survey success (scenes.surveys.surveyLogic)'
        launchSurveyFailure: 'launch survey failure (scenes.surveys.surveyLogic)'
        stopSurveySuccess: 'stop survey success (scenes.surveys.surveyLogic)'
        stopSurveyFailure: 'stop survey failure (scenes.surveys.surveyLogic)'
        resumeSurveySuccess: 'resume survey success (scenes.surveys.surveyLogic)'
        resumeSurveyFailure: 'resume survey failure (scenes.surveys.surveyLogic)'
        setSurveyValue: 'set survey value (scenes.surveys.surveyLogic)'
        setSurveyValues: 'set survey values (scenes.surveys.surveyLogic)'
        setSurveyManualErrors: 'set survey manual errors (scenes.surveys.surveyLogic)'
        touchSurveyField: 'touch survey field (scenes.surveys.surveyLogic)'
        resetSurvey: 'reset survey (scenes.surveys.surveyLogic)'
        submitSurvey: 'submit survey (scenes.surveys.surveyLogic)'
        submitSurveyRequest: 'submit survey request (scenes.surveys.surveyLogic)'
        submitSurveySuccess: 'submit survey success (scenes.surveys.surveyLogic)'
        submitSurveyFailure: 'submit survey failure (scenes.surveys.surveyLogic)'
    }
    actions: {
        loadSurveys: () => void
        reportSurveyViewed: (survey: Survey) => void
        reportSurveyCreated: (survey: Survey) => void
        reportSurveyEdited: (survey: Survey) => void
        reportSurveyLaunched: (survey: Survey) => void
        reportSurveyStopped: (survey: Survey) => void
        reportSurveyResumed: (survey: Survey) => void
        reportSurveyArchived: (survey: Survey) => void
        editingSurvey: (editing: boolean) => void
        launchSurvey: () => void
        stopSurvey: () => void
        archiveSurvey: () => void
        resumeSurvey: () => void
        setDataTableQuery: (query: DataTableNode) => void
        setSurveyMetricsQueries: (surveyMetricsQueries: SurveyMetricsQueries) => void
        setHasTargetingFlag: (hasTargetingFlag: boolean) => void
        loadSurvey: () => void
        loadSurveySuccess: (
            survey:
                | Survey
                | {
                      linked_flag_id: number | undefined
                      targeting_flag_filters: Pick<FeatureFlagFilters, 'groups'> | undefined
                      name: string
                      description: string
                      id: string
                      type: SurveyType
                      end_date: string | null
                      start_date: string | null
                      conditions: { url: string; selector: string; is_headless?: boolean | undefined } | null
                      questions: (BasicSurveyQuestion | LinkSurveyQuestion | RatingSurveyQuestion)[]
                      linked_flag: FeatureFlagBasicType | null
                      targeting_flag: FeatureFlagBasicType | null
                      archived: boolean
                      appearance: SurveyAppearance
                  },
            payload?: any
        ) => void
        loadSurveyFailure: (error: string, errorObject?: any) => void
        createSurvey: (surveyPayload: any) => void
        createSurveySuccess: (survey: Survey, payload?: any) => void
        createSurveyFailure: (error: string, errorObject?: any) => void
        updateSurvey: (surveyPayload: any) => void
        updateSurveySuccess: (survey: Survey, payload?: any) => void
        updateSurveyFailure: (error: string, errorObject?: any) => void
        launchSurveySuccess: (
            survey: Survey,
            payload?: {
                value: true
            }
        ) => void
        launchSurveyFailure: (error: string, errorObject?: any) => void
        stopSurveySuccess: (
            survey: Survey,
            payload?: {
                value: true
            }
        ) => void
        stopSurveyFailure: (error: string, errorObject?: any) => void
        resumeSurveySuccess: (
            survey: Survey,
            payload?: {
                value: true
            }
        ) => void
        resumeSurveyFailure: (error: string, errorObject?: any) => void
        setSurveyValue: (key: FieldName, value: any) => void
        setSurveyValues: (values: DeepPartial<Survey | NewSurvey>) => void
        setSurveyManualErrors: (errors: Record<string, any>) => void
        touchSurveyField: (key: string) => void
        resetSurvey: (values?: Survey | NewSurvey) => void
        submitSurvey: () => void
        submitSurveyRequest: (survey: Survey | NewSurvey) => void
        submitSurveySuccess: (survey: Survey | NewSurvey) => void
        submitSurveyFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        loadSurveys: () => Promise<any>
        reportSurveyViewed: (survey: Survey) => Promise<any>
        reportSurveyCreated: (survey: Survey) => Promise<any>
        reportSurveyEdited: (survey: Survey) => Promise<any>
        reportSurveyLaunched: (survey: Survey) => Promise<any>
        reportSurveyStopped: (survey: Survey) => Promise<any>
        reportSurveyResumed: (survey: Survey) => Promise<any>
        reportSurveyArchived: (survey: Survey) => Promise<any>
        editingSurvey: (editing: boolean) => Promise<any>
        launchSurvey: () => Promise<any>
        stopSurvey: () => Promise<any>
        archiveSurvey: () => Promise<any>
        resumeSurvey: () => Promise<any>
        setDataTableQuery: (query: DataTableNode) => Promise<any>
        setSurveyMetricsQueries: (surveyMetricsQueries: SurveyMetricsQueries) => Promise<any>
        setHasTargetingFlag: (hasTargetingFlag: boolean) => Promise<any>
        loadSurvey: () => Promise<any>
        loadSurveySuccess: (
            survey:
                | Survey
                | {
                      linked_flag_id: number | undefined
                      targeting_flag_filters: Pick<FeatureFlagFilters, 'groups'> | undefined
                      name: string
                      description: string
                      id: string
                      type: SurveyType
                      end_date: string | null
                      start_date: string | null
                      conditions: { url: string; selector: string; is_headless?: boolean | undefined } | null
                      questions: (BasicSurveyQuestion | LinkSurveyQuestion | RatingSurveyQuestion)[]
                      linked_flag: FeatureFlagBasicType | null
                      targeting_flag: FeatureFlagBasicType | null
                      archived: boolean
                      appearance: SurveyAppearance
                  },
            payload?: any
        ) => Promise<any>
        loadSurveyFailure: (error: string, errorObject?: any) => Promise<any>
        createSurvey: (surveyPayload: any) => Promise<any>
        createSurveySuccess: (survey: Survey, payload?: any) => Promise<any>
        createSurveyFailure: (error: string, errorObject?: any) => Promise<any>
        updateSurvey: (surveyPayload: any) => Promise<any>
        updateSurveySuccess: (survey: Survey, payload?: any) => Promise<any>
        updateSurveyFailure: (error: string, errorObject?: any) => Promise<any>
        launchSurveySuccess: (
            survey: Survey,
            payload?: {
                value: true
            }
        ) => Promise<any>
        launchSurveyFailure: (error: string, errorObject?: any) => Promise<any>
        stopSurveySuccess: (
            survey: Survey,
            payload?: {
                value: true
            }
        ) => Promise<any>
        stopSurveyFailure: (error: string, errorObject?: any) => Promise<any>
        resumeSurveySuccess: (
            survey: Survey,
            payload?: {
                value: true
            }
        ) => Promise<any>
        resumeSurveyFailure: (error: string, errorObject?: any) => Promise<any>
        setSurveyValue: (key: FieldName, value: any) => Promise<any>
        setSurveyValues: (values: DeepPartial<Survey | NewSurvey>) => Promise<any>
        setSurveyManualErrors: (errors: Record<string, any>) => Promise<any>
        touchSurveyField: (key: string) => Promise<any>
        resetSurvey: (values?: Survey | NewSurvey) => Promise<any>
        submitSurvey: () => Promise<any>
        submitSurveyRequest: (survey: Survey | NewSurvey) => Promise<any>
        submitSurveySuccess: (survey: Survey | NewSurvey) => Promise<any>
        submitSurveyFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        survey: Survey | NewSurvey
        surveyLoading: boolean
        isEditingSurvey: boolean
        dataTableQuery: DataTableNode | null
        surveyMetricsQueries: SurveyMetricsQueries | null
        hasTargetingFlag: boolean
        isSurveySubmitting: boolean
        showSurveyErrors: boolean
        surveyChanged: boolean
        surveyTouches: Record<string, boolean>
        surveyManualErrors: Record<string, any>
    }
    events: {}
    key: string
    listeners: {
        loadSurveySuccess: ((
            action: {
                type: 'load survey success (scenes.surveys.surveyLogic)'
                payload: {
                    survey:
                        | Survey
                        | {
                              linked_flag_id: number | undefined
                              targeting_flag_filters: Pick<FeatureFlagFilters, 'groups'> | undefined
                              name: string
                              description: string
                              id: string
                              type: SurveyType
                              end_date: string | null
                              start_date: string | null
                              conditions: { url: string; selector: string; is_headless?: boolean | undefined } | null
                              questions: (BasicSurveyQuestion | LinkSurveyQuestion | RatingSurveyQuestion)[]
                              linked_flag: FeatureFlagBasicType | null
                              targeting_flag: FeatureFlagBasicType | null
                              archived: boolean
                              appearance: SurveyAppearance
                          }
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        createSurveySuccess: ((
            action: {
                type: 'create survey success (scenes.surveys.surveyLogic)'
                payload: {
                    survey: Survey
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateSurveySuccess: ((
            action: {
                type: 'update survey success (scenes.surveys.surveyLogic)'
                payload: {
                    survey: Survey
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        launchSurveySuccess: ((
            action: {
                type: 'launch survey success (scenes.surveys.surveyLogic)'
                payload: {
                    survey: Survey
                    payload?: {
                        value: true
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        stopSurveySuccess: ((
            action: {
                type: 'stop survey success (scenes.surveys.surveyLogic)'
                payload: {
                    survey: Survey
                    payload?: {
                        value: true
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        resumeSurveySuccess: ((
            action: {
                type: 'resume survey success (scenes.surveys.surveyLogic)'
                payload: {
                    survey: Survey
                    payload?: {
                        value: true
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        archiveSurvey: ((
            action: {
                type: 'archive survey (scenes.surveys.surveyLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'surveys', 'surveyLogic']
    pathString: 'scenes.surveys.surveyLogic'
    props: SurveyLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        survey: Survey | NewSurvey
        surveyLoading: boolean
        isEditingSurvey: boolean
        dataTableQuery: DataTableNode | null
        surveyMetricsQueries: SurveyMetricsQueries | null
        hasTargetingFlag: boolean
        isSurveySubmitting: boolean
        showSurveyErrors: boolean
        surveyChanged: boolean
        surveyTouches: Record<string, boolean>
        surveyManualErrors: Record<string, any>
    }
    reducers: {
        survey: (state: Survey | NewSurvey, action: any, fullState: any) => Survey | NewSurvey
        surveyLoading: (state: boolean, action: any, fullState: any) => boolean
        isEditingSurvey: (state: boolean, action: any, fullState: any) => boolean
        dataTableQuery: (state: DataTableNode | null, action: any, fullState: any) => DataTableNode | null
        surveyMetricsQueries: (
            state: SurveyMetricsQueries | null,
            action: any,
            fullState: any
        ) => SurveyMetricsQueries | null
        hasTargetingFlag: (state: boolean, action: any, fullState: any) => boolean
        isSurveySubmitting: (state: boolean, action: any, fullState: any) => boolean
        showSurveyErrors: (state: boolean, action: any, fullState: any) => boolean
        surveyChanged: (state: boolean, action: any, fullState: any) => boolean
        surveyTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        surveyManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        survey: Survey | NewSurvey
        surveyLoading: boolean
        isEditingSurvey: boolean
        dataTableQuery: DataTableNode | null
        surveyMetricsQueries: SurveyMetricsQueries | null
        hasTargetingFlag: boolean
        isSurveySubmitting: boolean
        showSurveyErrors: boolean
        surveyChanged: boolean
        surveyTouches: Record<string, boolean>
        surveyManualErrors: Record<string, any>
    }
    selectors: {
        survey: (state: any, props?: any) => Survey | NewSurvey
        surveyLoading: (state: any, props?: any) => boolean
        isEditingSurvey: (state: any, props?: any) => boolean
        dataTableQuery: (state: any, props?: any) => DataTableNode | null
        surveyMetricsQueries: (state: any, props?: any) => SurveyMetricsQueries | null
        hasTargetingFlag: (state: any, props?: any) => boolean
        isSurveySubmitting: (state: any, props?: any) => boolean
        showSurveyErrors: (state: any, props?: any) => boolean
        surveyChanged: (state: any, props?: any) => boolean
        surveyTouches: (state: any, props?: any) => Record<string, boolean>
        surveyManualErrors: (state: any, props?: any) => Record<string, any>
        installedPlugins: (state: any, props?: any) => PluginTypeWithConfig[]
        enabledPlugins: (state: any, props?: any) => PluginTypeWithConfig[]
        pluginsLoading: (state: any, props?: any) => boolean
        isSurveyRunning: (state: any, props?: any) => boolean
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
        surveyPlugin: (state: any, props?: any) => PluginType | undefined
        showSurveyAppWarning: (state: any, props?: any) => boolean
        surveyTouched: (state: any, props?: any) => boolean
        surveyValidationErrors: (state: any, props?: any) => DeepPartialMap<Survey | NewSurvey, ValidationErrorType>
        surveyAllErrors: (state: any, props?: any) => Record<string, any>
        surveyHasErrors: (state: any, props?: any) => boolean
        surveyErrors: (state: any, props?: any) => DeepPartialMap<Survey | NewSurvey, ValidationErrorType>
        isSurveyValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        survey: Survey | NewSurvey
        surveyLoading: boolean
        isEditingSurvey: boolean
        dataTableQuery: DataTableNode | null
        surveyMetricsQueries: SurveyMetricsQueries | null
        hasTargetingFlag: boolean
        isSurveySubmitting: boolean
        showSurveyErrors: boolean
        surveyChanged: boolean
        surveyTouches: Record<string, boolean>
        surveyManualErrors: Record<string, any>
        installedPlugins: PluginTypeWithConfig[]
        enabledPlugins: PluginTypeWithConfig[]
        pluginsLoading: boolean
        isSurveyRunning: boolean
        breadcrumbs: Breadcrumb[]
        surveyPlugin: PluginType | undefined
        showSurveyAppWarning: boolean
        surveyTouched: boolean
        surveyValidationErrors: DeepPartialMap<Survey | NewSurvey, ValidationErrorType>
        surveyAllErrors: Record<string, any>
        surveyHasErrors: boolean
        surveyErrors: DeepPartialMap<Survey | NewSurvey, ValidationErrorType>
        isSurveyValid: boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        isSurveyRunning: (survey: Survey | NewSurvey) => boolean
        breadcrumbs: (survey: Survey | NewSurvey) => Breadcrumb[]
        surveyPlugin: (
            installedPlugins: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/scenes/plugins/types').PluginTypeWithConfig[]
        ) => PluginType | undefined
        showSurveyAppWarning: (
            survey: Survey | NewSurvey,
            enabledPlugins: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/scenes/plugins/types').PluginTypeWithConfig[],
            pluginsLoading: boolean
        ) => boolean
    }
}
