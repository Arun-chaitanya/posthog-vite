// Generated by kea-typegen on Sun, 06 Aug 2023 06:33:24 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Breadcrumb, Survey } from '../../types'

export interface surveysLogicType extends Logic {
    actionCreators: {
        loadSurveys: () => {
            type: 'load surveys (scenes.surveys.surveysLogic)'
            payload: any
        }
        loadSurveysSuccess: (
            surveys: Survey[],
            payload?: any
        ) => {
            type: 'load surveys success (scenes.surveys.surveysLogic)'
            payload: {
                surveys: Survey[]
                payload?: any
            }
        }
        loadSurveysFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load surveys failure (scenes.surveys.surveysLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deleteSurvey: (id: any) => {
            type: 'delete survey (scenes.surveys.surveysLogic)'
            payload: any
        }
        deleteSurveySuccess: (
            surveys: Survey[],
            payload?: any
        ) => {
            type: 'delete survey success (scenes.surveys.surveysLogic)'
            payload: {
                surveys: Survey[]
                payload?: any
            }
        }
        deleteSurveyFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete survey failure (scenes.surveys.surveysLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateSurvey: ({ id, updatePayload }: any) => {
            type: 'update survey (scenes.surveys.surveysLogic)'
            payload: any
        }
        updateSurveySuccess: (
            surveys: Survey[],
            payload?: any
        ) => {
            type: 'update survey success (scenes.surveys.surveysLogic)'
            payload: {
                surveys: Survey[]
                payload?: any
            }
        }
        updateSurveyFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update survey failure (scenes.surveys.surveysLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load surveys (scenes.surveys.surveysLogic)': 'loadSurveys'
        'load surveys success (scenes.surveys.surveysLogic)': 'loadSurveysSuccess'
        'load surveys failure (scenes.surveys.surveysLogic)': 'loadSurveysFailure'
        'delete survey (scenes.surveys.surveysLogic)': 'deleteSurvey'
        'delete survey success (scenes.surveys.surveysLogic)': 'deleteSurveySuccess'
        'delete survey failure (scenes.surveys.surveysLogic)': 'deleteSurveyFailure'
        'update survey (scenes.surveys.surveysLogic)': 'updateSurvey'
        'update survey success (scenes.surveys.surveysLogic)': 'updateSurveySuccess'
        'update survey failure (scenes.surveys.surveysLogic)': 'updateSurveyFailure'
    }
    actionTypes: {
        loadSurveys: 'load surveys (scenes.surveys.surveysLogic)'
        loadSurveysSuccess: 'load surveys success (scenes.surveys.surveysLogic)'
        loadSurveysFailure: 'load surveys failure (scenes.surveys.surveysLogic)'
        deleteSurvey: 'delete survey (scenes.surveys.surveysLogic)'
        deleteSurveySuccess: 'delete survey success (scenes.surveys.surveysLogic)'
        deleteSurveyFailure: 'delete survey failure (scenes.surveys.surveysLogic)'
        updateSurvey: 'update survey (scenes.surveys.surveysLogic)'
        updateSurveySuccess: 'update survey success (scenes.surveys.surveysLogic)'
        updateSurveyFailure: 'update survey failure (scenes.surveys.surveysLogic)'
    }
    actions: {
        loadSurveys: () => void
        loadSurveysSuccess: (surveys: Survey[], payload?: any) => void
        loadSurveysFailure: (error: string, errorObject?: any) => void
        deleteSurvey: (id: any) => void
        deleteSurveySuccess: (surveys: Survey[], payload?: any) => void
        deleteSurveyFailure: (error: string, errorObject?: any) => void
        updateSurvey: ({ id, updatePayload }: any) => void
        updateSurveySuccess: (surveys: Survey[], payload?: any) => void
        updateSurveyFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadSurveys: () => Promise<any>
        loadSurveysSuccess: (surveys: Survey[], payload?: any) => Promise<any>
        loadSurveysFailure: (error: string, errorObject?: any) => Promise<any>
        deleteSurvey: (id: any) => Promise<any>
        deleteSurveySuccess: (surveys: Survey[], payload?: any) => Promise<any>
        deleteSurveyFailure: (error: string, errorObject?: any) => Promise<any>
        updateSurvey: ({ id, updatePayload }: any) => Promise<any>
        updateSurveySuccess: (surveys: Survey[], payload?: any) => Promise<any>
        updateSurveyFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        surveys: Survey[]
        surveysLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {
        deleteSurveySuccess: ((
            action: {
                type: 'delete survey success (scenes.surveys.surveysLogic)'
                payload: {
                    surveys: Survey[]
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateSurveySuccess: ((
            action: {
                type: 'update survey success (scenes.surveys.surveysLogic)'
                payload: {
                    surveys: Survey[]
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'surveys', 'surveysLogic']
    pathString: 'scenes.surveys.surveysLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        surveys: Survey[]
        surveysLoading: boolean
    }
    reducers: {
        surveys: (state: Survey[], action: any, fullState: any) => Survey[]
        surveysLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        surveys: Survey[]
        surveysLoading: boolean
    }
    selectors: {
        surveys: (state: any, props?: any) => Survey[]
        surveysLoading: (state: any, props?: any) => boolean
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
        nonArchivedSurveys: (state: any, props?: any) => Survey[]
        archivedSurveys: (state: any, props?: any) => Survey[]
    }
    sharedListeners: {}
    values: {
        surveys: Survey[]
        surveysLoading: boolean
        breadcrumbs: Breadcrumb[]
        nonArchivedSurveys: Survey[]
        archivedSurveys: Survey[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        nonArchivedSurveys: (surveys: Survey[]) => Survey[]
        archivedSurveys: (surveys: Survey[]) => Survey[]
    }
}
