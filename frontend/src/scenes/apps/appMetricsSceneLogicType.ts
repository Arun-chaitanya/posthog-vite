// Generated by kea-typegen on Tue, 08 Aug 2023 10:00:58 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AppMetricErrorDetail, AppMetricsLogicProps, AppMetricsResponse, AppMetricsTab, HistoricalExportInfo } from './appMetricsSceneLogic'
import type { AvailableFeature, Breadcrumb, PluginConfigWithPluginInfo } from '../../types'
import type { InterfaceJobsProps } from '../plugins/edit/interface-jobs/interfaceJobsLogic'

export interface appMetricsSceneLogicType extends Logic {
    actionCreators: {
        setActiveTab: (tab: AppMetricsTab) => {
            type: 'set active tab (scenes.apps.appMetricsSceneLogic.*)'
            payload: {
                tab: AppMetricsTab
            }
        }
        setDateFrom: (dateFrom: string) => {
            type: 'set date from (scenes.apps.appMetricsSceneLogic.*)'
            payload: {
                dateFrom: string
            }
        }
        openErrorDetailsModal: (
            errorType: string,
            category: string,
            jobId?: string
        ) => {
            type: 'open error details modal (scenes.apps.appMetricsSceneLogic.*)'
            payload: {
                errorType: string
                category: string
                jobId: string | undefined
            }
        }
        closeErrorDetailsModal: () => {
            type: 'close error details modal (scenes.apps.appMetricsSceneLogic.*)'
            payload: {
                value: true
            }
        }
        openHistoricalExportModal: () => {
            type: 'open historical export modal (scenes.apps.appMetricsSceneLogic.*)'
            payload: {
                value: true
            }
        }
        loadPluginConfig: () => {
            type: 'load plugin config (scenes.apps.appMetricsSceneLogic.*)'
            payload: any
        }
        loadPluginConfigSuccess: (
            pluginConfig: PluginConfigWithPluginInfo | null,
            payload?: any
        ) => {
            type: 'load plugin config success (scenes.apps.appMetricsSceneLogic.*)'
            payload: {
                pluginConfig: PluginConfigWithPluginInfo | null
                payload?: any
            }
        }
        loadPluginConfigFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load plugin config failure (scenes.apps.appMetricsSceneLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadMetrics: () => {
            type: 'load metrics (scenes.apps.appMetricsSceneLogic.*)'
            payload: any
        }
        loadMetricsSuccess: (
            appMetricsResponse: AppMetricsResponse | null,
            payload?: any
        ) => {
            type: 'load metrics success (scenes.apps.appMetricsSceneLogic.*)'
            payload: {
                appMetricsResponse: AppMetricsResponse | null
                payload?: any
            }
        }
        loadMetricsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load metrics failure (scenes.apps.appMetricsSceneLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadHistoricalExports: () => {
            type: 'load historical exports (scenes.apps.appMetricsSceneLogic.*)'
            payload: any
        }
        loadHistoricalExportsSuccess: (
            historicalExports: HistoricalExportInfo[],
            payload?: any
        ) => {
            type: 'load historical exports success (scenes.apps.appMetricsSceneLogic.*)'
            payload: {
                historicalExports: HistoricalExportInfo[]
                payload?: any
            }
        }
        loadHistoricalExportsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load historical exports failure (scenes.apps.appMetricsSceneLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        openErrorDetailsModalSuccess: (
            errorDetails: Array<AppMetricErrorDetail>,
            payload?: {
                errorType: string
                category: string
                jobId: string | undefined
            }
        ) => {
            type: 'open error details modal success (scenes.apps.appMetricsSceneLogic.*)'
            payload: {
                errorDetails: Array<AppMetricErrorDetail>
                payload?: {
                    errorType: string
                    category: string
                    jobId: string | undefined
                }
            }
        }
        openErrorDetailsModalFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'open error details modal failure (scenes.apps.appMetricsSceneLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set active tab (scenes.apps.appMetricsSceneLogic.*)': 'setActiveTab'
        'set date from (scenes.apps.appMetricsSceneLogic.*)': 'setDateFrom'
        'open error details modal (scenes.apps.appMetricsSceneLogic.*)': 'openErrorDetailsModal'
        'close error details modal (scenes.apps.appMetricsSceneLogic.*)': 'closeErrorDetailsModal'
        'open historical export modal (scenes.apps.appMetricsSceneLogic.*)': 'openHistoricalExportModal'
        'load plugin config (scenes.apps.appMetricsSceneLogic.*)': 'loadPluginConfig'
        'load plugin config success (scenes.apps.appMetricsSceneLogic.*)': 'loadPluginConfigSuccess'
        'load plugin config failure (scenes.apps.appMetricsSceneLogic.*)': 'loadPluginConfigFailure'
        'load metrics (scenes.apps.appMetricsSceneLogic.*)': 'loadMetrics'
        'load metrics success (scenes.apps.appMetricsSceneLogic.*)': 'loadMetricsSuccess'
        'load metrics failure (scenes.apps.appMetricsSceneLogic.*)': 'loadMetricsFailure'
        'load historical exports (scenes.apps.appMetricsSceneLogic.*)': 'loadHistoricalExports'
        'load historical exports success (scenes.apps.appMetricsSceneLogic.*)': 'loadHistoricalExportsSuccess'
        'load historical exports failure (scenes.apps.appMetricsSceneLogic.*)': 'loadHistoricalExportsFailure'
        'open error details modal success (scenes.apps.appMetricsSceneLogic.*)': 'openErrorDetailsModalSuccess'
        'open error details modal failure (scenes.apps.appMetricsSceneLogic.*)': 'openErrorDetailsModalFailure'
    }
    actionTypes: {
        setActiveTab: 'set active tab (scenes.apps.appMetricsSceneLogic.*)'
        setDateFrom: 'set date from (scenes.apps.appMetricsSceneLogic.*)'
        openErrorDetailsModal: 'open error details modal (scenes.apps.appMetricsSceneLogic.*)'
        closeErrorDetailsModal: 'close error details modal (scenes.apps.appMetricsSceneLogic.*)'
        openHistoricalExportModal: 'open historical export modal (scenes.apps.appMetricsSceneLogic.*)'
        loadPluginConfig: 'load plugin config (scenes.apps.appMetricsSceneLogic.*)'
        loadPluginConfigSuccess: 'load plugin config success (scenes.apps.appMetricsSceneLogic.*)'
        loadPluginConfigFailure: 'load plugin config failure (scenes.apps.appMetricsSceneLogic.*)'
        loadMetrics: 'load metrics (scenes.apps.appMetricsSceneLogic.*)'
        loadMetricsSuccess: 'load metrics success (scenes.apps.appMetricsSceneLogic.*)'
        loadMetricsFailure: 'load metrics failure (scenes.apps.appMetricsSceneLogic.*)'
        loadHistoricalExports: 'load historical exports (scenes.apps.appMetricsSceneLogic.*)'
        loadHistoricalExportsSuccess: 'load historical exports success (scenes.apps.appMetricsSceneLogic.*)'
        loadHistoricalExportsFailure: 'load historical exports failure (scenes.apps.appMetricsSceneLogic.*)'
        openErrorDetailsModalSuccess: 'open error details modal success (scenes.apps.appMetricsSceneLogic.*)'
        openErrorDetailsModalFailure: 'open error details modal failure (scenes.apps.appMetricsSceneLogic.*)'
    }
    actions: {
        setActiveTab: (tab: AppMetricsTab) => void
        setDateFrom: (dateFrom: string) => void
        openErrorDetailsModal: (errorType: string, category: string, jobId?: string) => void
        closeErrorDetailsModal: () => void
        openHistoricalExportModal: () => void
        loadPluginConfig: () => void
        loadPluginConfigSuccess: (pluginConfig: PluginConfigWithPluginInfo | null, payload?: any) => void
        loadPluginConfigFailure: (error: string, errorObject?: any) => void
        loadMetrics: () => void
        loadMetricsSuccess: (appMetricsResponse: AppMetricsResponse | null, payload?: any) => void
        loadMetricsFailure: (error: string, errorObject?: any) => void
        loadHistoricalExports: () => void
        loadHistoricalExportsSuccess: (historicalExports: HistoricalExportInfo[], payload?: any) => void
        loadHistoricalExportsFailure: (error: string, errorObject?: any) => void
        openErrorDetailsModalSuccess: (
            errorDetails: Array<AppMetricErrorDetail>,
            payload?: {
                errorType: string
                category: string
                jobId: string | undefined
            }
        ) => void
        openErrorDetailsModalFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setActiveTab: (tab: AppMetricsTab) => Promise<any>
        setDateFrom: (dateFrom: string) => Promise<any>
        openErrorDetailsModal: (errorType: string, category: string, jobId?: string) => Promise<any>
        closeErrorDetailsModal: () => Promise<any>
        openHistoricalExportModal: () => Promise<any>
        loadPluginConfig: () => Promise<any>
        loadPluginConfigSuccess: (pluginConfig: PluginConfigWithPluginInfo | null, payload?: any) => Promise<any>
        loadPluginConfigFailure: (error: string, errorObject?: any) => Promise<any>
        loadMetrics: () => Promise<any>
        loadMetricsSuccess: (appMetricsResponse: AppMetricsResponse | null, payload?: any) => Promise<any>
        loadMetricsFailure: (error: string, errorObject?: any) => Promise<any>
        loadHistoricalExports: () => Promise<any>
        loadHistoricalExportsSuccess: (historicalExports: HistoricalExportInfo[], payload?: any) => Promise<any>
        loadHistoricalExportsFailure: (error: string, errorObject?: any) => Promise<any>
        openErrorDetailsModalSuccess: (
            errorDetails: Array<AppMetricErrorDetail>,
            payload?: {
                errorType: string
                category: string
                jobId: string | undefined
            }
        ) => Promise<any>
        openErrorDetailsModalFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        activeTab: AppMetricsTab | null
        selectedDateFrom: string | null
        errorDetailsModalError: string | null
        pluginConfig: PluginConfigWithPluginInfo | null
        pluginConfigLoading: boolean
        appMetricsResponse: AppMetricsResponse | null
        appMetricsResponseLoading: boolean
        historicalExports: Array<HistoricalExportInfo>
        historicalExportsLoading: boolean
        errorDetails: Array<AppMetricErrorDetail>
        errorDetailsLoading: boolean
    }
    events: {}
    key: number
    listeners: {
        loadPluginConfigSuccess: ((
            action: {
                type: 'load plugin config success (scenes.apps.appMetricsSceneLogic.*)'
                payload: {
                    pluginConfig: PluginConfigWithPluginInfo | null
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setActiveTab: ((
            action: {
                type: 'set active tab (scenes.apps.appMetricsSceneLogic.*)'
                payload: {
                    tab: AppMetricsTab
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setDateFrom: ((
            action: {
                type: 'set date from (scenes.apps.appMetricsSceneLogic.*)'
                payload: {
                    dateFrom: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        openHistoricalExportModal: ((
            action: {
                type: 'open historical export modal (scenes.apps.appMetricsSceneLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'apps', 'appMetricsSceneLogic', '*']
    pathString: 'scenes.apps.appMetricsSceneLogic.*'
    props: AppMetricsLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        activeTab: AppMetricsTab | null
        selectedDateFrom: string | null
        errorDetailsModalError: string | null
        pluginConfig: PluginConfigWithPluginInfo | null
        pluginConfigLoading: boolean
        appMetricsResponse: AppMetricsResponse | null
        appMetricsResponseLoading: boolean
        historicalExports: Array<HistoricalExportInfo>
        historicalExportsLoading: boolean
        errorDetails: Array<AppMetricErrorDetail>
        errorDetailsLoading: boolean
    }
    reducers: {
        activeTab: (state: AppMetricsTab | null, action: any, fullState: any) => AppMetricsTab | null
        selectedDateFrom: (state: string | null, action: any, fullState: any) => string | null
        errorDetailsModalError: (state: string | null, action: any, fullState: any) => string | null
        pluginConfig: (
            state: PluginConfigWithPluginInfo | null,
            action: any,
            fullState: any
        ) => PluginConfigWithPluginInfo | null
        pluginConfigLoading: (state: boolean, action: any, fullState: any) => boolean
        appMetricsResponse: (state: AppMetricsResponse | null, action: any, fullState: any) => AppMetricsResponse | null
        appMetricsResponseLoading: (state: boolean, action: any, fullState: any) => boolean
        historicalExports: (
            state: Array<HistoricalExportInfo>,
            action: any,
            fullState: any
        ) => Array<HistoricalExportInfo>
        historicalExportsLoading: (state: boolean, action: any, fullState: any) => boolean
        errorDetails: (state: Array<AppMetricErrorDetail>, action: any, fullState: any) => Array<AppMetricErrorDetail>
        errorDetailsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        activeTab: AppMetricsTab | null
        selectedDateFrom: string | null
        errorDetailsModalError: string | null
        pluginConfig: PluginConfigWithPluginInfo | null
        pluginConfigLoading: boolean
        appMetricsResponse: AppMetricsResponse | null
        appMetricsResponseLoading: boolean
        historicalExports: Array<HistoricalExportInfo>
        historicalExportsLoading: boolean
        errorDetails: Array<AppMetricErrorDetail>
        errorDetailsLoading: boolean
    }
    selectors: {
        activeTab: (state: any, props?: any) => AppMetricsTab | null
        selectedDateFrom: (state: any, props?: any) => string | null
        errorDetailsModalError: (state: any, props?: any) => string | null
        pluginConfig: (state: any, props?: any) => PluginConfigWithPluginInfo | null
        pluginConfigLoading: (state: any, props?: any) => boolean
        appMetricsResponse: (state: any, props?: any) => AppMetricsResponse | null
        appMetricsResponseLoading: (state: any, props?: any) => boolean
        historicalExports: (state: any, props?: any) => Array<HistoricalExportInfo>
        historicalExportsLoading: (state: any, props?: any) => boolean
        errorDetails: (state: any, props?: any) => Array<AppMetricErrorDetail>
        errorDetailsLoading: (state: any, props?: any) => boolean
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
        shouldShowAppMetrics: (state: any, props?: any) => boolean
        defaultTab: (state: any, props?: any) => AppMetricsTab
        defaultDateFrom: (state: any, props?: any) => '-24h' | '-7d' | '-30d'
        dateFrom: (state: any, props?: any) => string
        showTab: (state: any, props?: any) => (tab: AppMetricsTab) => boolean
        interfaceJobsProps: (state: any, props?: any) => InterfaceJobsProps | null
        hasRunningExports: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        activeTab: AppMetricsTab | null
        selectedDateFrom: string | null
        errorDetailsModalError: string | null
        pluginConfig: PluginConfigWithPluginInfo | null
        pluginConfigLoading: boolean
        appMetricsResponse: AppMetricsResponse | null
        appMetricsResponseLoading: boolean
        historicalExports: Array<HistoricalExportInfo>
        historicalExportsLoading: boolean
        errorDetails: Array<AppMetricErrorDetail>
        errorDetailsLoading: boolean
        breadcrumbs: Breadcrumb[]
        shouldShowAppMetrics: boolean
        defaultTab: AppMetricsTab
        defaultDateFrom: '-24h' | '-7d' | '-30d'
        dateFrom: string
        showTab: (tab: AppMetricsTab) => boolean
        interfaceJobsProps: InterfaceJobsProps | null
        hasRunningExports: boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        breadcrumbs: (pluginConfig: PluginConfigWithPluginInfo | null, arg: any) => Breadcrumb[]
        shouldShowAppMetrics: (
            hasAvailableFeature: (feature: AvailableFeature, currentUsage?: number | undefined) => boolean
        ) => boolean
        defaultTab: (pluginConfig: PluginConfigWithPluginInfo | null) => AppMetricsTab
        defaultDateFrom: (pluginConfig: PluginConfigWithPluginInfo | null) => '-24h' | '-7d' | '-30d'
        dateFrom: (selectedDateFrom: string | null, defaultDateFrom: '-24h' | '-7d' | '-30d') => string
        showTab: (shouldShowAppMetrics: boolean) => (tab: AppMetricsTab) => boolean
        interfaceJobsProps: (pluginConfig: PluginConfigWithPluginInfo | null) => InterfaceJobsProps | null
        hasRunningExports: (historicalExports: HistoricalExportInfo[]) => boolean
    }
}
