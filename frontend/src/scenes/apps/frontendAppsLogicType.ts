// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:21 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FeatureFlagsSet } from '../../lib/logic/featureFlagLogic'
import type { FrontendApp, FrontendAppConfig } from '../../types'

export interface frontendAppsLogicType extends Logic {
    actionCreators: {
        loadFrontendApp: (
            id: number,
            pluginId: number,
            reload?: boolean,
            attempt?: number
        ) => {
            type: 'load frontend app (scenes.frontendAppsLogic)'
            payload: {
                id: number
                pluginId: number
                reload: boolean
                attempt: number
            }
        }
        unloadFrontendApp: (id: number) => {
            type: 'unload frontend app (scenes.frontendAppsLogic)'
            payload: {
                id: number
            }
        }
        updateAppConfigs: (appConfigs: Record<string, FrontendAppConfig>) => {
            type: 'update app configs (scenes.frontendAppsLogic)'
            payload: {
                appConfigs: Record<string, FrontendAppConfig>
            }
        }
        loadFrontendAppSuccess: (
            frontendApps: Record<string, FrontendApp>,
            payload?: {
                id: number
                pluginId: number
                reload: boolean
                attempt: number
            }
        ) => {
            type: 'load frontend app success (scenes.frontendAppsLogic)'
            payload: {
                frontendApps: Record<string, FrontendApp>
                payload?: {
                    id: number
                    pluginId: number
                    reload: boolean
                    attempt: number
                }
            }
        }
        loadFrontendAppFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load frontend app failure (scenes.frontendAppsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load frontend app (scenes.frontendAppsLogic)': 'loadFrontendApp'
        'unload frontend app (scenes.frontendAppsLogic)': 'unloadFrontendApp'
        'update app configs (scenes.frontendAppsLogic)': 'updateAppConfigs'
        'load frontend app success (scenes.frontendAppsLogic)': 'loadFrontendAppSuccess'
        'load frontend app failure (scenes.frontendAppsLogic)': 'loadFrontendAppFailure'
    }
    actionTypes: {
        loadFrontendApp: 'load frontend app (scenes.frontendAppsLogic)'
        unloadFrontendApp: 'unload frontend app (scenes.frontendAppsLogic)'
        updateAppConfigs: 'update app configs (scenes.frontendAppsLogic)'
        loadFrontendAppSuccess: 'load frontend app success (scenes.frontendAppsLogic)'
        loadFrontendAppFailure: 'load frontend app failure (scenes.frontendAppsLogic)'
    }
    actions: {
        loadFrontendApp: (id: number, pluginId: number, reload?: boolean, attempt?: number) => void
        unloadFrontendApp: (id: number) => void
        updateAppConfigs: (appConfigs: Record<string, FrontendAppConfig>) => void
        loadFrontendAppSuccess: (
            frontendApps: Record<string, FrontendApp>,
            payload?: {
                id: number
                pluginId: number
                reload: boolean
                attempt: number
            }
        ) => void
        loadFrontendAppFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadFrontendApp: (id: number, pluginId: number, reload?: boolean, attempt?: number) => Promise<any>
        unloadFrontendApp: (id: number) => Promise<any>
        updateAppConfigs: (appConfigs: Record<string, FrontendAppConfig>) => Promise<any>
        loadFrontendAppSuccess: (
            frontendApps: Record<string, FrontendApp>,
            payload?: {
                id: number
                pluginId: number
                reload: boolean
                attempt: number
            }
        ) => Promise<any>
        loadFrontendAppFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        frontendApps: Record<string, FrontendApp>
        frontendAppsLoading: boolean
        appConfigs: Record<string, FrontendAppConfig>
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'frontendAppsLogic']
    pathString: 'scenes.frontendAppsLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        frontendApps: Record<string, FrontendApp>
        frontendAppsLoading: boolean
        appConfigs: Record<string, FrontendAppConfig>
    }
    reducers: {
        frontendApps: (state: Record<string, FrontendApp>, action: any, fullState: any) => Record<string, FrontendApp>
        frontendAppsLoading: (state: boolean, action: any, fullState: any) => boolean
        appConfigs: (
            state: Record<string, FrontendAppConfig>,
            action: any,
            fullState: any
        ) => Record<string, FrontendAppConfig>
    }
    selector: (state: any) => {
        frontendApps: Record<string, FrontendApp>
        frontendAppsLoading: boolean
        appConfigs: Record<string, FrontendAppConfig>
    }
    selectors: {
        frontendApps: (state: any, props?: any) => Record<string, FrontendApp>
        frontendAppsLoading: (state: any, props?: any) => boolean
        appConfigs: (state: any, props?: any) => Record<string, FrontendAppConfig>
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
    }
    sharedListeners: {}
    values: {
        frontendApps: Record<string, FrontendApp>
        frontendAppsLoading: boolean
        appConfigs: Record<string, FrontendAppConfig>
        featureFlags: FeatureFlagsSet
    }
    _isKea: true
    _isKeaWithKey: false
}
