// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:22 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DatabaseSchemaQuery, DatabaseSchemaQueryResponse } from '../../../queries/schema'
import type { DatabaseSceneRow } from './databaseSceneLogic'

export interface databaseSceneLogicType extends Logic {
    actionCreators: {
        setSearchTerm: (searchTerm: string) => {
            type: 'set search term (scenes.data-management.database.databaseSceneLogic)'
            payload: {
                searchTerm: string
            }
        }
        loadDatabase: () => {
            type: 'load database (scenes.data-management.database.databaseSceneLogic)'
            payload: any
        }
        loadDatabaseSuccess: (
            database: Required<DatabaseSchemaQueryResponse | undefined> | null,
            payload?: any
        ) => {
            type: 'load database success (scenes.data-management.database.databaseSceneLogic)'
            payload: {
                database: Required<DatabaseSchemaQueryResponse | undefined> | null
                payload?: any
            }
        }
        loadDatabaseFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load database failure (scenes.data-management.database.databaseSceneLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set search term (scenes.data-management.database.databaseSceneLogic)': 'setSearchTerm'
        'load database (scenes.data-management.database.databaseSceneLogic)': 'loadDatabase'
        'load database success (scenes.data-management.database.databaseSceneLogic)': 'loadDatabaseSuccess'
        'load database failure (scenes.data-management.database.databaseSceneLogic)': 'loadDatabaseFailure'
    }
    actionTypes: {
        setSearchTerm: 'set search term (scenes.data-management.database.databaseSceneLogic)'
        loadDatabase: 'load database (scenes.data-management.database.databaseSceneLogic)'
        loadDatabaseSuccess: 'load database success (scenes.data-management.database.databaseSceneLogic)'
        loadDatabaseFailure: 'load database failure (scenes.data-management.database.databaseSceneLogic)'
    }
    actions: {
        setSearchTerm: (searchTerm: string) => void
        loadDatabase: () => void
        loadDatabaseSuccess: (database: Required<DatabaseSchemaQueryResponse | undefined> | null, payload?: any) => void
        loadDatabaseFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setSearchTerm: (searchTerm: string) => Promise<any>
        loadDatabase: () => Promise<any>
        loadDatabaseSuccess: (
            database: Required<DatabaseSchemaQueryResponse | undefined> | null,
            payload?: any
        ) => Promise<any>
        loadDatabaseFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        database: Required<DatabaseSchemaQuery['response']> | null
        databaseLoading: boolean
        searchTerm: string
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'data-management', 'database', 'databaseSceneLogic']
    pathString: 'scenes.data-management.database.databaseSceneLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        database: Required<DatabaseSchemaQuery['response']> | null
        databaseLoading: boolean
        searchTerm: string
    }
    reducers: {
        database: (
            state: Required<DatabaseSchemaQuery['response']> | null,
            action: any,
            fullState: any
        ) => Required<DatabaseSchemaQuery['response']> | null
        databaseLoading: (state: boolean, action: any, fullState: any) => boolean
        searchTerm: (state: string, action: any, fullState: any) => string
    }
    selector: (state: any) => {
        database: Required<DatabaseSchemaQuery['response']> | null
        databaseLoading: boolean
        searchTerm: string
    }
    selectors: {
        database: (state: any, props?: any) => Required<DatabaseSchemaQuery['response']> | null
        databaseLoading: (state: any, props?: any) => boolean
        searchTerm: (state: any, props?: any) => string
        filteredTables: (state: any, props?: any) => DatabaseSceneRow[]
    }
    sharedListeners: {}
    values: {
        database: Required<DatabaseSchemaQuery['response']> | null
        databaseLoading: boolean
        searchTerm: string
        filteredTables: DatabaseSceneRow[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        filteredTables: (
            database: Required<
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').DatabaseSchemaQueryResponse
                | undefined
            > | null,
            searchTerm: string
        ) => DatabaseSceneRow[]
    }
}
