// Generated by kea-typegen on Thu, 20 Jul 2023 11:20:03 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { IngestionWarningSummary } from './ingestionWarningsLogic'
import type { Breadcrumb } from '../../../types'

export interface ingestionWarningsLogicType extends Logic {
    actionCreators: {
        loadData: () => {
            type: 'load data (scenes.data-management.ingestion-warnings.ingestionWarningsLogic)'
            payload: any
        }
        loadDataSuccess: (
            data: IngestionWarningSummary[],
            payload?: any
        ) => {
            type: 'load data success (scenes.data-management.ingestion-warnings.ingestionWarningsLogic)'
            payload: {
                data: IngestionWarningSummary[]
                payload?: any
            }
        }
        loadDataFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load data failure (scenes.data-management.ingestion-warnings.ingestionWarningsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load data (scenes.data-management.ingestion-warnings.ingestionWarningsLogic)': 'loadData'
        'load data success (scenes.data-management.ingestion-warnings.ingestionWarningsLogic)': 'loadDataSuccess'
        'load data failure (scenes.data-management.ingestion-warnings.ingestionWarningsLogic)': 'loadDataFailure'
    }
    actionTypes: {
        loadData: 'load data (scenes.data-management.ingestion-warnings.ingestionWarningsLogic)'
        loadDataSuccess: 'load data success (scenes.data-management.ingestion-warnings.ingestionWarningsLogic)'
        loadDataFailure: 'load data failure (scenes.data-management.ingestion-warnings.ingestionWarningsLogic)'
    }
    actions: {
        loadData: () => void
        loadDataSuccess: (data: IngestionWarningSummary[], payload?: any) => void
        loadDataFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadData: () => Promise<any>
        loadDataSuccess: (data: IngestionWarningSummary[], payload?: any) => Promise<any>
        loadDataFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        data: IngestionWarningSummary[]
        dataLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {}
    path: ['scenes', 'data-management', 'ingestion-warnings', 'ingestionWarningsLogic']
    pathString: 'scenes.data-management.ingestion-warnings.ingestionWarningsLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        data: IngestionWarningSummary[]
        dataLoading: boolean
    }
    reducers: {
        data: (state: IngestionWarningSummary[], action: any, fullState: any) => IngestionWarningSummary[]
        dataLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        data: IngestionWarningSummary[]
        dataLoading: boolean
    }
    selectors: {
        data: (state: any, props?: any) => IngestionWarningSummary[]
        dataLoading: (state: any, props?: any) => boolean
        currentTeamId: (state: any, props?: any) => number | null
        timezone: (state: any, props?: any) => string
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
        dates: (state: any, props?: any) => string[]
        summaryDatasets: (state: any, props?: any) => Record<string, number[]>
    }
    sharedListeners: {}
    values: {
        data: IngestionWarningSummary[]
        dataLoading: boolean
        currentTeamId: number | null
        timezone: string
        breadcrumbs: Breadcrumb[]
        dates: string[]
        summaryDatasets: Record<string, number[]>
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        summaryDatasets: (data: IngestionWarningSummary[], timezone: string) => Record<string, number[]>
    }
}
