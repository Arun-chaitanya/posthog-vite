// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:56 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Filters, PropertyDefinitionsTableLogicProps } from './propertyDefinitionsTableLogic'
import type { Breadcrumb, GroupType, PropertyDefinition } from '../../../types'
import type { Noun } from '../../../models/groupsModel'
import type { LemonSelectOption } from '../../../lib/lemon-ui/LemonSelect/LemonSelect'
import type { PropertyDefinitionsPaginatedResponse } from '../events/eventDefinitionsTableLogic'

export interface propertyDefinitionsTableLogicType extends Logic {
    actionCreators: {
        loadPropertyDefinitions: (url?: string | null) => {
            type: 'load property definitions (scenes.data-management.properties.propertyDefinitionsTableLogic)'
            payload: {
                url: string | null
            }
        }
        setFilters: (filters: Partial<Filters>) => {
            type: 'set filters (scenes.data-management.properties.propertyDefinitionsTableLogic)'
            payload: {
                filters: Partial<Filters>
            }
        }
        setHoveredDefinition: (definitionKey: string | null) => {
            type: 'set hovered definition (scenes.data-management.properties.propertyDefinitionsTableLogic)'
            payload: {
                definitionKey: string | null
            }
        }
        setOpenedDefinition: (id: string | null) => {
            type: 'set opened definition (scenes.data-management.properties.propertyDefinitionsTableLogic)'
            payload: {
                id: string | null
            }
        }
        setLocalPropertyDefinition: (definition: PropertyDefinition) => {
            type: 'set local property definition (scenes.data-management.properties.propertyDefinitionsTableLogic)'
            payload: {
                definition: PropertyDefinition
            }
        }
        setPropertyType: (propertyType: string) => {
            type: 'set property type (scenes.data-management.properties.propertyDefinitionsTableLogic)'
            payload: {
                propertyType: string
            }
        }
        loadPropertyDefinitionsSuccess: (
            propertyDefinitions: PropertyDefinitionsPaginatedResponse,
            payload?: {
                url: string | null
            }
        ) => {
            type: 'load property definitions success (scenes.data-management.properties.propertyDefinitionsTableLogic)'
            payload: {
                propertyDefinitions: PropertyDefinitionsPaginatedResponse
                payload?: {
                    url: string | null
                }
            }
        }
        loadPropertyDefinitionsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load property definitions failure (scenes.data-management.properties.propertyDefinitionsTableLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setLocalPropertyDefinitionSuccess: (
            propertyDefinitions: PropertyDefinitionsPaginatedResponse,
            payload?: {
                definition: PropertyDefinition
            }
        ) => {
            type: 'set local property definition success (scenes.data-management.properties.propertyDefinitionsTableLogic)'
            payload: {
                propertyDefinitions: PropertyDefinitionsPaginatedResponse
                payload?: {
                    definition: PropertyDefinition
                }
            }
        }
        setLocalPropertyDefinitionFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'set local property definition failure (scenes.data-management.properties.propertyDefinitionsTableLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load property definitions (scenes.data-management.properties.propertyDefinitionsTableLogic)': 'loadPropertyDefinitions'
        'set filters (scenes.data-management.properties.propertyDefinitionsTableLogic)': 'setFilters'
        'set hovered definition (scenes.data-management.properties.propertyDefinitionsTableLogic)': 'setHoveredDefinition'
        'set opened definition (scenes.data-management.properties.propertyDefinitionsTableLogic)': 'setOpenedDefinition'
        'set local property definition (scenes.data-management.properties.propertyDefinitionsTableLogic)': 'setLocalPropertyDefinition'
        'set property type (scenes.data-management.properties.propertyDefinitionsTableLogic)': 'setPropertyType'
        'load property definitions success (scenes.data-management.properties.propertyDefinitionsTableLogic)': 'loadPropertyDefinitionsSuccess'
        'load property definitions failure (scenes.data-management.properties.propertyDefinitionsTableLogic)': 'loadPropertyDefinitionsFailure'
        'set local property definition success (scenes.data-management.properties.propertyDefinitionsTableLogic)': 'setLocalPropertyDefinitionSuccess'
        'set local property definition failure (scenes.data-management.properties.propertyDefinitionsTableLogic)': 'setLocalPropertyDefinitionFailure'
    }
    actionTypes: {
        loadPropertyDefinitions: 'load property definitions (scenes.data-management.properties.propertyDefinitionsTableLogic)'
        setFilters: 'set filters (scenes.data-management.properties.propertyDefinitionsTableLogic)'
        setHoveredDefinition: 'set hovered definition (scenes.data-management.properties.propertyDefinitionsTableLogic)'
        setOpenedDefinition: 'set opened definition (scenes.data-management.properties.propertyDefinitionsTableLogic)'
        setLocalPropertyDefinition: 'set local property definition (scenes.data-management.properties.propertyDefinitionsTableLogic)'
        setPropertyType: 'set property type (scenes.data-management.properties.propertyDefinitionsTableLogic)'
        loadPropertyDefinitionsSuccess: 'load property definitions success (scenes.data-management.properties.propertyDefinitionsTableLogic)'
        loadPropertyDefinitionsFailure: 'load property definitions failure (scenes.data-management.properties.propertyDefinitionsTableLogic)'
        setLocalPropertyDefinitionSuccess: 'set local property definition success (scenes.data-management.properties.propertyDefinitionsTableLogic)'
        setLocalPropertyDefinitionFailure: 'set local property definition failure (scenes.data-management.properties.propertyDefinitionsTableLogic)'
    }
    actions: {
        loadPropertyDefinitions: (url?: string | null) => void
        setFilters: (filters: Partial<Filters>) => void
        setHoveredDefinition: (definitionKey: string | null) => void
        setOpenedDefinition: (id: string | null) => void
        setLocalPropertyDefinition: (definition: PropertyDefinition) => void
        setPropertyType: (propertyType: string) => void
        loadPropertyDefinitionsSuccess: (
            propertyDefinitions: PropertyDefinitionsPaginatedResponse,
            payload?: {
                url: string | null
            }
        ) => void
        loadPropertyDefinitionsFailure: (error: string, errorObject?: any) => void
        setLocalPropertyDefinitionSuccess: (
            propertyDefinitions: PropertyDefinitionsPaginatedResponse,
            payload?: {
                definition: PropertyDefinition
            }
        ) => void
        setLocalPropertyDefinitionFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadPropertyDefinitions: (url?: string | null) => Promise<any>
        setFilters: (filters: Partial<Filters>) => Promise<any>
        setHoveredDefinition: (definitionKey: string | null) => Promise<any>
        setOpenedDefinition: (id: string | null) => Promise<any>
        setLocalPropertyDefinition: (definition: PropertyDefinition) => Promise<any>
        setPropertyType: (propertyType: string) => Promise<any>
        loadPropertyDefinitionsSuccess: (
            propertyDefinitions: PropertyDefinitionsPaginatedResponse,
            payload?: {
                url: string | null
            }
        ) => Promise<any>
        loadPropertyDefinitionsFailure: (error: string, errorObject?: any) => Promise<any>
        setLocalPropertyDefinitionSuccess: (
            propertyDefinitions: PropertyDefinitionsPaginatedResponse,
            payload?: {
                definition: PropertyDefinition
            }
        ) => Promise<any>
        setLocalPropertyDefinitionFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        filters: Filters
        hoveredDefinition: string | null
        propertyDefinitions: PropertyDefinitionsPaginatedResponse
        propertyDefinitionsLoading: boolean
    }
    events: {}
    key: string
    listeners: {
        setFilters: ((
            action: {
                type: 'set filters (scenes.data-management.properties.propertyDefinitionsTableLogic)'
                payload: {
                    filters: Partial<Filters>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadPropertyDefinitionsSuccess: ((
            action: {
                type: 'load property definitions success (scenes.data-management.properties.propertyDefinitionsTableLogic)'
                payload: {
                    propertyDefinitions: PropertyDefinitionsPaginatedResponse
                    payload?: {
                        url: string | null
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadPropertyDefinitionsFailure: ((
            action: {
                type: 'load property definitions failure (scenes.data-management.properties.propertyDefinitionsTableLogic)'
                payload: {
                    error: string
                    errorObject?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setPropertyType: ((
            action: {
                type: 'set property type (scenes.data-management.properties.propertyDefinitionsTableLogic)'
                payload: {
                    propertyType: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'data-management', 'properties', 'propertyDefinitionsTableLogic']
    pathString: 'scenes.data-management.properties.propertyDefinitionsTableLogic'
    props: PropertyDefinitionsTableLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        filters: Filters
        hoveredDefinition: string | null
        propertyDefinitions: PropertyDefinitionsPaginatedResponse
        propertyDefinitionsLoading: boolean
    }
    reducers: {
        filters: (state: Filters, action: any, fullState: any) => Filters
        hoveredDefinition: (state: string | null, action: any, fullState: any) => string | null
        propertyDefinitions: (
            state: PropertyDefinitionsPaginatedResponse,
            action: any,
            fullState: any
        ) => PropertyDefinitionsPaginatedResponse
        propertyDefinitionsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        filters: Filters
        hoveredDefinition: string | null
        propertyDefinitions: PropertyDefinitionsPaginatedResponse
        propertyDefinitionsLoading: boolean
    }
    selectors: {
        filters: (state: any, props?: any) => Filters
        hoveredDefinition: (state: any, props?: any) => string | null
        propertyDefinitions: (state: any, props?: any) => PropertyDefinitionsPaginatedResponse
        propertyDefinitionsLoading: (state: any, props?: any) => boolean
        groupTypes: (state: any, props?: any) => Array<GroupType>
        aggregationLabel: (
            state: any,
            props?: any
        ) => (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
        propertyTypeOptions: (state: any, props?: any) => LemonSelectOption<string>[]
    }
    sharedListeners: {}
    values: {
        filters: Filters
        hoveredDefinition: string | null
        propertyDefinitions: PropertyDefinitionsPaginatedResponse
        propertyDefinitionsLoading: boolean
        groupTypes: Array<GroupType>
        aggregationLabel: (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun
        breadcrumbs: Breadcrumb[]
        propertyTypeOptions: LemonSelectOption<string>[]
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        propertyTypeOptions: (
            groupTypes: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').GroupType[],
            aggregationLabel: (
                groupTypeIndex: number | null | undefined,
                deferToUserWording?: boolean | undefined
            ) => import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/models/groupsModel').Noun
        ) => LemonSelectOption<string>[]
    }
}
