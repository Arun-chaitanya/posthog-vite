// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:21 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { EventDefinitionsPaginatedResponse, EventDefinitionsTableLogicProps, Filters, PropertyDefinitionsPaginatedResponse } from './eventDefinitionsTableLogic'
import type { EventDefinition, PropertyDefinition } from '../../../types'

export interface eventDefinitionsTableLogicType extends Logic {
    actionCreators: {
        loadEventDefinitions: (url?: string | null) => {
            type: 'load event definitions (scenes.data-management.events.eventDefinitionsTableLogic.*)'
            payload: {
                url: string | null
            }
        }
        loadEventExample: (definition: EventDefinition) => {
            type: 'load event example (scenes.data-management.events.eventDefinitionsTableLogic.*)'
            payload: {
                definition: EventDefinition
            }
        }
        loadPropertiesForEvent: (
            definition: EventDefinition,
            url?: string | null
        ) => {
            type: 'load properties for event (scenes.data-management.events.eventDefinitionsTableLogic.*)'
            payload: {
                definition: EventDefinition
                url: string | null
            }
        }
        setFilters: (filters: Partial<Filters>) => {
            type: 'set filters (scenes.data-management.events.eventDefinitionsTableLogic.*)'
            payload: {
                filters: Partial<Filters>
            }
        }
        setLocalEventDefinition: (definition: EventDefinition) => {
            type: 'set local event definition (scenes.data-management.events.eventDefinitionsTableLogic.*)'
            payload: {
                definition: EventDefinition
            }
        }
        setLocalPropertyDefinition: (
            event: EventDefinition,
            definition: PropertyDefinition
        ) => {
            type: 'set local property definition (scenes.data-management.events.eventDefinitionsTableLogic.*)'
            payload: {
                event: EventDefinition
                definition: PropertyDefinition
            }
        }
        setEventDefinitionPropertiesLoading: (ids: string[]) => {
            type: 'set event definition properties loading (scenes.data-management.events.eventDefinitionsTableLogic.*)'
            payload: {
                ids: string[]
            }
        }
        loadEventDefinitionsSuccess: (
            eventDefinitions: EventDefinitionsPaginatedResponse,
            payload?: {
                url: string | null
            }
        ) => {
            type: 'load event definitions success (scenes.data-management.events.eventDefinitionsTableLogic.*)'
            payload: {
                eventDefinitions: EventDefinitionsPaginatedResponse
                payload?: {
                    url: string | null
                }
            }
        }
        loadEventDefinitionsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load event definitions failure (scenes.data-management.events.eventDefinitionsTableLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setLocalEventDefinitionSuccess: (
            eventDefinitions: EventDefinitionsPaginatedResponse,
            payload?: {
                definition: EventDefinition
            }
        ) => {
            type: 'set local event definition success (scenes.data-management.events.eventDefinitionsTableLogic.*)'
            payload: {
                eventDefinitions: EventDefinitionsPaginatedResponse
                payload?: {
                    definition: EventDefinition
                }
            }
        }
        setLocalEventDefinitionFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'set local event definition failure (scenes.data-management.events.eventDefinitionsTableLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadPropertiesForEventSuccess: (
            eventPropertiesCacheMap: { [x: string]: any },
            payload?: {
                definition: EventDefinition
                url: string | null
            }
        ) => {
            type: 'load properties for event success (scenes.data-management.events.eventDefinitionsTableLogic.*)'
            payload: {
                eventPropertiesCacheMap: { [x: string]: any }
                payload?: {
                    definition: EventDefinition
                    url: string | null
                }
            }
        }
        loadPropertiesForEventFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load properties for event failure (scenes.data-management.events.eventDefinitionsTableLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setLocalPropertyDefinitionSuccess: (
            eventPropertiesCacheMap: { [x: string]: any },
            payload?: {
                event: EventDefinition
                definition: PropertyDefinition
            }
        ) => {
            type: 'set local property definition success (scenes.data-management.events.eventDefinitionsTableLogic.*)'
            payload: {
                eventPropertiesCacheMap: { [x: string]: any }
                payload?: {
                    event: EventDefinition
                    definition: PropertyDefinition
                }
            }
        }
        setLocalPropertyDefinitionFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'set local property definition failure (scenes.data-management.events.eventDefinitionsTableLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load event definitions (scenes.data-management.events.eventDefinitionsTableLogic.*)': 'loadEventDefinitions'
        'load event example (scenes.data-management.events.eventDefinitionsTableLogic.*)': 'loadEventExample'
        'load properties for event (scenes.data-management.events.eventDefinitionsTableLogic.*)': 'loadPropertiesForEvent'
        'set filters (scenes.data-management.events.eventDefinitionsTableLogic.*)': 'setFilters'
        'set local event definition (scenes.data-management.events.eventDefinitionsTableLogic.*)': 'setLocalEventDefinition'
        'set local property definition (scenes.data-management.events.eventDefinitionsTableLogic.*)': 'setLocalPropertyDefinition'
        'set event definition properties loading (scenes.data-management.events.eventDefinitionsTableLogic.*)': 'setEventDefinitionPropertiesLoading'
        'load event definitions success (scenes.data-management.events.eventDefinitionsTableLogic.*)': 'loadEventDefinitionsSuccess'
        'load event definitions failure (scenes.data-management.events.eventDefinitionsTableLogic.*)': 'loadEventDefinitionsFailure'
        'set local event definition success (scenes.data-management.events.eventDefinitionsTableLogic.*)': 'setLocalEventDefinitionSuccess'
        'set local event definition failure (scenes.data-management.events.eventDefinitionsTableLogic.*)': 'setLocalEventDefinitionFailure'
        'load properties for event success (scenes.data-management.events.eventDefinitionsTableLogic.*)': 'loadPropertiesForEventSuccess'
        'load properties for event failure (scenes.data-management.events.eventDefinitionsTableLogic.*)': 'loadPropertiesForEventFailure'
        'set local property definition success (scenes.data-management.events.eventDefinitionsTableLogic.*)': 'setLocalPropertyDefinitionSuccess'
        'set local property definition failure (scenes.data-management.events.eventDefinitionsTableLogic.*)': 'setLocalPropertyDefinitionFailure'
    }
    actionTypes: {
        loadEventDefinitions: 'load event definitions (scenes.data-management.events.eventDefinitionsTableLogic.*)'
        loadEventExample: 'load event example (scenes.data-management.events.eventDefinitionsTableLogic.*)'
        loadPropertiesForEvent: 'load properties for event (scenes.data-management.events.eventDefinitionsTableLogic.*)'
        setFilters: 'set filters (scenes.data-management.events.eventDefinitionsTableLogic.*)'
        setLocalEventDefinition: 'set local event definition (scenes.data-management.events.eventDefinitionsTableLogic.*)'
        setLocalPropertyDefinition: 'set local property definition (scenes.data-management.events.eventDefinitionsTableLogic.*)'
        setEventDefinitionPropertiesLoading: 'set event definition properties loading (scenes.data-management.events.eventDefinitionsTableLogic.*)'
        loadEventDefinitionsSuccess: 'load event definitions success (scenes.data-management.events.eventDefinitionsTableLogic.*)'
        loadEventDefinitionsFailure: 'load event definitions failure (scenes.data-management.events.eventDefinitionsTableLogic.*)'
        setLocalEventDefinitionSuccess: 'set local event definition success (scenes.data-management.events.eventDefinitionsTableLogic.*)'
        setLocalEventDefinitionFailure: 'set local event definition failure (scenes.data-management.events.eventDefinitionsTableLogic.*)'
        loadPropertiesForEventSuccess: 'load properties for event success (scenes.data-management.events.eventDefinitionsTableLogic.*)'
        loadPropertiesForEventFailure: 'load properties for event failure (scenes.data-management.events.eventDefinitionsTableLogic.*)'
        setLocalPropertyDefinitionSuccess: 'set local property definition success (scenes.data-management.events.eventDefinitionsTableLogic.*)'
        setLocalPropertyDefinitionFailure: 'set local property definition failure (scenes.data-management.events.eventDefinitionsTableLogic.*)'
    }
    actions: {
        loadEventDefinitions: (url?: string | null) => void
        loadEventExample: (definition: EventDefinition) => void
        loadPropertiesForEvent: (definition: EventDefinition, url?: string | null) => void
        setFilters: (filters: Partial<Filters>) => void
        setLocalEventDefinition: (definition: EventDefinition) => void
        setLocalPropertyDefinition: (event: EventDefinition, definition: PropertyDefinition) => void
        setEventDefinitionPropertiesLoading: (ids: string[]) => void
        loadEventDefinitionsSuccess: (
            eventDefinitions: EventDefinitionsPaginatedResponse,
            payload?: {
                url: string | null
            }
        ) => void
        loadEventDefinitionsFailure: (error: string, errorObject?: any) => void
        setLocalEventDefinitionSuccess: (
            eventDefinitions: EventDefinitionsPaginatedResponse,
            payload?: {
                definition: EventDefinition
            }
        ) => void
        setLocalEventDefinitionFailure: (error: string, errorObject?: any) => void
        loadPropertiesForEventSuccess: (
            eventPropertiesCacheMap: { [x: string]: any },
            payload?: {
                definition: EventDefinition
                url: string | null
            }
        ) => void
        loadPropertiesForEventFailure: (error: string, errorObject?: any) => void
        setLocalPropertyDefinitionSuccess: (
            eventPropertiesCacheMap: { [x: string]: any },
            payload?: {
                event: EventDefinition
                definition: PropertyDefinition
            }
        ) => void
        setLocalPropertyDefinitionFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadEventDefinitions: (url?: string | null) => Promise<any>
        loadEventExample: (definition: EventDefinition) => Promise<any>
        loadPropertiesForEvent: (definition: EventDefinition, url?: string | null) => Promise<any>
        setFilters: (filters: Partial<Filters>) => Promise<any>
        setLocalEventDefinition: (definition: EventDefinition) => Promise<any>
        setLocalPropertyDefinition: (event: EventDefinition, definition: PropertyDefinition) => Promise<any>
        setEventDefinitionPropertiesLoading: (ids: string[]) => Promise<any>
        loadEventDefinitionsSuccess: (
            eventDefinitions: EventDefinitionsPaginatedResponse,
            payload?: {
                url: string | null
            }
        ) => Promise<any>
        loadEventDefinitionsFailure: (error: string, errorObject?: any) => Promise<any>
        setLocalEventDefinitionSuccess: (
            eventDefinitions: EventDefinitionsPaginatedResponse,
            payload?: {
                definition: EventDefinition
            }
        ) => Promise<any>
        setLocalEventDefinitionFailure: (error: string, errorObject?: any) => Promise<any>
        loadPropertiesForEventSuccess: (
            eventPropertiesCacheMap: { [x: string]: any },
            payload?: {
                definition: EventDefinition
                url: string | null
            }
        ) => Promise<any>
        loadPropertiesForEventFailure: (error: string, errorObject?: any) => Promise<any>
        setLocalPropertyDefinitionSuccess: (
            eventPropertiesCacheMap: { [x: string]: any },
            payload?: {
                event: EventDefinition
                definition: PropertyDefinition
            }
        ) => Promise<any>
        setLocalPropertyDefinitionFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        filters: Filters
        eventDefinitionPropertiesLoading: string[]
        eventDefinitions: EventDefinitionsPaginatedResponse
        eventDefinitionsLoading: boolean
        eventPropertiesCacheMap: Record<string, PropertyDefinitionsPaginatedResponse>
        eventPropertiesCacheMapLoading: boolean
    }
    events: {}
    key: string
    listeners: {
        setFilters: ((
            action: {
                type: 'set filters (scenes.data-management.events.eventDefinitionsTableLogic.*)'
                payload: {
                    filters: Partial<Filters>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadEventDefinitionsSuccess: ((
            action: {
                type: 'load event definitions success (scenes.data-management.events.eventDefinitionsTableLogic.*)'
                payload: {
                    eventDefinitions: EventDefinitionsPaginatedResponse
                    payload?: {
                        url: string | null
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadEventDefinitionsFailure: ((
            action: {
                type: 'load event definitions failure (scenes.data-management.events.eventDefinitionsTableLogic.*)'
                payload: {
                    error: string
                    errorObject?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadPropertiesForEventSuccess: ((
            action: {
                type: 'load properties for event success (scenes.data-management.events.eventDefinitionsTableLogic.*)'
                payload: {
                    eventPropertiesCacheMap: { [x: string]: any }
                    payload?: {
                        definition: EventDefinition
                        url: string | null
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadPropertiesForEventFailure: ((
            action: {
                type: 'load properties for event failure (scenes.data-management.events.eventDefinitionsTableLogic.*)'
                payload: {
                    error: string
                    errorObject?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'data-management', 'events', 'eventDefinitionsTableLogic', '*']
    pathString: 'scenes.data-management.events.eventDefinitionsTableLogic.*'
    props: EventDefinitionsTableLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        filters: Filters
        eventDefinitionPropertiesLoading: string[]
        eventDefinitions: EventDefinitionsPaginatedResponse
        eventDefinitionsLoading: boolean
        eventPropertiesCacheMap: Record<string, PropertyDefinitionsPaginatedResponse>
        eventPropertiesCacheMapLoading: boolean
    }
    reducers: {
        filters: (state: Filters, action: any, fullState: any) => Filters
        eventDefinitionPropertiesLoading: (state: string[], action: any, fullState: any) => string[]
        eventDefinitions: (
            state: EventDefinitionsPaginatedResponse,
            action: any,
            fullState: any
        ) => EventDefinitionsPaginatedResponse
        eventDefinitionsLoading: (state: boolean, action: any, fullState: any) => boolean
        eventPropertiesCacheMap: (
            state: Record<string, PropertyDefinitionsPaginatedResponse>,
            action: any,
            fullState: any
        ) => Record<string, PropertyDefinitionsPaginatedResponse>
        eventPropertiesCacheMapLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        filters: Filters
        eventDefinitionPropertiesLoading: string[]
        eventDefinitions: EventDefinitionsPaginatedResponse
        eventDefinitionsLoading: boolean
        eventPropertiesCacheMap: Record<string, PropertyDefinitionsPaginatedResponse>
        eventPropertiesCacheMapLoading: boolean
    }
    selectors: {
        filters: (state: any, props?: any) => Filters
        eventDefinitionPropertiesLoading: (state: any, props?: any) => string[]
        eventDefinitions: (state: any, props?: any) => EventDefinitionsPaginatedResponse
        eventDefinitionsLoading: (state: any, props?: any) => boolean
        eventPropertiesCacheMap: (state: any, props?: any) => Record<string, PropertyDefinitionsPaginatedResponse>
        eventPropertiesCacheMapLoading: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        filters: Filters
        eventDefinitionPropertiesLoading: string[]
        eventDefinitions: EventDefinitionsPaginatedResponse
        eventDefinitionsLoading: boolean
        eventPropertiesCacheMap: Record<string, PropertyDefinitionsPaginatedResponse>
        eventPropertiesCacheMapLoading: boolean
    }
    _isKea: true
    _isKeaWithKey: true
}
