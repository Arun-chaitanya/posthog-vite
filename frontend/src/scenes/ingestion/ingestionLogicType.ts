// Generated by kea-typegen on Thu, 20 Jul 2023 11:24:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FeatureFlagsSet } from '../../lib/logic/featureFlagLogic'
import type { OrganizationInviteType, PreflightStatus, TeamPublicType, TeamType } from '../../types'
import type { INGESTION_STEPS, INGESTION_VIEWS, IngestionState } from './ingestionLogic'
import type { Framework, PlatformType } from './types'
import type { PluginTypeWithConfig } from '../plugins/types'
import type { ThirdPartySource } from './constants'

export interface ingestionLogicType extends Logic {
    actionCreators: {
        updateCurrentTeamSuccess: (
            currentTeam: TeamType,
            payload?: Partial<TeamType>
        ) => {
            type: 'update current team success (scenes.ingestion.ingestionLogic)'
            payload: {
                currentTeam: TeamType
                payload?: Partial<TeamType>
            }
        }
        createTeamSuccess: (
            currentTeam: TeamType,
            payload?: {
                name: string
                is_demo: boolean
            }
        ) => {
            type: 'create team success (scenes.ingestion.ingestionLogic)'
            payload: {
                currentTeam: TeamType
                payload?: {
                    name: string
                    is_demo: boolean
                }
            }
        }
        inviteTeamMembersSuccess: (
            invitedTeamMembersInternal: OrganizationInviteType[],
            payload?: any
        ) => {
            type: 'invite team members success (scenes.ingestion.ingestionLogic)'
            payload: {
                invitedTeamMembersInternal: OrganizationInviteType[]
                payload?: any
            }
        }
        setState: ({
            isTechnicalUser,
            hasInvitedMembers,
            platform,
            framework,
            readyToVerify,
            showSuperpowers,
            showBilling,
            isDemoProject,
            generatingDemoData,
        }: IngestionState) => {
            type: 'set state (scenes.ingestion.ingestionLogic)'
            payload: {
                isTechnicalUser: boolean | null
                hasInvitedMembers: boolean | null
                platform: PlatformType
                framework: string | null
                readyToVerify: boolean
                showSuperpowers: boolean
                showBilling: boolean
                isDemoProject: boolean | null
                generatingDemoData: boolean | null
            }
        }
        setInstructionsModal: (isOpen: boolean) => {
            type: 'set instructions modal (scenes.ingestion.ingestionLogic)'
            payload: {
                isOpen: boolean
            }
        }
        setThirdPartySource: (sourceIndex: number) => {
            type: 'set third party source (scenes.ingestion.ingestionLogic)'
            payload: {
                sourceIndex: number
            }
        }
        openThirdPartyPluginModal: (plugin: PluginTypeWithConfig) => {
            type: 'open third party plugin modal (scenes.ingestion.ingestionLogic)'
            payload: {
                plugin: PluginTypeWithConfig
            }
        }
        completeOnboarding: () => {
            type: 'complete onboarding (scenes.ingestion.ingestionLogic)'
            payload: {
                value: true
            }
        }
        setCurrentStep: (currentStep: string) => {
            type: 'set current step (scenes.ingestion.ingestionLogic)'
            payload: {
                currentStep: string
            }
        }
        sidebarStepClick: (step: string) => {
            type: 'sidebar step click (scenes.ingestion.ingestionLogic)'
            payload: {
                step: string
            }
        }
        next: (props: Partial<IngestionState>) => {
            type: 'next (scenes.ingestion.ingestionLogic)'
            payload: Partial<IngestionState>
        }
        onBack: () => {
            type: 'on back (scenes.ingestion.ingestionLogic)'
            payload: {
                value: true
            }
        }
        goToView: (view: INGESTION_VIEWS) => {
            type: 'go to view (scenes.ingestion.ingestionLogic)'
            payload: {
                view: INGESTION_VIEWS
            }
        }
        setSidebarSteps: (steps: string[]) => {
            type: 'set sidebar steps (scenes.ingestion.ingestionLogic)'
            payload: {
                steps: string[]
            }
        }
        setPollTimeout: (pollTimeout: number) => {
            type: 'set poll timeout (scenes.ingestion.ingestionLogic)'
            payload: {
                pollTimeout: number
            }
        }
        toggleProjectSwitcher: () => {
            type: 'toggle project switcher (scenes.ingestion.ingestionLogic)'
            payload: {
                value: true
            }
        }
        hideProjectSwitcher: () => {
            type: 'hide project switcher (scenes.ingestion.ingestionLogic)'
            payload: {
                value: true
            }
        }
        checkIfDemoDataIsReady: (_: any) => {
            type: 'check if demo data is ready (scenes.ingestion.ingestionLogic)'
            payload: any
        }
        checkIfDemoDataIsReadySuccess: (
            isDemoDataReady: boolean,
            payload?: any
        ) => {
            type: 'check if demo data is ready success (scenes.ingestion.ingestionLogic)'
            payload: {
                isDemoDataReady: boolean
                payload?: any
            }
        }
        checkIfDemoDataIsReadyFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'check if demo data is ready failure (scenes.ingestion.ingestionLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'update current team success (scenes.ingestion.ingestionLogic)': 'updateCurrentTeamSuccess'
        'create team success (scenes.ingestion.ingestionLogic)': 'createTeamSuccess'
        'invite team members success (scenes.ingestion.ingestionLogic)': 'inviteTeamMembersSuccess'
        'set state (scenes.ingestion.ingestionLogic)': 'setState'
        'set instructions modal (scenes.ingestion.ingestionLogic)': 'setInstructionsModal'
        'set third party source (scenes.ingestion.ingestionLogic)': 'setThirdPartySource'
        'open third party plugin modal (scenes.ingestion.ingestionLogic)': 'openThirdPartyPluginModal'
        'complete onboarding (scenes.ingestion.ingestionLogic)': 'completeOnboarding'
        'set current step (scenes.ingestion.ingestionLogic)': 'setCurrentStep'
        'sidebar step click (scenes.ingestion.ingestionLogic)': 'sidebarStepClick'
        'next (scenes.ingestion.ingestionLogic)': 'next'
        'on back (scenes.ingestion.ingestionLogic)': 'onBack'
        'go to view (scenes.ingestion.ingestionLogic)': 'goToView'
        'set sidebar steps (scenes.ingestion.ingestionLogic)': 'setSidebarSteps'
        'set poll timeout (scenes.ingestion.ingestionLogic)': 'setPollTimeout'
        'toggle project switcher (scenes.ingestion.ingestionLogic)': 'toggleProjectSwitcher'
        'hide project switcher (scenes.ingestion.ingestionLogic)': 'hideProjectSwitcher'
        'check if demo data is ready (scenes.ingestion.ingestionLogic)': 'checkIfDemoDataIsReady'
        'check if demo data is ready success (scenes.ingestion.ingestionLogic)': 'checkIfDemoDataIsReadySuccess'
        'check if demo data is ready failure (scenes.ingestion.ingestionLogic)': 'checkIfDemoDataIsReadyFailure'
    }
    actionTypes: {
        updateCurrentTeamSuccess: 'update current team success (scenes.ingestion.ingestionLogic)'
        createTeamSuccess: 'create team success (scenes.ingestion.ingestionLogic)'
        inviteTeamMembersSuccess: 'invite team members success (scenes.ingestion.ingestionLogic)'
        setState: 'set state (scenes.ingestion.ingestionLogic)'
        setInstructionsModal: 'set instructions modal (scenes.ingestion.ingestionLogic)'
        setThirdPartySource: 'set third party source (scenes.ingestion.ingestionLogic)'
        openThirdPartyPluginModal: 'open third party plugin modal (scenes.ingestion.ingestionLogic)'
        completeOnboarding: 'complete onboarding (scenes.ingestion.ingestionLogic)'
        setCurrentStep: 'set current step (scenes.ingestion.ingestionLogic)'
        sidebarStepClick: 'sidebar step click (scenes.ingestion.ingestionLogic)'
        next: 'next (scenes.ingestion.ingestionLogic)'
        onBack: 'on back (scenes.ingestion.ingestionLogic)'
        goToView: 'go to view (scenes.ingestion.ingestionLogic)'
        setSidebarSteps: 'set sidebar steps (scenes.ingestion.ingestionLogic)'
        setPollTimeout: 'set poll timeout (scenes.ingestion.ingestionLogic)'
        toggleProjectSwitcher: 'toggle project switcher (scenes.ingestion.ingestionLogic)'
        hideProjectSwitcher: 'hide project switcher (scenes.ingestion.ingestionLogic)'
        checkIfDemoDataIsReady: 'check if demo data is ready (scenes.ingestion.ingestionLogic)'
        checkIfDemoDataIsReadySuccess: 'check if demo data is ready success (scenes.ingestion.ingestionLogic)'
        checkIfDemoDataIsReadyFailure: 'check if demo data is ready failure (scenes.ingestion.ingestionLogic)'
    }
    actions: {
        updateCurrentTeamSuccess: (currentTeam: TeamType, payload?: Partial<TeamType>) => void
        createTeamSuccess: (
            currentTeam: TeamType,
            payload?: {
                name: string
                is_demo: boolean
            }
        ) => void
        inviteTeamMembersSuccess: (invitedTeamMembersInternal: OrganizationInviteType[], payload?: any) => void
        setState: ({
            isTechnicalUser,
            hasInvitedMembers,
            platform,
            framework,
            readyToVerify,
            showSuperpowers,
            showBilling,
            isDemoProject,
            generatingDemoData,
        }: IngestionState) => void
        setInstructionsModal: (isOpen: boolean) => void
        setThirdPartySource: (sourceIndex: number) => void
        openThirdPartyPluginModal: (plugin: PluginTypeWithConfig) => void
        completeOnboarding: () => void
        setCurrentStep: (currentStep: string) => void
        sidebarStepClick: (step: string) => void
        next: (props: Partial<IngestionState>) => void
        onBack: () => void
        goToView: (view: INGESTION_VIEWS) => void
        setSidebarSteps: (steps: string[]) => void
        setPollTimeout: (pollTimeout: number) => void
        toggleProjectSwitcher: () => void
        hideProjectSwitcher: () => void
        checkIfDemoDataIsReady: (_: any) => void
        checkIfDemoDataIsReadySuccess: (isDemoDataReady: boolean, payload?: any) => void
        checkIfDemoDataIsReadyFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        updateCurrentTeamSuccess: (currentTeam: TeamType, payload?: Partial<TeamType>) => Promise<any>
        createTeamSuccess: (
            currentTeam: TeamType,
            payload?: {
                name: string
                is_demo: boolean
            }
        ) => Promise<any>
        inviteTeamMembersSuccess: (invitedTeamMembersInternal: OrganizationInviteType[], payload?: any) => Promise<any>
        setState: ({
            isTechnicalUser,
            hasInvitedMembers,
            platform,
            framework,
            readyToVerify,
            showSuperpowers,
            showBilling,
            isDemoProject,
            generatingDemoData,
        }: IngestionState) => Promise<any>
        setInstructionsModal: (isOpen: boolean) => Promise<any>
        setThirdPartySource: (sourceIndex: number) => Promise<any>
        openThirdPartyPluginModal: (plugin: PluginTypeWithConfig) => Promise<any>
        completeOnboarding: () => Promise<any>
        setCurrentStep: (currentStep: string) => Promise<any>
        sidebarStepClick: (step: string) => Promise<any>
        next: (props: Partial<IngestionState>) => Promise<any>
        onBack: () => Promise<any>
        goToView: (view: INGESTION_VIEWS) => Promise<any>
        setSidebarSteps: (steps: string[]) => Promise<any>
        setPollTimeout: (pollTimeout: number) => Promise<any>
        toggleProjectSwitcher: () => Promise<any>
        hideProjectSwitcher: () => Promise<any>
        checkIfDemoDataIsReady: (_: any) => Promise<any>
        checkIfDemoDataIsReadySuccess: (isDemoDataReady: boolean, payload?: any) => Promise<any>
        checkIfDemoDataIsReadyFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        isSmallScreen: boolean
        isTechnicalUser: null | boolean
        hasInvitedMembers: null | boolean
        platform: null | PlatformType
        framework: null | Framework
        readyToVerify: boolean
        showSuperpowers: boolean
        showBilling: boolean
        instructionsModalOpen: boolean
        thirdPartyIntegrationSource: ThirdPartySource | null
        thirdPartyPluginSource: PluginTypeWithConfig | null
        sidebarSteps: string[]
        isDemoProject: null | boolean
        generatingDemoData: boolean | null
        pollTimeout: number
        isProjectSwitcherShown: boolean
        isDemoDataReady: boolean
        isDemoDataReadyLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {
        next: ((
            action: {
                type: 'next (scenes.ingestion.ingestionLogic)'
                payload: Partial<IngestionState>
            },
            previousState: any
        ) => void | Promise<void>)[]
        goToView: ((
            action: {
                type: 'go to view (scenes.ingestion.ingestionLogic)'
                payload: {
                    view: INGESTION_VIEWS
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        completeOnboarding: ((
            action: {
                type: 'complete onboarding (scenes.ingestion.ingestionLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        openThirdPartyPluginModal: ((
            action: {
                type: 'open third party plugin modal (scenes.ingestion.ingestionLogic)'
                payload: {
                    plugin: PluginTypeWithConfig
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        sidebarStepClick: ((
            action: {
                type: 'sidebar step click (scenes.ingestion.ingestionLogic)'
                payload: {
                    step: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        onBack: ((
            action: {
                type: 'on back (scenes.ingestion.ingestionLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        inviteTeamMembersSuccess: ((
            action: {
                type: 'invite team members success (scenes.ingestion.ingestionLogic)'
                payload: {
                    invitedTeamMembersInternal: OrganizationInviteType[]
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        createTeamSuccess: ((
            action: {
                type: 'create team success (scenes.ingestion.ingestionLogic)'
                payload: {
                    currentTeam: TeamType
                    payload?: {
                        name: string
                        is_demo: boolean
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        checkIfDemoDataIsReadySuccess: ((
            action: {
                type: 'check if demo data is ready success (scenes.ingestion.ingestionLogic)'
                payload: {
                    isDemoDataReady: boolean
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'ingestion', 'ingestionLogic']
    pathString: 'scenes.ingestion.ingestionLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        isSmallScreen: boolean
        isTechnicalUser: null | boolean
        hasInvitedMembers: null | boolean
        platform: null | PlatformType
        framework: null | Framework
        readyToVerify: boolean
        showSuperpowers: boolean
        showBilling: boolean
        instructionsModalOpen: boolean
        thirdPartyIntegrationSource: ThirdPartySource | null
        thirdPartyPluginSource: PluginTypeWithConfig | null
        sidebarSteps: string[]
        isDemoProject: null | boolean
        generatingDemoData: boolean | null
        pollTimeout: number
        isProjectSwitcherShown: boolean
        isDemoDataReady: boolean
        isDemoDataReadyLoading: boolean
    }
    reducers: {
        isSmallScreen: (state: boolean, action: any, fullState: any) => boolean
        isTechnicalUser: (state: null | boolean, action: any, fullState: any) => null | boolean
        hasInvitedMembers: (state: null | boolean, action: any, fullState: any) => null | boolean
        platform: (state: null | PlatformType, action: any, fullState: any) => null | PlatformType
        framework: (state: null | Framework, action: any, fullState: any) => null | Framework
        readyToVerify: (state: boolean, action: any, fullState: any) => boolean
        showSuperpowers: (state: boolean, action: any, fullState: any) => boolean
        showBilling: (state: boolean, action: any, fullState: any) => boolean
        instructionsModalOpen: (state: boolean, action: any, fullState: any) => boolean
        thirdPartyIntegrationSource: (
            state: ThirdPartySource | null,
            action: any,
            fullState: any
        ) => ThirdPartySource | null
        thirdPartyPluginSource: (
            state: PluginTypeWithConfig | null,
            action: any,
            fullState: any
        ) => PluginTypeWithConfig | null
        sidebarSteps: (state: string[], action: any, fullState: any) => string[]
        isDemoProject: (state: null | boolean, action: any, fullState: any) => null | boolean
        generatingDemoData: (state: boolean | null, action: any, fullState: any) => boolean | null
        pollTimeout: (state: number, action: any, fullState: any) => number
        isProjectSwitcherShown: (state: boolean, action: any, fullState: any) => boolean
        isDemoDataReady: (state: boolean, action: any, fullState: any) => boolean
        isDemoDataReadyLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        isSmallScreen: boolean
        isTechnicalUser: null | boolean
        hasInvitedMembers: null | boolean
        platform: null | PlatformType
        framework: null | Framework
        readyToVerify: boolean
        showSuperpowers: boolean
        showBilling: boolean
        instructionsModalOpen: boolean
        thirdPartyIntegrationSource: ThirdPartySource | null
        thirdPartyPluginSource: PluginTypeWithConfig | null
        sidebarSteps: string[]
        isDemoProject: null | boolean
        generatingDemoData: boolean | null
        pollTimeout: number
        isProjectSwitcherShown: boolean
        isDemoDataReady: boolean
        isDemoDataReadyLoading: boolean
    }
    selectors: {
        isSmallScreen: (state: any, props?: any) => boolean
        isTechnicalUser: (state: any, props?: any) => null | boolean
        hasInvitedMembers: (state: any, props?: any) => null | boolean
        platform: (state: any, props?: any) => null | PlatformType
        framework: (state: any, props?: any) => null | Framework
        readyToVerify: (state: any, props?: any) => boolean
        showSuperpowers: (state: any, props?: any) => boolean
        showBilling: (state: any, props?: any) => boolean
        instructionsModalOpen: (state: any, props?: any) => boolean
        thirdPartyIntegrationSource: (state: any, props?: any) => ThirdPartySource | null
        thirdPartyPluginSource: (state: any, props?: any) => PluginTypeWithConfig | null
        sidebarSteps: (state: any, props?: any) => string[]
        isDemoProject: (state: any, props?: any) => null | boolean
        generatingDemoData: (state: any, props?: any) => boolean | null
        pollTimeout: (state: any, props?: any) => number
        isProjectSwitcherShown: (state: any, props?: any) => boolean
        isDemoDataReady: (state: any, props?: any) => boolean
        isDemoDataReadyLoading: (state: any, props?: any) => boolean
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
        currentTeam: (state: any, props?: any) => TeamType | TeamPublicType | null
        preflight: (state: any, props?: any) => PreflightStatus | null
        isInviteModalShown: (state: any, props?: any) => boolean
        currentState: (
            state: any,
            props?: any
        ) => {
            platform: PlatformType
            framework: string | null
            readyToVerify: boolean
            showSuperpowers: boolean
            showBilling: boolean
            isTechnicalUser: boolean | null
            hasInvitedMembers: boolean | null
            isDemoProject: boolean | null
            generatingDemoData: boolean | null
        }
        currentView: (state: any, props?: any) => INGESTION_VIEWS
        currentStep: (state: any, props?: any) => INGESTION_STEPS
        previousStep: (state: any, props?: any) => INGESTION_STEPS
        frameworkString: (state: any, props?: any) => string
        showBillingStep: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        isSmallScreen: boolean
        isTechnicalUser: null | boolean
        hasInvitedMembers: null | boolean
        platform: null | PlatformType
        framework: null | Framework
        readyToVerify: boolean
        showSuperpowers: boolean
        showBilling: boolean
        instructionsModalOpen: boolean
        thirdPartyIntegrationSource: ThirdPartySource | null
        thirdPartyPluginSource: PluginTypeWithConfig | null
        sidebarSteps: string[]
        isDemoProject: null | boolean
        generatingDemoData: boolean | null
        pollTimeout: number
        isProjectSwitcherShown: boolean
        isDemoDataReady: boolean
        isDemoDataReadyLoading: boolean
        featureFlags: FeatureFlagsSet
        currentTeam: TeamType | TeamPublicType | null
        preflight: PreflightStatus | null
        isInviteModalShown: boolean
        currentState: {
            platform: PlatformType
            framework: string | null
            readyToVerify: boolean
            showSuperpowers: boolean
            showBilling: boolean
            isTechnicalUser: boolean | null
            hasInvitedMembers: boolean | null
            isDemoProject: boolean | null
            generatingDemoData: boolean | null
        }
        currentView: INGESTION_VIEWS
        currentStep: INGESTION_STEPS
        previousStep: INGESTION_STEPS
        frameworkString: string
        showBillingStep: boolean
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        currentState: (
            platform: PlatformType,
            framework: Framework,
            readyToVerify: boolean,
            showSuperpowers: boolean,
            showBilling: boolean,
            isTechnicalUser: boolean | null,
            hasInvitedMembers: boolean | null,
            isDemoProject: boolean | null,
            generatingDemoData: boolean | null
        ) => {
            platform: PlatformType
            framework: string | null
            readyToVerify: boolean
            showSuperpowers: boolean
            showBilling: boolean
            isTechnicalUser: boolean | null
            hasInvitedMembers: boolean | null
            isDemoProject: boolean | null
            generatingDemoData: boolean | null
        }
        currentView: (currentState: {
            platform: PlatformType
            framework: string | null
            readyToVerify: boolean
            showSuperpowers: boolean
            showBilling: boolean
            isTechnicalUser: boolean | null
            hasInvitedMembers: boolean | null
            isDemoProject: boolean | null
            generatingDemoData: boolean | null
        }) => INGESTION_VIEWS
        currentStep: (currentView: INGESTION_VIEWS) => INGESTION_STEPS
        previousStep: (currentStep: INGESTION_STEPS) => INGESTION_STEPS
        frameworkString: (framework: Framework) => string
        showBillingStep: (
            preflight:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').PreflightStatus
                | null
        ) => boolean
    }
}
