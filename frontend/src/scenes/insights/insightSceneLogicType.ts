// Generated by kea-typegen on Thu, 20 Jul 2023 11:31:46 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic, BreakPointFunction } from 'kea'

import type { Breadcrumb, InsightModel, InsightShortId, ItemMode, TeamPublicType, TeamType } from '../../types'
import type { InsightEventSource } from '../../lib/utils/eventUsageLogic'
import type { BuiltLogic } from '../../../../node_modules/.pnpm/kea@3.1.5_react@16.14.0/node_modules/kea/lib/index.d'
import type { insightLogicType } from './insightLogicType'
import type { insightDataLogicType } from './insightDataLogicType'

export interface insightSceneLogicType extends Logic {
    actionCreators: {
        setInsightId: (insightId: InsightShortId) => {
            type: 'set insight id (scenes.insights.insightSceneLogic)'
            payload: {
                insightId: InsightShortId
            }
        }
        setInsightMode: (
            insightMode: ItemMode,
            source: InsightEventSource | null
        ) => {
            type: 'set insight mode (scenes.insights.insightSceneLogic)'
            payload: {
                insightMode: ItemMode
                source: InsightEventSource | null
            }
        }
        setSceneState: (
            insightId: InsightShortId,
            insightMode: ItemMode,
            subscriptionId: string | undefined
        ) => {
            type: 'set scene state (scenes.insights.insightSceneLogic)'
            payload: {
                insightId: InsightShortId
                insightMode: ItemMode
                subscriptionId: string | undefined
            }
        }
        setInsightLogicRef: (
            logic: BuiltLogic<insightLogicType> | null,
            unmount: null | (() => void)
        ) => {
            type: 'set insight logic ref (scenes.insights.insightSceneLogic)'
            payload: {
                logic: BuiltLogic<insightLogicType> | null
                unmount: (() => void) | null
            }
        }
        setInsightDataLogicRef: (
            logic: BuiltLogic<insightDataLogicType> | null,
            unmount: null | (() => void)
        ) => {
            type: 'set insight data logic ref (scenes.insights.insightSceneLogic)'
            payload: {
                logic: BuiltLogic<insightDataLogicType> | null
                unmount: (() => void) | null
            }
        }
    }
    actionKeys: {
        'set insight id (scenes.insights.insightSceneLogic)': 'setInsightId'
        'set insight mode (scenes.insights.insightSceneLogic)': 'setInsightMode'
        'set scene state (scenes.insights.insightSceneLogic)': 'setSceneState'
        'set insight logic ref (scenes.insights.insightSceneLogic)': 'setInsightLogicRef'
        'set insight data logic ref (scenes.insights.insightSceneLogic)': 'setInsightDataLogicRef'
    }
    actionTypes: {
        setInsightId: 'set insight id (scenes.insights.insightSceneLogic)'
        setInsightMode: 'set insight mode (scenes.insights.insightSceneLogic)'
        setSceneState: 'set scene state (scenes.insights.insightSceneLogic)'
        setInsightLogicRef: 'set insight logic ref (scenes.insights.insightSceneLogic)'
        setInsightDataLogicRef: 'set insight data logic ref (scenes.insights.insightSceneLogic)'
    }
    actions: {
        setInsightId: (insightId: InsightShortId) => void
        setInsightMode: (insightMode: ItemMode, source: InsightEventSource | null) => void
        setSceneState: (insightId: InsightShortId, insightMode: ItemMode, subscriptionId: string | undefined) => void
        setInsightLogicRef: (logic: BuiltLogic<insightLogicType> | null, unmount: null | (() => void)) => void
        setInsightDataLogicRef: (logic: BuiltLogic<insightDataLogicType> | null, unmount: null | (() => void)) => void
    }
    asyncActions: {
        setInsightId: (insightId: InsightShortId) => Promise<any>
        setInsightMode: (insightMode: ItemMode, source: InsightEventSource | null) => Promise<any>
        setSceneState: (
            insightId: InsightShortId,
            insightMode: ItemMode,
            subscriptionId: string | undefined
        ) => Promise<any>
        setInsightLogicRef: (logic: BuiltLogic<insightLogicType> | null, unmount: null | (() => void)) => Promise<any>
        setInsightDataLogicRef: (
            logic: BuiltLogic<insightDataLogicType> | null,
            unmount: null | (() => void)
        ) => Promise<any>
    }
    defaults: {
        insightId: null | 'new' | InsightShortId
        insightMode: ItemMode
        subscriptionId: null | number | 'new'
        insightLogicRef: null | {
            logic: BuiltLogic<insightLogicType>
            unmount: () => void
        }
        insightDataLogicRef: null | {
            logic: BuiltLogic<insightDataLogicType>
            unmount: () => void
        }
    }
    events: {}
    key: undefined
    listeners: {
        setInsightMode: ((
            action: {
                type: 'set insight mode (scenes.insights.insightSceneLogic)'
                payload: {
                    insightMode: ItemMode
                    source: InsightEventSource | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setSceneState: ((
            action: {
                type: 'set scene state (scenes.insights.insightSceneLogic)'
                payload: {
                    insightId: InsightShortId
                    insightMode: ItemMode
                    subscriptionId: string | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'insights', 'insightSceneLogic']
    pathString: 'scenes.insights.insightSceneLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        insightId: null | 'new' | InsightShortId
        insightMode: ItemMode
        subscriptionId: null | number | 'new'
        insightLogicRef: null | {
            logic: BuiltLogic<insightLogicType>
            unmount: () => void
        }
        insightDataLogicRef: null | {
            logic: BuiltLogic<insightDataLogicType>
            unmount: () => void
        }
    }
    reducers: {
        insightId: (state: null | 'new' | InsightShortId, action: any, fullState: any) => null | 'new' | InsightShortId
        insightMode: (state: ItemMode, action: any, fullState: any) => ItemMode
        subscriptionId: (state: null | number | 'new', action: any, fullState: any) => null | number | 'new'
        insightLogicRef: (
            state: null | {
                logic: BuiltLogic<insightLogicType>
                unmount: () => void
            },
            action: any,
            fullState: any
        ) => null | {
            logic: BuiltLogic<insightLogicType>
            unmount: () => void
        }
        insightDataLogicRef: (
            state: null | {
                logic: BuiltLogic<insightDataLogicType>
                unmount: () => void
            },
            action: any,
            fullState: any
        ) => null | {
            logic: BuiltLogic<insightDataLogicType>
            unmount: () => void
        }
    }
    selector: (state: any) => {
        insightId: null | 'new' | InsightShortId
        insightMode: ItemMode
        subscriptionId: null | number | 'new'
        insightLogicRef: null | {
            logic: BuiltLogic<insightLogicType>
            unmount: () => void
        }
        insightDataLogicRef: null | {
            logic: BuiltLogic<insightDataLogicType>
            unmount: () => void
        }
    }
    selectors: {
        insightId: (state: any, props?: any) => null | 'new' | InsightShortId
        insightMode: (state: any, props?: any) => ItemMode
        subscriptionId: (state: any, props?: any) => null | number | 'new'
        insightLogicRef: (
            state: any,
            props?: any
        ) => null | {
            logic: BuiltLogic<insightLogicType>
            unmount: () => void
        }
        insightDataLogicRef: (
            state: any,
            props?: any
        ) => null | {
            logic: BuiltLogic<insightDataLogicType>
            unmount: () => void
        }
        currentTeam: (state: any, props?: any) => TeamType | TeamPublicType | null
        insightSelector: (state: any, props?: any) => ((state: any, props?: any) => Partial<InsightModel>) | undefined
        insight: (state: any, props?: any) => Partial<InsightModel> | undefined
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
    }
    sharedListeners: {
        reloadInsightLogic: (
            payload: any,
            breakpoint: BreakPointFunction,
            action: {
                type: string
                payload: any
            },
            previousState: any
        ) => void | Promise<void>
    }
    values: {
        insightId: null | 'new' | InsightShortId
        insightMode: ItemMode
        subscriptionId: null | number | 'new'
        insightLogicRef: null | {
            logic: BuiltLogic<insightLogicType>
            unmount: () => void
        }
        insightDataLogicRef: null | {
            logic: BuiltLogic<insightDataLogicType>
            unmount: () => void
        }
        currentTeam: TeamType | TeamPublicType | null
        insightSelector: ((state: any, props?: any) => Partial<InsightModel>) | undefined
        insight: Partial<InsightModel> | undefined
        breadcrumbs: Breadcrumb[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        insightSelector: (
            insightLogicRef: {
                logic: BuiltLogic<insightLogicType>
                unmount: () => void
            } | null
        ) => ((state: any, props?: any) => Partial<InsightModel>) | undefined
        insight: (
            arg:
                | Partial<
                      import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').InsightModel
                  >
                | undefined
        ) => Partial<InsightModel> | undefined
        breadcrumbs: (
            insight:
                | Partial<
                      import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').InsightModel
                  >
                | undefined
        ) => Breadcrumb[]
    }
}
