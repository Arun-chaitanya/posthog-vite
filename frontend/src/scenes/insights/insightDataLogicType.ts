// Generated by kea-typegen on Sun, 06 Aug 2023 06:33:09 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { EventType, FilterType, InsightLogicProps, InsightModel, InsightShortId, SetInsightOptions, TeamPublicType, TeamType } from '../../types'
import type { AnyResponseType, DataNode, EventsQueryResponse, HogQLMetadataResponse, HogQLQueryResponse, Node } from '../../queries/schema'

export interface insightDataLogicType extends Logic {
    actionCreators: {
        setInsight: (
            insight: Partial<InsightModel>,
            options: SetInsightOptions
        ) => {
            type: 'set insight (scenes.insights.insightDataLogic.*)'
            payload: {
                insight: Partial<InsightModel>
                options: SetInsightOptions
            }
        }
        insightLogicSaveInsight: (redirectToViewMode?: any) => {
            type: 'insight logic save insight (scenes.insights.insightDataLogic.*)'
            payload: {
                redirectToViewMode: any
            }
        }
        loadInsightSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                shortId: InsightShortId
            }
        ) => {
            type: 'load insight success (scenes.insights.insightDataLogic.*)'
            payload: {
                insight: Partial<InsightModel>
                payload?: {
                    shortId: InsightShortId
                }
            }
        }
        loadData: (refresh?: any) => {
            type: 'load data (scenes.insights.insightDataLogic.*)'
            payload: {
                refresh: any
                queryId: string
            }
        }
        setInsightData: (response: Exclude<AnyResponseType, undefined>) => {
            type: 'set insight data (scenes.insights.insightDataLogic.*)'
            payload:
                | Record<string, any>
                | HogQLQueryResponse
                | HogQLMetadataResponse
                | {
                      results: EventType[]
                      next?: string | undefined
                  }
                | EventsQueryResponse
        }
        loadDataSuccess: (
            response: Record<string, any> | null,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => {
            type: 'load data success (scenes.insights.insightDataLogic.*)'
            payload: {
                response: Record<string, any> | null
                payload?: {
                    refresh: any
                    queryId: string
                }
            }
        }
        loadDataFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load data failure (scenes.insights.insightDataLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setQuery: (query: Node | null) => {
            type: 'set query (scenes.insights.insightDataLogic.*)'
            payload: {
                query: Node | null
            }
        }
        saveInsight: (redirectToViewMode?: any) => {
            type: 'save insight (scenes.insights.insightDataLogic.*)'
            payload: {
                redirectToViewMode: any
            }
        }
        toggleQueryEditorPanel: () => {
            type: 'toggle query editor panel (scenes.insights.insightDataLogic.*)'
            payload: {
                value: true
            }
        }
        cancelChanges: () => {
            type: 'cancel changes (scenes.insights.insightDataLogic.*)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'set insight (scenes.insights.insightDataLogic.*)': 'setInsight'
        'insight logic save insight (scenes.insights.insightDataLogic.*)': 'insightLogicSaveInsight'
        'load insight success (scenes.insights.insightDataLogic.*)': 'loadInsightSuccess'
        'load data (scenes.insights.insightDataLogic.*)': 'loadData'
        'set insight data (scenes.insights.insightDataLogic.*)': 'setInsightData'
        'load data success (scenes.insights.insightDataLogic.*)': 'loadDataSuccess'
        'load data failure (scenes.insights.insightDataLogic.*)': 'loadDataFailure'
        'set query (scenes.insights.insightDataLogic.*)': 'setQuery'
        'save insight (scenes.insights.insightDataLogic.*)': 'saveInsight'
        'toggle query editor panel (scenes.insights.insightDataLogic.*)': 'toggleQueryEditorPanel'
        'cancel changes (scenes.insights.insightDataLogic.*)': 'cancelChanges'
    }
    actionTypes: {
        setInsight: 'set insight (scenes.insights.insightDataLogic.*)'
        insightLogicSaveInsight: 'insight logic save insight (scenes.insights.insightDataLogic.*)'
        loadInsightSuccess: 'load insight success (scenes.insights.insightDataLogic.*)'
        loadData: 'load data (scenes.insights.insightDataLogic.*)'
        setInsightData: 'set insight data (scenes.insights.insightDataLogic.*)'
        loadDataSuccess: 'load data success (scenes.insights.insightDataLogic.*)'
        loadDataFailure: 'load data failure (scenes.insights.insightDataLogic.*)'
        setQuery: 'set query (scenes.insights.insightDataLogic.*)'
        saveInsight: 'save insight (scenes.insights.insightDataLogic.*)'
        toggleQueryEditorPanel: 'toggle query editor panel (scenes.insights.insightDataLogic.*)'
        cancelChanges: 'cancel changes (scenes.insights.insightDataLogic.*)'
    }
    actions: {
        setInsight: (insight: Partial<InsightModel>, options: SetInsightOptions) => void
        insightLogicSaveInsight: (redirectToViewMode?: any) => void
        loadInsightSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                shortId: InsightShortId
            }
        ) => void
        loadData: (refresh?: any) => void
        setInsightData: (response: Exclude<AnyResponseType, undefined>) => void
        loadDataSuccess: (
            response: Record<string, any> | null,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => void
        loadDataFailure: (error: string, errorObject?: any) => void
        setQuery: (query: Node | null) => void
        saveInsight: (redirectToViewMode?: any) => void
        toggleQueryEditorPanel: () => void
        cancelChanges: () => void
    }
    asyncActions: {
        setInsight: (insight: Partial<InsightModel>, options: SetInsightOptions) => Promise<any>
        insightLogicSaveInsight: (redirectToViewMode?: any) => Promise<any>
        loadInsightSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                shortId: InsightShortId
            }
        ) => Promise<any>
        loadData: (refresh?: any) => Promise<any>
        setInsightData: (response: Exclude<AnyResponseType, undefined>) => Promise<any>
        loadDataSuccess: (
            response: Record<string, any> | null,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => Promise<any>
        loadDataFailure: (error: string, errorObject?: any) => Promise<any>
        setQuery: (query: Node | null) => Promise<any>
        saveInsight: (redirectToViewMode?: any) => Promise<any>
        toggleQueryEditorPanel: () => Promise<any>
        cancelChanges: () => Promise<any>
    }
    defaults: {
        internalQuery: Node | null
        showQueryEditor: boolean
    }
    events: {}
    key: string
    listeners: {
        setInsight: ((
            action: {
                type: 'set insight (scenes.insights.insightDataLogic.*)'
                payload: {
                    insight: Partial<InsightModel>
                    options: SetInsightOptions
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadInsightSuccess: ((
            action: {
                type: 'load insight success (scenes.insights.insightDataLogic.*)'
                payload: {
                    insight: Partial<InsightModel>
                    payload?: {
                        shortId: InsightShortId
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        saveInsight: ((
            action: {
                type: 'save insight (scenes.insights.insightDataLogic.*)'
                payload: {
                    redirectToViewMode: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        cancelChanges: ((
            action: {
                type: 'cancel changes (scenes.insights.insightDataLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'insights', 'insightDataLogic', '*']
    pathString: 'scenes.insights.insightDataLogic.*'
    props: InsightLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        internalQuery: Node | null
        showQueryEditor: boolean
    }
    reducers: {
        internalQuery: (state: Node | null, action: any, fullState: any) => Node | null
        showQueryEditor: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        internalQuery: Node | null
        showQueryEditor: boolean
    }
    selectors: {
        internalQuery: (state: any, props?: any) => Node | null
        showQueryEditor: (state: any, props?: any) => boolean
        insight: (state: any, props?: any) => Partial<InsightModel>
        filters: (state: any, props?: any) => Partial<FilterType>
        savedInsight: (state: any, props?: any) => Partial<InsightModel>
        insightData: (state: any, props?: any) => Record<string, any> | null
        insightDataLoading: (state: any, props?: any) => boolean
        insightDataError: (state: any, props?: any) => Record<string, any> | null
        insightQuery: (state: any, props?: any) => DataNode
        getInsightRefreshButtonDisabledReason: (state: any, props?: any) => () => string
        filterTestAccountsDefault: (state: any, props?: any) => boolean
        currentTeam: (state: any, props?: any) => TeamType | TeamPublicType | null
        query: (state: any, props?: any) => Node
        isQueryBasedInsight: (state: any, props?: any) => boolean
        exportContext: (
            state: any,
            props?: any
        ) =>
            | {
                  filename: string
                  method?: string | undefined
                  path: string
                  query?: any
                  body?: any
                  max_limit?: number | undefined
              }
            | { filename: string; source: Record<string, any>; max_limit?: number | undefined }
            | undefined
        queryChanged: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        internalQuery: Node | null
        showQueryEditor: boolean
        insight: Partial<InsightModel>
        filters: Partial<FilterType>
        savedInsight: Partial<InsightModel>
        insightData: Record<string, any> | null
        insightDataLoading: boolean
        insightDataError: Record<string, any> | null
        insightQuery: DataNode
        getInsightRefreshButtonDisabledReason: () => string
        filterTestAccountsDefault: boolean
        currentTeam: TeamType | TeamPublicType | null
        query: Node
        isQueryBasedInsight: boolean
        exportContext:
            | {
                  filename: string
                  method?: string | undefined
                  path: string
                  query?: any
                  body?: any
                  max_limit?: number | undefined
              }
            | { filename: string; source: Record<string, any>; max_limit?: number | undefined }
            | undefined
        queryChanged: boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        query: (
            filters: Partial<FilterType>,
            insight: Partial<
                import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').InsightModel
            >,
            internalQuery: Node | null,
            filterTestAccountsDefault: boolean
        ) => Node
        isQueryBasedInsight: (query: Node) => boolean
        exportContext: (
            query: Node,
            insight: Partial<
                import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').InsightModel
            >
        ) =>
            | {
                  filename: string
                  method?: string | undefined
                  path: string
                  query?: any
                  body?: any
                  max_limit?: number | undefined
              }
            | { filename: string; source: Record<string, any>; max_limit?: number | undefined }
            | undefined
        queryChanged: (
            isQueryBasedInsight: boolean,
            query: Node,
            insight: Partial<
                import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').InsightModel
            >,
            savedInsight: Partial<
                import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').InsightModel
            >,
            currentTeam:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamType
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamPublicType
                | null
        ) => boolean
    }
}
