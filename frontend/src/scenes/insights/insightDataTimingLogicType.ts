// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:52 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { InsightLogicProps } from '../../types'
import type { DataNode } from '../../queries/schema'

export interface insightDataTimingLogicType extends Logic {
    actionCreators: {
        loadData: (refresh?: any) => {
            type: 'load data (scenes.insights.insightDataTimingLogic.*)'
            payload: {
                refresh: any
                queryId: string
            }
        }
        loadDataCancellation: (payload: { queryId: string }) => {
            type: 'load data cancellation (scenes.insights.insightDataTimingLogic.*)'
            payload: {
                queryId: string
            }
        }
        loadDataSuccess: (
            response: Record<string, any> | null,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => {
            type: 'load data success (scenes.insights.insightDataTimingLogic.*)'
            payload: {
                response: Record<string, any> | null
                payload?: {
                    refresh: any
                    queryId: string
                }
            }
        }
        loadDataFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load data failure (scenes.insights.insightDataTimingLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        startQuery: (queryId: string) => {
            type: 'start query (scenes.insights.insightDataTimingLogic.*)'
            payload: {
                queryId: string
            }
        }
        removeQuery: (queryId: string) => {
            type: 'remove query (scenes.insights.insightDataTimingLogic.*)'
            payload: {
                queryId: string
            }
        }
    }
    actionKeys: {
        'load data (scenes.insights.insightDataTimingLogic.*)': 'loadData'
        'load data cancellation (scenes.insights.insightDataTimingLogic.*)': 'loadDataCancellation'
        'load data success (scenes.insights.insightDataTimingLogic.*)': 'loadDataSuccess'
        'load data failure (scenes.insights.insightDataTimingLogic.*)': 'loadDataFailure'
        'start query (scenes.insights.insightDataTimingLogic.*)': 'startQuery'
        'remove query (scenes.insights.insightDataTimingLogic.*)': 'removeQuery'
    }
    actionTypes: {
        loadData: 'load data (scenes.insights.insightDataTimingLogic.*)'
        loadDataCancellation: 'load data cancellation (scenes.insights.insightDataTimingLogic.*)'
        loadDataSuccess: 'load data success (scenes.insights.insightDataTimingLogic.*)'
        loadDataFailure: 'load data failure (scenes.insights.insightDataTimingLogic.*)'
        startQuery: 'start query (scenes.insights.insightDataTimingLogic.*)'
        removeQuery: 'remove query (scenes.insights.insightDataTimingLogic.*)'
    }
    actions: {
        loadData: (refresh?: any) => void
        loadDataCancellation: (payload: { queryId: string }) => void
        loadDataSuccess: (
            response: Record<string, any> | null,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => void
        loadDataFailure: (error: string, errorObject?: any) => void
        startQuery: (queryId: string) => void
        removeQuery: (queryId: string) => void
    }
    asyncActions: {
        loadData: (refresh?: any) => Promise<any>
        loadDataCancellation: (payload: { queryId: string }) => Promise<any>
        loadDataSuccess: (
            response: Record<string, any> | null,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => Promise<any>
        loadDataFailure: (error: string, errorObject?: any) => Promise<any>
        startQuery: (queryId: string) => Promise<any>
        removeQuery: (queryId: string) => Promise<any>
    }
    defaults: {
        queryStartTimes: Record<string, number>
    }
    events: {}
    key: string
    listeners: {
        loadData: ((
            action: {
                type: 'load data (scenes.insights.insightDataTimingLogic.*)'
                payload: {
                    refresh: any
                    queryId: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadDataSuccess: ((
            action: {
                type: 'load data success (scenes.insights.insightDataTimingLogic.*)'
                payload: {
                    response: Record<string, any> | null
                    payload?: {
                        refresh: any
                        queryId: string
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadDataFailure: ((
            action: {
                type: 'load data failure (scenes.insights.insightDataTimingLogic.*)'
                payload: {
                    error: string
                    errorObject?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadDataCancellation: ((
            action: {
                type: 'load data cancellation (scenes.insights.insightDataTimingLogic.*)'
                payload: {
                    queryId: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'insights', 'insightDataTimingLogic', '*']
    pathString: 'scenes.insights.insightDataTimingLogic.*'
    props: InsightLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        queryStartTimes: Record<string, number>
    }
    reducers: {
        queryStartTimes: (state: Record<string, number>, action: any, fullState: any) => Record<string, number>
    }
    selector: (state: any) => {
        queryStartTimes: Record<string, number>
    }
    selectors: {
        queryStartTimes: (state: any, props?: any) => Record<string, number>
        currentTeamId: (state: any, props?: any) => number | null
        response: (state: any, props?: any) => Record<string, any> | null
        query: (state: any, props?: any) => DataNode
    }
    sharedListeners: {}
    values: {
        queryStartTimes: Record<string, number>
        currentTeamId: number | null
        response: Record<string, any> | null
        query: DataNode
    }
    _isKea: true
    _isKeaWithKey: true
}
