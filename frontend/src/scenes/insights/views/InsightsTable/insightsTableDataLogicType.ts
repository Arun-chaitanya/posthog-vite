// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:51 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ChartDisplayType, InsightLogicProps } from '../../../../types'
import type { ActionsNode, EventsNode } from '../../../../queries/schema'
import type { AggregationType } from './insightsTableDataLogic'

export interface insightsTableDataLogicType extends Logic {
    actionCreators: {
        setAggregationType: (type: AggregationType) => {
            type: 'set aggregation type (scenes.insights.InsightsTable.insightsTableDataLogic.*)'
            payload: {
                type: AggregationType
            }
        }
    }
    actionKeys: {
        'set aggregation type (scenes.insights.InsightsTable.insightsTableDataLogic.*)': 'setAggregationType'
    }
    actionTypes: {
        setAggregationType: 'set aggregation type (scenes.insights.InsightsTable.insightsTableDataLogic.*)'
    }
    actions: {
        setAggregationType: (type: AggregationType) => void
    }
    asyncActions: {
        setAggregationType: (type: AggregationType) => Promise<any>
    }
    defaults: {
        aggregationType: AggregationType | null
    }
    events: {}
    key: string
    listeners: {}
    path: ['scenes', 'insights', 'InsightsTable', 'insightsTableDataLogic', '*']
    pathString: 'scenes.insights.InsightsTable.insightsTableDataLogic.*'
    props: InsightLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        aggregationType: AggregationType | null
    }
    reducers: {
        aggregationType: (state: AggregationType | null, action: any, fullState: any) => AggregationType | null
    }
    selector: (state: any) => {
        aggregationType: AggregationType | null
    }
    selectors: {
        aggregationType: (state: any, props?: any) => AggregationType | null
        isTrends: (state: any, props?: any) => boolean
        display: (state: any, props?: any) => ChartDisplayType | null | undefined
        series: (state: any, props?: any) => (EventsNode | ActionsNode)[] | null | undefined
        allowAggregation: (state: any, props?: any) => boolean
        aggregation: (state: any, props?: any) => AggregationType
    }
    sharedListeners: {}
    values: {
        aggregationType: AggregationType | null
        isTrends: boolean
        display: ChartDisplayType | null | undefined
        series: (EventsNode | ActionsNode)[] | null | undefined
        allowAggregation: boolean
        aggregation: AggregationType
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        allowAggregation: (
            isTrends: boolean,
            display: ChartDisplayType | null | undefined,
            series:
                | (
                      | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').EventsNode
                      | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').ActionsNode
                  )[]
                | null
                | undefined
        ) => boolean
        aggregation: (
            series:
                | (
                      | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').EventsNode
                      | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').ActionsNode
                  )[]
                | null
                | undefined,
            aggregationType: AggregationType | null
        ) => AggregationType
    }
}
