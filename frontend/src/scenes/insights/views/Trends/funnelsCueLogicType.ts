// Generated by kea-typegen on Thu, 20 Jul 2023 11:36:26 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { InsightLogicProps } from '../../../../types'
import type { Node } from '../../../../queries/schema'
import type { FeatureFlagsSet } from '../../../../lib/logic/featureFlagLogic'

export interface funnelsCueLogicType extends Logic {
    actionCreators: {
        setQuery: (query: Node | null) => {
            type: 'set query (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)'
            payload: {
                query: Node | null
            }
        }
        setFeatureFlags: (
            flags: string[],
            variants: Record<string, string | boolean>
        ) => {
            type: 'set feature flags (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)'
            payload: {
                flags: string[]
                variants: Record<string, string | boolean>
            }
        }
        optOut: (userOptedOut: boolean) => {
            type: 'opt out (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)'
            payload: {
                userOptedOut: boolean
            }
        }
        setShouldShow: (show: boolean) => {
            type: 'set should show (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)'
            payload: {
                show: boolean
            }
        }
        setPermanentOptOut: () => {
            type: 'set permanent opt out (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)'
            payload: {
                value: true
            }
        }
        displayAsFunnel: () => {
            type: 'display as funnel (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'set query (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)': 'setQuery'
        'set feature flags (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)': 'setFeatureFlags'
        'opt out (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)': 'optOut'
        'set should show (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)': 'setShouldShow'
        'set permanent opt out (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)': 'setPermanentOptOut'
        'display as funnel (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)': 'displayAsFunnel'
    }
    actionTypes: {
        setQuery: 'set query (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)'
        setFeatureFlags: 'set feature flags (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)'
        optOut: 'opt out (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)'
        setShouldShow: 'set should show (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)'
        setPermanentOptOut: 'set permanent opt out (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)'
        displayAsFunnel: 'display as funnel (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)'
    }
    actions: {
        setQuery: (query: Node | null) => void
        setFeatureFlags: (flags: string[], variants: Record<string, string | boolean>) => void
        optOut: (userOptedOut: boolean) => void
        setShouldShow: (show: boolean) => void
        setPermanentOptOut: () => void
        displayAsFunnel: () => void
    }
    asyncActions: {
        setQuery: (query: Node | null) => Promise<any>
        setFeatureFlags: (flags: string[], variants: Record<string, string | boolean>) => Promise<any>
        optOut: (userOptedOut: boolean) => Promise<any>
        setShouldShow: (show: boolean) => Promise<any>
        setPermanentOptOut: () => Promise<any>
        displayAsFunnel: () => Promise<any>
    }
    defaults: {
        _shouldShow: boolean
        permanentOptOut: boolean
    }
    events: {
        afterMount: () => void
    }
    key: string
    listeners: {
        optOut: ((
            action: {
                type: 'opt out (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)'
                payload: {
                    userOptedOut: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setQuery: ((
            action: {
                type: 'set query (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)'
                payload: {
                    query: Node | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setFeatureFlags: ((
            action: {
                type: 'set feature flags (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)'
                payload: {
                    flags: string[]
                    variants: Record<string, string | boolean>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        displayAsFunnel: ((
            action: {
                type: 'display as funnel (scenes.insights.InsightTabs.TrendTab.FunnelsCue.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'insights', 'InsightTabs', 'TrendTab', 'FunnelsCue', '*']
    pathString: 'scenes.insights.InsightTabs.TrendTab.FunnelsCue.*'
    props: InsightLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        _shouldShow: boolean
        permanentOptOut: boolean
    }
    reducers: {
        _shouldShow: (state: boolean, action: any, fullState: any) => boolean
        permanentOptOut: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        _shouldShow: boolean
        permanentOptOut: boolean
    }
    selectors: {
        _shouldShow: (state: any, props?: any) => boolean
        permanentOptOut: (state: any, props?: any) => boolean
        isFirstLoad: (state: any, props?: any) => boolean
        query: (state: any, props?: any) => Node
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
        shown: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        _shouldShow: boolean
        permanentOptOut: boolean
        isFirstLoad: boolean
        query: Node
        featureFlags: FeatureFlagsSet
        shown: boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        shown: (_shouldShow: boolean, permanentOptOut: boolean) => boolean
    }
}
