// Generated by kea-typegen on Thu, 20 Jul 2023 10:55:50 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FilterType } from '../../types'

export interface globalInsightLogicType extends Logic {
    actionCreators: {
        setGlobalInsightFilters: (globalInsightFilters: Partial<FilterType>) => {
            type: 'set global insight filters (scenes.insights.globalInsightLogic)'
            payload: {
                globalInsightFilters: Partial<FilterType>
            }
        }
    }
    actionKeys: {
        'set global insight filters (scenes.insights.globalInsightLogic)': 'setGlobalInsightFilters'
    }
    actionTypes: {
        setGlobalInsightFilters: 'set global insight filters (scenes.insights.globalInsightLogic)'
    }
    actions: {
        setGlobalInsightFilters: (globalInsightFilters: Partial<FilterType>) => void
    }
    asyncActions: {
        setGlobalInsightFilters: (globalInsightFilters: Partial<FilterType>) => Promise<any>
    }
    defaults: {
        globalInsightFilters: Partial<FilterType>
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'insights', 'globalInsightLogic']
    pathString: 'scenes.insights.globalInsightLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        globalInsightFilters: Partial<FilterType>
    }
    reducers: {
        globalInsightFilters: (state: Partial<FilterType>, action: any, fullState: any) => Partial<FilterType>
    }
    selector: (state: any) => {
        globalInsightFilters: Partial<FilterType>
    }
    selectors: {
        globalInsightFilters: (state: any, props?: any) => Partial<FilterType>
    }
    sharedListeners: {}
    values: {
        globalInsightFilters: Partial<FilterType>
    }
    _isKea: true
    _isKeaWithKey: false
}
