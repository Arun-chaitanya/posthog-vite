// Generated by kea-typegen on Tue, 08 Aug 2023 10:01:00 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { EntityFilterProps, LocalFilter } from './entityFilterLogic'
import type { ActionFilter, AnyPropertyFilter, EntityFilter, EntityType, FilterType } from '../../../../types'

export interface entityFilterLogicType extends Logic {
    actionCreators: {
        selectFilter: (filter: EntityFilter | ActionFilter | null) => {
            type: 'select filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
            payload: {
                filter: ActionFilter | EntityFilter | null
            }
        }
        updateFilterMath: (
            filter: Partial<ActionFilter> & {
                index: number
            }
        ) => {
            type: 'update filter math (scenes.insights.ActionFilter.entityFilterLogic.*)'
            payload: {
                type: EntityType
                math: string | undefined
                math_property: string | undefined
                math_hogql: string | undefined
                index: number
                math_group_type_index: number | null | undefined
            }
        }
        updateFilter: (
            filter: EntityFilter & {
                index: number
            }
        ) => {
            type: 'update filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
            payload: {
                type: EntityType | undefined
                index: number
                id: string | number | null
                name: string | null | undefined
                custom_name: string | null | undefined
            }
        }
        renameFilter: (custom_name: string) => {
            type: 'rename filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
            payload: {
                custom_name: string
            }
        }
        removeLocalFilter: (
            filter: Partial<EntityFilter> & {
                index: number
            }
        ) => {
            type: 'remove local filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
            payload: {
                type: EntityType | undefined
                index: number
            }
        }
        addFilter: () => {
            type: 'add filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
            payload: {
                value: true
            }
        }
        duplicateFilter: (filter: EntityFilter | ActionFilter) => {
            type: 'duplicate filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
            payload: {
                filter: ActionFilter | EntityFilter
            }
        }
        updateFilterProperty: (
            filter: Partial<EntityFilter> & {
                index?: number
                properties: AnyPropertyFilter[]
            }
        ) => {
            type: 'update filter property (scenes.insights.ActionFilter.entityFilterLogic.*)'
            payload: {
                properties: AnyPropertyFilter[]
                index: number | undefined
            }
        }
        setFilters: (filters: LocalFilter[]) => {
            type: 'set filters (scenes.insights.ActionFilter.entityFilterLogic.*)'
            payload: {
                filters: LocalFilter[]
            }
        }
        setLocalFilters: (filters: FilterType) => {
            type: 'set local filters (scenes.insights.ActionFilter.entityFilterLogic.*)'
            payload: {
                filters: FilterType
            }
        }
        setEntityFilterVisibility: (
            index: number,
            value: boolean
        ) => {
            type: 'set entity filter visibility (scenes.insights.ActionFilter.entityFilterLogic.*)'
            payload: {
                index: number
                value: boolean
            }
        }
        renameLocalFilter: (
            index: number,
            custom_name: string
        ) => {
            type: 'rename local filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
            payload: {
                index: number
                custom_name: string
            }
        }
        showModal: () => {
            type: 'show modal (scenes.insights.ActionFilter.entityFilterLogic.*)'
            payload: {
                value: true
            }
        }
        hideModal: () => {
            type: 'hide modal (scenes.insights.ActionFilter.entityFilterLogic.*)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'select filter (scenes.insights.ActionFilter.entityFilterLogic.*)': 'selectFilter'
        'update filter math (scenes.insights.ActionFilter.entityFilterLogic.*)': 'updateFilterMath'
        'update filter (scenes.insights.ActionFilter.entityFilterLogic.*)': 'updateFilter'
        'rename filter (scenes.insights.ActionFilter.entityFilterLogic.*)': 'renameFilter'
        'remove local filter (scenes.insights.ActionFilter.entityFilterLogic.*)': 'removeLocalFilter'
        'add filter (scenes.insights.ActionFilter.entityFilterLogic.*)': 'addFilter'
        'duplicate filter (scenes.insights.ActionFilter.entityFilterLogic.*)': 'duplicateFilter'
        'update filter property (scenes.insights.ActionFilter.entityFilterLogic.*)': 'updateFilterProperty'
        'set filters (scenes.insights.ActionFilter.entityFilterLogic.*)': 'setFilters'
        'set local filters (scenes.insights.ActionFilter.entityFilterLogic.*)': 'setLocalFilters'
        'set entity filter visibility (scenes.insights.ActionFilter.entityFilterLogic.*)': 'setEntityFilterVisibility'
        'rename local filter (scenes.insights.ActionFilter.entityFilterLogic.*)': 'renameLocalFilter'
        'show modal (scenes.insights.ActionFilter.entityFilterLogic.*)': 'showModal'
        'hide modal (scenes.insights.ActionFilter.entityFilterLogic.*)': 'hideModal'
    }
    actionTypes: {
        selectFilter: 'select filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
        updateFilterMath: 'update filter math (scenes.insights.ActionFilter.entityFilterLogic.*)'
        updateFilter: 'update filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
        renameFilter: 'rename filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
        removeLocalFilter: 'remove local filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
        addFilter: 'add filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
        duplicateFilter: 'duplicate filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
        updateFilterProperty: 'update filter property (scenes.insights.ActionFilter.entityFilterLogic.*)'
        setFilters: 'set filters (scenes.insights.ActionFilter.entityFilterLogic.*)'
        setLocalFilters: 'set local filters (scenes.insights.ActionFilter.entityFilterLogic.*)'
        setEntityFilterVisibility: 'set entity filter visibility (scenes.insights.ActionFilter.entityFilterLogic.*)'
        renameLocalFilter: 'rename local filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
        showModal: 'show modal (scenes.insights.ActionFilter.entityFilterLogic.*)'
        hideModal: 'hide modal (scenes.insights.ActionFilter.entityFilterLogic.*)'
    }
    actions: {
        selectFilter: (filter: EntityFilter | ActionFilter | null) => void
        updateFilterMath: (
            filter: Partial<ActionFilter> & {
                index: number
            }
        ) => void
        updateFilter: (
            filter: EntityFilter & {
                index: number
            }
        ) => void
        renameFilter: (custom_name: string) => void
        removeLocalFilter: (
            filter: Partial<EntityFilter> & {
                index: number
            }
        ) => void
        addFilter: () => void
        duplicateFilter: (filter: EntityFilter | ActionFilter) => void
        updateFilterProperty: (
            filter: Partial<EntityFilter> & {
                index?: number
                properties: AnyPropertyFilter[]
            }
        ) => void
        setFilters: (filters: LocalFilter[]) => void
        setLocalFilters: (filters: FilterType) => void
        setEntityFilterVisibility: (index: number, value: boolean) => void
        renameLocalFilter: (index: number, custom_name: string) => void
        showModal: () => void
        hideModal: () => void
    }
    asyncActions: {
        selectFilter: (filter: EntityFilter | ActionFilter | null) => Promise<any>
        updateFilterMath: (
            filter: Partial<ActionFilter> & {
                index: number
            }
        ) => Promise<any>
        updateFilter: (
            filter: EntityFilter & {
                index: number
            }
        ) => Promise<any>
        renameFilter: (custom_name: string) => Promise<any>
        removeLocalFilter: (
            filter: Partial<EntityFilter> & {
                index: number
            }
        ) => Promise<any>
        addFilter: () => Promise<any>
        duplicateFilter: (filter: EntityFilter | ActionFilter) => Promise<any>
        updateFilterProperty: (
            filter: Partial<EntityFilter> & {
                index?: number
                properties: AnyPropertyFilter[]
            }
        ) => Promise<any>
        setFilters: (filters: LocalFilter[]) => Promise<any>
        setLocalFilters: (filters: FilterType) => Promise<any>
        setEntityFilterVisibility: (index: number, value: boolean) => Promise<any>
        renameLocalFilter: (index: number, custom_name: string) => Promise<any>
        showModal: () => Promise<any>
        hideModal: () => Promise<any>
    }
    defaults: {
        selectedFilter: EntityFilter | ActionFilter | null
        localFilters: LocalFilter[]
        entityFilterVisible: boolean[]
        modalVisible: boolean
    }
    events: {
        afterMount: () => void
    }
    key: string
    listeners: {
        renameFilter: ((
            action: {
                type: 'rename filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
                payload: {
                    custom_name: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        hideModal: ((
            action: {
                type: 'hide modal (scenes.insights.ActionFilter.entityFilterLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateFilter: ((
            action: {
                type: 'update filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
                payload: {
                    type: EntityType | undefined
                    index: number
                    id: string | number | null
                    name: string | null | undefined
                    custom_name: string | null | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateFilterProperty: ((
            action: {
                type: 'update filter property (scenes.insights.ActionFilter.entityFilterLogic.*)'
                payload: {
                    properties: AnyPropertyFilter[]
                    index: number | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateFilterMath: ((
            action: {
                type: 'update filter math (scenes.insights.ActionFilter.entityFilterLogic.*)'
                payload: {
                    type: EntityType
                    math: string | undefined
                    math_property: string | undefined
                    math_hogql: string | undefined
                    index: number
                    math_group_type_index: number | null | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        removeLocalFilter: ((
            action: {
                type: 'remove local filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
                payload: {
                    type: EntityType | undefined
                    index: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        addFilter: ((
            action: {
                type: 'add filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        duplicateFilter: ((
            action: {
                type: 'duplicate filter (scenes.insights.ActionFilter.entityFilterLogic.*)'
                payload: {
                    filter: ActionFilter | EntityFilter
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setFilters: ((
            action: {
                type: 'set filters (scenes.insights.ActionFilter.entityFilterLogic.*)'
                payload: {
                    filters: LocalFilter[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setEntityFilterVisibility: ((
            action: {
                type: 'set entity filter visibility (scenes.insights.ActionFilter.entityFilterLogic.*)'
                payload: {
                    index: number
                    value: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'insights', 'ActionFilter', 'entityFilterLogic', '*']
    pathString: 'scenes.insights.ActionFilter.entityFilterLogic.*'
    props: EntityFilterProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        selectedFilter: EntityFilter | ActionFilter | null
        localFilters: LocalFilter[]
        entityFilterVisible: boolean[]
        modalVisible: boolean
    }
    reducers: {
        selectedFilter: (
            state: EntityFilter | ActionFilter | null,
            action: any,
            fullState: any
        ) => EntityFilter | ActionFilter | null
        localFilters: (state: LocalFilter[], action: any, fullState: any) => LocalFilter[]
        entityFilterVisible: (state: boolean[], action: any, fullState: any) => boolean[]
        modalVisible: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        selectedFilter: EntityFilter | ActionFilter | null
        localFilters: LocalFilter[]
        entityFilterVisible: boolean[]
        modalVisible: boolean
    }
    selectors: {
        selectedFilter: (state: any, props?: any) => EntityFilter | ActionFilter | null
        localFilters: (state: any, props?: any) => LocalFilter[]
        entityFilterVisible: (state: any, props?: any) => boolean[]
        modalVisible: (state: any, props?: any) => boolean
        filters: (state: any, props?: any) => FilterType
    }
    sharedListeners: {}
    values: {
        selectedFilter: EntityFilter | ActionFilter | null
        localFilters: LocalFilter[]
        entityFilterVisible: boolean[]
        modalVisible: boolean
        filters: FilterType
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        filters: (localFilters: LocalFilter[]) => FilterType
    }
}
