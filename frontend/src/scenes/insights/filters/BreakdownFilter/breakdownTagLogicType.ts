// Generated by kea-typegen on Thu, 20 Jul 2023 11:26:38 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { BreakdownTagLogicProps } from './breakdownTagLogic'
import type { TaxonomicFilterValue } from '../../../../lib/components/TaxonomicFilter/types'
import type { CohortType, PropertyDefinition, PropertyDefinitionType } from '../../../../types'

export interface breakdownTagLogicType extends Logic {
    actionCreators: {
        removeBreakdownFromList: (breakdown: string | number) => {
            type: 'remove breakdown from list (scenes.insights.BreakdownFilter.breakdownTagLogic.*)'
            payload: {
                breakdown: string | number
            }
        }
        removeBreakdown: () => {
            type: 'remove breakdown (scenes.insights.BreakdownFilter.breakdownTagLogic.*)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'remove breakdown from list (scenes.insights.BreakdownFilter.breakdownTagLogic.*)': 'removeBreakdownFromList'
        'remove breakdown (scenes.insights.BreakdownFilter.breakdownTagLogic.*)': 'removeBreakdown'
    }
    actionTypes: {
        removeBreakdownFromList: 'remove breakdown from list (scenes.insights.BreakdownFilter.breakdownTagLogic.*)'
        removeBreakdown: 'remove breakdown (scenes.insights.BreakdownFilter.breakdownTagLogic.*)'
    }
    actions: {
        removeBreakdownFromList: (breakdown: string | number) => void
        removeBreakdown: () => void
    }
    asyncActions: {
        removeBreakdownFromList: (breakdown: string | number) => Promise<any>
        removeBreakdown: () => Promise<any>
    }
    defaults: {}
    events: {}
    key: string | number
    listeners: {
        removeBreakdown: ((
            action: {
                type: 'remove breakdown (scenes.insights.BreakdownFilter.breakdownTagLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'insights', 'BreakdownFilter', 'breakdownTagLogic', '*']
    pathString: 'scenes.insights.BreakdownFilter.breakdownTagLogic.*'
    props: BreakdownTagLogicProps
    reducer: (state: any, action: any, fullState: any) => {}
    reducers: {}
    selector: (state: any) => {}
    selectors: {
        isViewOnly: (state: any, props?: any) => boolean
        getPropertyDefinition: (
            state: any,
            props?: any
        ) => (s: TaxonomicFilterValue, type: PropertyDefinitionType) => PropertyDefinition | null
        cohortsById: (state: any, props?: any) => Partial<Record<string | number, CohortType>>
        propertyDefinition: (state: any, props?: any) => PropertyDefinition | null
        propertyName: (state: any, props?: any) => string
        isHistogramable: (state: any, props?: any) => boolean
        isNormalizeable: (state: any, props?: any) => boolean
        shouldShowMenu: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        isViewOnly: boolean
        getPropertyDefinition: (s: TaxonomicFilterValue, type: PropertyDefinitionType) => PropertyDefinition | null
        cohortsById: Partial<Record<string | number, CohortType>>
        propertyDefinition: PropertyDefinition | null
        propertyName: string
        isHistogramable: boolean
        isNormalizeable: boolean
        shouldShowMenu: boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        propertyDefinition: (
            getPropertyDefinition: (
                s: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/lib/components/TaxonomicFilter/types').TaxonomicFilterValue,
                type: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').PropertyDefinitionType
            ) =>
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').PropertyDefinition
                | null,
            breakdown: string | number,
            breakdownType: string
        ) => PropertyDefinition | null
        propertyName: (
            breakdown: string | number,
            cohortsById: Partial<
                Record<
                    string | number,
                    import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').CohortType
                >
            >
        ) => string
        isHistogramable: (
            isTrends: boolean,
            propertyDefinition:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').PropertyDefinition
                | null
        ) => boolean
        isNormalizeable: (
            propertyDefinition:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').PropertyDefinition
                | null
        ) => boolean
        shouldShowMenu: (isHistogramable: boolean, isNormalizeable: boolean) => boolean
    }
}
