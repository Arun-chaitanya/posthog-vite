// Generated by kea-typegen on Thu, 20 Jul 2023 11:26:38 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { TaxonomicBreakdownFilterLogicProps } from './taxonomicBreakdownFilterLogic'
import type { TaxonomicFilterGroup, TaxonomicFilterGroupType, TaxonomicFilterValue } from '../../../../lib/components/TaxonomicFilter/types'
import type { PropertyDefinition, PropertyDefinitionType } from '../../../../types'
import type { BreakdownFilter } from '../../../../queries/schema'

export interface taxonomicBreakdownFilterLogicType extends Logic {
    actionCreators: {
        addBreakdown: (
            breakdown: TaxonomicFilterValue,
            taxonomicGroup: TaxonomicFilterGroup
        ) => {
            type: 'add breakdown (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)'
            payload: {
                breakdown: TaxonomicFilterValue
                taxonomicGroup: TaxonomicFilterGroup
            }
        }
        removeBreakdown: (breakdown: string | number) => {
            type: 'remove breakdown (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)'
            payload: {
                breakdown: string | number
            }
        }
        setHistogramBinsUsed: (value: boolean) => {
            type: 'set histogram bins used (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)'
            payload: {
                value: boolean
            }
        }
        setHistogramBinCount: (count: number | undefined) => {
            type: 'set histogram bin count (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)'
            payload: {
                count: number | undefined
            }
        }
        setNormalizeBreakdownURL: (normalizeBreakdownURL: boolean) => {
            type: 'set normalize breakdown u r l (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)'
            payload: {
                normalizeBreakdownURL: boolean
            }
        }
    }
    actionKeys: {
        'add breakdown (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)': 'addBreakdown'
        'remove breakdown (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)': 'removeBreakdown'
        'set histogram bins used (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)': 'setHistogramBinsUsed'
        'set histogram bin count (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)': 'setHistogramBinCount'
        'set normalize breakdown u r l (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)': 'setNormalizeBreakdownURL'
    }
    actionTypes: {
        addBreakdown: 'add breakdown (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)'
        removeBreakdown: 'remove breakdown (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)'
        setHistogramBinsUsed: 'set histogram bins used (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)'
        setHistogramBinCount: 'set histogram bin count (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)'
        setNormalizeBreakdownURL: 'set normalize breakdown u r l (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)'
    }
    actions: {
        addBreakdown: (breakdown: TaxonomicFilterValue, taxonomicGroup: TaxonomicFilterGroup) => void
        removeBreakdown: (breakdown: string | number) => void
        setHistogramBinsUsed: (value: boolean) => void
        setHistogramBinCount: (count: number | undefined) => void
        setNormalizeBreakdownURL: (normalizeBreakdownURL: boolean) => void
    }
    asyncActions: {
        addBreakdown: (breakdown: TaxonomicFilterValue, taxonomicGroup: TaxonomicFilterGroup) => Promise<any>
        removeBreakdown: (breakdown: string | number) => Promise<any>
        setHistogramBinsUsed: (value: boolean) => Promise<any>
        setHistogramBinCount: (count: number | undefined) => Promise<any>
        setNormalizeBreakdownURL: (normalizeBreakdownURL: boolean) => Promise<any>
    }
    defaults: {
        __ignore: TaxonomicFilterGroupType | null
        localHistogramBinCount: number | undefined
    }
    events: {}
    key: undefined
    listeners: {
        addBreakdown: ((
            action: {
                type: 'add breakdown (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)'
                payload: {
                    breakdown: TaxonomicFilterValue
                    taxonomicGroup: TaxonomicFilterGroup
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        removeBreakdown: ((
            action: {
                type: 'remove breakdown (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)'
                payload: {
                    breakdown: string | number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setNormalizeBreakdownURL: ((
            action: {
                type: 'set normalize breakdown u r l (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)'
                payload: {
                    normalizeBreakdownURL: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setHistogramBinsUsed: ((
            action: {
                type: 'set histogram bins used (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)'
                payload: {
                    value: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setHistogramBinCount: ((
            action: {
                type: 'set histogram bin count (scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic)'
                payload: {
                    count: number | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'insights', 'filters', 'BreakdownFilter', 'taxonomicBreakdownFilterLogic']
    pathString: 'scenes.insights.filters.BreakdownFilter.taxonomicBreakdownFilterLogic'
    props: TaxonomicBreakdownFilterLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        __ignore: TaxonomicFilterGroupType | null
        localHistogramBinCount: number | undefined
    }
    reducers: {
        __ignore: (
            state: TaxonomicFilterGroupType | null,
            action: any,
            fullState: any
        ) => TaxonomicFilterGroupType | null
        localHistogramBinCount: (state: number | undefined, action: any, fullState: any) => number | undefined
    }
    selector: (state: any) => {
        __ignore: TaxonomicFilterGroupType | null
        localHistogramBinCount: number | undefined
    }
    selectors: {
        __ignore: (state: any, props?: any) => TaxonomicFilterGroupType | null
        localHistogramBinCount: (state: any, props?: any) => number | undefined
        getPropertyDefinition: (
            state: any,
            props?: any
        ) => (s: TaxonomicFilterValue, type: PropertyDefinitionType) => PropertyDefinition | null
        breakdownFilter: (state: any, props?: any) => BreakdownFilter
        isViewOnly: (state: any, props?: any) => boolean
        includeSessions: (state: any, props?: any) => boolean
        hasBreakdown: (state: any, props?: any) => boolean
        hasNonCohortBreakdown: (state: any, props?: any) => boolean | '' | 0 | null | undefined
        taxonomicBreakdownType: (
            state: any,
            props?: any
        ) =>
            | TaxonomicFilterGroupType.Actions
            | TaxonomicFilterGroupType.CohortsWithAllUsers
            | TaxonomicFilterGroupType.Elements
            | TaxonomicFilterGroupType.Events
            | TaxonomicFilterGroupType.EventProperties
            | TaxonomicFilterGroupType.EventFeatureFlags
            | TaxonomicFilterGroupType.NumericalEventProperties
            | TaxonomicFilterGroupType.PersonProperties
            | TaxonomicFilterGroupType.PageviewUrls
            | TaxonomicFilterGroupType.Screens
            | TaxonomicFilterGroupType.CustomEvents
            | TaxonomicFilterGroupType.Wildcards
            | TaxonomicFilterGroupType.GroupsPrefix
            | TaxonomicFilterGroupType.Persons
            | TaxonomicFilterGroupType.FeatureFlags
            | TaxonomicFilterGroupType.Insights
            | TaxonomicFilterGroupType.Experiments
            | TaxonomicFilterGroupType.Plugins
            | TaxonomicFilterGroupType.Dashboards
            | TaxonomicFilterGroupType.GroupNamesPrefix
            | TaxonomicFilterGroupType.Sessions
            | TaxonomicFilterGroupType.HogQLExpression
            | undefined
        breakdownArray: (state: any, props?: any) => (string | number)[]
        breakdownCohortArray: (state: any, props?: any) => (string | number)[]
        histogramBinsUsed: (state: any, props?: any) => boolean
        histogramBinCount: (state: any, props?: any) => number | undefined
    }
    sharedListeners: {}
    values: {
        __ignore: TaxonomicFilterGroupType | null
        localHistogramBinCount: number | undefined
        getPropertyDefinition: (s: TaxonomicFilterValue, type: PropertyDefinitionType) => PropertyDefinition | null
        breakdownFilter: BreakdownFilter
        isViewOnly: boolean
        includeSessions: boolean
        hasBreakdown: boolean
        hasNonCohortBreakdown: boolean | '' | 0 | null | undefined
        taxonomicBreakdownType:
            | TaxonomicFilterGroupType.Actions
            | TaxonomicFilterGroupType.CohortsWithAllUsers
            | TaxonomicFilterGroupType.Elements
            | TaxonomicFilterGroupType.Events
            | TaxonomicFilterGroupType.EventProperties
            | TaxonomicFilterGroupType.EventFeatureFlags
            | TaxonomicFilterGroupType.NumericalEventProperties
            | TaxonomicFilterGroupType.PersonProperties
            | TaxonomicFilterGroupType.PageviewUrls
            | TaxonomicFilterGroupType.Screens
            | TaxonomicFilterGroupType.CustomEvents
            | TaxonomicFilterGroupType.Wildcards
            | TaxonomicFilterGroupType.GroupsPrefix
            | TaxonomicFilterGroupType.Persons
            | TaxonomicFilterGroupType.FeatureFlags
            | TaxonomicFilterGroupType.Insights
            | TaxonomicFilterGroupType.Experiments
            | TaxonomicFilterGroupType.Plugins
            | TaxonomicFilterGroupType.Dashboards
            | TaxonomicFilterGroupType.GroupNamesPrefix
            | TaxonomicFilterGroupType.Sessions
            | TaxonomicFilterGroupType.HogQLExpression
            | undefined
        breakdownArray: (string | number)[]
        breakdownCohortArray: (string | number)[]
        histogramBinsUsed: boolean
        histogramBinCount: number | undefined
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        breakdownFilter: (breakdownFilter: BreakdownFilter) => BreakdownFilter
        isViewOnly: (updateBreakdown: ((breakdown: BreakdownFilter) => void) | null) => boolean
        includeSessions: (isTrends: boolean) => boolean
        hasBreakdown: (breakdownFilter: BreakdownFilter) => boolean
        hasNonCohortBreakdown: (breakdownFilter: BreakdownFilter) => boolean | '' | 0 | null | undefined
        taxonomicBreakdownType: (
            breakdownFilter: BreakdownFilter
        ) =>
            | TaxonomicFilterGroupType.Actions
            | TaxonomicFilterGroupType.CohortsWithAllUsers
            | TaxonomicFilterGroupType.Elements
            | TaxonomicFilterGroupType.Events
            | TaxonomicFilterGroupType.EventProperties
            | TaxonomicFilterGroupType.EventFeatureFlags
            | TaxonomicFilterGroupType.NumericalEventProperties
            | TaxonomicFilterGroupType.PersonProperties
            | TaxonomicFilterGroupType.PageviewUrls
            | TaxonomicFilterGroupType.Screens
            | TaxonomicFilterGroupType.CustomEvents
            | TaxonomicFilterGroupType.Wildcards
            | TaxonomicFilterGroupType.GroupsPrefix
            | TaxonomicFilterGroupType.Persons
            | TaxonomicFilterGroupType.FeatureFlags
            | TaxonomicFilterGroupType.Insights
            | TaxonomicFilterGroupType.Experiments
            | TaxonomicFilterGroupType.Plugins
            | TaxonomicFilterGroupType.Dashboards
            | TaxonomicFilterGroupType.GroupNamesPrefix
            | TaxonomicFilterGroupType.Sessions
            | TaxonomicFilterGroupType.HogQLExpression
            | undefined
        breakdownArray: (breakdownFilter: BreakdownFilter) => (string | number)[]
        breakdownCohortArray: (breakdownArray: (string | number)[]) => (string | number)[]
        histogramBinsUsed: (breakdownFilter: BreakdownFilter) => boolean
        histogramBinCount: (
            breakdownFilter: BreakdownFilter,
            localHistogramBinCount: number | undefined
        ) => number | undefined
    }
}
