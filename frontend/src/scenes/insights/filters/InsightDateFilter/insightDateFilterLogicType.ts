// Generated by kea-typegen on Thu, 20 Jul 2023 11:31:46 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { InsightLogicProps } from '../../../../types'
import type { DateRange, InsightQueryNode } from '../../../../queries/schema'

export interface insightDateFilterLogicType extends Logic {
    actionCreators: {
        updateQuerySource: (querySource: Omit<Partial<InsightQueryNode>, 'kind'>) => {
            type: 'update query source (scenes.insights.InsightDateFilter.insightDateFilterLogic.*)'
            payload: {
                querySource: Omit<Partial<InsightQueryNode>, 'kind'>
            }
        }
        setDates: (
            dateFrom: string | undefined | null,
            dateTo: string | undefined | null
        ) => {
            type: 'set dates (scenes.insights.InsightDateFilter.insightDateFilterLogic.*)'
            payload: {
                dateFrom: string | null | undefined
                dateTo: string | null | undefined
            }
        }
    }
    actionKeys: {
        'update query source (scenes.insights.InsightDateFilter.insightDateFilterLogic.*)': 'updateQuerySource'
        'set dates (scenes.insights.InsightDateFilter.insightDateFilterLogic.*)': 'setDates'
    }
    actionTypes: {
        updateQuerySource: 'update query source (scenes.insights.InsightDateFilter.insightDateFilterLogic.*)'
        setDates: 'set dates (scenes.insights.InsightDateFilter.insightDateFilterLogic.*)'
    }
    actions: {
        updateQuerySource: (querySource: Omit<Partial<InsightQueryNode>, 'kind'>) => void
        setDates: (dateFrom: string | undefined | null, dateTo: string | undefined | null) => void
    }
    asyncActions: {
        updateQuerySource: (querySource: Omit<Partial<InsightQueryNode>, 'kind'>) => Promise<any>
        setDates: (dateFrom: string | undefined | null, dateTo: string | undefined | null) => Promise<any>
    }
    defaults: {}
    events: {}
    key: string
    listeners: {
        setDates: ((
            action: {
                type: 'set dates (scenes.insights.InsightDateFilter.insightDateFilterLogic.*)'
                payload: {
                    dateFrom: string | null | undefined
                    dateTo: string | null | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'insights', 'InsightDateFilter', 'insightDateFilterLogic', '*']
    pathString: 'scenes.insights.InsightDateFilter.insightDateFilterLogic.*'
    props: InsightLogicProps
    reducer: (state: any, action: any, fullState: any) => {}
    reducers: {}
    selector: (state: any) => {}
    selectors: {
        dateRange: (state: any, props?: any) => DateRange | null | undefined
        dates: (state: any, props?: any) => { dateFrom: string | null; dateTo: string | null }
    }
    sharedListeners: {}
    values: {
        dateRange: DateRange | null | undefined
        dates: { dateFrom: string | null; dateTo: string | null }
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        dates: (
            dateRange:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').DateRange
                | null
                | undefined
        ) => { dateFrom: string | null; dateTo: string | null }
    }
}
