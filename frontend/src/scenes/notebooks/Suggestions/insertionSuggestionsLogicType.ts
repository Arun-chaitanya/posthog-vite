// Generated by kea-typegen on Thu, 27 Jul 2023 19:38:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Node, NotebookEditor } from '../Notebook/utils'
import type { InsertionSuggestion } from './InsertionSuggestion'

export interface insertionSuggestionsLogicType extends Logic {
    actionCreators: {
        setEditor: (editor: NotebookEditor | null) => {
            type: 'set editor (scenes.notebooks.Suggestions.insertionSuggestionsLogic)'
            payload: {
                editor: NotebookEditor | null
            }
        }
        setPreviousNode: (node: Node | null) => {
            type: 'set previous node (scenes.notebooks.Suggestions.insertionSuggestionsLogic)'
            payload: {
                node: Node | null
            }
        }
        setSuggestions: (suggestions: InsertionSuggestion[]) => {
            type: 'set suggestions (scenes.notebooks.Suggestions.insertionSuggestionsLogic)'
            payload: {
                suggestions: InsertionSuggestion[]
            }
        }
        resetSuggestions: () => {
            type: 'reset suggestions (scenes.notebooks.Suggestions.insertionSuggestionsLogic)'
            payload: {
                value: true
            }
        }
        onTab: () => {
            type: 'on tab (scenes.notebooks.Suggestions.insertionSuggestionsLogic)'
            payload: {
                value: true
            }
        }
        onEscape: () => {
            type: 'on escape (scenes.notebooks.Suggestions.insertionSuggestionsLogic)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'set editor (scenes.notebooks.Suggestions.insertionSuggestionsLogic)': 'setEditor'
        'set previous node (scenes.notebooks.Suggestions.insertionSuggestionsLogic)': 'setPreviousNode'
        'set suggestions (scenes.notebooks.Suggestions.insertionSuggestionsLogic)': 'setSuggestions'
        'reset suggestions (scenes.notebooks.Suggestions.insertionSuggestionsLogic)': 'resetSuggestions'
        'on tab (scenes.notebooks.Suggestions.insertionSuggestionsLogic)': 'onTab'
        'on escape (scenes.notebooks.Suggestions.insertionSuggestionsLogic)': 'onEscape'
    }
    actionTypes: {
        setEditor: 'set editor (scenes.notebooks.Suggestions.insertionSuggestionsLogic)'
        setPreviousNode: 'set previous node (scenes.notebooks.Suggestions.insertionSuggestionsLogic)'
        setSuggestions: 'set suggestions (scenes.notebooks.Suggestions.insertionSuggestionsLogic)'
        resetSuggestions: 'reset suggestions (scenes.notebooks.Suggestions.insertionSuggestionsLogic)'
        onTab: 'on tab (scenes.notebooks.Suggestions.insertionSuggestionsLogic)'
        onEscape: 'on escape (scenes.notebooks.Suggestions.insertionSuggestionsLogic)'
    }
    actions: {
        setEditor: (editor: NotebookEditor | null) => void
        setPreviousNode: (node: Node | null) => void
        setSuggestions: (suggestions: InsertionSuggestion[]) => void
        resetSuggestions: () => void
        onTab: () => void
        onEscape: () => void
    }
    asyncActions: {
        setEditor: (editor: NotebookEditor | null) => Promise<any>
        setPreviousNode: (node: Node | null) => Promise<any>
        setSuggestions: (suggestions: InsertionSuggestion[]) => Promise<any>
        resetSuggestions: () => Promise<any>
        onTab: () => Promise<any>
        onEscape: () => Promise<any>
    }
    defaults: {
        suggestions: InsertionSuggestion[]
        previousNode: Node | null
        editor: NotebookEditor | null
    }
    events: {
        afterMount: () => void
        beforeUnmount: () => void
    }
    key: undefined
    listeners: {
        resetSuggestions: ((
            action: {
                type: 'reset suggestions (scenes.notebooks.Suggestions.insertionSuggestionsLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        onTab: ((
            action: {
                type: 'on tab (scenes.notebooks.Suggestions.insertionSuggestionsLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        onEscape: ((
            action: {
                type: 'on escape (scenes.notebooks.Suggestions.insertionSuggestionsLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'notebooks', 'Suggestions', 'insertionSuggestionsLogic']
    pathString: 'scenes.notebooks.Suggestions.insertionSuggestionsLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        suggestions: InsertionSuggestion[]
        previousNode: Node | null
        editor: NotebookEditor | null
    }
    reducers: {
        suggestions: (state: InsertionSuggestion[], action: any, fullState: any) => InsertionSuggestion[]
        previousNode: (state: Node | null, action: any, fullState: any) => Node | null
        editor: (state: NotebookEditor | null, action: any, fullState: any) => NotebookEditor | null
    }
    selector: (state: any) => {
        suggestions: InsertionSuggestion[]
        previousNode: Node | null
        editor: NotebookEditor | null
    }
    selectors: {
        suggestions: (state: any, props?: any) => InsertionSuggestion[]
        previousNode: (state: any, props?: any) => Node | null
        editor: (state: any, props?: any) => NotebookEditor | null
        activeSuggestion: (state: any, props?: any) => InsertionSuggestion
    }
    sharedListeners: {}
    values: {
        suggestions: InsertionSuggestion[]
        previousNode: Node | null
        editor: NotebookEditor | null
        activeSuggestion: InsertionSuggestion
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        activeSuggestion: (suggestions: InsertionSuggestion[], previousNode: Node | null) => InsertionSuggestion
    }
}
