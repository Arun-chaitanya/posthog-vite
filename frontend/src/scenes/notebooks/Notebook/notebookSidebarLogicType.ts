// Generated by kea-typegen on Sun, 06 Aug 2023 18:18:11 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { RefObject } from '../../../../../node_modules/.pnpm/@types+react@16.14.34/node_modules/@types/react/index.d'

export interface notebookSidebarLogicType extends Logic {
    actionCreators: {
        setNotebookSideBarShown: (shown: boolean) => {
            type: 'set notebook side bar shown (scenes.notebooks.Notebook.notebookSidebarLogic)'
            payload: {
                shown: boolean
            }
        }
        setFullScreen: (full: boolean) => {
            type: 'set full screen (scenes.notebooks.Notebook.notebookSidebarLogic)'
            payload: {
                full: boolean
            }
        }
        selectNotebook: (id: string) => {
            type: 'select notebook (scenes.notebooks.Notebook.notebookSidebarLogic)'
            payload: {
                id: string
            }
        }
        onResize: (event: { originX: number; desiredX: number; finished: boolean }) => {
            type: 'on resize (scenes.notebooks.Notebook.notebookSidebarLogic)'
            payload: {
                originX: number
                desiredX: number
                finished: boolean
            }
        }
        setDesiredWidth: (width: number) => {
            type: 'set desired width (scenes.notebooks.Notebook.notebookSidebarLogic)'
            payload: {
                width: number
            }
        }
        setElementRef: (element: RefObject<HTMLElement>) => {
            type: 'set element ref (scenes.notebooks.Notebook.notebookSidebarLogic)'
            payload: {
                element: RefObject<HTMLElement>
            }
        }
    }
    actionKeys: {
        'set notebook side bar shown (scenes.notebooks.Notebook.notebookSidebarLogic)': 'setNotebookSideBarShown'
        'set full screen (scenes.notebooks.Notebook.notebookSidebarLogic)': 'setFullScreen'
        'select notebook (scenes.notebooks.Notebook.notebookSidebarLogic)': 'selectNotebook'
        'on resize (scenes.notebooks.Notebook.notebookSidebarLogic)': 'onResize'
        'set desired width (scenes.notebooks.Notebook.notebookSidebarLogic)': 'setDesiredWidth'
        'set element ref (scenes.notebooks.Notebook.notebookSidebarLogic)': 'setElementRef'
    }
    actionTypes: {
        setNotebookSideBarShown: 'set notebook side bar shown (scenes.notebooks.Notebook.notebookSidebarLogic)'
        setFullScreen: 'set full screen (scenes.notebooks.Notebook.notebookSidebarLogic)'
        selectNotebook: 'select notebook (scenes.notebooks.Notebook.notebookSidebarLogic)'
        onResize: 'on resize (scenes.notebooks.Notebook.notebookSidebarLogic)'
        setDesiredWidth: 'set desired width (scenes.notebooks.Notebook.notebookSidebarLogic)'
        setElementRef: 'set element ref (scenes.notebooks.Notebook.notebookSidebarLogic)'
    }
    actions: {
        setNotebookSideBarShown: (shown: boolean) => void
        setFullScreen: (full: boolean) => void
        selectNotebook: (id: string) => void
        onResize: (event: { originX: number; desiredX: number; finished: boolean }) => void
        setDesiredWidth: (width: number) => void
        setElementRef: (element: RefObject<HTMLElement>) => void
    }
    asyncActions: {
        setNotebookSideBarShown: (shown: boolean) => Promise<any>
        setFullScreen: (full: boolean) => Promise<any>
        selectNotebook: (id: string) => Promise<any>
        onResize: (event: { originX: number; desiredX: number; finished: boolean }) => Promise<any>
        setDesiredWidth: (width: number) => Promise<any>
        setElementRef: (element: RefObject<HTMLElement>) => Promise<any>
    }
    defaults: {
        selectedNotebook: string
        notebookSideBarShown: boolean
        fullScreen: boolean
        desiredWidth: number
        elementRef: RefObject<HTMLElement> | null
    }
    events: {}
    key: undefined
    listeners: {
        onResize: ((
            action: {
                type: 'on resize (scenes.notebooks.Notebook.notebookSidebarLogic)'
                payload: {
                    originX: number
                    desiredX: number
                    finished: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'notebooks', 'Notebook', 'notebookSidebarLogic']
    pathString: 'scenes.notebooks.Notebook.notebookSidebarLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        selectedNotebook: string
        notebookSideBarShown: boolean
        fullScreen: boolean
        desiredWidth: number
        elementRef: RefObject<HTMLElement> | null
    }
    reducers: {
        selectedNotebook: (state: string, action: any, fullState: any) => string
        notebookSideBarShown: (state: boolean, action: any, fullState: any) => boolean
        fullScreen: (state: boolean, action: any, fullState: any) => boolean
        desiredWidth: (state: number, action: any, fullState: any) => number
        elementRef: (state: RefObject<HTMLElement> | null, action: any, fullState: any) => RefObject<HTMLElement> | null
    }
    selector: (state: any) => {
        selectedNotebook: string
        notebookSideBarShown: boolean
        fullScreen: boolean
        desiredWidth: number
        elementRef: RefObject<HTMLElement> | null
    }
    selectors: {
        selectedNotebook: (state: any, props?: any) => string
        notebookSideBarShown: (state: any, props?: any) => boolean
        fullScreen: (state: any, props?: any) => boolean
        desiredWidth: (state: any, props?: any) => number
        elementRef: (state: any, props?: any) => RefObject<HTMLElement> | null
    }
    sharedListeners: {}
    values: {
        selectedNotebook: string
        notebookSideBarShown: boolean
        fullScreen: boolean
        desiredWidth: number
        elementRef: RefObject<HTMLElement> | null
    }
    _isKea: true
    _isKeaWithKey: false
}
