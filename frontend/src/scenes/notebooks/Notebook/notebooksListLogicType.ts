// Generated by kea-typegen on Sun, 23 Jul 2023 14:30:43 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { NotebookListItemType, NotebookTarget, NotebookType } from '../../../types'
import type { JSONContent } from './utils'
import type { Fuse } from './notebooksListLogic'

export interface notebooksListLogicType extends Logic {
    actionCreators: {
        setScratchpadNotebook: (notebook: NotebookListItemType) => {
            type: 'set scratchpad notebook (scenes.notebooks.Notebook.notebooksListLogic)'
            payload: {
                notebook: NotebookListItemType
            }
        }
        createNotebook: (
            title?: string,
            location?: NotebookTarget,
            content?: JSONContent[]
        ) => {
            type: 'create notebook (scenes.notebooks.Notebook.notebooksListLogic)'
            payload: {
                title: string | undefined
                location: NotebookTarget
                content: JSONContent[] | undefined
            }
        }
        receiveNotebookUpdate: (notebook: NotebookListItemType) => {
            type: 'receive notebook update (scenes.notebooks.Notebook.notebooksListLogic)'
            payload: {
                notebook: NotebookListItemType
            }
        }
        loadNotebooks: () => {
            type: 'load notebooks (scenes.notebooks.Notebook.notebooksListLogic)'
            payload: {
                value: true
            }
        }
        deleteNotebook: (
            shortId: NotebookListItemType['short_id'],
            title?: string
        ) => {
            type: 'delete notebook (scenes.notebooks.Notebook.notebooksListLogic)'
            payload: {
                shortId: string
                title: string | undefined
            }
        }
        loadNotebooksSuccess: (
            notebooks: NotebookType[],
            payload?: {
                value: true
            }
        ) => {
            type: 'load notebooks success (scenes.notebooks.Notebook.notebooksListLogic)'
            payload: {
                notebooks: NotebookType[]
                payload?: {
                    value: true
                }
            }
        }
        loadNotebooksFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load notebooks failure (scenes.notebooks.Notebook.notebooksListLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        createNotebookSuccess: (
            notebooks: NotebookListItemType[],
            payload?: {
                title: string | undefined
                location: NotebookTarget
                content: JSONContent[] | undefined
            }
        ) => {
            type: 'create notebook success (scenes.notebooks.Notebook.notebooksListLogic)'
            payload: {
                notebooks: NotebookListItemType[]
                payload?: {
                    title: string | undefined
                    location: NotebookTarget
                    content: JSONContent[] | undefined
                }
            }
        }
        createNotebookFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'create notebook failure (scenes.notebooks.Notebook.notebooksListLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deleteNotebookSuccess: (
            notebooks: NotebookListItemType[],
            payload?: {
                shortId: string
                title: string | undefined
            }
        ) => {
            type: 'delete notebook success (scenes.notebooks.Notebook.notebooksListLogic)'
            payload: {
                notebooks: NotebookListItemType[]
                payload?: {
                    shortId: string
                    title: string | undefined
                }
            }
        }
        deleteNotebookFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete notebook failure (scenes.notebooks.Notebook.notebooksListLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        receiveNotebookUpdateSuccess: (
            notebooks: NotebookListItemType[],
            payload?: {
                notebook: NotebookListItemType
            }
        ) => {
            type: 'receive notebook update success (scenes.notebooks.Notebook.notebooksListLogic)'
            payload: {
                notebooks: NotebookListItemType[]
                payload?: {
                    notebook: NotebookListItemType
                }
            }
        }
        receiveNotebookUpdateFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'receive notebook update failure (scenes.notebooks.Notebook.notebooksListLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set scratchpad notebook (scenes.notebooks.Notebook.notebooksListLogic)': 'setScratchpadNotebook'
        'create notebook (scenes.notebooks.Notebook.notebooksListLogic)': 'createNotebook'
        'receive notebook update (scenes.notebooks.Notebook.notebooksListLogic)': 'receiveNotebookUpdate'
        'load notebooks (scenes.notebooks.Notebook.notebooksListLogic)': 'loadNotebooks'
        'delete notebook (scenes.notebooks.Notebook.notebooksListLogic)': 'deleteNotebook'
        'load notebooks success (scenes.notebooks.Notebook.notebooksListLogic)': 'loadNotebooksSuccess'
        'load notebooks failure (scenes.notebooks.Notebook.notebooksListLogic)': 'loadNotebooksFailure'
        'create notebook success (scenes.notebooks.Notebook.notebooksListLogic)': 'createNotebookSuccess'
        'create notebook failure (scenes.notebooks.Notebook.notebooksListLogic)': 'createNotebookFailure'
        'delete notebook success (scenes.notebooks.Notebook.notebooksListLogic)': 'deleteNotebookSuccess'
        'delete notebook failure (scenes.notebooks.Notebook.notebooksListLogic)': 'deleteNotebookFailure'
        'receive notebook update success (scenes.notebooks.Notebook.notebooksListLogic)': 'receiveNotebookUpdateSuccess'
        'receive notebook update failure (scenes.notebooks.Notebook.notebooksListLogic)': 'receiveNotebookUpdateFailure'
    }
    actionTypes: {
        setScratchpadNotebook: 'set scratchpad notebook (scenes.notebooks.Notebook.notebooksListLogic)'
        createNotebook: 'create notebook (scenes.notebooks.Notebook.notebooksListLogic)'
        receiveNotebookUpdate: 'receive notebook update (scenes.notebooks.Notebook.notebooksListLogic)'
        loadNotebooks: 'load notebooks (scenes.notebooks.Notebook.notebooksListLogic)'
        deleteNotebook: 'delete notebook (scenes.notebooks.Notebook.notebooksListLogic)'
        loadNotebooksSuccess: 'load notebooks success (scenes.notebooks.Notebook.notebooksListLogic)'
        loadNotebooksFailure: 'load notebooks failure (scenes.notebooks.Notebook.notebooksListLogic)'
        createNotebookSuccess: 'create notebook success (scenes.notebooks.Notebook.notebooksListLogic)'
        createNotebookFailure: 'create notebook failure (scenes.notebooks.Notebook.notebooksListLogic)'
        deleteNotebookSuccess: 'delete notebook success (scenes.notebooks.Notebook.notebooksListLogic)'
        deleteNotebookFailure: 'delete notebook failure (scenes.notebooks.Notebook.notebooksListLogic)'
        receiveNotebookUpdateSuccess: 'receive notebook update success (scenes.notebooks.Notebook.notebooksListLogic)'
        receiveNotebookUpdateFailure: 'receive notebook update failure (scenes.notebooks.Notebook.notebooksListLogic)'
    }
    actions: {
        setScratchpadNotebook: (notebook: NotebookListItemType) => void
        createNotebook: (title?: string, location?: NotebookTarget, content?: JSONContent[]) => void
        receiveNotebookUpdate: (notebook: NotebookListItemType) => void
        loadNotebooks: () => void
        deleteNotebook: (shortId: NotebookListItemType['short_id'], title?: string) => void
        loadNotebooksSuccess: (
            notebooks: NotebookType[],
            payload?: {
                value: true
            }
        ) => void
        loadNotebooksFailure: (error: string, errorObject?: any) => void
        createNotebookSuccess: (
            notebooks: NotebookListItemType[],
            payload?: {
                title: string | undefined
                location: NotebookTarget
                content: JSONContent[] | undefined
            }
        ) => void
        createNotebookFailure: (error: string, errorObject?: any) => void
        deleteNotebookSuccess: (
            notebooks: NotebookListItemType[],
            payload?: {
                shortId: string
                title: string | undefined
            }
        ) => void
        deleteNotebookFailure: (error: string, errorObject?: any) => void
        receiveNotebookUpdateSuccess: (
            notebooks: NotebookListItemType[],
            payload?: {
                notebook: NotebookListItemType
            }
        ) => void
        receiveNotebookUpdateFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setScratchpadNotebook: (notebook: NotebookListItemType) => Promise<any>
        createNotebook: (title?: string, location?: NotebookTarget, content?: JSONContent[]) => Promise<any>
        receiveNotebookUpdate: (notebook: NotebookListItemType) => Promise<any>
        loadNotebooks: () => Promise<any>
        deleteNotebook: (shortId: NotebookListItemType['short_id'], title?: string) => Promise<any>
        loadNotebooksSuccess: (
            notebooks: NotebookType[],
            payload?: {
                value: true
            }
        ) => Promise<any>
        loadNotebooksFailure: (error: string, errorObject?: any) => Promise<any>
        createNotebookSuccess: (
            notebooks: NotebookListItemType[],
            payload?: {
                title: string | undefined
                location: NotebookTarget
                content: JSONContent[] | undefined
            }
        ) => Promise<any>
        createNotebookFailure: (error: string, errorObject?: any) => Promise<any>
        deleteNotebookSuccess: (
            notebooks: NotebookListItemType[],
            payload?: {
                shortId: string
                title: string | undefined
            }
        ) => Promise<any>
        deleteNotebookFailure: (error: string, errorObject?: any) => Promise<any>
        receiveNotebookUpdateSuccess: (
            notebooks: NotebookListItemType[],
            payload?: {
                notebook: NotebookListItemType
            }
        ) => Promise<any>
        receiveNotebookUpdateFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        scratchpadNotebook: NotebookListItemType
        notebooks: NotebookListItemType[]
        notebooksLoading: boolean
        notebookTemplates: NotebookType[]
        notebookTemplatesLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'notebooks', 'Notebook', 'notebooksListLogic']
    pathString: 'scenes.notebooks.Notebook.notebooksListLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        scratchpadNotebook: NotebookListItemType
        notebooks: NotebookListItemType[]
        notebooksLoading: boolean
        notebookTemplates: NotebookType[]
        notebookTemplatesLoading: boolean
    }
    reducers: {
        scratchpadNotebook: (state: NotebookListItemType, action: any, fullState: any) => NotebookListItemType
        notebooks: (state: NotebookListItemType[], action: any, fullState: any) => NotebookListItemType[]
        notebooksLoading: (state: boolean, action: any, fullState: any) => boolean
        notebookTemplates: (state: NotebookType[], action: any, fullState: any) => NotebookType[]
        notebookTemplatesLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        scratchpadNotebook: NotebookListItemType
        notebooks: NotebookListItemType[]
        notebooksLoading: boolean
        notebookTemplates: NotebookType[]
        notebookTemplatesLoading: boolean
    }
    selectors: {
        scratchpadNotebook: (state: any, props?: any) => NotebookListItemType
        notebooks: (state: any, props?: any) => NotebookListItemType[]
        notebooksLoading: (state: any, props?: any) => boolean
        notebookTemplates: (state: any, props?: any) => NotebookType[]
        notebookTemplatesLoading: (state: any, props?: any) => boolean
        currentTeamId: (state: any, props?: any) => number | null
        fuse: (state: any, props?: any) => Fuse
    }
    sharedListeners: {}
    values: {
        scratchpadNotebook: NotebookListItemType
        notebooks: NotebookListItemType[]
        notebooksLoading: boolean
        notebookTemplates: NotebookType[]
        notebookTemplatesLoading: boolean
        currentTeamId: number | null
        fuse: Fuse
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        fuse: (notebooks: NotebookListItemType[]) => Fuse
    }
}
