// Generated by kea-typegen on Sun, 06 Aug 2023 09:52:09 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { EditorFocusPosition } from './utils'
import type { FocusPosition } from '../../../../../node_modules/.pnpm/@tiptap+core@2.1.0-rc.12_@tiptap+pm@2.1.0-rc.12/node_modules/@tiptap/core/dist/packages/core/src/types.d'
import type { RefObject } from '../../../../../node_modules/.pnpm/@types+react@16.14.34/node_modules/@types/react/index.d'
import type { NotebookPopoverVisibility } from '../../../types'

export interface notebookPopoverLogicType extends Logic {
    actionCreators: {
        setFullScreen: (full: boolean) => {
            type: 'set full screen (scenes.notebooks.Notebook.notebookPopoverLogic)'
            payload: {
                full: boolean
            }
        }
        selectNotebook: (id: string) => {
            type: 'select notebook (scenes.notebooks.Notebook.notebookPopoverLogic)'
            payload: {
                id: string
            }
        }
        setInitialAutofocus: (position: EditorFocusPosition) => {
            type: 'set initial autofocus (scenes.notebooks.Notebook.notebookPopoverLogic)'
            payload: {
                position: FocusPosition
            }
        }
        setElementRef: (element: RefObject<HTMLElement>) => {
            type: 'set element ref (scenes.notebooks.Notebook.notebookPopoverLogic)'
            payload: {
                element: RefObject<HTMLElement>
            }
        }
        setVisibility: (visibility: NotebookPopoverVisibility) => {
            type: 'set visibility (scenes.notebooks.Notebook.notebookPopoverLogic)'
            payload: {
                visibility: NotebookPopoverVisibility
            }
        }
        startDropMode: () => {
            type: 'start drop mode (scenes.notebooks.Notebook.notebookPopoverLogic)'
            payload: {
                value: true
            }
        }
        endDropMode: () => {
            type: 'end drop mode (scenes.notebooks.Notebook.notebookPopoverLogic)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'set full screen (scenes.notebooks.Notebook.notebookPopoverLogic)': 'setFullScreen'
        'select notebook (scenes.notebooks.Notebook.notebookPopoverLogic)': 'selectNotebook'
        'set initial autofocus (scenes.notebooks.Notebook.notebookPopoverLogic)': 'setInitialAutofocus'
        'set element ref (scenes.notebooks.Notebook.notebookPopoverLogic)': 'setElementRef'
        'set visibility (scenes.notebooks.Notebook.notebookPopoverLogic)': 'setVisibility'
        'start drop mode (scenes.notebooks.Notebook.notebookPopoverLogic)': 'startDropMode'
        'end drop mode (scenes.notebooks.Notebook.notebookPopoverLogic)': 'endDropMode'
    }
    actionTypes: {
        setFullScreen: 'set full screen (scenes.notebooks.Notebook.notebookPopoverLogic)'
        selectNotebook: 'select notebook (scenes.notebooks.Notebook.notebookPopoverLogic)'
        setInitialAutofocus: 'set initial autofocus (scenes.notebooks.Notebook.notebookPopoverLogic)'
        setElementRef: 'set element ref (scenes.notebooks.Notebook.notebookPopoverLogic)'
        setVisibility: 'set visibility (scenes.notebooks.Notebook.notebookPopoverLogic)'
        startDropMode: 'start drop mode (scenes.notebooks.Notebook.notebookPopoverLogic)'
        endDropMode: 'end drop mode (scenes.notebooks.Notebook.notebookPopoverLogic)'
    }
    actions: {
        setFullScreen: (full: boolean) => void
        selectNotebook: (id: string) => void
        setInitialAutofocus: (position: EditorFocusPosition) => void
        setElementRef: (element: RefObject<HTMLElement>) => void
        setVisibility: (visibility: NotebookPopoverVisibility) => void
        startDropMode: () => void
        endDropMode: () => void
    }
    asyncActions: {
        setFullScreen: (full: boolean) => Promise<any>
        selectNotebook: (id: string) => Promise<any>
        setInitialAutofocus: (position: EditorFocusPosition) => Promise<any>
        setElementRef: (element: RefObject<HTMLElement>) => Promise<any>
        setVisibility: (visibility: NotebookPopoverVisibility) => Promise<any>
        startDropMode: () => Promise<any>
        endDropMode: () => Promise<any>
    }
    defaults: {
        selectedNotebook: string
        visibility: NotebookPopoverVisibility
        fullScreen: boolean
        initialAutofocus: EditorFocusPosition
        elementRef: RefObject<HTMLElement> | null
        shownAtLeastOnce: boolean
        dropMode: boolean
    }
    events: {}
    key: undefined
    listeners: {
        startDropMode: ((
            action: {
                type: 'start drop mode (scenes.notebooks.Notebook.notebookPopoverLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        endDropMode: ((
            action: {
                type: 'end drop mode (scenes.notebooks.Notebook.notebookPopoverLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'notebooks', 'Notebook', 'notebookPopoverLogic']
    pathString: 'scenes.notebooks.Notebook.notebookPopoverLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        selectedNotebook: string
        visibility: NotebookPopoverVisibility
        fullScreen: boolean
        initialAutofocus: EditorFocusPosition
        elementRef: RefObject<HTMLElement> | null
        shownAtLeastOnce: boolean
        dropMode: boolean
    }
    reducers: {
        selectedNotebook: (state: string, action: any, fullState: any) => string
        visibility: (state: NotebookPopoverVisibility, action: any, fullState: any) => NotebookPopoverVisibility
        fullScreen: (state: boolean, action: any, fullState: any) => boolean
        initialAutofocus: (state: EditorFocusPosition, action: any, fullState: any) => EditorFocusPosition
        elementRef: (state: RefObject<HTMLElement> | null, action: any, fullState: any) => RefObject<HTMLElement> | null
        shownAtLeastOnce: (state: boolean, action: any, fullState: any) => boolean
        dropMode: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        selectedNotebook: string
        visibility: NotebookPopoverVisibility
        fullScreen: boolean
        initialAutofocus: EditorFocusPosition
        elementRef: RefObject<HTMLElement> | null
        shownAtLeastOnce: boolean
        dropMode: boolean
    }
    selectors: {
        selectedNotebook: (state: any, props?: any) => string
        visibility: (state: any, props?: any) => NotebookPopoverVisibility
        fullScreen: (state: any, props?: any) => boolean
        initialAutofocus: (state: any, props?: any) => EditorFocusPosition
        elementRef: (state: any, props?: any) => RefObject<HTMLElement> | null
        shownAtLeastOnce: (state: any, props?: any) => boolean
        dropMode: (state: any, props?: any) => boolean
        dropListeners: (
            state: any,
            props?: any
        ) => {
            onDragEnter?: () => void
            onDragLeave?: () => void
        }
    }
    sharedListeners: {}
    values: {
        selectedNotebook: string
        visibility: NotebookPopoverVisibility
        fullScreen: boolean
        initialAutofocus: EditorFocusPosition
        elementRef: RefObject<HTMLElement> | null
        shownAtLeastOnce: boolean
        dropMode: boolean
        dropListeners: {
            onDragEnter?: () => void
            onDragLeave?: () => void
        }
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        dropListeners: (dropMode: boolean) => {
            onDragEnter?: () => void
            onDragLeave?: () => void
        }
    }
}
