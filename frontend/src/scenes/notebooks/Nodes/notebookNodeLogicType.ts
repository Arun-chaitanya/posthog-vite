// Generated by kea-typegen on Sun, 06 Aug 2023 18:18:14 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { NotebookNodeLogicProps } from './notebookNodeLogic'
import type { BuiltLogic } from '../../../../../node_modules/.pnpm/kea@3.1.5_react@16.14.0/node_modules/kea/lib/index.d'
import type { notebookLogicType } from '../Notebook/notebookLogicType'
import type { JSONContent } from '../Notebook/utils'

export interface notebookNodeLogicType extends Logic {
    actionCreators: {
        insertAfter: (content: JSONContent) => {
            type: 'insert after (scenes.notebooks.Notebook.Nodes.notebookNodeLogic.*)'
            payload: {
                content: JSONContent
            }
        }
        insertAfterLastNodeOfType: (
            nodeType: string,
            content: JSONContent
        ) => {
            type: 'insert after last node of type (scenes.notebooks.Notebook.Nodes.notebookNodeLogic.*)'
            payload: {
                content: JSONContent
                nodeType: string
            }
        }
    }
    actionKeys: {
        'insert after (scenes.notebooks.Notebook.Nodes.notebookNodeLogic.*)': 'insertAfter'
        'insert after last node of type (scenes.notebooks.Notebook.Nodes.notebookNodeLogic.*)': 'insertAfterLastNodeOfType'
    }
    actionTypes: {
        insertAfter: 'insert after (scenes.notebooks.Notebook.Nodes.notebookNodeLogic.*)'
        insertAfterLastNodeOfType: 'insert after last node of type (scenes.notebooks.Notebook.Nodes.notebookNodeLogic.*)'
    }
    actions: {
        insertAfter: (content: JSONContent) => void
        insertAfterLastNodeOfType: (nodeType: string, content: JSONContent) => void
    }
    asyncActions: {
        insertAfter: (content: JSONContent) => Promise<any>
        insertAfterLastNodeOfType: (nodeType: string, content: JSONContent) => Promise<any>
    }
    defaults: {}
    events: {}
    key: string
    listeners: {
        insertAfter: ((
            action: {
                type: 'insert after (scenes.notebooks.Notebook.Nodes.notebookNodeLogic.*)'
                payload: {
                    content: JSONContent
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        insertAfterLastNodeOfType: ((
            action: {
                type: 'insert after last node of type (scenes.notebooks.Notebook.Nodes.notebookNodeLogic.*)'
                payload: {
                    content: JSONContent
                    nodeType: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'notebooks', 'Notebook', 'Nodes', 'notebookNodeLogic', '*']
    pathString: 'scenes.notebooks.Notebook.Nodes.notebookNodeLogic.*'
    props: NotebookNodeLogicProps
    reducer: (state: any, action: any, fullState: any) => {}
    reducers: {}
    selector: (state: any) => {}
    selectors: {
        notebookLogic: (state: any, props?: any) => BuiltLogic<notebookLogicType>
    }
    sharedListeners: {}
    values: {
        notebookLogic: BuiltLogic<notebookLogicType>
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        notebookLogic: (arg: any) => BuiltLogic<notebookLogicType>
    }
}
