// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:25 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DeadLetterQueueMetricRow, DeadLetterQueueTab } from './deadLetterQueueLogic'

export interface deadLetterQueueLogicType extends Logic {
    actionCreators: {
        setActiveTab: (tabKey: DeadLetterQueueTab) => {
            type: 'set active tab (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)'
            payload: {
                tabKey: DeadLetterQueueTab
            }
        }
        loadMoreRows: (key: string) => {
            type: 'load more rows (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)'
            payload: {
                key: string
            }
        }
        addRowsToMetric: (
            key: string,
            rows: string[][][]
        ) => {
            type: 'add rows to metric (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)'
            payload: {
                key: string
                rows: string[][][]
            }
        }
        loadDeadLetterQueueMetrics: () => {
            type: 'load dead letter queue metrics (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)'
            payload: any
        }
        loadDeadLetterQueueMetricsSuccess: (
            deadLetterQueueMetrics: DeadLetterQueueMetricRow[],
            payload?: any
        ) => {
            type: 'load dead letter queue metrics success (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)'
            payload: {
                deadLetterQueueMetrics: DeadLetterQueueMetricRow[]
                payload?: any
            }
        }
        loadDeadLetterQueueMetricsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load dead letter queue metrics failure (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set active tab (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)': 'setActiveTab'
        'load more rows (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)': 'loadMoreRows'
        'add rows to metric (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)': 'addRowsToMetric'
        'load dead letter queue metrics (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)': 'loadDeadLetterQueueMetrics'
        'load dead letter queue metrics success (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)': 'loadDeadLetterQueueMetricsSuccess'
        'load dead letter queue metrics failure (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)': 'loadDeadLetterQueueMetricsFailure'
    }
    actionTypes: {
        setActiveTab: 'set active tab (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)'
        loadMoreRows: 'load more rows (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)'
        addRowsToMetric: 'add rows to metric (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)'
        loadDeadLetterQueueMetrics: 'load dead letter queue metrics (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)'
        loadDeadLetterQueueMetricsSuccess: 'load dead letter queue metrics success (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)'
        loadDeadLetterQueueMetricsFailure: 'load dead letter queue metrics failure (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)'
    }
    actions: {
        setActiveTab: (tabKey: DeadLetterQueueTab) => void
        loadMoreRows: (key: string) => void
        addRowsToMetric: (key: string, rows: string[][][]) => void
        loadDeadLetterQueueMetrics: () => void
        loadDeadLetterQueueMetricsSuccess: (deadLetterQueueMetrics: DeadLetterQueueMetricRow[], payload?: any) => void
        loadDeadLetterQueueMetricsFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setActiveTab: (tabKey: DeadLetterQueueTab) => Promise<any>
        loadMoreRows: (key: string) => Promise<any>
        addRowsToMetric: (key: string, rows: string[][][]) => Promise<any>
        loadDeadLetterQueueMetrics: () => Promise<any>
        loadDeadLetterQueueMetricsSuccess: (
            deadLetterQueueMetrics: DeadLetterQueueMetricRow[],
            payload?: any
        ) => Promise<any>
        loadDeadLetterQueueMetricsFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        activeTab: DeadLetterQueueTab
        rowsPerMetric: Record<string, string[][][]>
        deadLetterQueueMetrics: DeadLetterQueueMetricRow[]
        deadLetterQueueMetricsLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {
        loadMoreRows: ((
            action: {
                type: 'load more rows (scenes.instance.DeadLetterQueue.deadLetterQueueLogic)'
                payload: {
                    key: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'instance', 'DeadLetterQueue', 'deadLetterQueueLogic']
    pathString: 'scenes.instance.DeadLetterQueue.deadLetterQueueLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        activeTab: DeadLetterQueueTab
        rowsPerMetric: Record<string, string[][][]>
        deadLetterQueueMetrics: DeadLetterQueueMetricRow[]
        deadLetterQueueMetricsLoading: boolean
    }
    reducers: {
        activeTab: (state: DeadLetterQueueTab, action: any, fullState: any) => DeadLetterQueueTab
        rowsPerMetric: (
            state: Record<string, string[][][]>,
            action: any,
            fullState: any
        ) => Record<string, string[][][]>
        deadLetterQueueMetrics: (
            state: DeadLetterQueueMetricRow[],
            action: any,
            fullState: any
        ) => DeadLetterQueueMetricRow[]
        deadLetterQueueMetricsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        activeTab: DeadLetterQueueTab
        rowsPerMetric: Record<string, string[][][]>
        deadLetterQueueMetrics: DeadLetterQueueMetricRow[]
        deadLetterQueueMetricsLoading: boolean
    }
    selectors: {
        activeTab: (state: any, props?: any) => DeadLetterQueueTab
        rowsPerMetric: (state: any, props?: any) => Record<string, string[][][]>
        deadLetterQueueMetrics: (state: any, props?: any) => DeadLetterQueueMetricRow[]
        deadLetterQueueMetricsLoading: (state: any, props?: any) => boolean
        singleValueMetrics: (state: any, props?: any) => DeadLetterQueueMetricRow[]
        tableMetrics: (state: any, props?: any) => DeadLetterQueueMetricRow[]
    }
    sharedListeners: {}
    values: {
        activeTab: DeadLetterQueueTab
        rowsPerMetric: Record<string, string[][][]>
        deadLetterQueueMetrics: DeadLetterQueueMetricRow[]
        deadLetterQueueMetricsLoading: boolean
        singleValueMetrics: DeadLetterQueueMetricRow[]
        tableMetrics: DeadLetterQueueMetricRow[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        singleValueMetrics: (deadLetterQueueMetrics: DeadLetterQueueMetricRow[]) => DeadLetterQueueMetricRow[]
        tableMetrics: (deadLetterQueueMetrics: DeadLetterQueueMetricRow[]) => DeadLetterQueueMetricRow[]
    }
}
