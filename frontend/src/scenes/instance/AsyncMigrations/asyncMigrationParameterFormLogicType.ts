// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:25 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AsyncMigrationModalProps } from './asyncMigrationsLogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../../node_modules/kea-forms'

export interface asyncMigrationParameterFormLogicType extends Logic {
    actionCreators: {
        setParametersValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set parameters value (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setParametersValues: (values: DeepPartial<Record<string, number>>) => {
            type: 'set parameters values (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
            payload: {
                values: DeepPartial<Record<string, number>>
            }
        }
        setParametersManualErrors: (errors: Record<string, any>) => {
            type: 'set parameters manual errors (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchParametersField: (key: string) => {
            type: 'touch parameters field (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
            payload: {
                key: string
            }
        }
        resetParameters: (values?: Record<string, number>) => {
            type: 'reset parameters (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
            payload: {
                values?: Record<string, number>
            }
        }
        submitParameters: () => {
            type: 'submit parameters (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
            payload: {
                value: boolean
            }
        }
        submitParametersRequest: (parameters: Record<string, number>) => {
            type: 'submit parameters request (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
            payload: {
                parameters: Record<string, number>
            }
        }
        submitParametersSuccess: (parameters: Record<string, number>) => {
            type: 'submit parameters success (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
            payload: {
                parameters: Record<string, number>
            }
        }
        submitParametersFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit parameters failure (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'set parameters value (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)': 'setParametersValue'
        'set parameters values (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)': 'setParametersValues'
        'set parameters manual errors (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)': 'setParametersManualErrors'
        'touch parameters field (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)': 'touchParametersField'
        'reset parameters (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)': 'resetParameters'
        'submit parameters (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)': 'submitParameters'
        'submit parameters request (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)': 'submitParametersRequest'
        'submit parameters success (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)': 'submitParametersSuccess'
        'submit parameters failure (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)': 'submitParametersFailure'
    }
    actionTypes: {
        setParametersValue: 'set parameters value (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
        setParametersValues: 'set parameters values (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
        setParametersManualErrors: 'set parameters manual errors (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
        touchParametersField: 'touch parameters field (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
        resetParameters: 'reset parameters (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
        submitParameters: 'submit parameters (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
        submitParametersRequest: 'submit parameters request (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
        submitParametersSuccess: 'submit parameters success (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
        submitParametersFailure: 'submit parameters failure (scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic)'
    }
    actions: {
        setParametersValue: (key: FieldName, value: any) => void
        setParametersValues: (values: DeepPartial<Record<string, number>>) => void
        setParametersManualErrors: (errors: Record<string, any>) => void
        touchParametersField: (key: string) => void
        resetParameters: (values?: Record<string, number>) => void
        submitParameters: () => void
        submitParametersRequest: (parameters: Record<string, number>) => void
        submitParametersSuccess: (parameters: Record<string, number>) => void
        submitParametersFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        setParametersValue: (key: FieldName, value: any) => Promise<any>
        setParametersValues: (values: DeepPartial<Record<string, number>>) => Promise<any>
        setParametersManualErrors: (errors: Record<string, any>) => Promise<any>
        touchParametersField: (key: string) => Promise<any>
        resetParameters: (values?: Record<string, number>) => Promise<any>
        submitParameters: () => Promise<any>
        submitParametersRequest: (parameters: Record<string, number>) => Promise<any>
        submitParametersSuccess: (parameters: Record<string, number>) => Promise<any>
        submitParametersFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        parameters: Record<string, number>
        isParametersSubmitting: boolean
        showParametersErrors: boolean
        parametersChanged: boolean
        parametersTouches: Record<string, boolean>
        parametersManualErrors: Record<string, any>
    }
    events: {}
    key: number
    listeners: {}
    path: ['scenes', 'instance', 'AsyncMigrations', 'asyncMigrationParameterFormLogic']
    pathString: 'scenes.instance.AsyncMigrations.asyncMigrationParameterFormLogic'
    props: AsyncMigrationModalProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        parameters: Record<string, number>
        isParametersSubmitting: boolean
        showParametersErrors: boolean
        parametersChanged: boolean
        parametersTouches: Record<string, boolean>
        parametersManualErrors: Record<string, any>
    }
    reducers: {
        parameters: (state: Record<string, number>, action: any, fullState: any) => Record<string, number>
        isParametersSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showParametersErrors: (state: boolean, action: any, fullState: any) => boolean
        parametersChanged: (state: boolean, action: any, fullState: any) => boolean
        parametersTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        parametersManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        parameters: Record<string, number>
        isParametersSubmitting: boolean
        showParametersErrors: boolean
        parametersChanged: boolean
        parametersTouches: Record<string, boolean>
        parametersManualErrors: Record<string, any>
    }
    selectors: {
        parameters: (state: any, props?: any) => Record<string, number>
        isParametersSubmitting: (state: any, props?: any) => boolean
        showParametersErrors: (state: any, props?: any) => boolean
        parametersChanged: (state: any, props?: any) => boolean
        parametersTouches: (state: any, props?: any) => Record<string, boolean>
        parametersManualErrors: (state: any, props?: any) => Record<string, any>
        parametersTouched: (state: any, props?: any) => boolean
        parametersValidationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<Record<string, number>, ValidationErrorType>
        parametersAllErrors: (state: any, props?: any) => Record<string, any>
        parametersHasErrors: (state: any, props?: any) => boolean
        parametersErrors: (state: any, props?: any) => DeepPartialMap<Record<string, number>, ValidationErrorType>
        isParametersValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        parameters: Record<string, number>
        isParametersSubmitting: boolean
        showParametersErrors: boolean
        parametersChanged: boolean
        parametersTouches: Record<string, boolean>
        parametersManualErrors: Record<string, any>
        parametersTouched: boolean
        parametersValidationErrors: DeepPartialMap<Record<string, number>, ValidationErrorType>
        parametersAllErrors: Record<string, any>
        parametersHasErrors: boolean
        parametersErrors: DeepPartialMap<Record<string, number>, ValidationErrorType>
        isParametersValid: boolean
    }
    _isKea: true
    _isKeaWithKey: true
}
