// Generated by kea-typegen on Thu, 20 Jul 2023 10:57:00 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { KafkaMessage } from './kafkaInspectorLogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../../node_modules/kea-forms'

export interface kafkaInspectorLogicType extends Logic {
    actionCreators: {
        fetchKafkaMessage: (
            topic: string,
            partition: number,
            offset: number
        ) => {
            type: 'fetch kafka message (scenes.instance.SystemStatus.kafkaInspectorLogic)'
            payload: {
                topic: string
                partition: number
                offset: number
            }
        }
        fetchKafkaMessageSuccess: (
            kafkaMessage: KafkaMessage | null,
            payload?: {
                topic: string
                partition: number
                offset: number
            }
        ) => {
            type: 'fetch kafka message success (scenes.instance.SystemStatus.kafkaInspectorLogic)'
            payload: {
                kafkaMessage: KafkaMessage | null
                payload?: {
                    topic: string
                    partition: number
                    offset: number
                }
            }
        }
        fetchKafkaMessageFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'fetch kafka message failure (scenes.instance.SystemStatus.kafkaInspectorLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setFetchKafkaMessageValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set fetch kafka message value (scenes.instance.SystemStatus.kafkaInspectorLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setFetchKafkaMessageValues: (
            values: DeepPartial<{
                topic: string
                partition: number
                offset: number
            }>
        ) => {
            type: 'set fetch kafka message values (scenes.instance.SystemStatus.kafkaInspectorLogic)'
            payload: {
                values: DeepPartial<{
                    topic: string
                    partition: number
                    offset: number
                }>
            }
        }
        setFetchKafkaMessageManualErrors: (errors: Record<string, any>) => {
            type: 'set fetch kafka message manual errors (scenes.instance.SystemStatus.kafkaInspectorLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchFetchKafkaMessageField: (key: string) => {
            type: 'touch fetch kafka message field (scenes.instance.SystemStatus.kafkaInspectorLogic)'
            payload: {
                key: string
            }
        }
        resetFetchKafkaMessage: (values?: { topic: string; partition: number; offset: number }) => {
            type: 'reset fetch kafka message (scenes.instance.SystemStatus.kafkaInspectorLogic)'
            payload: {
                values?: {
                    topic: string
                    partition: number
                    offset: number
                }
            }
        }
        submitFetchKafkaMessage: () => {
            type: 'submit fetch kafka message (scenes.instance.SystemStatus.kafkaInspectorLogic)'
            payload: {
                value: boolean
            }
        }
        submitFetchKafkaMessageRequest: (fetchKafkaMessage: { topic: string; partition: number; offset: number }) => {
            type: 'submit fetch kafka message request (scenes.instance.SystemStatus.kafkaInspectorLogic)'
            payload: {
                fetchKafkaMessage: {
                    topic: string
                    partition: number
                    offset: number
                }
            }
        }
        submitFetchKafkaMessageSuccess: (fetchKafkaMessage: { topic: string; partition: number; offset: number }) => {
            type: 'submit fetch kafka message success (scenes.instance.SystemStatus.kafkaInspectorLogic)'
            payload: {
                fetchKafkaMessage: {
                    topic: string
                    partition: number
                    offset: number
                }
            }
        }
        submitFetchKafkaMessageFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit fetch kafka message failure (scenes.instance.SystemStatus.kafkaInspectorLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'fetch kafka message (scenes.instance.SystemStatus.kafkaInspectorLogic)': 'fetchKafkaMessage'
        'fetch kafka message success (scenes.instance.SystemStatus.kafkaInspectorLogic)': 'fetchKafkaMessageSuccess'
        'fetch kafka message failure (scenes.instance.SystemStatus.kafkaInspectorLogic)': 'fetchKafkaMessageFailure'
        'set fetch kafka message value (scenes.instance.SystemStatus.kafkaInspectorLogic)': 'setFetchKafkaMessageValue'
        'set fetch kafka message values (scenes.instance.SystemStatus.kafkaInspectorLogic)': 'setFetchKafkaMessageValues'
        'set fetch kafka message manual errors (scenes.instance.SystemStatus.kafkaInspectorLogic)': 'setFetchKafkaMessageManualErrors'
        'touch fetch kafka message field (scenes.instance.SystemStatus.kafkaInspectorLogic)': 'touchFetchKafkaMessageField'
        'reset fetch kafka message (scenes.instance.SystemStatus.kafkaInspectorLogic)': 'resetFetchKafkaMessage'
        'submit fetch kafka message (scenes.instance.SystemStatus.kafkaInspectorLogic)': 'submitFetchKafkaMessage'
        'submit fetch kafka message request (scenes.instance.SystemStatus.kafkaInspectorLogic)': 'submitFetchKafkaMessageRequest'
        'submit fetch kafka message success (scenes.instance.SystemStatus.kafkaInspectorLogic)': 'submitFetchKafkaMessageSuccess'
        'submit fetch kafka message failure (scenes.instance.SystemStatus.kafkaInspectorLogic)': 'submitFetchKafkaMessageFailure'
    }
    actionTypes: {
        fetchKafkaMessage: 'fetch kafka message (scenes.instance.SystemStatus.kafkaInspectorLogic)'
        fetchKafkaMessageSuccess: 'fetch kafka message success (scenes.instance.SystemStatus.kafkaInspectorLogic)'
        fetchKafkaMessageFailure: 'fetch kafka message failure (scenes.instance.SystemStatus.kafkaInspectorLogic)'
        setFetchKafkaMessageValue: 'set fetch kafka message value (scenes.instance.SystemStatus.kafkaInspectorLogic)'
        setFetchKafkaMessageValues: 'set fetch kafka message values (scenes.instance.SystemStatus.kafkaInspectorLogic)'
        setFetchKafkaMessageManualErrors: 'set fetch kafka message manual errors (scenes.instance.SystemStatus.kafkaInspectorLogic)'
        touchFetchKafkaMessageField: 'touch fetch kafka message field (scenes.instance.SystemStatus.kafkaInspectorLogic)'
        resetFetchKafkaMessage: 'reset fetch kafka message (scenes.instance.SystemStatus.kafkaInspectorLogic)'
        submitFetchKafkaMessage: 'submit fetch kafka message (scenes.instance.SystemStatus.kafkaInspectorLogic)'
        submitFetchKafkaMessageRequest: 'submit fetch kafka message request (scenes.instance.SystemStatus.kafkaInspectorLogic)'
        submitFetchKafkaMessageSuccess: 'submit fetch kafka message success (scenes.instance.SystemStatus.kafkaInspectorLogic)'
        submitFetchKafkaMessageFailure: 'submit fetch kafka message failure (scenes.instance.SystemStatus.kafkaInspectorLogic)'
    }
    actions: {
        fetchKafkaMessage: (topic: string, partition: number, offset: number) => void
        fetchKafkaMessageSuccess: (
            kafkaMessage: KafkaMessage | null,
            payload?: {
                topic: string
                partition: number
                offset: number
            }
        ) => void
        fetchKafkaMessageFailure: (error: string, errorObject?: any) => void
        setFetchKafkaMessageValue: (key: FieldName, value: any) => void
        setFetchKafkaMessageValues: (
            values: DeepPartial<{
                topic: string
                partition: number
                offset: number
            }>
        ) => void
        setFetchKafkaMessageManualErrors: (errors: Record<string, any>) => void
        touchFetchKafkaMessageField: (key: string) => void
        resetFetchKafkaMessage: (values?: { topic: string; partition: number; offset: number }) => void
        submitFetchKafkaMessage: () => void
        submitFetchKafkaMessageRequest: (fetchKafkaMessage: {
            topic: string
            partition: number
            offset: number
        }) => void
        submitFetchKafkaMessageSuccess: (fetchKafkaMessage: {
            topic: string
            partition: number
            offset: number
        }) => void
        submitFetchKafkaMessageFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        fetchKafkaMessage: (topic: string, partition: number, offset: number) => Promise<any>
        fetchKafkaMessageSuccess: (
            kafkaMessage: KafkaMessage | null,
            payload?: {
                topic: string
                partition: number
                offset: number
            }
        ) => Promise<any>
        fetchKafkaMessageFailure: (error: string, errorObject?: any) => Promise<any>
        setFetchKafkaMessageValue: (key: FieldName, value: any) => Promise<any>
        setFetchKafkaMessageValues: (
            values: DeepPartial<{
                topic: string
                partition: number
                offset: number
            }>
        ) => Promise<any>
        setFetchKafkaMessageManualErrors: (errors: Record<string, any>) => Promise<any>
        touchFetchKafkaMessageField: (key: string) => Promise<any>
        resetFetchKafkaMessage: (values?: { topic: string; partition: number; offset: number }) => Promise<any>
        submitFetchKafkaMessage: () => Promise<any>
        submitFetchKafkaMessageRequest: (fetchKafkaMessage: {
            topic: string
            partition: number
            offset: number
        }) => Promise<any>
        submitFetchKafkaMessageSuccess: (fetchKafkaMessage: {
            topic: string
            partition: number
            offset: number
        }) => Promise<any>
        submitFetchKafkaMessageFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        kafkaMessage: KafkaMessage | null
        kafkaMessageLoading: boolean
        fetchKafkaMessage: {
            topic: string
            partition: number
            offset: number
        }
        isFetchKafkaMessageSubmitting: boolean
        showFetchKafkaMessageErrors: boolean
        fetchKafkaMessageChanged: boolean
        fetchKafkaMessageTouches: Record<string, boolean>
        fetchKafkaMessageManualErrors: Record<string, any>
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'instance', 'SystemStatus', 'kafkaInspectorLogic']
    pathString: 'scenes.instance.SystemStatus.kafkaInspectorLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        kafkaMessage: KafkaMessage | null
        kafkaMessageLoading: boolean
        fetchKafkaMessage: {
            topic: string
            partition: number
            offset: number
        }
        isFetchKafkaMessageSubmitting: boolean
        showFetchKafkaMessageErrors: boolean
        fetchKafkaMessageChanged: boolean
        fetchKafkaMessageTouches: Record<string, boolean>
        fetchKafkaMessageManualErrors: Record<string, any>
    }
    reducers: {
        kafkaMessage: (state: KafkaMessage | null, action: any, fullState: any) => KafkaMessage | null
        kafkaMessageLoading: (state: boolean, action: any, fullState: any) => boolean
        fetchKafkaMessage: (
            state: {
                topic: string
                partition: number
                offset: number
            },
            action: any,
            fullState: any
        ) => {
            topic: string
            partition: number
            offset: number
        }
        isFetchKafkaMessageSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showFetchKafkaMessageErrors: (state: boolean, action: any, fullState: any) => boolean
        fetchKafkaMessageChanged: (state: boolean, action: any, fullState: any) => boolean
        fetchKafkaMessageTouches: (
            state: Record<string, boolean>,
            action: any,
            fullState: any
        ) => Record<string, boolean>
        fetchKafkaMessageManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        kafkaMessage: KafkaMessage | null
        kafkaMessageLoading: boolean
        fetchKafkaMessage: {
            topic: string
            partition: number
            offset: number
        }
        isFetchKafkaMessageSubmitting: boolean
        showFetchKafkaMessageErrors: boolean
        fetchKafkaMessageChanged: boolean
        fetchKafkaMessageTouches: Record<string, boolean>
        fetchKafkaMessageManualErrors: Record<string, any>
    }
    selectors: {
        kafkaMessage: (state: any, props?: any) => KafkaMessage | null
        kafkaMessageLoading: (state: any, props?: any) => boolean
        fetchKafkaMessage: (
            state: any,
            props?: any
        ) => {
            topic: string
            partition: number
            offset: number
        }
        isFetchKafkaMessageSubmitting: (state: any, props?: any) => boolean
        showFetchKafkaMessageErrors: (state: any, props?: any) => boolean
        fetchKafkaMessageChanged: (state: any, props?: any) => boolean
        fetchKafkaMessageTouches: (state: any, props?: any) => Record<string, boolean>
        fetchKafkaMessageManualErrors: (state: any, props?: any) => Record<string, any>
        fetchKafkaMessageTouched: (state: any, props?: any) => boolean
        fetchKafkaMessageValidationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<
            {
                topic: string
                partition: number
                offset: number
            },
            ValidationErrorType
        >
        fetchKafkaMessageAllErrors: (state: any, props?: any) => Record<string, any>
        fetchKafkaMessageHasErrors: (state: any, props?: any) => boolean
        fetchKafkaMessageErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<
            {
                topic: string
                partition: number
                offset: number
            },
            ValidationErrorType
        >
        isFetchKafkaMessageValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        kafkaMessage: KafkaMessage | null
        kafkaMessageLoading: boolean
        fetchKafkaMessage: {
            topic: string
            partition: number
            offset: number
        }
        isFetchKafkaMessageSubmitting: boolean
        showFetchKafkaMessageErrors: boolean
        fetchKafkaMessageChanged: boolean
        fetchKafkaMessageTouches: Record<string, boolean>
        fetchKafkaMessageManualErrors: Record<string, any>
        fetchKafkaMessageTouched: boolean
        fetchKafkaMessageValidationErrors: DeepPartialMap<
            {
                topic: string
                partition: number
                offset: number
            },
            ValidationErrorType
        >
        fetchKafkaMessageAllErrors: Record<string, any>
        fetchKafkaMessageHasErrors: boolean
        fetchKafkaMessageErrors: DeepPartialMap<
            {
                topic: string
                partition: number
                offset: number
            },
            ValidationErrorType
        >
        isFetchKafkaMessageValid: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
