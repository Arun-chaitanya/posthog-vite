// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:25 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { UserType } from '../../../types'

export interface staffUsersLogicType extends Logic {
    actionCreators: {
        loadUser: (resetOnFailure?: boolean) => {
            type: 'load user (scenes.instance.SystemStatus.staffUsersLogic)'
            payload: {
                resetOnFailure: boolean | undefined
            }
        }
        setStaffUsersToBeAdded: (userUuids: string[]) => {
            type: 'set staff users to be added (scenes.instance.SystemStatus.staffUsersLogic)'
            payload: {
                userUuids: string[]
            }
        }
        addStaffUsers: () => {
            type: 'add staff users (scenes.instance.SystemStatus.staffUsersLogic)'
            payload: {
                value: true
            }
        }
        deleteStaffUser: (userUuid: string) => {
            type: 'delete staff user (scenes.instance.SystemStatus.staffUsersLogic)'
            payload: {
                userUuid: string
            }
        }
        loadAllUsers: () => {
            type: 'load all users (scenes.instance.SystemStatus.staffUsersLogic)'
            payload: any
        }
        loadAllUsersSuccess: (
            allUsers: UserType[],
            payload?: any
        ) => {
            type: 'load all users success (scenes.instance.SystemStatus.staffUsersLogic)'
            payload: {
                allUsers: UserType[]
                payload?: any
            }
        }
        loadAllUsersFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load all users failure (scenes.instance.SystemStatus.staffUsersLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        addStaffUsersSuccess: (
            allUsers: UserType[],
            payload?: {
                value: true
            }
        ) => {
            type: 'add staff users success (scenes.instance.SystemStatus.staffUsersLogic)'
            payload: {
                allUsers: UserType[]
                payload?: {
                    value: true
                }
            }
        }
        addStaffUsersFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'add staff users failure (scenes.instance.SystemStatus.staffUsersLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deleteStaffUserSuccess: (
            allUsers: UserType[],
            payload?: {
                userUuid: string
            }
        ) => {
            type: 'delete staff user success (scenes.instance.SystemStatus.staffUsersLogic)'
            payload: {
                allUsers: UserType[]
                payload?: {
                    userUuid: string
                }
            }
        }
        deleteStaffUserFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete staff user failure (scenes.instance.SystemStatus.staffUsersLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load user (scenes.instance.SystemStatus.staffUsersLogic)': 'loadUser'
        'set staff users to be added (scenes.instance.SystemStatus.staffUsersLogic)': 'setStaffUsersToBeAdded'
        'add staff users (scenes.instance.SystemStatus.staffUsersLogic)': 'addStaffUsers'
        'delete staff user (scenes.instance.SystemStatus.staffUsersLogic)': 'deleteStaffUser'
        'load all users (scenes.instance.SystemStatus.staffUsersLogic)': 'loadAllUsers'
        'load all users success (scenes.instance.SystemStatus.staffUsersLogic)': 'loadAllUsersSuccess'
        'load all users failure (scenes.instance.SystemStatus.staffUsersLogic)': 'loadAllUsersFailure'
        'add staff users success (scenes.instance.SystemStatus.staffUsersLogic)': 'addStaffUsersSuccess'
        'add staff users failure (scenes.instance.SystemStatus.staffUsersLogic)': 'addStaffUsersFailure'
        'delete staff user success (scenes.instance.SystemStatus.staffUsersLogic)': 'deleteStaffUserSuccess'
        'delete staff user failure (scenes.instance.SystemStatus.staffUsersLogic)': 'deleteStaffUserFailure'
    }
    actionTypes: {
        loadUser: 'load user (scenes.instance.SystemStatus.staffUsersLogic)'
        setStaffUsersToBeAdded: 'set staff users to be added (scenes.instance.SystemStatus.staffUsersLogic)'
        addStaffUsers: 'add staff users (scenes.instance.SystemStatus.staffUsersLogic)'
        deleteStaffUser: 'delete staff user (scenes.instance.SystemStatus.staffUsersLogic)'
        loadAllUsers: 'load all users (scenes.instance.SystemStatus.staffUsersLogic)'
        loadAllUsersSuccess: 'load all users success (scenes.instance.SystemStatus.staffUsersLogic)'
        loadAllUsersFailure: 'load all users failure (scenes.instance.SystemStatus.staffUsersLogic)'
        addStaffUsersSuccess: 'add staff users success (scenes.instance.SystemStatus.staffUsersLogic)'
        addStaffUsersFailure: 'add staff users failure (scenes.instance.SystemStatus.staffUsersLogic)'
        deleteStaffUserSuccess: 'delete staff user success (scenes.instance.SystemStatus.staffUsersLogic)'
        deleteStaffUserFailure: 'delete staff user failure (scenes.instance.SystemStatus.staffUsersLogic)'
    }
    actions: {
        loadUser: (resetOnFailure?: boolean) => void
        setStaffUsersToBeAdded: (userUuids: string[]) => void
        addStaffUsers: () => void
        deleteStaffUser: (userUuid: string) => void
        loadAllUsers: () => void
        loadAllUsersSuccess: (allUsers: UserType[], payload?: any) => void
        loadAllUsersFailure: (error: string, errorObject?: any) => void
        addStaffUsersSuccess: (
            allUsers: UserType[],
            payload?: {
                value: true
            }
        ) => void
        addStaffUsersFailure: (error: string, errorObject?: any) => void
        deleteStaffUserSuccess: (
            allUsers: UserType[],
            payload?: {
                userUuid: string
            }
        ) => void
        deleteStaffUserFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadUser: (resetOnFailure?: boolean) => Promise<any>
        setStaffUsersToBeAdded: (userUuids: string[]) => Promise<any>
        addStaffUsers: () => Promise<any>
        deleteStaffUser: (userUuid: string) => Promise<any>
        loadAllUsers: () => Promise<any>
        loadAllUsersSuccess: (allUsers: UserType[], payload?: any) => Promise<any>
        loadAllUsersFailure: (error: string, errorObject?: any) => Promise<any>
        addStaffUsersSuccess: (
            allUsers: UserType[],
            payload?: {
                value: true
            }
        ) => Promise<any>
        addStaffUsersFailure: (error: string, errorObject?: any) => Promise<any>
        deleteStaffUserSuccess: (
            allUsers: UserType[],
            payload?: {
                userUuid: string
            }
        ) => Promise<any>
        deleteStaffUserFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        staffUsersToBeAdded: string[]
        allUsers: UserType[]
        allUsersLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {}
    path: ['scenes', 'instance', 'SystemStatus', 'staffUsersLogic']
    pathString: 'scenes.instance.SystemStatus.staffUsersLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        staffUsersToBeAdded: string[]
        allUsers: UserType[]
        allUsersLoading: boolean
    }
    reducers: {
        staffUsersToBeAdded: (state: string[], action: any, fullState: any) => string[]
        allUsers: (state: UserType[], action: any, fullState: any) => UserType[]
        allUsersLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        staffUsersToBeAdded: string[]
        allUsers: UserType[]
        allUsersLoading: boolean
    }
    selectors: {
        staffUsersToBeAdded: (state: any, props?: any) => string[]
        allUsers: (state: any, props?: any) => UserType[]
        allUsersLoading: (state: any, props?: any) => boolean
        user: (state: any, props?: any) => UserType | null
        staffUsers: (state: any, props?: any) => UserType[]
        nonStaffUsers: (state: any, props?: any) => UserType[]
    }
    sharedListeners: {}
    values: {
        staffUsersToBeAdded: string[]
        allUsers: UserType[]
        allUsersLoading: boolean
        user: UserType | null
        staffUsers: UserType[]
        nonStaffUsers: UserType[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        staffUsers: (allUsers: UserType[]) => UserType[]
        nonStaffUsers: (allUsers: UserType[]) => UserType[]
    }
}
