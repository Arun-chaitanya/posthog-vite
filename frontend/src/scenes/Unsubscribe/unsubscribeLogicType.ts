// Generated by kea-typegen on Thu, 20 Jul 2023 10:57:18 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

export interface unsubscribeLogicType extends Logic {
    actionCreators: {
        attemptUnsubscribe: (token: string) => {
            type: 'attempt unsubscribe (scenes.Unsubscribe.unsubscribeLogic)'
            payload: {
                token: string
            }
        }
        attemptUnsubscribeSuccess: (
            unsubscription: boolean,
            payload?: {
                token: string
            }
        ) => {
            type: 'attempt unsubscribe success (scenes.Unsubscribe.unsubscribeLogic)'
            payload: {
                unsubscription: boolean
                payload?: {
                    token: string
                }
            }
        }
        attemptUnsubscribeFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'attempt unsubscribe failure (scenes.Unsubscribe.unsubscribeLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'attempt unsubscribe (scenes.Unsubscribe.unsubscribeLogic)': 'attemptUnsubscribe'
        'attempt unsubscribe success (scenes.Unsubscribe.unsubscribeLogic)': 'attemptUnsubscribeSuccess'
        'attempt unsubscribe failure (scenes.Unsubscribe.unsubscribeLogic)': 'attemptUnsubscribeFailure'
    }
    actionTypes: {
        attemptUnsubscribe: 'attempt unsubscribe (scenes.Unsubscribe.unsubscribeLogic)'
        attemptUnsubscribeSuccess: 'attempt unsubscribe success (scenes.Unsubscribe.unsubscribeLogic)'
        attemptUnsubscribeFailure: 'attempt unsubscribe failure (scenes.Unsubscribe.unsubscribeLogic)'
    }
    actions: {
        attemptUnsubscribe: (token: string) => void
        attemptUnsubscribeSuccess: (
            unsubscription: boolean,
            payload?: {
                token: string
            }
        ) => void
        attemptUnsubscribeFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        attemptUnsubscribe: (token: string) => Promise<any>
        attemptUnsubscribeSuccess: (
            unsubscription: boolean,
            payload?: {
                token: string
            }
        ) => Promise<any>
        attemptUnsubscribeFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        unsubscription: boolean
        unsubscriptionLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'Unsubscribe', 'unsubscribeLogic']
    pathString: 'scenes.Unsubscribe.unsubscribeLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        unsubscription: boolean
        unsubscriptionLoading: boolean
    }
    reducers: {
        unsubscription: (state: boolean, action: any, fullState: any) => boolean
        unsubscriptionLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        unsubscription: boolean
        unsubscriptionLoading: boolean
    }
    selectors: {
        unsubscription: (state: any, props?: any) => boolean
        unsubscriptionLoading: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        unsubscription: boolean
        unsubscriptionLoading: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
