// Generated by kea-typegen on Thu, 20 Jul 2023 11:23:37 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AnnotationType, InsightModel, RawAnnotationType, UserType } from '../../types'
import type { FeatureFlagsSet } from '../../lib/logic/featureFlagLogic'
import type { Dayjs } from '../../lib/dayjs'
import type { AnnotationModalForm } from './annotationModalLogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../node_modules/kea-forms'

export interface annotationModalLogicType extends Logic {
    actionCreators: {
        deleteAnnotation: (annotation: AnnotationType) => {
            type: 'delete annotation (scenes.annotations.annotationModalLogic)'
            payload: {
                annotation: AnnotationType
            }
        }
        loadAnnotationsNext: () => {
            type: 'load annotations next (scenes.annotations.annotationModalLogic)'
            payload: boolean
        }
        appendAnnotations: (annotations: RawAnnotationType[]) => {
            type: 'append annotations (scenes.annotations.annotationModalLogic)'
            payload: {
                annotations: RawAnnotationType[]
            }
        }
        replaceAnnotation: (annotation: RawAnnotationType) => {
            type: 'replace annotation (scenes.annotations.annotationModalLogic)'
            payload: {
                annotation: RawAnnotationType
            }
        }
        loadAnnotationsSuccess: (
            rawAnnotations: RawAnnotationType[],
            payload?: any
        ) => {
            type: 'load annotations success (scenes.annotations.annotationModalLogic)'
            payload: {
                rawAnnotations: RawAnnotationType[]
                payload?: any
            }
        }
        openModalToCreateAnnotation: (
            initialDate?: Dayjs | null,
            insightId?: InsightModel['id'] | null
        ) => {
            type: 'open modal to create annotation (scenes.annotations.annotationModalLogic)'
            payload: {
                initialDate: Dayjs | null | undefined
                insightId: number | null | undefined
            }
        }
        openModalToEditAnnotation: (
            annotation: AnnotationType,
            insightId?: InsightModel['id'] | null
        ) => {
            type: 'open modal to edit annotation (scenes.annotations.annotationModalLogic)'
            payload: {
                annotation: AnnotationType
                insightId: number | null | undefined
            }
        }
        closeModal: () => {
            type: 'close modal (scenes.annotations.annotationModalLogic)'
            payload: {
                value: true
            }
        }
        setAnnotationModalValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set annotation modal value (scenes.annotations.annotationModalLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setAnnotationModalValues: (values: DeepPartial<AnnotationModalForm>) => {
            type: 'set annotation modal values (scenes.annotations.annotationModalLogic)'
            payload: {
                values: DeepPartial<AnnotationModalForm>
            }
        }
        setAnnotationModalManualErrors: (errors: Record<string, any>) => {
            type: 'set annotation modal manual errors (scenes.annotations.annotationModalLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchAnnotationModalField: (key: string) => {
            type: 'touch annotation modal field (scenes.annotations.annotationModalLogic)'
            payload: {
                key: string
            }
        }
        resetAnnotationModal: (values?: AnnotationModalForm) => {
            type: 'reset annotation modal (scenes.annotations.annotationModalLogic)'
            payload: {
                values?: AnnotationModalForm
            }
        }
        submitAnnotationModal: () => {
            type: 'submit annotation modal (scenes.annotations.annotationModalLogic)'
            payload: {
                value: boolean
            }
        }
        submitAnnotationModalRequest: (annotationModal: AnnotationModalForm) => {
            type: 'submit annotation modal request (scenes.annotations.annotationModalLogic)'
            payload: {
                annotationModal: AnnotationModalForm
            }
        }
        submitAnnotationModalSuccess: (annotationModal: AnnotationModalForm) => {
            type: 'submit annotation modal success (scenes.annotations.annotationModalLogic)'
            payload: {
                annotationModal: AnnotationModalForm
            }
        }
        submitAnnotationModalFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit annotation modal failure (scenes.annotations.annotationModalLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'delete annotation (scenes.annotations.annotationModalLogic)': 'deleteAnnotation'
        'load annotations next (scenes.annotations.annotationModalLogic)': 'loadAnnotationsNext'
        'append annotations (scenes.annotations.annotationModalLogic)': 'appendAnnotations'
        'replace annotation (scenes.annotations.annotationModalLogic)': 'replaceAnnotation'
        'load annotations success (scenes.annotations.annotationModalLogic)': 'loadAnnotationsSuccess'
        'open modal to create annotation (scenes.annotations.annotationModalLogic)': 'openModalToCreateAnnotation'
        'open modal to edit annotation (scenes.annotations.annotationModalLogic)': 'openModalToEditAnnotation'
        'close modal (scenes.annotations.annotationModalLogic)': 'closeModal'
        'set annotation modal value (scenes.annotations.annotationModalLogic)': 'setAnnotationModalValue'
        'set annotation modal values (scenes.annotations.annotationModalLogic)': 'setAnnotationModalValues'
        'set annotation modal manual errors (scenes.annotations.annotationModalLogic)': 'setAnnotationModalManualErrors'
        'touch annotation modal field (scenes.annotations.annotationModalLogic)': 'touchAnnotationModalField'
        'reset annotation modal (scenes.annotations.annotationModalLogic)': 'resetAnnotationModal'
        'submit annotation modal (scenes.annotations.annotationModalLogic)': 'submitAnnotationModal'
        'submit annotation modal request (scenes.annotations.annotationModalLogic)': 'submitAnnotationModalRequest'
        'submit annotation modal success (scenes.annotations.annotationModalLogic)': 'submitAnnotationModalSuccess'
        'submit annotation modal failure (scenes.annotations.annotationModalLogic)': 'submitAnnotationModalFailure'
    }
    actionTypes: {
        deleteAnnotation: 'delete annotation (scenes.annotations.annotationModalLogic)'
        loadAnnotationsNext: 'load annotations next (scenes.annotations.annotationModalLogic)'
        appendAnnotations: 'append annotations (scenes.annotations.annotationModalLogic)'
        replaceAnnotation: 'replace annotation (scenes.annotations.annotationModalLogic)'
        loadAnnotationsSuccess: 'load annotations success (scenes.annotations.annotationModalLogic)'
        openModalToCreateAnnotation: 'open modal to create annotation (scenes.annotations.annotationModalLogic)'
        openModalToEditAnnotation: 'open modal to edit annotation (scenes.annotations.annotationModalLogic)'
        closeModal: 'close modal (scenes.annotations.annotationModalLogic)'
        setAnnotationModalValue: 'set annotation modal value (scenes.annotations.annotationModalLogic)'
        setAnnotationModalValues: 'set annotation modal values (scenes.annotations.annotationModalLogic)'
        setAnnotationModalManualErrors: 'set annotation modal manual errors (scenes.annotations.annotationModalLogic)'
        touchAnnotationModalField: 'touch annotation modal field (scenes.annotations.annotationModalLogic)'
        resetAnnotationModal: 'reset annotation modal (scenes.annotations.annotationModalLogic)'
        submitAnnotationModal: 'submit annotation modal (scenes.annotations.annotationModalLogic)'
        submitAnnotationModalRequest: 'submit annotation modal request (scenes.annotations.annotationModalLogic)'
        submitAnnotationModalSuccess: 'submit annotation modal success (scenes.annotations.annotationModalLogic)'
        submitAnnotationModalFailure: 'submit annotation modal failure (scenes.annotations.annotationModalLogic)'
    }
    actions: {
        deleteAnnotation: (annotation: AnnotationType) => void
        loadAnnotationsNext: () => void
        appendAnnotations: (annotations: RawAnnotationType[]) => void
        replaceAnnotation: (annotation: RawAnnotationType) => void
        loadAnnotationsSuccess: (rawAnnotations: RawAnnotationType[], payload?: any) => void
        openModalToCreateAnnotation: (initialDate?: Dayjs | null, insightId?: InsightModel['id'] | null) => void
        openModalToEditAnnotation: (annotation: AnnotationType, insightId?: InsightModel['id'] | null) => void
        closeModal: () => void
        setAnnotationModalValue: (key: FieldName, value: any) => void
        setAnnotationModalValues: (values: DeepPartial<AnnotationModalForm>) => void
        setAnnotationModalManualErrors: (errors: Record<string, any>) => void
        touchAnnotationModalField: (key: string) => void
        resetAnnotationModal: (values?: AnnotationModalForm) => void
        submitAnnotationModal: () => void
        submitAnnotationModalRequest: (annotationModal: AnnotationModalForm) => void
        submitAnnotationModalSuccess: (annotationModal: AnnotationModalForm) => void
        submitAnnotationModalFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        deleteAnnotation: (annotation: AnnotationType) => Promise<any>
        loadAnnotationsNext: () => Promise<any>
        appendAnnotations: (annotations: RawAnnotationType[]) => Promise<any>
        replaceAnnotation: (annotation: RawAnnotationType) => Promise<any>
        loadAnnotationsSuccess: (rawAnnotations: RawAnnotationType[], payload?: any) => Promise<any>
        openModalToCreateAnnotation: (initialDate?: Dayjs | null, insightId?: InsightModel['id'] | null) => Promise<any>
        openModalToEditAnnotation: (annotation: AnnotationType, insightId?: InsightModel['id'] | null) => Promise<any>
        closeModal: () => Promise<any>
        setAnnotationModalValue: (key: FieldName, value: any) => Promise<any>
        setAnnotationModalValues: (values: DeepPartial<AnnotationModalForm>) => Promise<any>
        setAnnotationModalManualErrors: (errors: Record<string, any>) => Promise<any>
        touchAnnotationModalField: (key: string) => Promise<any>
        resetAnnotationModal: (values?: AnnotationModalForm) => Promise<any>
        submitAnnotationModal: () => Promise<any>
        submitAnnotationModalRequest: (annotationModal: AnnotationModalForm) => Promise<any>
        submitAnnotationModalSuccess: (annotationModal: AnnotationModalForm) => Promise<any>
        submitAnnotationModalFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        isModalOpen: boolean
        existingModalAnnotation: AnnotationType | null
        onSavedInsight: boolean
        annotationModal: AnnotationModalForm
        isAnnotationModalSubmitting: boolean
        showAnnotationModalErrors: boolean
        annotationModalChanged: boolean
        annotationModalTouches: Record<string, boolean>
        annotationModalManualErrors: Record<string, any>
    }
    events: {}
    key: undefined
    listeners: {
        openModalToEditAnnotation: ((
            action: {
                type: 'open modal to edit annotation (scenes.annotations.annotationModalLogic)'
                payload: {
                    annotation: AnnotationType
                    insightId: number | null | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        openModalToCreateAnnotation: ((
            action: {
                type: 'open modal to create annotation (scenes.annotations.annotationModalLogic)'
                payload: {
                    initialDate: Dayjs | null | undefined
                    insightId: number | null | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadAnnotationsSuccess: ((
            action: {
                type: 'load annotations success (scenes.annotations.annotationModalLogic)'
                payload: {
                    rawAnnotations: RawAnnotationType[]
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'annotations', 'annotationModalLogic']
    pathString: 'scenes.annotations.annotationModalLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        isModalOpen: boolean
        existingModalAnnotation: AnnotationType | null
        onSavedInsight: boolean
        annotationModal: AnnotationModalForm
        isAnnotationModalSubmitting: boolean
        showAnnotationModalErrors: boolean
        annotationModalChanged: boolean
        annotationModalTouches: Record<string, boolean>
        annotationModalManualErrors: Record<string, any>
    }
    reducers: {
        isModalOpen: (state: boolean, action: any, fullState: any) => boolean
        existingModalAnnotation: (state: AnnotationType | null, action: any, fullState: any) => AnnotationType | null
        onSavedInsight: (state: boolean, action: any, fullState: any) => boolean
        annotationModal: (state: AnnotationModalForm, action: any, fullState: any) => AnnotationModalForm
        isAnnotationModalSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showAnnotationModalErrors: (state: boolean, action: any, fullState: any) => boolean
        annotationModalChanged: (state: boolean, action: any, fullState: any) => boolean
        annotationModalTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        annotationModalManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        isModalOpen: boolean
        existingModalAnnotation: AnnotationType | null
        onSavedInsight: boolean
        annotationModal: AnnotationModalForm
        isAnnotationModalSubmitting: boolean
        showAnnotationModalErrors: boolean
        annotationModalChanged: boolean
        annotationModalTouches: Record<string, boolean>
        annotationModalManualErrors: Record<string, any>
    }
    selectors: {
        isModalOpen: (state: any, props?: any) => boolean
        existingModalAnnotation: (state: any, props?: any) => AnnotationType | null
        onSavedInsight: (state: any, props?: any) => boolean
        annotationModal: (state: any, props?: any) => AnnotationModalForm
        isAnnotationModalSubmitting: (state: any, props?: any) => boolean
        showAnnotationModalErrors: (state: any, props?: any) => boolean
        annotationModalChanged: (state: any, props?: any) => boolean
        annotationModalTouches: (state: any, props?: any) => Record<string, boolean>
        annotationModalManualErrors: (state: any, props?: any) => Record<string, any>
        next: (state: any, props?: any) => string | null
        loadingNext: (state: any, props?: any) => boolean
        annotations: (state: any, props?: any) => AnnotationType[]
        annotationsLoading: (state: any, props?: any) => boolean
        timezone: (state: any, props?: any) => string
        user: (state: any, props?: any) => UserType | null
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
        shouldShowEmptyState: (state: any, props?: any) => boolean
        shouldShowProductIntroduction: (state: any, props?: any) => boolean
        annotationModalTouched: (state: any, props?: any) => boolean
        annotationModalValidationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<AnnotationModalForm, ValidationErrorType>
        annotationModalAllErrors: (state: any, props?: any) => Record<string, any>
        annotationModalHasErrors: (state: any, props?: any) => boolean
        annotationModalErrors: (state: any, props?: any) => DeepPartialMap<AnnotationModalForm, ValidationErrorType>
        isAnnotationModalValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        isModalOpen: boolean
        existingModalAnnotation: AnnotationType | null
        onSavedInsight: boolean
        annotationModal: AnnotationModalForm
        isAnnotationModalSubmitting: boolean
        showAnnotationModalErrors: boolean
        annotationModalChanged: boolean
        annotationModalTouches: Record<string, boolean>
        annotationModalManualErrors: Record<string, any>
        next: string | null
        loadingNext: boolean
        annotations: AnnotationType[]
        annotationsLoading: boolean
        timezone: string
        user: UserType | null
        featureFlags: FeatureFlagsSet
        shouldShowEmptyState: boolean
        shouldShowProductIntroduction: boolean
        annotationModalTouched: boolean
        annotationModalValidationErrors: DeepPartialMap<AnnotationModalForm, ValidationErrorType>
        annotationModalAllErrors: Record<string, any>
        annotationModalHasErrors: boolean
        annotationModalErrors: DeepPartialMap<AnnotationModalForm, ValidationErrorType>
        isAnnotationModalValid: boolean
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        shouldShowEmptyState: (annotations: AnnotationType[], annotationsLoading: boolean) => boolean
        shouldShowProductIntroduction: (
            user:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').UserType
                | null,
            featureFlags: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/lib/logic/featureFlagLogic').FeatureFlagsSet
        ) => boolean
    }
}
