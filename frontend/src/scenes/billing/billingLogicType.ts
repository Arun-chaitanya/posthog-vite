// Generated by kea-typegen on Sun, 06 Aug 2023 09:52:33 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { BillingAlertConfig } from './billingLogic'
import type { FeatureFlagsSet } from '../../lib/logic/featureFlagLogic'
import type { BillingProductV2Type, BillingV2Type, PreflightStatus } from '../../types'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../node_modules/kea-forms'

export interface billingLogicType extends Logic {
    actionCreators: {
        setShowLicenseDirectInput: (show: boolean) => {
            type: 'set show license direct input (scenes.billing.billingLogic)'
            payload: {
                show: boolean
            }
        }
        reportBillingAlertShown: (alertConfig: BillingAlertConfig) => {
            type: 'report billing alert shown (scenes.billing.billingLogic)'
            payload: {
                alertConfig: BillingAlertConfig
            }
        }
        reportBillingV2Shown: () => {
            type: 'report billing v2 shown (scenes.billing.billingLogic)'
            payload: {
                value: true
            }
        }
        registerInstrumentationProps: () => {
            type: 'register instrumentation props (scenes.billing.billingLogic)'
            payload: {
                value: true
            }
        }
        setRedirectPath: () => {
            type: 'set redirect path (scenes.billing.billingLogic)'
            payload: {
                value: true
            }
        }
        setIsOnboarding: () => {
            type: 'set is onboarding (scenes.billing.billingLogic)'
            payload: {
                value: true
            }
        }
        loadUser: (resetOnFailure?: boolean) => {
            type: 'load user (scenes.billing.billingLogic)'
            payload: {
                resetOnFailure: boolean | undefined
            }
        }
        reportProductUnsubscribed: (product: string) => {
            type: 'report product unsubscribed (scenes.billing.billingLogic)'
            payload: {
                product: string
            }
        }
        loadBilling: () => {
            type: 'load billing (scenes.billing.billingLogic)'
            payload: any
        }
        loadBillingSuccess: (
            billing: BillingV2Type,
            payload?: any
        ) => {
            type: 'load billing success (scenes.billing.billingLogic)'
            payload: {
                billing: BillingV2Type
                payload?: any
            }
        }
        loadBillingFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load billing failure (scenes.billing.billingLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateBillingLimits: (limits: { [key: string]: string | null }) => {
            type: 'update billing limits (scenes.billing.billingLogic)'
            payload: {
                [key: string]: string | null
            }
        }
        updateBillingLimitsSuccess: (
            billing: BillingV2Type,
            payload?: {
                [key: string]: string | null
            }
        ) => {
            type: 'update billing limits success (scenes.billing.billingLogic)'
            payload: {
                billing: BillingV2Type
                payload?: {
                    [key: string]: string | null
                }
            }
        }
        updateBillingLimitsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update billing limits failure (scenes.billing.billingLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deactivateProduct: (key: string) => {
            type: 'deactivate product (scenes.billing.billingLogic)'
            payload: string
        }
        deactivateProductSuccess: (
            billing: BillingV2Type,
            payload?: string
        ) => {
            type: 'deactivate product success (scenes.billing.billingLogic)'
            payload: {
                billing: BillingV2Type
                payload?: string
            }
        }
        deactivateProductFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'deactivate product failure (scenes.billing.billingLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadProducts: () => {
            type: 'load products (scenes.billing.billingLogic)'
            payload: any
        }
        loadProductsSuccess: (
            products: BillingProductV2Type[],
            payload?: any
        ) => {
            type: 'load products success (scenes.billing.billingLogic)'
            payload: {
                products: BillingProductV2Type[]
                payload?: any
            }
        }
        loadProductsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load products failure (scenes.billing.billingLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setActivateLicenseValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set activate license value (scenes.billing.billingLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setActivateLicenseValues: (
            values: DeepPartial<{
                license: string
            }>
        ) => {
            type: 'set activate license values (scenes.billing.billingLogic)'
            payload: {
                values: DeepPartial<{
                    license: string
                }>
            }
        }
        setActivateLicenseManualErrors: (errors: Record<string, any>) => {
            type: 'set activate license manual errors (scenes.billing.billingLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchActivateLicenseField: (key: string) => {
            type: 'touch activate license field (scenes.billing.billingLogic)'
            payload: {
                key: string
            }
        }
        resetActivateLicense: (values?: { license: string }) => {
            type: 'reset activate license (scenes.billing.billingLogic)'
            payload: {
                values?: {
                    license: string
                }
            }
        }
        submitActivateLicense: () => {
            type: 'submit activate license (scenes.billing.billingLogic)'
            payload: {
                value: boolean
            }
        }
        submitActivateLicenseRequest: (activateLicense: { license: string }) => {
            type: 'submit activate license request (scenes.billing.billingLogic)'
            payload: {
                activateLicense: {
                    license: string
                }
            }
        }
        submitActivateLicenseSuccess: (activateLicense: { license: string }) => {
            type: 'submit activate license success (scenes.billing.billingLogic)'
            payload: {
                activateLicense: {
                    license: string
                }
            }
        }
        submitActivateLicenseFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit activate license failure (scenes.billing.billingLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'set show license direct input (scenes.billing.billingLogic)': 'setShowLicenseDirectInput'
        'report billing alert shown (scenes.billing.billingLogic)': 'reportBillingAlertShown'
        'report billing v2 shown (scenes.billing.billingLogic)': 'reportBillingV2Shown'
        'register instrumentation props (scenes.billing.billingLogic)': 'registerInstrumentationProps'
        'set redirect path (scenes.billing.billingLogic)': 'setRedirectPath'
        'set is onboarding (scenes.billing.billingLogic)': 'setIsOnboarding'
        'load user (scenes.billing.billingLogic)': 'loadUser'
        'report product unsubscribed (scenes.billing.billingLogic)': 'reportProductUnsubscribed'
        'load billing (scenes.billing.billingLogic)': 'loadBilling'
        'load billing success (scenes.billing.billingLogic)': 'loadBillingSuccess'
        'load billing failure (scenes.billing.billingLogic)': 'loadBillingFailure'
        'update billing limits (scenes.billing.billingLogic)': 'updateBillingLimits'
        'update billing limits success (scenes.billing.billingLogic)': 'updateBillingLimitsSuccess'
        'update billing limits failure (scenes.billing.billingLogic)': 'updateBillingLimitsFailure'
        'deactivate product (scenes.billing.billingLogic)': 'deactivateProduct'
        'deactivate product success (scenes.billing.billingLogic)': 'deactivateProductSuccess'
        'deactivate product failure (scenes.billing.billingLogic)': 'deactivateProductFailure'
        'load products (scenes.billing.billingLogic)': 'loadProducts'
        'load products success (scenes.billing.billingLogic)': 'loadProductsSuccess'
        'load products failure (scenes.billing.billingLogic)': 'loadProductsFailure'
        'set activate license value (scenes.billing.billingLogic)': 'setActivateLicenseValue'
        'set activate license values (scenes.billing.billingLogic)': 'setActivateLicenseValues'
        'set activate license manual errors (scenes.billing.billingLogic)': 'setActivateLicenseManualErrors'
        'touch activate license field (scenes.billing.billingLogic)': 'touchActivateLicenseField'
        'reset activate license (scenes.billing.billingLogic)': 'resetActivateLicense'
        'submit activate license (scenes.billing.billingLogic)': 'submitActivateLicense'
        'submit activate license request (scenes.billing.billingLogic)': 'submitActivateLicenseRequest'
        'submit activate license success (scenes.billing.billingLogic)': 'submitActivateLicenseSuccess'
        'submit activate license failure (scenes.billing.billingLogic)': 'submitActivateLicenseFailure'
    }
    actionTypes: {
        setShowLicenseDirectInput: 'set show license direct input (scenes.billing.billingLogic)'
        reportBillingAlertShown: 'report billing alert shown (scenes.billing.billingLogic)'
        reportBillingV2Shown: 'report billing v2 shown (scenes.billing.billingLogic)'
        registerInstrumentationProps: 'register instrumentation props (scenes.billing.billingLogic)'
        setRedirectPath: 'set redirect path (scenes.billing.billingLogic)'
        setIsOnboarding: 'set is onboarding (scenes.billing.billingLogic)'
        loadUser: 'load user (scenes.billing.billingLogic)'
        reportProductUnsubscribed: 'report product unsubscribed (scenes.billing.billingLogic)'
        loadBilling: 'load billing (scenes.billing.billingLogic)'
        loadBillingSuccess: 'load billing success (scenes.billing.billingLogic)'
        loadBillingFailure: 'load billing failure (scenes.billing.billingLogic)'
        updateBillingLimits: 'update billing limits (scenes.billing.billingLogic)'
        updateBillingLimitsSuccess: 'update billing limits success (scenes.billing.billingLogic)'
        updateBillingLimitsFailure: 'update billing limits failure (scenes.billing.billingLogic)'
        deactivateProduct: 'deactivate product (scenes.billing.billingLogic)'
        deactivateProductSuccess: 'deactivate product success (scenes.billing.billingLogic)'
        deactivateProductFailure: 'deactivate product failure (scenes.billing.billingLogic)'
        loadProducts: 'load products (scenes.billing.billingLogic)'
        loadProductsSuccess: 'load products success (scenes.billing.billingLogic)'
        loadProductsFailure: 'load products failure (scenes.billing.billingLogic)'
        setActivateLicenseValue: 'set activate license value (scenes.billing.billingLogic)'
        setActivateLicenseValues: 'set activate license values (scenes.billing.billingLogic)'
        setActivateLicenseManualErrors: 'set activate license manual errors (scenes.billing.billingLogic)'
        touchActivateLicenseField: 'touch activate license field (scenes.billing.billingLogic)'
        resetActivateLicense: 'reset activate license (scenes.billing.billingLogic)'
        submitActivateLicense: 'submit activate license (scenes.billing.billingLogic)'
        submitActivateLicenseRequest: 'submit activate license request (scenes.billing.billingLogic)'
        submitActivateLicenseSuccess: 'submit activate license success (scenes.billing.billingLogic)'
        submitActivateLicenseFailure: 'submit activate license failure (scenes.billing.billingLogic)'
    }
    actions: {
        setShowLicenseDirectInput: (show: boolean) => void
        reportBillingAlertShown: (alertConfig: BillingAlertConfig) => void
        reportBillingV2Shown: () => void
        registerInstrumentationProps: () => void
        setRedirectPath: () => void
        setIsOnboarding: () => void
        loadUser: (resetOnFailure?: boolean) => void
        reportProductUnsubscribed: (product: string) => void
        loadBilling: () => void
        loadBillingSuccess: (billing: BillingV2Type, payload?: any) => void
        loadBillingFailure: (error: string, errorObject?: any) => void
        updateBillingLimits: (limits: { [key: string]: string | null }) => void
        updateBillingLimitsSuccess: (
            billing: BillingV2Type,
            payload?: {
                [key: string]: string | null
            }
        ) => void
        updateBillingLimitsFailure: (error: string, errorObject?: any) => void
        deactivateProduct: (key: string) => void
        deactivateProductSuccess: (billing: BillingV2Type, payload?: string) => void
        deactivateProductFailure: (error: string, errorObject?: any) => void
        loadProducts: () => void
        loadProductsSuccess: (products: BillingProductV2Type[], payload?: any) => void
        loadProductsFailure: (error: string, errorObject?: any) => void
        setActivateLicenseValue: (key: FieldName, value: any) => void
        setActivateLicenseValues: (
            values: DeepPartial<{
                license: string
            }>
        ) => void
        setActivateLicenseManualErrors: (errors: Record<string, any>) => void
        touchActivateLicenseField: (key: string) => void
        resetActivateLicense: (values?: { license: string }) => void
        submitActivateLicense: () => void
        submitActivateLicenseRequest: (activateLicense: { license: string }) => void
        submitActivateLicenseSuccess: (activateLicense: { license: string }) => void
        submitActivateLicenseFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        setShowLicenseDirectInput: (show: boolean) => Promise<any>
        reportBillingAlertShown: (alertConfig: BillingAlertConfig) => Promise<any>
        reportBillingV2Shown: () => Promise<any>
        registerInstrumentationProps: () => Promise<any>
        setRedirectPath: () => Promise<any>
        setIsOnboarding: () => Promise<any>
        loadUser: (resetOnFailure?: boolean) => Promise<any>
        reportProductUnsubscribed: (product: string) => Promise<any>
        loadBilling: () => Promise<any>
        loadBillingSuccess: (billing: BillingV2Type, payload?: any) => Promise<any>
        loadBillingFailure: (error: string, errorObject?: any) => Promise<any>
        updateBillingLimits: (limits: { [key: string]: string | null }) => Promise<any>
        updateBillingLimitsSuccess: (
            billing: BillingV2Type,
            payload?: {
                [key: string]: string | null
            }
        ) => Promise<any>
        updateBillingLimitsFailure: (error: string, errorObject?: any) => Promise<any>
        deactivateProduct: (key: string) => Promise<any>
        deactivateProductSuccess: (billing: BillingV2Type, payload?: string) => Promise<any>
        deactivateProductFailure: (error: string, errorObject?: any) => Promise<any>
        loadProducts: () => Promise<any>
        loadProductsSuccess: (products: BillingProductV2Type[], payload?: any) => Promise<any>
        loadProductsFailure: (error: string, errorObject?: any) => Promise<any>
        setActivateLicenseValue: (key: FieldName, value: any) => Promise<any>
        setActivateLicenseValues: (
            values: DeepPartial<{
                license: string
            }>
        ) => Promise<any>
        setActivateLicenseManualErrors: (errors: Record<string, any>) => Promise<any>
        touchActivateLicenseField: (key: string) => Promise<any>
        resetActivateLicense: (values?: { license: string }) => Promise<any>
        submitActivateLicense: () => Promise<any>
        submitActivateLicenseRequest: (activateLicense: { license: string }) => Promise<any>
        submitActivateLicenseSuccess: (activateLicense: { license: string }) => Promise<any>
        submitActivateLicenseFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        showLicenseDirectInput: boolean
        redirectPath: string
        isOnboarding: boolean
        billing: BillingV2Type | null
        billingLoading: boolean
        products: BillingProductV2Type[]
        productsLoading: boolean
        activateLicense: {
            license: string
        }
        isActivateLicenseSubmitting: boolean
        showActivateLicenseErrors: boolean
        activateLicenseChanged: boolean
        activateLicenseTouches: Record<string, boolean>
        activateLicenseManualErrors: Record<string, any>
    }
    events: {}
    key: undefined
    listeners: {
        reportBillingV2Shown: ((
            action: {
                type: 'report billing v2 shown (scenes.billing.billingLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportBillingAlertShown: ((
            action: {
                type: 'report billing alert shown (scenes.billing.billingLogic)'
                payload: {
                    alertConfig: BillingAlertConfig
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadBillingSuccess: ((
            action: {
                type: 'load billing success (scenes.billing.billingLogic)'
                payload: {
                    billing: BillingV2Type
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        registerInstrumentationProps: ((
            action: {
                type: 'register instrumentation props (scenes.billing.billingLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'billing', 'billingLogic']
    pathString: 'scenes.billing.billingLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        showLicenseDirectInput: boolean
        redirectPath: string
        isOnboarding: boolean
        billing: BillingV2Type | null
        billingLoading: boolean
        products: BillingProductV2Type[]
        productsLoading: boolean
        activateLicense: {
            license: string
        }
        isActivateLicenseSubmitting: boolean
        showActivateLicenseErrors: boolean
        activateLicenseChanged: boolean
        activateLicenseTouches: Record<string, boolean>
        activateLicenseManualErrors: Record<string, any>
    }
    reducers: {
        showLicenseDirectInput: (state: boolean, action: any, fullState: any) => boolean
        redirectPath: (state: string, action: any, fullState: any) => string
        isOnboarding: (state: boolean, action: any, fullState: any) => boolean
        billing: (state: BillingV2Type | null, action: any, fullState: any) => BillingV2Type | null
        billingLoading: (state: boolean, action: any, fullState: any) => boolean
        products: (state: BillingProductV2Type[], action: any, fullState: any) => BillingProductV2Type[]
        productsLoading: (state: boolean, action: any, fullState: any) => boolean
        activateLicense: (
            state: {
                license: string
            },
            action: any,
            fullState: any
        ) => {
            license: string
        }
        isActivateLicenseSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showActivateLicenseErrors: (state: boolean, action: any, fullState: any) => boolean
        activateLicenseChanged: (state: boolean, action: any, fullState: any) => boolean
        activateLicenseTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        activateLicenseManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        showLicenseDirectInput: boolean
        redirectPath: string
        isOnboarding: boolean
        billing: BillingV2Type | null
        billingLoading: boolean
        products: BillingProductV2Type[]
        productsLoading: boolean
        activateLicense: {
            license: string
        }
        isActivateLicenseSubmitting: boolean
        showActivateLicenseErrors: boolean
        activateLicenseChanged: boolean
        activateLicenseTouches: Record<string, boolean>
        activateLicenseManualErrors: Record<string, any>
    }
    selectors: {
        showLicenseDirectInput: (state: any, props?: any) => boolean
        redirectPath: (state: any, props?: any) => string
        isOnboarding: (state: any, props?: any) => boolean
        billing: (state: any, props?: any) => BillingV2Type | null
        billingLoading: (state: any, props?: any) => boolean
        products: (state: any, props?: any) => BillingProductV2Type[]
        productsLoading: (state: any, props?: any) => boolean
        activateLicense: (
            state: any,
            props?: any
        ) => {
            license: string
        }
        isActivateLicenseSubmitting: (state: any, props?: any) => boolean
        showActivateLicenseErrors: (state: any, props?: any) => boolean
        activateLicenseChanged: (state: any, props?: any) => boolean
        activateLicenseTouches: (state: any, props?: any) => Record<string, boolean>
        activateLicenseManualErrors: (state: any, props?: any) => Record<string, any>
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
        preflight: (state: any, props?: any) => PreflightStatus | null
        upgradeLink: (state: any, props?: any) => string
        isUnlicensedDebug: (state: any, props?: any) => boolean
        billingAlert: (state: any, props?: any) => BillingAlertConfig | undefined
        activateLicenseTouched: (state: any, props?: any) => boolean
        activateLicenseValidationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<
            {
                license: string
            },
            ValidationErrorType
        >
        activateLicenseAllErrors: (state: any, props?: any) => Record<string, any>
        activateLicenseHasErrors: (state: any, props?: any) => boolean
        activateLicenseErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<
            {
                license: string
            },
            ValidationErrorType
        >
        isActivateLicenseValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        showLicenseDirectInput: boolean
        redirectPath: string
        isOnboarding: boolean
        billing: BillingV2Type | null
        billingLoading: boolean
        products: BillingProductV2Type[]
        productsLoading: boolean
        activateLicense: {
            license: string
        }
        isActivateLicenseSubmitting: boolean
        showActivateLicenseErrors: boolean
        activateLicenseChanged: boolean
        activateLicenseTouches: Record<string, boolean>
        activateLicenseManualErrors: Record<string, any>
        featureFlags: FeatureFlagsSet
        preflight: PreflightStatus | null
        upgradeLink: string
        isUnlicensedDebug: boolean
        billingAlert: BillingAlertConfig | undefined
        activateLicenseTouched: boolean
        activateLicenseValidationErrors: DeepPartialMap<
            {
                license: string
            },
            ValidationErrorType
        >
        activateLicenseAllErrors: Record<string, any>
        activateLicenseHasErrors: boolean
        activateLicenseErrors: DeepPartialMap<
            {
                license: string
            },
            ValidationErrorType
        >
        isActivateLicenseValid: boolean
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        upgradeLink: (
            preflight:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').PreflightStatus
                | null
        ) => string
        isUnlicensedDebug: (
            preflight:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').PreflightStatus
                | null,
            billing: BillingV2Type | null
        ) => boolean
        billingAlert: (
            billing: BillingV2Type | null,
            preflight:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').PreflightStatus
                | null
        ) => BillingAlertConfig | undefined
    }
}
