// Generated by kea-typegen on Thu, 20 Jul 2023 11:24:21 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { BillingProductV2AddonType, BillingProductV2Type, BillingV2PlanType, BillingV2Type } from '../../types'

export interface billingProductLogicType extends Logic {
    actionCreators: {
        loadBillingSuccess: (
            billing: BillingV2Type,
            payload?: any
        ) => {
            type: 'load billing success (scenes.billing.billingProductLogic)'
            payload: {
                billing: BillingV2Type
                payload?: any
            }
        }
        updateBillingLimitsSuccess: (
            billing: BillingV2Type,
            payload?: {
                [key: string]: string | null
            }
        ) => {
            type: 'update billing limits success (scenes.billing.billingProductLogic)'
            payload: {
                billing: BillingV2Type
                payload?: {
                    [key: string]: string | null
                }
            }
        }
        setIsEditingBillingLimit: (isEditingBillingLimit: boolean) => {
            type: 'set is editing billing limit (scenes.billing.billingProductLogic)'
            payload: {
                isEditingBillingLimit: boolean
            }
        }
        setBillingLimitInput: (billingLimitInput: number | undefined) => {
            type: 'set billing limit input (scenes.billing.billingProductLogic)'
            payload: {
                billingLimitInput: number | undefined
            }
        }
        billingLoaded: () => {
            type: 'billing loaded (scenes.billing.billingProductLogic)'
            payload: {
                value: true
            }
        }
        setShowTierBreakdown: (showTierBreakdown: boolean) => {
            type: 'set show tier breakdown (scenes.billing.billingProductLogic)'
            payload: {
                showTierBreakdown: boolean
            }
        }
        toggleIsPricingModalOpen: () => {
            type: 'toggle is pricing modal open (scenes.billing.billingProductLogic)'
            payload: {
                value: true
            }
        }
        toggleIsPlanComparisonModalOpen: () => {
            type: 'toggle is plan comparison modal open (scenes.billing.billingProductLogic)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'load billing success (scenes.billing.billingProductLogic)': 'loadBillingSuccess'
        'update billing limits success (scenes.billing.billingProductLogic)': 'updateBillingLimitsSuccess'
        'set is editing billing limit (scenes.billing.billingProductLogic)': 'setIsEditingBillingLimit'
        'set billing limit input (scenes.billing.billingProductLogic)': 'setBillingLimitInput'
        'billing loaded (scenes.billing.billingProductLogic)': 'billingLoaded'
        'set show tier breakdown (scenes.billing.billingProductLogic)': 'setShowTierBreakdown'
        'toggle is pricing modal open (scenes.billing.billingProductLogic)': 'toggleIsPricingModalOpen'
        'toggle is plan comparison modal open (scenes.billing.billingProductLogic)': 'toggleIsPlanComparisonModalOpen'
    }
    actionTypes: {
        loadBillingSuccess: 'load billing success (scenes.billing.billingProductLogic)'
        updateBillingLimitsSuccess: 'update billing limits success (scenes.billing.billingProductLogic)'
        setIsEditingBillingLimit: 'set is editing billing limit (scenes.billing.billingProductLogic)'
        setBillingLimitInput: 'set billing limit input (scenes.billing.billingProductLogic)'
        billingLoaded: 'billing loaded (scenes.billing.billingProductLogic)'
        setShowTierBreakdown: 'set show tier breakdown (scenes.billing.billingProductLogic)'
        toggleIsPricingModalOpen: 'toggle is pricing modal open (scenes.billing.billingProductLogic)'
        toggleIsPlanComparisonModalOpen: 'toggle is plan comparison modal open (scenes.billing.billingProductLogic)'
    }
    actions: {
        loadBillingSuccess: (billing: BillingV2Type, payload?: any) => void
        updateBillingLimitsSuccess: (
            billing: BillingV2Type,
            payload?: {
                [key: string]: string | null
            }
        ) => void
        setIsEditingBillingLimit: (isEditingBillingLimit: boolean) => void
        setBillingLimitInput: (billingLimitInput: number | undefined) => void
        billingLoaded: () => void
        setShowTierBreakdown: (showTierBreakdown: boolean) => void
        toggleIsPricingModalOpen: () => void
        toggleIsPlanComparisonModalOpen: () => void
    }
    asyncActions: {
        loadBillingSuccess: (billing: BillingV2Type, payload?: any) => Promise<any>
        updateBillingLimitsSuccess: (
            billing: BillingV2Type,
            payload?: {
                [key: string]: string | null
            }
        ) => Promise<any>
        setIsEditingBillingLimit: (isEditingBillingLimit: boolean) => Promise<any>
        setBillingLimitInput: (billingLimitInput: number | undefined) => Promise<any>
        billingLoaded: () => Promise<any>
        setShowTierBreakdown: (showTierBreakdown: boolean) => Promise<any>
        toggleIsPricingModalOpen: () => Promise<any>
        toggleIsPlanComparisonModalOpen: () => Promise<any>
    }
    defaults: {
        isEditingBillingLimit: boolean
        showTierBreakdown: boolean
        billingLimitInput: number | undefined
        isPricingModalOpen: boolean
        isPlanComparisonModalOpen: boolean
    }
    events: {}
    key: string
    listeners: {
        loadBillingSuccess: ((
            action: {
                type: 'load billing success (scenes.billing.billingProductLogic)'
                payload: {
                    billing: BillingV2Type
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateBillingLimitsSuccess: ((
            action: {
                type: 'update billing limits success (scenes.billing.billingProductLogic)'
                payload: {
                    billing: BillingV2Type
                    payload?: {
                        [key: string]: string | null
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        billingLoaded: ((
            action: {
                type: 'billing loaded (scenes.billing.billingProductLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'billing', 'billingProductLogic']
    pathString: 'scenes.billing.billingProductLogic'
    props: {
        product: BillingProductV2Type | BillingProductV2AddonType
    }
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        isEditingBillingLimit: boolean
        showTierBreakdown: boolean
        billingLimitInput: number | undefined
        isPricingModalOpen: boolean
        isPlanComparisonModalOpen: boolean
    }
    reducers: {
        isEditingBillingLimit: (state: boolean, action: any, fullState: any) => boolean
        showTierBreakdown: (state: boolean, action: any, fullState: any) => boolean
        billingLimitInput: (state: number | undefined, action: any, fullState: any) => number | undefined
        isPricingModalOpen: (state: boolean, action: any, fullState: any) => boolean
        isPlanComparisonModalOpen: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        isEditingBillingLimit: boolean
        showTierBreakdown: boolean
        billingLimitInput: number | undefined
        isPricingModalOpen: boolean
        isPlanComparisonModalOpen: boolean
    }
    selectors: {
        isEditingBillingLimit: (state: any, props?: any) => boolean
        showTierBreakdown: (state: any, props?: any) => boolean
        billingLimitInput: (state: any, props?: any) => number | undefined
        isPricingModalOpen: (state: any, props?: any) => boolean
        isPlanComparisonModalOpen: (state: any, props?: any) => boolean
        billing: (state: any, props?: any) => BillingV2Type | null
        isUnlicensedDebug: (state: any, props?: any) => boolean
        customLimitUsd: (state: any, props?: any) => string | null | undefined
        currentAndUpgradePlans: (
            state: any,
            props?: any
        ) => { currentPlan: BillingV2PlanType; upgradePlan: BillingV2PlanType; downgradePlan: BillingV2PlanType }
        showBillingLimitInput: (state: any, props?: any) => string | boolean
        freeTier: (state: any, props?: any) => number
        billingLimitAsUsage: (state: any, props?: any) => number
        billingGaugeItems: (state: any, props?: any) => any[]
    }
    sharedListeners: {}
    values: {
        isEditingBillingLimit: boolean
        showTierBreakdown: boolean
        billingLimitInput: number | undefined
        isPricingModalOpen: boolean
        isPlanComparisonModalOpen: boolean
        billing: BillingV2Type | null
        isUnlicensedDebug: boolean
        customLimitUsd: string | null | undefined
        currentAndUpgradePlans: {
            currentPlan: BillingV2PlanType
            upgradePlan: BillingV2PlanType
            downgradePlan: BillingV2PlanType
        }
        showBillingLimitInput: string | boolean
        freeTier: number
        billingLimitAsUsage: number
        billingGaugeItems: any[]
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        customLimitUsd: (
            billing:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').BillingV2Type
                | null,
            product: BillingProductV2Type | BillingProductV2AddonType
        ) => string | null | undefined
        currentAndUpgradePlans: (product: BillingProductV2Type | BillingProductV2AddonType) => {
            currentPlan: BillingV2PlanType
            upgradePlan: BillingV2PlanType
            downgradePlan: BillingV2PlanType
        }
        showBillingLimitInput: (
            billing:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').BillingV2Type
                | null,
            customLimitUsd: string | null | undefined,
            isEditingBillingLimit: boolean
        ) => string | boolean
        freeTier: (product: BillingProductV2Type | BillingProductV2AddonType) => number
        billingLimitAsUsage: (
            billing:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').BillingV2Type
                | null,
            product: BillingProductV2Type | BillingProductV2AddonType,
            isEditingBillingLimit: boolean,
            billingLimitInput: number | undefined,
            customLimitUsd: string | null | undefined
        ) => number
        billingGaugeItems: (
            product: BillingProductV2Type | BillingProductV2AddonType,
            freeTier: number,
            billingLimitAsUsage: number
        ) => any[]
    }
}
