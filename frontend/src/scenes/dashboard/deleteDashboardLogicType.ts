// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:21 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DeleteDashboardForm } from './deleteDashboardLogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../node_modules/kea-forms'
import type { DashboardType } from '../../types'

export interface deleteDashboardLogicType extends Logic {
    actionCreators: {
        showDeleteDashboardModal: (id: number) => {
            type: 'show delete dashboard modal (scenes.dashboard.deleteDashboardLogic)'
            payload: {
                id: number
            }
        }
        hideDeleteDashboardModal: () => {
            type: 'hide delete dashboard modal (scenes.dashboard.deleteDashboardLogic)'
            payload: {
                value: true
            }
        }
        setDeleteDashboardValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set delete dashboard value (scenes.dashboard.deleteDashboardLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setDeleteDashboardValues: (values: DeepPartial<DeleteDashboardForm>) => {
            type: 'set delete dashboard values (scenes.dashboard.deleteDashboardLogic)'
            payload: {
                values: DeepPartial<DeleteDashboardForm>
            }
        }
        setDeleteDashboardManualErrors: (errors: Record<string, any>) => {
            type: 'set delete dashboard manual errors (scenes.dashboard.deleteDashboardLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchDeleteDashboardField: (key: string) => {
            type: 'touch delete dashboard field (scenes.dashboard.deleteDashboardLogic)'
            payload: {
                key: string
            }
        }
        resetDeleteDashboard: (values?: DeleteDashboardForm) => {
            type: 'reset delete dashboard (scenes.dashboard.deleteDashboardLogic)'
            payload: {
                values?: DeleteDashboardForm
            }
        }
        submitDeleteDashboard: () => {
            type: 'submit delete dashboard (scenes.dashboard.deleteDashboardLogic)'
            payload: {
                value: boolean
            }
        }
        submitDeleteDashboardRequest: (deleteDashboard: DeleteDashboardForm) => {
            type: 'submit delete dashboard request (scenes.dashboard.deleteDashboardLogic)'
            payload: {
                deleteDashboard: DeleteDashboardForm
            }
        }
        submitDeleteDashboardSuccess: (deleteDashboard: DeleteDashboardForm) => {
            type: 'submit delete dashboard success (scenes.dashboard.deleteDashboardLogic)'
            payload: {
                deleteDashboard: DeleteDashboardForm
            }
        }
        submitDeleteDashboardFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit delete dashboard failure (scenes.dashboard.deleteDashboardLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'show delete dashboard modal (scenes.dashboard.deleteDashboardLogic)': 'showDeleteDashboardModal'
        'hide delete dashboard modal (scenes.dashboard.deleteDashboardLogic)': 'hideDeleteDashboardModal'
        'set delete dashboard value (scenes.dashboard.deleteDashboardLogic)': 'setDeleteDashboardValue'
        'set delete dashboard values (scenes.dashboard.deleteDashboardLogic)': 'setDeleteDashboardValues'
        'set delete dashboard manual errors (scenes.dashboard.deleteDashboardLogic)': 'setDeleteDashboardManualErrors'
        'touch delete dashboard field (scenes.dashboard.deleteDashboardLogic)': 'touchDeleteDashboardField'
        'reset delete dashboard (scenes.dashboard.deleteDashboardLogic)': 'resetDeleteDashboard'
        'submit delete dashboard (scenes.dashboard.deleteDashboardLogic)': 'submitDeleteDashboard'
        'submit delete dashboard request (scenes.dashboard.deleteDashboardLogic)': 'submitDeleteDashboardRequest'
        'submit delete dashboard success (scenes.dashboard.deleteDashboardLogic)': 'submitDeleteDashboardSuccess'
        'submit delete dashboard failure (scenes.dashboard.deleteDashboardLogic)': 'submitDeleteDashboardFailure'
    }
    actionTypes: {
        showDeleteDashboardModal: 'show delete dashboard modal (scenes.dashboard.deleteDashboardLogic)'
        hideDeleteDashboardModal: 'hide delete dashboard modal (scenes.dashboard.deleteDashboardLogic)'
        setDeleteDashboardValue: 'set delete dashboard value (scenes.dashboard.deleteDashboardLogic)'
        setDeleteDashboardValues: 'set delete dashboard values (scenes.dashboard.deleteDashboardLogic)'
        setDeleteDashboardManualErrors: 'set delete dashboard manual errors (scenes.dashboard.deleteDashboardLogic)'
        touchDeleteDashboardField: 'touch delete dashboard field (scenes.dashboard.deleteDashboardLogic)'
        resetDeleteDashboard: 'reset delete dashboard (scenes.dashboard.deleteDashboardLogic)'
        submitDeleteDashboard: 'submit delete dashboard (scenes.dashboard.deleteDashboardLogic)'
        submitDeleteDashboardRequest: 'submit delete dashboard request (scenes.dashboard.deleteDashboardLogic)'
        submitDeleteDashboardSuccess: 'submit delete dashboard success (scenes.dashboard.deleteDashboardLogic)'
        submitDeleteDashboardFailure: 'submit delete dashboard failure (scenes.dashboard.deleteDashboardLogic)'
    }
    actions: {
        showDeleteDashboardModal: (id: number) => void
        hideDeleteDashboardModal: () => void
        setDeleteDashboardValue: (key: FieldName, value: any) => void
        setDeleteDashboardValues: (values: DeepPartial<DeleteDashboardForm>) => void
        setDeleteDashboardManualErrors: (errors: Record<string, any>) => void
        touchDeleteDashboardField: (key: string) => void
        resetDeleteDashboard: (values?: DeleteDashboardForm) => void
        submitDeleteDashboard: () => void
        submitDeleteDashboardRequest: (deleteDashboard: DeleteDashboardForm) => void
        submitDeleteDashboardSuccess: (deleteDashboard: DeleteDashboardForm) => void
        submitDeleteDashboardFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        showDeleteDashboardModal: (id: number) => Promise<any>
        hideDeleteDashboardModal: () => Promise<any>
        setDeleteDashboardValue: (key: FieldName, value: any) => Promise<any>
        setDeleteDashboardValues: (values: DeepPartial<DeleteDashboardForm>) => Promise<any>
        setDeleteDashboardManualErrors: (errors: Record<string, any>) => Promise<any>
        touchDeleteDashboardField: (key: string) => Promise<any>
        resetDeleteDashboard: (values?: DeleteDashboardForm) => Promise<any>
        submitDeleteDashboard: () => Promise<any>
        submitDeleteDashboardRequest: (deleteDashboard: DeleteDashboardForm) => Promise<any>
        submitDeleteDashboardSuccess: (deleteDashboard: DeleteDashboardForm) => Promise<any>
        submitDeleteDashboardFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        deleteDashboardModalVisible: boolean
        deleteDashboard: DeleteDashboardForm
        isDeleteDashboardSubmitting: boolean
        showDeleteDashboardErrors: boolean
        deleteDashboardChanged: boolean
        deleteDashboardTouches: Record<string, boolean>
        deleteDashboardManualErrors: Record<string, any>
    }
    events: {}
    key: undefined
    listeners: {
        showDeleteDashboardModal: ((
            action: {
                type: 'show delete dashboard modal (scenes.dashboard.deleteDashboardLogic)'
                payload: {
                    id: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        hideDeleteDashboardModal: ((
            action: {
                type: 'hide delete dashboard modal (scenes.dashboard.deleteDashboardLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        'delete dashboard success (models.dashboardsModel)': ((
            action: {
                type: 'delete dashboard success (models.dashboardsModel)'
                payload: {
                    dashboard: DashboardType
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'dashboard', 'deleteDashboardLogic']
    pathString: 'scenes.dashboard.deleteDashboardLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        deleteDashboardModalVisible: boolean
        deleteDashboard: DeleteDashboardForm
        isDeleteDashboardSubmitting: boolean
        showDeleteDashboardErrors: boolean
        deleteDashboardChanged: boolean
        deleteDashboardTouches: Record<string, boolean>
        deleteDashboardManualErrors: Record<string, any>
    }
    reducers: {
        deleteDashboardModalVisible: (state: boolean, action: any, fullState: any) => boolean
        deleteDashboard: (state: DeleteDashboardForm, action: any, fullState: any) => DeleteDashboardForm
        isDeleteDashboardSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showDeleteDashboardErrors: (state: boolean, action: any, fullState: any) => boolean
        deleteDashboardChanged: (state: boolean, action: any, fullState: any) => boolean
        deleteDashboardTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        deleteDashboardManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        deleteDashboardModalVisible: boolean
        deleteDashboard: DeleteDashboardForm
        isDeleteDashboardSubmitting: boolean
        showDeleteDashboardErrors: boolean
        deleteDashboardChanged: boolean
        deleteDashboardTouches: Record<string, boolean>
        deleteDashboardManualErrors: Record<string, any>
    }
    selectors: {
        deleteDashboardModalVisible: (state: any, props?: any) => boolean
        deleteDashboard: (state: any, props?: any) => DeleteDashboardForm
        isDeleteDashboardSubmitting: (state: any, props?: any) => boolean
        showDeleteDashboardErrors: (state: any, props?: any) => boolean
        deleteDashboardChanged: (state: any, props?: any) => boolean
        deleteDashboardTouches: (state: any, props?: any) => Record<string, boolean>
        deleteDashboardManualErrors: (state: any, props?: any) => Record<string, any>
        deleteDashboardTouched: (state: any, props?: any) => boolean
        deleteDashboardValidationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<DeleteDashboardForm, ValidationErrorType>
        deleteDashboardAllErrors: (state: any, props?: any) => Record<string, any>
        deleteDashboardHasErrors: (state: any, props?: any) => boolean
        deleteDashboardErrors: (state: any, props?: any) => DeepPartialMap<DeleteDashboardForm, ValidationErrorType>
        isDeleteDashboardValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        deleteDashboardModalVisible: boolean
        deleteDashboard: DeleteDashboardForm
        isDeleteDashboardSubmitting: boolean
        showDeleteDashboardErrors: boolean
        deleteDashboardChanged: boolean
        deleteDashboardTouches: Record<string, boolean>
        deleteDashboardManualErrors: Record<string, any>
        deleteDashboardTouched: boolean
        deleteDashboardValidationErrors: DeepPartialMap<DeleteDashboardForm, ValidationErrorType>
        deleteDashboardAllErrors: Record<string, any>
        deleteDashboardHasErrors: boolean
        deleteDashboardErrors: DeepPartialMap<DeleteDashboardForm, ValidationErrorType>
        isDeleteDashboardValid: boolean
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalReducerActions: {
        'delete dashboard success (models.dashboardsModel)': (
            dashboard: DashboardType,
            payload?: any
        ) => {
            type: 'delete dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType
                payload?: any
            }
        }
    }
}
