// Generated by kea-typegen on Wed, 02 Aug 2023 17:21:24 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DashboardBasicType, DashboardType, UserType } from '../../../types'
import type { FeatureFlagsSet } from '../../../lib/logic/featureFlagLogic'
import type { DashboardFuse, DashboardsFilters, DashboardsTab } from './dashboardsLogic'

export interface dashboardsLogicType extends Logic {
    actionCreators: {
        setCurrentTab: (tab: DashboardsTab) => {
            type: 'set current tab (scenes.dashboard.dashboardsLogic)'
            payload: {
                tab: DashboardsTab
            }
        }
        setFilters: (filters: Partial<DashboardsFilters>) => {
            type: 'set filters (scenes.dashboard.dashboardsLogic)'
            payload: {
                filters: Partial<DashboardsFilters>
            }
        }
    }
    actionKeys: {
        'set current tab (scenes.dashboard.dashboardsLogic)': 'setCurrentTab'
        'set filters (scenes.dashboard.dashboardsLogic)': 'setFilters'
    }
    actionTypes: {
        setCurrentTab: 'set current tab (scenes.dashboard.dashboardsLogic)'
        setFilters: 'set filters (scenes.dashboard.dashboardsLogic)'
    }
    actions: {
        setCurrentTab: (tab: DashboardsTab) => void
        setFilters: (filters: Partial<DashboardsFilters>) => void
    }
    asyncActions: {
        setCurrentTab: (tab: DashboardsTab) => Promise<any>
        setFilters: (filters: Partial<DashboardsFilters>) => Promise<any>
    }
    defaults: {
        currentTab: DashboardsTab
        filters: DashboardsFilters
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'dashboard', 'dashboardsLogic']
    pathString: 'scenes.dashboard.dashboardsLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        currentTab: DashboardsTab
        filters: DashboardsFilters
    }
    reducers: {
        currentTab: (state: DashboardsTab, action: any, fullState: any) => DashboardsTab
        filters: (state: DashboardsFilters, action: any, fullState: any) => DashboardsFilters
    }
    selector: (state: any) => {
        currentTab: DashboardsTab
        filters: DashboardsFilters
    }
    selectors: {
        currentTab: (state: any, props?: any) => DashboardsTab
        filters: (state: any, props?: any) => DashboardsFilters
        user: (state: any, props?: any) => UserType | null
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
        isFiltering: (state: any, props?: any) => boolean
        dashboards: (state: any, props?: any) => (DashboardType | DashboardBasicType)[]
        fuse: (state: any, props?: any) => DashboardFuse
    }
    sharedListeners: {}
    values: {
        currentTab: DashboardsTab
        filters: DashboardsFilters
        user: UserType | null
        featureFlags: FeatureFlagsSet
        isFiltering: boolean
        dashboards: (DashboardType | DashboardBasicType)[]
        fuse: DashboardFuse
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        isFiltering: (filters: DashboardsFilters) => boolean
        dashboards: (
            nameSortedDashboards: (
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').DashboardType
                | DashboardBasicType
            )[],
            filters: DashboardsFilters,
            fuse: DashboardFuse
        ) => (DashboardType | DashboardBasicType)[]
        fuse: (
            nameSortedDashboards: (
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').DashboardType
                | DashboardBasicType
            )[]
        ) => DashboardFuse
    }
}
