// Generated by kea-typegen on Wed, 02 Aug 2023 17:21:43 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DashboardTemplateProps } from './dashboardTemplatesLogic'
import type { DashboardTemplateScope, DashboardTemplateType } from '../../../../types'
import type { FeatureFlagsSet } from '../../../../lib/logic/featureFlagLogic'

export interface dashboardTemplatesLogicType extends Logic {
    actionCreators: {
        setTemplates: (allTemplates: DashboardTemplateType[]) => {
            type: 'set templates (scenes.dashboard.dashboards.templates.dashboardTemplatesLogic)'
            payload: {
                allTemplates: DashboardTemplateType[]
            }
        }
        getAllTemplates: () => {
            type: 'get all templates (scenes.dashboard.dashboards.templates.dashboardTemplatesLogic)'
            payload: any
        }
        getAllTemplatesSuccess: (
            allTemplates: DashboardTemplateType[],
            payload?: any
        ) => {
            type: 'get all templates success (scenes.dashboard.dashboards.templates.dashboardTemplatesLogic)'
            payload: {
                allTemplates: DashboardTemplateType[]
                payload?: any
            }
        }
        getAllTemplatesFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'get all templates failure (scenes.dashboard.dashboards.templates.dashboardTemplatesLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set templates (scenes.dashboard.dashboards.templates.dashboardTemplatesLogic)': 'setTemplates'
        'get all templates (scenes.dashboard.dashboards.templates.dashboardTemplatesLogic)': 'getAllTemplates'
        'get all templates success (scenes.dashboard.dashboards.templates.dashboardTemplatesLogic)': 'getAllTemplatesSuccess'
        'get all templates failure (scenes.dashboard.dashboards.templates.dashboardTemplatesLogic)': 'getAllTemplatesFailure'
    }
    actionTypes: {
        setTemplates: 'set templates (scenes.dashboard.dashboards.templates.dashboardTemplatesLogic)'
        getAllTemplates: 'get all templates (scenes.dashboard.dashboards.templates.dashboardTemplatesLogic)'
        getAllTemplatesSuccess: 'get all templates success (scenes.dashboard.dashboards.templates.dashboardTemplatesLogic)'
        getAllTemplatesFailure: 'get all templates failure (scenes.dashboard.dashboards.templates.dashboardTemplatesLogic)'
    }
    actions: {
        setTemplates: (allTemplates: DashboardTemplateType[]) => void
        getAllTemplates: () => void
        getAllTemplatesSuccess: (allTemplates: DashboardTemplateType[], payload?: any) => void
        getAllTemplatesFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setTemplates: (allTemplates: DashboardTemplateType[]) => Promise<any>
        getAllTemplates: () => Promise<any>
        getAllTemplatesSuccess: (allTemplates: DashboardTemplateType[], payload?: any) => Promise<any>
        getAllTemplatesFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        allTemplates: DashboardTemplateType[]
        allTemplatesLoading: boolean
    }
    events: {}
    key: 'unknown' | DashboardTemplateScope
    listeners: {}
    path: ['scenes', 'dashboard', 'dashboards', 'templates', 'dashboardTemplatesLogic']
    pathString: 'scenes.dashboard.dashboards.templates.dashboardTemplatesLogic'
    props: DashboardTemplateProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        allTemplates: DashboardTemplateType[]
        allTemplatesLoading: boolean
    }
    reducers: {
        allTemplates: (state: DashboardTemplateType[], action: any, fullState: any) => DashboardTemplateType[]
        allTemplatesLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        allTemplates: DashboardTemplateType[]
        allTemplatesLoading: boolean
    }
    selectors: {
        allTemplates: (state: any, props?: any) => DashboardTemplateType[]
        allTemplatesLoading: (state: any, props?: any) => boolean
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
    }
    sharedListeners: {}
    values: {
        allTemplates: DashboardTemplateType[]
        allTemplatesLoading: boolean
        featureFlags: FeatureFlagsSet
    }
    _isKea: true
    _isKeaWithKey: true
}
