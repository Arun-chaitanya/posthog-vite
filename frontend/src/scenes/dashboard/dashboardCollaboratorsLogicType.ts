// Generated by kea-typegen on Thu, 20 Jul 2023 11:23:45 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DashboardCollaboratorsLogicProps } from './dashboardCollaboratorsLogic'
import type { DashboardCollaboratorType, DashboardType, FusedDashboardCollaboratorType, FusedTeamMemberType, UserBasicType, UserType } from '../../types'

export interface dashboardCollaboratorsLogicType extends Logic {
    actionCreators: {
        deleteExplicitCollaborator: (userUuid: UserType['uuid']) => {
            type: 'delete explicit collaborator (scenes.dashboard.dashboardCollaboratorsLogic.*)'
            payload: {
                userUuid: string
            }
        }
        setExplicitCollaboratorsToBeAdded: (userUuids: string[]) => {
            type: 'set explicit collaborators to be added (scenes.dashboard.dashboardCollaboratorsLogic.*)'
            payload: {
                userUuids: string[]
            }
        }
        addExplicitCollaborators: () => {
            type: 'add explicit collaborators (scenes.dashboard.dashboardCollaboratorsLogic.*)'
            payload: {
                value: true
            }
        }
        loadExplicitCollaborators: () => {
            type: 'load explicit collaborators (scenes.dashboard.dashboardCollaboratorsLogic.*)'
            payload: any
        }
        loadExplicitCollaboratorsSuccess: (
            explicitCollaborators: DashboardCollaboratorType[],
            payload?: any
        ) => {
            type: 'load explicit collaborators success (scenes.dashboard.dashboardCollaboratorsLogic.*)'
            payload: {
                explicitCollaborators: DashboardCollaboratorType[]
                payload?: any
            }
        }
        loadExplicitCollaboratorsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load explicit collaborators failure (scenes.dashboard.dashboardCollaboratorsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        addExplicitCollaboratorsSuccess: (
            explicitCollaborators: DashboardCollaboratorType[],
            payload?: {
                value: true
            }
        ) => {
            type: 'add explicit collaborators success (scenes.dashboard.dashboardCollaboratorsLogic.*)'
            payload: {
                explicitCollaborators: DashboardCollaboratorType[]
                payload?: {
                    value: true
                }
            }
        }
        addExplicitCollaboratorsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'add explicit collaborators failure (scenes.dashboard.dashboardCollaboratorsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deleteExplicitCollaboratorSuccess: (
            explicitCollaborators: DashboardCollaboratorType[],
            payload?: {
                userUuid: string
            }
        ) => {
            type: 'delete explicit collaborator success (scenes.dashboard.dashboardCollaboratorsLogic.*)'
            payload: {
                explicitCollaborators: DashboardCollaboratorType[]
                payload?: {
                    userUuid: string
                }
            }
        }
        deleteExplicitCollaboratorFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete explicit collaborator failure (scenes.dashboard.dashboardCollaboratorsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'delete explicit collaborator (scenes.dashboard.dashboardCollaboratorsLogic.*)': 'deleteExplicitCollaborator'
        'set explicit collaborators to be added (scenes.dashboard.dashboardCollaboratorsLogic.*)': 'setExplicitCollaboratorsToBeAdded'
        'add explicit collaborators (scenes.dashboard.dashboardCollaboratorsLogic.*)': 'addExplicitCollaborators'
        'load explicit collaborators (scenes.dashboard.dashboardCollaboratorsLogic.*)': 'loadExplicitCollaborators'
        'load explicit collaborators success (scenes.dashboard.dashboardCollaboratorsLogic.*)': 'loadExplicitCollaboratorsSuccess'
        'load explicit collaborators failure (scenes.dashboard.dashboardCollaboratorsLogic.*)': 'loadExplicitCollaboratorsFailure'
        'add explicit collaborators success (scenes.dashboard.dashboardCollaboratorsLogic.*)': 'addExplicitCollaboratorsSuccess'
        'add explicit collaborators failure (scenes.dashboard.dashboardCollaboratorsLogic.*)': 'addExplicitCollaboratorsFailure'
        'delete explicit collaborator success (scenes.dashboard.dashboardCollaboratorsLogic.*)': 'deleteExplicitCollaboratorSuccess'
        'delete explicit collaborator failure (scenes.dashboard.dashboardCollaboratorsLogic.*)': 'deleteExplicitCollaboratorFailure'
    }
    actionTypes: {
        deleteExplicitCollaborator: 'delete explicit collaborator (scenes.dashboard.dashboardCollaboratorsLogic.*)'
        setExplicitCollaboratorsToBeAdded: 'set explicit collaborators to be added (scenes.dashboard.dashboardCollaboratorsLogic.*)'
        addExplicitCollaborators: 'add explicit collaborators (scenes.dashboard.dashboardCollaboratorsLogic.*)'
        loadExplicitCollaborators: 'load explicit collaborators (scenes.dashboard.dashboardCollaboratorsLogic.*)'
        loadExplicitCollaboratorsSuccess: 'load explicit collaborators success (scenes.dashboard.dashboardCollaboratorsLogic.*)'
        loadExplicitCollaboratorsFailure: 'load explicit collaborators failure (scenes.dashboard.dashboardCollaboratorsLogic.*)'
        addExplicitCollaboratorsSuccess: 'add explicit collaborators success (scenes.dashboard.dashboardCollaboratorsLogic.*)'
        addExplicitCollaboratorsFailure: 'add explicit collaborators failure (scenes.dashboard.dashboardCollaboratorsLogic.*)'
        deleteExplicitCollaboratorSuccess: 'delete explicit collaborator success (scenes.dashboard.dashboardCollaboratorsLogic.*)'
        deleteExplicitCollaboratorFailure: 'delete explicit collaborator failure (scenes.dashboard.dashboardCollaboratorsLogic.*)'
    }
    actions: {
        deleteExplicitCollaborator: (userUuid: UserType['uuid']) => void
        setExplicitCollaboratorsToBeAdded: (userUuids: string[]) => void
        addExplicitCollaborators: () => void
        loadExplicitCollaborators: () => void
        loadExplicitCollaboratorsSuccess: (explicitCollaborators: DashboardCollaboratorType[], payload?: any) => void
        loadExplicitCollaboratorsFailure: (error: string, errorObject?: any) => void
        addExplicitCollaboratorsSuccess: (
            explicitCollaborators: DashboardCollaboratorType[],
            payload?: {
                value: true
            }
        ) => void
        addExplicitCollaboratorsFailure: (error: string, errorObject?: any) => void
        deleteExplicitCollaboratorSuccess: (
            explicitCollaborators: DashboardCollaboratorType[],
            payload?: {
                userUuid: string
            }
        ) => void
        deleteExplicitCollaboratorFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        deleteExplicitCollaborator: (userUuid: UserType['uuid']) => Promise<any>
        setExplicitCollaboratorsToBeAdded: (userUuids: string[]) => Promise<any>
        addExplicitCollaborators: () => Promise<any>
        loadExplicitCollaborators: () => Promise<any>
        loadExplicitCollaboratorsSuccess: (
            explicitCollaborators: DashboardCollaboratorType[],
            payload?: any
        ) => Promise<any>
        loadExplicitCollaboratorsFailure: (error: string, errorObject?: any) => Promise<any>
        addExplicitCollaboratorsSuccess: (
            explicitCollaborators: DashboardCollaboratorType[],
            payload?: {
                value: true
            }
        ) => Promise<any>
        addExplicitCollaboratorsFailure: (error: string, errorObject?: any) => Promise<any>
        deleteExplicitCollaboratorSuccess: (
            explicitCollaborators: DashboardCollaboratorType[],
            payload?: {
                userUuid: string
            }
        ) => Promise<any>
        deleteExplicitCollaboratorFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        explicitCollaboratorsToBeAdded: string[]
        explicitCollaborators: DashboardCollaboratorType[]
        explicitCollaboratorsLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: number
    listeners: {}
    path: ['scenes', 'dashboard', 'dashboardCollaboratorsLogic', '*']
    pathString: 'scenes.dashboard.dashboardCollaboratorsLogic.*'
    props: DashboardCollaboratorsLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        explicitCollaboratorsToBeAdded: string[]
        explicitCollaborators: DashboardCollaboratorType[]
        explicitCollaboratorsLoading: boolean
    }
    reducers: {
        explicitCollaboratorsToBeAdded: (state: string[], action: any, fullState: any) => string[]
        explicitCollaborators: (
            state: DashboardCollaboratorType[],
            action: any,
            fullState: any
        ) => DashboardCollaboratorType[]
        explicitCollaboratorsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        explicitCollaboratorsToBeAdded: string[]
        explicitCollaborators: DashboardCollaboratorType[]
        explicitCollaboratorsLoading: boolean
    }
    selectors: {
        explicitCollaboratorsToBeAdded: (state: any, props?: any) => string[]
        explicitCollaborators: (state: any, props?: any) => DashboardCollaboratorType[]
        explicitCollaboratorsLoading: (state: any, props?: any) => boolean
        allMembers: (state: any, props?: any) => FusedTeamMemberType[]
        allMembersLoading: (state: any, props?: any) => boolean
        admins: (state: any, props?: any) => FusedTeamMemberType[]
        plainMembers: (state: any, props?: any) => FusedTeamMemberType[]
        dashboard: (state: any, props?: any) => DashboardType | null
        allCollaborators: (state: any, props?: any) => FusedDashboardCollaboratorType[]
        addableMembers: (state: any, props?: any) => UserBasicType[]
        addableMembersLoading: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        explicitCollaboratorsToBeAdded: string[]
        explicitCollaborators: DashboardCollaboratorType[]
        explicitCollaboratorsLoading: boolean
        allMembers: FusedTeamMemberType[]
        allMembersLoading: boolean
        admins: FusedTeamMemberType[]
        plainMembers: FusedTeamMemberType[]
        dashboard: DashboardType | null
        allCollaborators: FusedDashboardCollaboratorType[]
        addableMembers: UserBasicType[]
        addableMembersLoading: boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        allCollaborators: (
            explicitCollaborators: DashboardCollaboratorType[],
            admins: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').FusedTeamMemberType[],
            allMembers: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').FusedTeamMemberType[],
            dashboard: DashboardType | null
        ) => FusedDashboardCollaboratorType[]
        addableMembers: (
            allCollaborators: FusedDashboardCollaboratorType[],
            plainMembers: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').FusedTeamMemberType[]
        ) => UserBasicType[]
        addableMembersLoading: (explicitCollaboratorsLoading: boolean, allMembersLoading: boolean) => boolean
    }
}
