// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:22 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FeatureFlagsSet } from '../../lib/logic/featureFlagLogic'
import type { DashboardTemplateEditorType, DashboardTemplateType, MonacoMarker } from '../../types'

export interface dashboardTemplateEditorLogicType extends Logic {
    actionCreators: {
        setEditorValue: (value: string) => {
            type: 'set editor value (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                value: string
            }
        }
        setDashboardTemplate: (dashboardTemplate: DashboardTemplateEditorType) => {
            type: 'set dashboard template (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                dashboardTemplate: DashboardTemplateEditorType
            }
        }
        clear: () => {
            type: 'clear (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                value: true
            }
        }
        setDashboardTemplateId: (id: string | null) => {
            type: 'set dashboard template id (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                id: string | null
            }
        }
        openDashboardTemplateEditor: () => {
            type: 'open dashboard template editor (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                value: true
            }
        }
        closeDashboardTemplateEditor: () => {
            type: 'close dashboard template editor (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                value: true
            }
        }
        updateValidationErrors: (markers: MonacoMarker[] | undefined) => {
            type: 'update validation errors (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                markers: MonacoMarker[] | undefined
            }
        }
        createDashboardTemplate: () => {
            type: 'create dashboard template (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: any
        }
        createDashboardTemplateSuccess: (
            dashboardTemplate: DashboardTemplateEditorType | undefined,
            payload?: any
        ) => {
            type: 'create dashboard template success (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                dashboardTemplate: DashboardTemplateEditorType | undefined
                payload?: any
            }
        }
        createDashboardTemplateFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'create dashboard template failure (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        getDashboardTemplate: (id: string) => {
            type: 'get dashboard template (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: string
        }
        getDashboardTemplateSuccess: (
            dashboardTemplate: DashboardTemplateType,
            payload?: string
        ) => {
            type: 'get dashboard template success (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                dashboardTemplate: DashboardTemplateType
                payload?: string
            }
        }
        getDashboardTemplateFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'get dashboard template failure (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateDashboardTemplate: ({
            id,
            dashboardTemplateUpdates,
        }: {
            id: string
            dashboardTemplateUpdates?: Partial<DashboardTemplateType>
        }) => {
            type: 'update dashboard template (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                id: string
                dashboardTemplateUpdates?: Partial<DashboardTemplateType>
            }
        }
        updateDashboardTemplateSuccess: (
            dashboardTemplate: DashboardTemplateEditorType | undefined,
            payload?: {
                id: string
                dashboardTemplateUpdates?: Partial<DashboardTemplateType>
            }
        ) => {
            type: 'update dashboard template success (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                dashboardTemplate: DashboardTemplateEditorType | undefined
                payload?: {
                    id: string
                    dashboardTemplateUpdates?: Partial<DashboardTemplateType>
                }
            }
        }
        updateDashboardTemplateFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update dashboard template failure (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deleteDashboardTemplate: (id: string) => {
            type: 'delete dashboard template (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: string
        }
        deleteDashboardTemplateSuccess: (
            dashboardTemplate: null,
            payload?: string
        ) => {
            type: 'delete dashboard template success (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                dashboardTemplate: null
                payload?: string
            }
        }
        deleteDashboardTemplateFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete dashboard template failure (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        getTemplateSchema: () => {
            type: 'get template schema (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: any
        }
        getTemplateSchemaSuccess: (
            templateSchema: Record<string, any>,
            payload?: any
        ) => {
            type: 'get template schema success (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                templateSchema: Record<string, any>
                payload?: any
            }
        }
        getTemplateSchemaFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'get template schema failure (scenes.dashboard.dashboardTemplateEditorLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set editor value (scenes.dashboard.dashboardTemplateEditorLogic)': 'setEditorValue'
        'set dashboard template (scenes.dashboard.dashboardTemplateEditorLogic)': 'setDashboardTemplate'
        'clear (scenes.dashboard.dashboardTemplateEditorLogic)': 'clear'
        'set dashboard template id (scenes.dashboard.dashboardTemplateEditorLogic)': 'setDashboardTemplateId'
        'open dashboard template editor (scenes.dashboard.dashboardTemplateEditorLogic)': 'openDashboardTemplateEditor'
        'close dashboard template editor (scenes.dashboard.dashboardTemplateEditorLogic)': 'closeDashboardTemplateEditor'
        'update validation errors (scenes.dashboard.dashboardTemplateEditorLogic)': 'updateValidationErrors'
        'create dashboard template (scenes.dashboard.dashboardTemplateEditorLogic)': 'createDashboardTemplate'
        'create dashboard template success (scenes.dashboard.dashboardTemplateEditorLogic)': 'createDashboardTemplateSuccess'
        'create dashboard template failure (scenes.dashboard.dashboardTemplateEditorLogic)': 'createDashboardTemplateFailure'
        'get dashboard template (scenes.dashboard.dashboardTemplateEditorLogic)': 'getDashboardTemplate'
        'get dashboard template success (scenes.dashboard.dashboardTemplateEditorLogic)': 'getDashboardTemplateSuccess'
        'get dashboard template failure (scenes.dashboard.dashboardTemplateEditorLogic)': 'getDashboardTemplateFailure'
        'update dashboard template (scenes.dashboard.dashboardTemplateEditorLogic)': 'updateDashboardTemplate'
        'update dashboard template success (scenes.dashboard.dashboardTemplateEditorLogic)': 'updateDashboardTemplateSuccess'
        'update dashboard template failure (scenes.dashboard.dashboardTemplateEditorLogic)': 'updateDashboardTemplateFailure'
        'delete dashboard template (scenes.dashboard.dashboardTemplateEditorLogic)': 'deleteDashboardTemplate'
        'delete dashboard template success (scenes.dashboard.dashboardTemplateEditorLogic)': 'deleteDashboardTemplateSuccess'
        'delete dashboard template failure (scenes.dashboard.dashboardTemplateEditorLogic)': 'deleteDashboardTemplateFailure'
        'get template schema (scenes.dashboard.dashboardTemplateEditorLogic)': 'getTemplateSchema'
        'get template schema success (scenes.dashboard.dashboardTemplateEditorLogic)': 'getTemplateSchemaSuccess'
        'get template schema failure (scenes.dashboard.dashboardTemplateEditorLogic)': 'getTemplateSchemaFailure'
    }
    actionTypes: {
        setEditorValue: 'set editor value (scenes.dashboard.dashboardTemplateEditorLogic)'
        setDashboardTemplate: 'set dashboard template (scenes.dashboard.dashboardTemplateEditorLogic)'
        clear: 'clear (scenes.dashboard.dashboardTemplateEditorLogic)'
        setDashboardTemplateId: 'set dashboard template id (scenes.dashboard.dashboardTemplateEditorLogic)'
        openDashboardTemplateEditor: 'open dashboard template editor (scenes.dashboard.dashboardTemplateEditorLogic)'
        closeDashboardTemplateEditor: 'close dashboard template editor (scenes.dashboard.dashboardTemplateEditorLogic)'
        updateValidationErrors: 'update validation errors (scenes.dashboard.dashboardTemplateEditorLogic)'
        createDashboardTemplate: 'create dashboard template (scenes.dashboard.dashboardTemplateEditorLogic)'
        createDashboardTemplateSuccess: 'create dashboard template success (scenes.dashboard.dashboardTemplateEditorLogic)'
        createDashboardTemplateFailure: 'create dashboard template failure (scenes.dashboard.dashboardTemplateEditorLogic)'
        getDashboardTemplate: 'get dashboard template (scenes.dashboard.dashboardTemplateEditorLogic)'
        getDashboardTemplateSuccess: 'get dashboard template success (scenes.dashboard.dashboardTemplateEditorLogic)'
        getDashboardTemplateFailure: 'get dashboard template failure (scenes.dashboard.dashboardTemplateEditorLogic)'
        updateDashboardTemplate: 'update dashboard template (scenes.dashboard.dashboardTemplateEditorLogic)'
        updateDashboardTemplateSuccess: 'update dashboard template success (scenes.dashboard.dashboardTemplateEditorLogic)'
        updateDashboardTemplateFailure: 'update dashboard template failure (scenes.dashboard.dashboardTemplateEditorLogic)'
        deleteDashboardTemplate: 'delete dashboard template (scenes.dashboard.dashboardTemplateEditorLogic)'
        deleteDashboardTemplateSuccess: 'delete dashboard template success (scenes.dashboard.dashboardTemplateEditorLogic)'
        deleteDashboardTemplateFailure: 'delete dashboard template failure (scenes.dashboard.dashboardTemplateEditorLogic)'
        getTemplateSchema: 'get template schema (scenes.dashboard.dashboardTemplateEditorLogic)'
        getTemplateSchemaSuccess: 'get template schema success (scenes.dashboard.dashboardTemplateEditorLogic)'
        getTemplateSchemaFailure: 'get template schema failure (scenes.dashboard.dashboardTemplateEditorLogic)'
    }
    actions: {
        setEditorValue: (value: string) => void
        setDashboardTemplate: (dashboardTemplate: DashboardTemplateEditorType) => void
        clear: () => void
        setDashboardTemplateId: (id: string | null) => void
        openDashboardTemplateEditor: () => void
        closeDashboardTemplateEditor: () => void
        updateValidationErrors: (markers: MonacoMarker[] | undefined) => void
        createDashboardTemplate: () => void
        createDashboardTemplateSuccess: (
            dashboardTemplate: DashboardTemplateEditorType | undefined,
            payload?: any
        ) => void
        createDashboardTemplateFailure: (error: string, errorObject?: any) => void
        getDashboardTemplate: (id: string) => void
        getDashboardTemplateSuccess: (dashboardTemplate: DashboardTemplateType, payload?: string) => void
        getDashboardTemplateFailure: (error: string, errorObject?: any) => void
        updateDashboardTemplate: ({
            id,
            dashboardTemplateUpdates,
        }: {
            id: string
            dashboardTemplateUpdates?: Partial<DashboardTemplateType>
        }) => void
        updateDashboardTemplateSuccess: (
            dashboardTemplate: DashboardTemplateEditorType | undefined,
            payload?: {
                id: string
                dashboardTemplateUpdates?: Partial<DashboardTemplateType>
            }
        ) => void
        updateDashboardTemplateFailure: (error: string, errorObject?: any) => void
        deleteDashboardTemplate: (id: string) => void
        deleteDashboardTemplateSuccess: (dashboardTemplate: null, payload?: string) => void
        deleteDashboardTemplateFailure: (error: string, errorObject?: any) => void
        getTemplateSchema: () => void
        getTemplateSchemaSuccess: (templateSchema: Record<string, any>, payload?: any) => void
        getTemplateSchemaFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setEditorValue: (value: string) => Promise<any>
        setDashboardTemplate: (dashboardTemplate: DashboardTemplateEditorType) => Promise<any>
        clear: () => Promise<any>
        setDashboardTemplateId: (id: string | null) => Promise<any>
        openDashboardTemplateEditor: () => Promise<any>
        closeDashboardTemplateEditor: () => Promise<any>
        updateValidationErrors: (markers: MonacoMarker[] | undefined) => Promise<any>
        createDashboardTemplate: () => Promise<any>
        createDashboardTemplateSuccess: (
            dashboardTemplate: DashboardTemplateEditorType | undefined,
            payload?: any
        ) => Promise<any>
        createDashboardTemplateFailure: (error: string, errorObject?: any) => Promise<any>
        getDashboardTemplate: (id: string) => Promise<any>
        getDashboardTemplateSuccess: (dashboardTemplate: DashboardTemplateType, payload?: string) => Promise<any>
        getDashboardTemplateFailure: (error: string, errorObject?: any) => Promise<any>
        updateDashboardTemplate: ({
            id,
            dashboardTemplateUpdates,
        }: {
            id: string
            dashboardTemplateUpdates?: Partial<DashboardTemplateType>
        }) => Promise<any>
        updateDashboardTemplateSuccess: (
            dashboardTemplate: DashboardTemplateEditorType | undefined,
            payload?: {
                id: string
                dashboardTemplateUpdates?: Partial<DashboardTemplateType>
            }
        ) => Promise<any>
        updateDashboardTemplateFailure: (error: string, errorObject?: any) => Promise<any>
        deleteDashboardTemplate: (id: string) => Promise<any>
        deleteDashboardTemplateSuccess: (dashboardTemplate: null, payload?: string) => Promise<any>
        deleteDashboardTemplateFailure: (error: string, errorObject?: any) => Promise<any>
        getTemplateSchema: () => Promise<any>
        getTemplateSchemaSuccess: (templateSchema: Record<string, any>, payload?: any) => Promise<any>
        getTemplateSchemaFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        editorValue: string
        dashboardTemplate: DashboardTemplateEditorType | undefined | null
        validationErrors: string[]
        id: string | null
        isOpenNewDashboardTemplateModal: boolean
        dashboardTemplateLoading: boolean
        templateSchema: Record<string, any> | null
        templateSchemaLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {
        createDashboardTemplateSuccess: ((
            action: {
                type: 'create dashboard template success (scenes.dashboard.dashboardTemplateEditorLogic)'
                payload: {
                    dashboardTemplate: DashboardTemplateEditorType | undefined
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateDashboardTemplateSuccess: ((
            action: {
                type: 'update dashboard template success (scenes.dashboard.dashboardTemplateEditorLogic)'
                payload: {
                    dashboardTemplate: DashboardTemplateEditorType | undefined
                    payload?: {
                        id: string
                        dashboardTemplateUpdates?: Partial<DashboardTemplateType>
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        deleteDashboardTemplateSuccess: ((
            action: {
                type: 'delete dashboard template success (scenes.dashboard.dashboardTemplateEditorLogic)'
                payload: {
                    dashboardTemplate: null
                    payload?: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        closeDashboardTemplateEditor: ((
            action: {
                type: 'close dashboard template editor (scenes.dashboard.dashboardTemplateEditorLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setDashboardTemplateId: ((
            action: {
                type: 'set dashboard template id (scenes.dashboard.dashboardTemplateEditorLogic)'
                payload: {
                    id: string | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        getDashboardTemplateSuccess: ((
            action: {
                type: 'get dashboard template success (scenes.dashboard.dashboardTemplateEditorLogic)'
                payload: {
                    dashboardTemplate: DashboardTemplateType
                    payload?: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setEditorValue: ((
            action: {
                type: 'set editor value (scenes.dashboard.dashboardTemplateEditorLogic)'
                payload: {
                    value: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateValidationErrors: ((
            action: {
                type: 'update validation errors (scenes.dashboard.dashboardTemplateEditorLogic)'
                payload: {
                    markers: MonacoMarker[] | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setDashboardTemplate: ((
            action: {
                type: 'set dashboard template (scenes.dashboard.dashboardTemplateEditorLogic)'
                payload: {
                    dashboardTemplate: DashboardTemplateEditorType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'dashboard', 'dashboardTemplateEditorLogic']
    pathString: 'scenes.dashboard.dashboardTemplateEditorLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        editorValue: string
        dashboardTemplate: DashboardTemplateEditorType | undefined | null
        validationErrors: string[]
        id: string | null
        isOpenNewDashboardTemplateModal: boolean
        dashboardTemplateLoading: boolean
        templateSchema: Record<string, any> | null
        templateSchemaLoading: boolean
    }
    reducers: {
        editorValue: (state: string, action: any, fullState: any) => string
        dashboardTemplate: (
            state: DashboardTemplateEditorType | undefined | null,
            action: any,
            fullState: any
        ) => DashboardTemplateEditorType | undefined | null
        validationErrors: (state: string[], action: any, fullState: any) => string[]
        id: (state: string | null, action: any, fullState: any) => string | null
        isOpenNewDashboardTemplateModal: (state: boolean, action: any, fullState: any) => boolean
        dashboardTemplateLoading: (state: boolean, action: any, fullState: any) => boolean
        templateSchema: (state: Record<string, any> | null, action: any, fullState: any) => Record<string, any> | null
        templateSchemaLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        editorValue: string
        dashboardTemplate: DashboardTemplateEditorType | undefined | null
        validationErrors: string[]
        id: string | null
        isOpenNewDashboardTemplateModal: boolean
        dashboardTemplateLoading: boolean
        templateSchema: Record<string, any> | null
        templateSchemaLoading: boolean
    }
    selectors: {
        editorValue: (state: any, props?: any) => string
        dashboardTemplate: (state: any, props?: any) => DashboardTemplateEditorType | undefined | null
        validationErrors: (state: any, props?: any) => string[]
        id: (state: any, props?: any) => string | null
        isOpenNewDashboardTemplateModal: (state: any, props?: any) => boolean
        dashboardTemplateLoading: (state: any, props?: any) => boolean
        templateSchema: (state: any, props?: any) => Record<string, any> | null
        templateSchemaLoading: (state: any, props?: any) => boolean
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
    }
    sharedListeners: {}
    values: {
        editorValue: string
        dashboardTemplate: DashboardTemplateEditorType | undefined | null
        validationErrors: string[]
        id: string | null
        isOpenNewDashboardTemplateModal: boolean
        dashboardTemplateLoading: boolean
        templateSchema: Record<string, any> | null
        templateSchemaLoading: boolean
        featureFlags: FeatureFlagsSet
    }
    _isKea: true
    _isKeaWithKey: false
}
