// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:21 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DuplicateDashboardForm } from './duplicateDashboardLogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../node_modules/kea-forms'
import type { DashboardType } from '../../types'

export interface duplicateDashboardLogicType extends Logic {
    actionCreators: {
        insightsAddedToDashboard: ({ dashboardId, insightIds }: { dashboardId: number; insightIds: number[] }) => {
            type: 'insights added to dashboard (scenes.dashboard.duplicateDashboardLogic)'
            payload: {
                dashboardId: number
                insightIds: number[]
            }
        }
        showDuplicateDashboardModal: (
            id: number,
            name: string
        ) => {
            type: 'show duplicate dashboard modal (scenes.dashboard.duplicateDashboardLogic)'
            payload: {
                id: number
                name: string
            }
        }
        hideDuplicateDashboardModal: () => {
            type: 'hide duplicate dashboard modal (scenes.dashboard.duplicateDashboardLogic)'
            payload: {
                value: true
            }
        }
        duplicateAndGoToDashboard: () => {
            type: 'duplicate and go to dashboard (scenes.dashboard.duplicateDashboardLogic)'
            payload: {
                value: true
            }
        }
        setDuplicateDashboardValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set duplicate dashboard value (scenes.dashboard.duplicateDashboardLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setDuplicateDashboardValues: (values: DeepPartial<DuplicateDashboardForm>) => {
            type: 'set duplicate dashboard values (scenes.dashboard.duplicateDashboardLogic)'
            payload: {
                values: DeepPartial<DuplicateDashboardForm>
            }
        }
        setDuplicateDashboardManualErrors: (errors: Record<string, any>) => {
            type: 'set duplicate dashboard manual errors (scenes.dashboard.duplicateDashboardLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchDuplicateDashboardField: (key: string) => {
            type: 'touch duplicate dashboard field (scenes.dashboard.duplicateDashboardLogic)'
            payload: {
                key: string
            }
        }
        resetDuplicateDashboard: (values?: DuplicateDashboardForm) => {
            type: 'reset duplicate dashboard (scenes.dashboard.duplicateDashboardLogic)'
            payload: {
                values?: DuplicateDashboardForm
            }
        }
        submitDuplicateDashboard: () => {
            type: 'submit duplicate dashboard (scenes.dashboard.duplicateDashboardLogic)'
            payload: {
                value: boolean
            }
        }
        submitDuplicateDashboardRequest: (duplicateDashboard: DuplicateDashboardForm) => {
            type: 'submit duplicate dashboard request (scenes.dashboard.duplicateDashboardLogic)'
            payload: {
                duplicateDashboard: DuplicateDashboardForm
            }
        }
        submitDuplicateDashboardSuccess: (duplicateDashboard: DuplicateDashboardForm) => {
            type: 'submit duplicate dashboard success (scenes.dashboard.duplicateDashboardLogic)'
            payload: {
                duplicateDashboard: DuplicateDashboardForm
            }
        }
        submitDuplicateDashboardFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit duplicate dashboard failure (scenes.dashboard.duplicateDashboardLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'insights added to dashboard (scenes.dashboard.duplicateDashboardLogic)': 'insightsAddedToDashboard'
        'show duplicate dashboard modal (scenes.dashboard.duplicateDashboardLogic)': 'showDuplicateDashboardModal'
        'hide duplicate dashboard modal (scenes.dashboard.duplicateDashboardLogic)': 'hideDuplicateDashboardModal'
        'duplicate and go to dashboard (scenes.dashboard.duplicateDashboardLogic)': 'duplicateAndGoToDashboard'
        'set duplicate dashboard value (scenes.dashboard.duplicateDashboardLogic)': 'setDuplicateDashboardValue'
        'set duplicate dashboard values (scenes.dashboard.duplicateDashboardLogic)': 'setDuplicateDashboardValues'
        'set duplicate dashboard manual errors (scenes.dashboard.duplicateDashboardLogic)': 'setDuplicateDashboardManualErrors'
        'touch duplicate dashboard field (scenes.dashboard.duplicateDashboardLogic)': 'touchDuplicateDashboardField'
        'reset duplicate dashboard (scenes.dashboard.duplicateDashboardLogic)': 'resetDuplicateDashboard'
        'submit duplicate dashboard (scenes.dashboard.duplicateDashboardLogic)': 'submitDuplicateDashboard'
        'submit duplicate dashboard request (scenes.dashboard.duplicateDashboardLogic)': 'submitDuplicateDashboardRequest'
        'submit duplicate dashboard success (scenes.dashboard.duplicateDashboardLogic)': 'submitDuplicateDashboardSuccess'
        'submit duplicate dashboard failure (scenes.dashboard.duplicateDashboardLogic)': 'submitDuplicateDashboardFailure'
    }
    actionTypes: {
        insightsAddedToDashboard: 'insights added to dashboard (scenes.dashboard.duplicateDashboardLogic)'
        showDuplicateDashboardModal: 'show duplicate dashboard modal (scenes.dashboard.duplicateDashboardLogic)'
        hideDuplicateDashboardModal: 'hide duplicate dashboard modal (scenes.dashboard.duplicateDashboardLogic)'
        duplicateAndGoToDashboard: 'duplicate and go to dashboard (scenes.dashboard.duplicateDashboardLogic)'
        setDuplicateDashboardValue: 'set duplicate dashboard value (scenes.dashboard.duplicateDashboardLogic)'
        setDuplicateDashboardValues: 'set duplicate dashboard values (scenes.dashboard.duplicateDashboardLogic)'
        setDuplicateDashboardManualErrors: 'set duplicate dashboard manual errors (scenes.dashboard.duplicateDashboardLogic)'
        touchDuplicateDashboardField: 'touch duplicate dashboard field (scenes.dashboard.duplicateDashboardLogic)'
        resetDuplicateDashboard: 'reset duplicate dashboard (scenes.dashboard.duplicateDashboardLogic)'
        submitDuplicateDashboard: 'submit duplicate dashboard (scenes.dashboard.duplicateDashboardLogic)'
        submitDuplicateDashboardRequest: 'submit duplicate dashboard request (scenes.dashboard.duplicateDashboardLogic)'
        submitDuplicateDashboardSuccess: 'submit duplicate dashboard success (scenes.dashboard.duplicateDashboardLogic)'
        submitDuplicateDashboardFailure: 'submit duplicate dashboard failure (scenes.dashboard.duplicateDashboardLogic)'
    }
    actions: {
        insightsAddedToDashboard: ({ dashboardId, insightIds }: { dashboardId: number; insightIds: number[] }) => void
        showDuplicateDashboardModal: (id: number, name: string) => void
        hideDuplicateDashboardModal: () => void
        duplicateAndGoToDashboard: () => void
        setDuplicateDashboardValue: (key: FieldName, value: any) => void
        setDuplicateDashboardValues: (values: DeepPartial<DuplicateDashboardForm>) => void
        setDuplicateDashboardManualErrors: (errors: Record<string, any>) => void
        touchDuplicateDashboardField: (key: string) => void
        resetDuplicateDashboard: (values?: DuplicateDashboardForm) => void
        submitDuplicateDashboard: () => void
        submitDuplicateDashboardRequest: (duplicateDashboard: DuplicateDashboardForm) => void
        submitDuplicateDashboardSuccess: (duplicateDashboard: DuplicateDashboardForm) => void
        submitDuplicateDashboardFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        insightsAddedToDashboard: ({
            dashboardId,
            insightIds,
        }: {
            dashboardId: number
            insightIds: number[]
        }) => Promise<any>
        showDuplicateDashboardModal: (id: number, name: string) => Promise<any>
        hideDuplicateDashboardModal: () => Promise<any>
        duplicateAndGoToDashboard: () => Promise<any>
        setDuplicateDashboardValue: (key: FieldName, value: any) => Promise<any>
        setDuplicateDashboardValues: (values: DeepPartial<DuplicateDashboardForm>) => Promise<any>
        setDuplicateDashboardManualErrors: (errors: Record<string, any>) => Promise<any>
        touchDuplicateDashboardField: (key: string) => Promise<any>
        resetDuplicateDashboard: (values?: DuplicateDashboardForm) => Promise<any>
        submitDuplicateDashboard: () => Promise<any>
        submitDuplicateDashboardRequest: (duplicateDashboard: DuplicateDashboardForm) => Promise<any>
        submitDuplicateDashboardSuccess: (duplicateDashboard: DuplicateDashboardForm) => Promise<any>
        submitDuplicateDashboardFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        duplicateDashboardModalVisible: boolean
        duplicateDashboard: DuplicateDashboardForm
        isDuplicateDashboardSubmitting: boolean
        showDuplicateDashboardErrors: boolean
        duplicateDashboardChanged: boolean
        duplicateDashboardTouches: Record<string, boolean>
        duplicateDashboardManualErrors: Record<string, any>
    }
    events: {}
    key: undefined
    listeners: {
        hideDuplicateDashboardModal: ((
            action: {
                type: 'hide duplicate dashboard modal (scenes.dashboard.duplicateDashboardLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        'duplicate dashboard success (models.dashboardsModel)': ((
            action: {
                type: 'duplicate dashboard success (models.dashboardsModel)'
                payload: {
                    dashboard: DashboardType
                    payload?: {
                        id: number
                        name: string
                        show: boolean
                        duplicateTiles: boolean
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        duplicateAndGoToDashboard: ((
            action: {
                type: 'duplicate and go to dashboard (scenes.dashboard.duplicateDashboardLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        showDuplicateDashboardModal: ((
            action: {
                type: 'show duplicate dashboard modal (scenes.dashboard.duplicateDashboardLogic)'
                payload: {
                    id: number
                    name: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'dashboard', 'duplicateDashboardLogic']
    pathString: 'scenes.dashboard.duplicateDashboardLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        duplicateDashboardModalVisible: boolean
        duplicateDashboard: DuplicateDashboardForm
        isDuplicateDashboardSubmitting: boolean
        showDuplicateDashboardErrors: boolean
        duplicateDashboardChanged: boolean
        duplicateDashboardTouches: Record<string, boolean>
        duplicateDashboardManualErrors: Record<string, any>
    }
    reducers: {
        duplicateDashboardModalVisible: (state: boolean, action: any, fullState: any) => boolean
        duplicateDashboard: (state: DuplicateDashboardForm, action: any, fullState: any) => DuplicateDashboardForm
        isDuplicateDashboardSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showDuplicateDashboardErrors: (state: boolean, action: any, fullState: any) => boolean
        duplicateDashboardChanged: (state: boolean, action: any, fullState: any) => boolean
        duplicateDashboardTouches: (
            state: Record<string, boolean>,
            action: any,
            fullState: any
        ) => Record<string, boolean>
        duplicateDashboardManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        duplicateDashboardModalVisible: boolean
        duplicateDashboard: DuplicateDashboardForm
        isDuplicateDashboardSubmitting: boolean
        showDuplicateDashboardErrors: boolean
        duplicateDashboardChanged: boolean
        duplicateDashboardTouches: Record<string, boolean>
        duplicateDashboardManualErrors: Record<string, any>
    }
    selectors: {
        duplicateDashboardModalVisible: (state: any, props?: any) => boolean
        duplicateDashboard: (state: any, props?: any) => DuplicateDashboardForm
        isDuplicateDashboardSubmitting: (state: any, props?: any) => boolean
        showDuplicateDashboardErrors: (state: any, props?: any) => boolean
        duplicateDashboardChanged: (state: any, props?: any) => boolean
        duplicateDashboardTouches: (state: any, props?: any) => Record<string, boolean>
        duplicateDashboardManualErrors: (state: any, props?: any) => Record<string, any>
        duplicateDashboardTouched: (state: any, props?: any) => boolean
        duplicateDashboardValidationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<DuplicateDashboardForm, ValidationErrorType>
        duplicateDashboardAllErrors: (state: any, props?: any) => Record<string, any>
        duplicateDashboardHasErrors: (state: any, props?: any) => boolean
        duplicateDashboardErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<DuplicateDashboardForm, ValidationErrorType>
        isDuplicateDashboardValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        duplicateDashboardModalVisible: boolean
        duplicateDashboard: DuplicateDashboardForm
        isDuplicateDashboardSubmitting: boolean
        showDuplicateDashboardErrors: boolean
        duplicateDashboardChanged: boolean
        duplicateDashboardTouches: Record<string, boolean>
        duplicateDashboardManualErrors: Record<string, any>
        duplicateDashboardTouched: boolean
        duplicateDashboardValidationErrors: DeepPartialMap<DuplicateDashboardForm, ValidationErrorType>
        duplicateDashboardAllErrors: Record<string, any>
        duplicateDashboardHasErrors: boolean
        duplicateDashboardErrors: DeepPartialMap<DuplicateDashboardForm, ValidationErrorType>
        isDuplicateDashboardValid: boolean
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalReducerActions: {
        'duplicate dashboard success (models.dashboardsModel)': (
            dashboard: DashboardType,
            payload?: {
                id: number
                name: string
                show: boolean
                duplicateTiles: boolean
            }
        ) => {
            type: 'duplicate dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType
                payload?: {
                    id: number
                    name: string
                    show: boolean
                    duplicateTiles: boolean
                }
            }
        }
    }
}
