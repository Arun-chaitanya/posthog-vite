// Generated by kea-typegen on Thu, 20 Jul 2023 11:31:50 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic, BreakPointFunction } from 'kea'

import type { FeatureFlagsSet } from '../../lib/logic/featureFlagLogic'
import type { DashboardLogicProps, DashboardTileLayoutUpdatePayload, RefreshStatus } from './dashboardLogic'
import type { AnyPropertyFilter, Breadcrumb, DashboardLayoutSize, DashboardMode, DashboardPlacement, DashboardTemplateEditorType, DashboardTile, DashboardType, FilterType, InsightModel, InsightShortId } from '../../types'
import type { DashboardEventSource } from '../../lib/utils/eventUsageLogic'
import type { Layout, Layouts } from '../../../../node_modules/.pnpm/@types+react-grid-layout@1.3.2/node_modules/@types/react-grid-layout/index.d'
import type { Dayjs } from '../../lib/dayjs'

export interface dashboardLogicType extends Logic {
    actionCreators: {
        loadDashboardItems: (payload: { refresh?: boolean; action: string }) => {
            type: 'load dashboard items (scenes.dashboard.dashboardLogic)'
            payload: {
                refresh?: boolean | undefined
                action: string
            }
        }
        triggerDashboardUpdate: (payload: any) => {
            type: 'trigger dashboard update (scenes.dashboard.dashboardLogic)'
            payload: {
                payload: any
            }
        }
        setDashboardMode: (
            mode: DashboardMode | null,
            source: DashboardEventSource | null
        ) => {
            type: 'set dashboard mode (scenes.dashboard.dashboardLogic)'
            payload: {
                mode: DashboardMode | null
                source: DashboardEventSource | null
            }
        }
        saveLayouts: (tilesToSave?: DashboardTileLayoutUpdatePayload[]) => {
            type: 'save layouts (scenes.dashboard.dashboardLogic)'
            payload: {
                tilesToSave: DashboardTileLayoutUpdatePayload[]
            }
        }
        updateLayouts: (layouts: Layouts) => {
            type: 'update layouts (scenes.dashboard.dashboardLogic)'
            payload: {
                layouts: Layouts
            }
        }
        updateContainerWidth: (
            containerWidth: number,
            columns: number
        ) => {
            type: 'update container width (scenes.dashboard.dashboardLogic)'
            payload: {
                containerWidth: number
                columns: number
            }
        }
        updateTileColor: (
            tileId: number,
            color: string | null
        ) => {
            type: 'update tile color (scenes.dashboard.dashboardLogic)'
            payload: {
                tileId: number
                color: string | null
            }
        }
        removeTile: (tile: DashboardTile) => {
            type: 'remove tile (scenes.dashboard.dashboardLogic)'
            payload: {
                tile: DashboardTile
            }
        }
        refreshAllDashboardItems: (payload: {
            tiles?: DashboardTile[]
            action: string
            initialLoad?: boolean
            dashboardQueryId?: string
        }) => {
            type: 'refresh all dashboard items (scenes.dashboard.dashboardLogic)'
            payload: {
                tiles?: DashboardTile[] | undefined
                action: string
                initialLoad?: boolean | undefined
                dashboardQueryId?: string | undefined
            }
        }
        refreshAllDashboardItemsManual: () => {
            type: 'refresh all dashboard items manual (scenes.dashboard.dashboardLogic)'
            payload: {
                value: true
            }
        }
        resetInterval: () => {
            type: 'reset interval (scenes.dashboard.dashboardLogic)'
            payload: {
                value: true
            }
        }
        updateAndRefreshDashboard: () => {
            type: 'update and refresh dashboard (scenes.dashboard.dashboardLogic)'
            payload: {
                value: true
            }
        }
        setDates: (
            dateFrom: string | null,
            dateTo: string | null
        ) => {
            type: 'set dates (scenes.dashboard.dashboardLogic)'
            payload: {
                dateFrom: string | null
                dateTo: string | null
            }
        }
        setProperties: (properties: AnyPropertyFilter[]) => {
            type: 'set properties (scenes.dashboard.dashboardLogic)'
            payload: {
                properties: AnyPropertyFilter[]
            }
        }
        setAutoRefresh: (
            enabled: boolean,
            interval: number
        ) => {
            type: 'set auto refresh (scenes.dashboard.dashboardLogic)'
            payload: {
                enabled: boolean
                interval: number
            }
        }
        setRefreshStatus: (
            shortId: InsightShortId,
            loading?: any
        ) => {
            type: 'set refresh status (scenes.dashboard.dashboardLogic)'
            payload: {
                shortId: InsightShortId
                loading: any
            }
        }
        setRefreshStatuses: (
            shortIds: InsightShortId[],
            loading?: any
        ) => {
            type: 'set refresh statuses (scenes.dashboard.dashboardLogic)'
            payload: {
                shortIds: InsightShortId[]
                loading: any
            }
        }
        setRefreshError: (shortId: InsightShortId) => {
            type: 'set refresh error (scenes.dashboard.dashboardLogic)'
            payload: {
                shortId: InsightShortId
            }
        }
        reportDashboardViewed: () => {
            type: 'report dashboard viewed (scenes.dashboard.dashboardLogic)'
            payload: {
                value: true
            }
        }
        setShouldReportOnAPILoad: (shouldReport: boolean) => {
            type: 'set should report on a p i load (scenes.dashboard.dashboardLogic)'
            payload: {
                shouldReport: boolean
            }
        }
        setSubscriptionMode: (
            enabled: boolean,
            id?: number | 'new'
        ) => {
            type: 'set subscription mode (scenes.dashboard.dashboardLogic)'
            payload: {
                enabled: boolean
                id: number | 'new' | undefined
            }
        }
        moveToDashboard: (
            tile: DashboardTile,
            fromDashboard: number,
            toDashboard: number,
            toDashboardName: string,
            allowUndo?: boolean
        ) => {
            type: 'move to dashboard (scenes.dashboard.dashboardLogic)'
            payload: {
                tile: DashboardTile
                fromDashboard: number
                toDashboard: number
                toDashboardName: string
                allowUndo: boolean
            }
        }
        setTextTileId: (textTileId: number | 'new' | null) => {
            type: 'set text tile id (scenes.dashboard.dashboardLogic)'
            payload: {
                textTileId: number | 'new' | null
            }
        }
        duplicateTile: (tile: DashboardTile) => {
            type: 'duplicate tile (scenes.dashboard.dashboardLogic)'
            payload: {
                tile: DashboardTile
            }
        }
        loadingDashboardItemsStarted: (
            action: string,
            dashboardQueryId: string
        ) => {
            type: 'loading dashboard items started (scenes.dashboard.dashboardLogic)'
            payload: {
                action: string
                dashboardQueryId: string
            }
        }
        setInitialLoadResponseBytes: (responseBytes: number) => {
            type: 'set initial load response bytes (scenes.dashboard.dashboardLogic)'
            payload: {
                responseBytes: number
            }
        }
        abortQuery: (payload: { dashboardQueryId: string; queryId: string; queryStartTime: number }) => {
            type: 'abort query (scenes.dashboard.dashboardLogic)'
            payload: {
                dashboardQueryId: string
                queryId: string
                queryStartTime: number
            }
        }
        abortAnyRunningQuery: () => {
            type: 'abort any running query (scenes.dashboard.dashboardLogic)'
            payload: {
                value: true
            }
        }
        loadDashboardItemsSuccess: (
            dashboard: DashboardType | null,
            payload?: {
                refresh?: boolean | undefined
                action: string
            }
        ) => {
            type: 'load dashboard items success (scenes.dashboard.dashboardLogic)'
            payload: {
                dashboard: DashboardType | null
                payload?: {
                    refresh?: boolean | undefined
                    action: string
                }
            }
        }
        loadDashboardItemsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load dashboard items failure (scenes.dashboard.dashboardLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateFilters: () => {
            type: 'update filters (scenes.dashboard.dashboardLogic)'
            payload: any
        }
        updateFiltersSuccess: (
            dashboard: DashboardType | null,
            payload?: any
        ) => {
            type: 'update filters success (scenes.dashboard.dashboardLogic)'
            payload: {
                dashboard: DashboardType | null
                payload?: any
            }
        }
        updateFiltersFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update filters failure (scenes.dashboard.dashboardLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateTileColorSuccess: (
            dashboard: DashboardType | null,
            payload?: {
                tileId: number
                color: string | null
            }
        ) => {
            type: 'update tile color success (scenes.dashboard.dashboardLogic)'
            payload: {
                dashboard: DashboardType | null
                payload?: {
                    tileId: number
                    color: string | null
                }
            }
        }
        updateTileColorFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update tile color failure (scenes.dashboard.dashboardLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        removeTileSuccess: (
            dashboard: DashboardType | null,
            payload?: {
                tile: DashboardTile
            }
        ) => {
            type: 'remove tile success (scenes.dashboard.dashboardLogic)'
            payload: {
                dashboard: DashboardType | null
                payload?: {
                    tile: DashboardTile
                }
            }
        }
        removeTileFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'remove tile failure (scenes.dashboard.dashboardLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        duplicateTileSuccess: (
            dashboard: DashboardType | null,
            payload?: {
                tile: DashboardTile
            }
        ) => {
            type: 'duplicate tile success (scenes.dashboard.dashboardLogic)'
            payload: {
                dashboard: DashboardType | null
                payload?: {
                    tile: DashboardTile
                }
            }
        }
        duplicateTileFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'duplicate tile failure (scenes.dashboard.dashboardLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        moveToDashboardSuccess: (
            dashboard: DashboardType | null,
            payload?: {
                tile: DashboardTile
                fromDashboard: number
                toDashboard: number
                toDashboardName: string
                allowUndo: boolean
            }
        ) => {
            type: 'move to dashboard success (scenes.dashboard.dashboardLogic)'
            payload: {
                dashboard: DashboardType | null
                payload?: {
                    tile: DashboardTile
                    fromDashboard: number
                    toDashboard: number
                    toDashboardName: string
                    allowUndo: boolean
                }
            }
        }
        moveToDashboardFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'move to dashboard failure (scenes.dashboard.dashboardLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load dashboard items (scenes.dashboard.dashboardLogic)': 'loadDashboardItems'
        'trigger dashboard update (scenes.dashboard.dashboardLogic)': 'triggerDashboardUpdate'
        'set dashboard mode (scenes.dashboard.dashboardLogic)': 'setDashboardMode'
        'save layouts (scenes.dashboard.dashboardLogic)': 'saveLayouts'
        'update layouts (scenes.dashboard.dashboardLogic)': 'updateLayouts'
        'update container width (scenes.dashboard.dashboardLogic)': 'updateContainerWidth'
        'update tile color (scenes.dashboard.dashboardLogic)': 'updateTileColor'
        'remove tile (scenes.dashboard.dashboardLogic)': 'removeTile'
        'refresh all dashboard items (scenes.dashboard.dashboardLogic)': 'refreshAllDashboardItems'
        'refresh all dashboard items manual (scenes.dashboard.dashboardLogic)': 'refreshAllDashboardItemsManual'
        'reset interval (scenes.dashboard.dashboardLogic)': 'resetInterval'
        'update and refresh dashboard (scenes.dashboard.dashboardLogic)': 'updateAndRefreshDashboard'
        'set dates (scenes.dashboard.dashboardLogic)': 'setDates'
        'set properties (scenes.dashboard.dashboardLogic)': 'setProperties'
        'set auto refresh (scenes.dashboard.dashboardLogic)': 'setAutoRefresh'
        'set refresh status (scenes.dashboard.dashboardLogic)': 'setRefreshStatus'
        'set refresh statuses (scenes.dashboard.dashboardLogic)': 'setRefreshStatuses'
        'set refresh error (scenes.dashboard.dashboardLogic)': 'setRefreshError'
        'report dashboard viewed (scenes.dashboard.dashboardLogic)': 'reportDashboardViewed'
        'set should report on a p i load (scenes.dashboard.dashboardLogic)': 'setShouldReportOnAPILoad'
        'set subscription mode (scenes.dashboard.dashboardLogic)': 'setSubscriptionMode'
        'move to dashboard (scenes.dashboard.dashboardLogic)': 'moveToDashboard'
        'set text tile id (scenes.dashboard.dashboardLogic)': 'setTextTileId'
        'duplicate tile (scenes.dashboard.dashboardLogic)': 'duplicateTile'
        'loading dashboard items started (scenes.dashboard.dashboardLogic)': 'loadingDashboardItemsStarted'
        'set initial load response bytes (scenes.dashboard.dashboardLogic)': 'setInitialLoadResponseBytes'
        'abort query (scenes.dashboard.dashboardLogic)': 'abortQuery'
        'abort any running query (scenes.dashboard.dashboardLogic)': 'abortAnyRunningQuery'
        'load dashboard items success (scenes.dashboard.dashboardLogic)': 'loadDashboardItemsSuccess'
        'load dashboard items failure (scenes.dashboard.dashboardLogic)': 'loadDashboardItemsFailure'
        'update filters (scenes.dashboard.dashboardLogic)': 'updateFilters'
        'update filters success (scenes.dashboard.dashboardLogic)': 'updateFiltersSuccess'
        'update filters failure (scenes.dashboard.dashboardLogic)': 'updateFiltersFailure'
        'update tile color success (scenes.dashboard.dashboardLogic)': 'updateTileColorSuccess'
        'update tile color failure (scenes.dashboard.dashboardLogic)': 'updateTileColorFailure'
        'remove tile success (scenes.dashboard.dashboardLogic)': 'removeTileSuccess'
        'remove tile failure (scenes.dashboard.dashboardLogic)': 'removeTileFailure'
        'duplicate tile success (scenes.dashboard.dashboardLogic)': 'duplicateTileSuccess'
        'duplicate tile failure (scenes.dashboard.dashboardLogic)': 'duplicateTileFailure'
        'move to dashboard success (scenes.dashboard.dashboardLogic)': 'moveToDashboardSuccess'
        'move to dashboard failure (scenes.dashboard.dashboardLogic)': 'moveToDashboardFailure'
    }
    actionTypes: {
        loadDashboardItems: 'load dashboard items (scenes.dashboard.dashboardLogic)'
        triggerDashboardUpdate: 'trigger dashboard update (scenes.dashboard.dashboardLogic)'
        setDashboardMode: 'set dashboard mode (scenes.dashboard.dashboardLogic)'
        saveLayouts: 'save layouts (scenes.dashboard.dashboardLogic)'
        updateLayouts: 'update layouts (scenes.dashboard.dashboardLogic)'
        updateContainerWidth: 'update container width (scenes.dashboard.dashboardLogic)'
        updateTileColor: 'update tile color (scenes.dashboard.dashboardLogic)'
        removeTile: 'remove tile (scenes.dashboard.dashboardLogic)'
        refreshAllDashboardItems: 'refresh all dashboard items (scenes.dashboard.dashboardLogic)'
        refreshAllDashboardItemsManual: 'refresh all dashboard items manual (scenes.dashboard.dashboardLogic)'
        resetInterval: 'reset interval (scenes.dashboard.dashboardLogic)'
        updateAndRefreshDashboard: 'update and refresh dashboard (scenes.dashboard.dashboardLogic)'
        setDates: 'set dates (scenes.dashboard.dashboardLogic)'
        setProperties: 'set properties (scenes.dashboard.dashboardLogic)'
        setAutoRefresh: 'set auto refresh (scenes.dashboard.dashboardLogic)'
        setRefreshStatus: 'set refresh status (scenes.dashboard.dashboardLogic)'
        setRefreshStatuses: 'set refresh statuses (scenes.dashboard.dashboardLogic)'
        setRefreshError: 'set refresh error (scenes.dashboard.dashboardLogic)'
        reportDashboardViewed: 'report dashboard viewed (scenes.dashboard.dashboardLogic)'
        setShouldReportOnAPILoad: 'set should report on a p i load (scenes.dashboard.dashboardLogic)'
        setSubscriptionMode: 'set subscription mode (scenes.dashboard.dashboardLogic)'
        moveToDashboard: 'move to dashboard (scenes.dashboard.dashboardLogic)'
        setTextTileId: 'set text tile id (scenes.dashboard.dashboardLogic)'
        duplicateTile: 'duplicate tile (scenes.dashboard.dashboardLogic)'
        loadingDashboardItemsStarted: 'loading dashboard items started (scenes.dashboard.dashboardLogic)'
        setInitialLoadResponseBytes: 'set initial load response bytes (scenes.dashboard.dashboardLogic)'
        abortQuery: 'abort query (scenes.dashboard.dashboardLogic)'
        abortAnyRunningQuery: 'abort any running query (scenes.dashboard.dashboardLogic)'
        loadDashboardItemsSuccess: 'load dashboard items success (scenes.dashboard.dashboardLogic)'
        loadDashboardItemsFailure: 'load dashboard items failure (scenes.dashboard.dashboardLogic)'
        updateFilters: 'update filters (scenes.dashboard.dashboardLogic)'
        updateFiltersSuccess: 'update filters success (scenes.dashboard.dashboardLogic)'
        updateFiltersFailure: 'update filters failure (scenes.dashboard.dashboardLogic)'
        updateTileColorSuccess: 'update tile color success (scenes.dashboard.dashboardLogic)'
        updateTileColorFailure: 'update tile color failure (scenes.dashboard.dashboardLogic)'
        removeTileSuccess: 'remove tile success (scenes.dashboard.dashboardLogic)'
        removeTileFailure: 'remove tile failure (scenes.dashboard.dashboardLogic)'
        duplicateTileSuccess: 'duplicate tile success (scenes.dashboard.dashboardLogic)'
        duplicateTileFailure: 'duplicate tile failure (scenes.dashboard.dashboardLogic)'
        moveToDashboardSuccess: 'move to dashboard success (scenes.dashboard.dashboardLogic)'
        moveToDashboardFailure: 'move to dashboard failure (scenes.dashboard.dashboardLogic)'
    }
    actions: {
        loadDashboardItems: (payload: { refresh?: boolean; action: string }) => void
        triggerDashboardUpdate: (payload: any) => void
        setDashboardMode: (mode: DashboardMode | null, source: DashboardEventSource | null) => void
        saveLayouts: (tilesToSave?: DashboardTileLayoutUpdatePayload[]) => void
        updateLayouts: (layouts: Layouts) => void
        updateContainerWidth: (containerWidth: number, columns: number) => void
        updateTileColor: (tileId: number, color: string | null) => void
        removeTile: (tile: DashboardTile) => void
        refreshAllDashboardItems: (payload: {
            tiles?: DashboardTile[]
            action: string
            initialLoad?: boolean
            dashboardQueryId?: string
        }) => void
        refreshAllDashboardItemsManual: () => void
        resetInterval: () => void
        updateAndRefreshDashboard: () => void
        setDates: (dateFrom: string | null, dateTo: string | null) => void
        setProperties: (properties: AnyPropertyFilter[]) => void
        setAutoRefresh: (enabled: boolean, interval: number) => void
        setRefreshStatus: (shortId: InsightShortId, loading?: any) => void
        setRefreshStatuses: (shortIds: InsightShortId[], loading?: any) => void
        setRefreshError: (shortId: InsightShortId) => void
        reportDashboardViewed: () => void
        setShouldReportOnAPILoad: (shouldReport: boolean) => void
        setSubscriptionMode: (enabled: boolean, id?: number | 'new') => void
        moveToDashboard: (
            tile: DashboardTile,
            fromDashboard: number,
            toDashboard: number,
            toDashboardName: string,
            allowUndo?: boolean
        ) => void
        setTextTileId: (textTileId: number | 'new' | null) => void
        duplicateTile: (tile: DashboardTile) => void
        loadingDashboardItemsStarted: (action: string, dashboardQueryId: string) => void
        setInitialLoadResponseBytes: (responseBytes: number) => void
        abortQuery: (payload: { dashboardQueryId: string; queryId: string; queryStartTime: number }) => void
        abortAnyRunningQuery: () => void
        loadDashboardItemsSuccess: (
            dashboard: DashboardType | null,
            payload?: {
                refresh?: boolean | undefined
                action: string
            }
        ) => void
        loadDashboardItemsFailure: (error: string, errorObject?: any) => void
        updateFilters: () => void
        updateFiltersSuccess: (dashboard: DashboardType | null, payload?: any) => void
        updateFiltersFailure: (error: string, errorObject?: any) => void
        updateTileColorSuccess: (
            dashboard: DashboardType | null,
            payload?: {
                tileId: number
                color: string | null
            }
        ) => void
        updateTileColorFailure: (error: string, errorObject?: any) => void
        removeTileSuccess: (
            dashboard: DashboardType | null,
            payload?: {
                tile: DashboardTile
            }
        ) => void
        removeTileFailure: (error: string, errorObject?: any) => void
        duplicateTileSuccess: (
            dashboard: DashboardType | null,
            payload?: {
                tile: DashboardTile
            }
        ) => void
        duplicateTileFailure: (error: string, errorObject?: any) => void
        moveToDashboardSuccess: (
            dashboard: DashboardType | null,
            payload?: {
                tile: DashboardTile
                fromDashboard: number
                toDashboard: number
                toDashboardName: string
                allowUndo: boolean
            }
        ) => void
        moveToDashboardFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadDashboardItems: (payload: { refresh?: boolean; action: string }) => Promise<any>
        triggerDashboardUpdate: (payload: any) => Promise<any>
        setDashboardMode: (mode: DashboardMode | null, source: DashboardEventSource | null) => Promise<any>
        saveLayouts: (tilesToSave?: DashboardTileLayoutUpdatePayload[]) => Promise<any>
        updateLayouts: (layouts: Layouts) => Promise<any>
        updateContainerWidth: (containerWidth: number, columns: number) => Promise<any>
        updateTileColor: (tileId: number, color: string | null) => Promise<any>
        removeTile: (tile: DashboardTile) => Promise<any>
        refreshAllDashboardItems: (payload: {
            tiles?: DashboardTile[]
            action: string
            initialLoad?: boolean
            dashboardQueryId?: string
        }) => Promise<any>
        refreshAllDashboardItemsManual: () => Promise<any>
        resetInterval: () => Promise<any>
        updateAndRefreshDashboard: () => Promise<any>
        setDates: (dateFrom: string | null, dateTo: string | null) => Promise<any>
        setProperties: (properties: AnyPropertyFilter[]) => Promise<any>
        setAutoRefresh: (enabled: boolean, interval: number) => Promise<any>
        setRefreshStatus: (shortId: InsightShortId, loading?: any) => Promise<any>
        setRefreshStatuses: (shortIds: InsightShortId[], loading?: any) => Promise<any>
        setRefreshError: (shortId: InsightShortId) => Promise<any>
        reportDashboardViewed: () => Promise<any>
        setShouldReportOnAPILoad: (shouldReport: boolean) => Promise<any>
        setSubscriptionMode: (enabled: boolean, id?: number | 'new') => Promise<any>
        moveToDashboard: (
            tile: DashboardTile,
            fromDashboard: number,
            toDashboard: number,
            toDashboardName: string,
            allowUndo?: boolean
        ) => Promise<any>
        setTextTileId: (textTileId: number | 'new' | null) => Promise<any>
        duplicateTile: (tile: DashboardTile) => Promise<any>
        loadingDashboardItemsStarted: (action: string, dashboardQueryId: string) => Promise<any>
        setInitialLoadResponseBytes: (responseBytes: number) => Promise<any>
        abortQuery: (payload: { dashboardQueryId: string; queryId: string; queryStartTime: number }) => Promise<any>
        abortAnyRunningQuery: () => Promise<any>
        loadDashboardItemsSuccess: (
            dashboard: DashboardType | null,
            payload?: {
                refresh?: boolean | undefined
                action: string
            }
        ) => Promise<any>
        loadDashboardItemsFailure: (error: string, errorObject?: any) => Promise<any>
        updateFilters: () => Promise<any>
        updateFiltersSuccess: (dashboard: DashboardType | null, payload?: any) => Promise<any>
        updateFiltersFailure: (error: string, errorObject?: any) => Promise<any>
        updateTileColorSuccess: (
            dashboard: DashboardType | null,
            payload?: {
                tileId: number
                color: string | null
            }
        ) => Promise<any>
        updateTileColorFailure: (error: string, errorObject?: any) => Promise<any>
        removeTileSuccess: (
            dashboard: DashboardType | null,
            payload?: {
                tile: DashboardTile
            }
        ) => Promise<any>
        removeTileFailure: (error: string, errorObject?: any) => Promise<any>
        duplicateTileSuccess: (
            dashboard: DashboardType | null,
            payload?: {
                tile: DashboardTile
            }
        ) => Promise<any>
        duplicateTileFailure: (error: string, errorObject?: any) => Promise<any>
        moveToDashboardSuccess: (
            dashboard: DashboardType | null,
            payload?: {
                tile: DashboardTile
                fromDashboard: number
                toDashboard: number
                toDashboardName: string
                allowUndo: boolean
            }
        ) => Promise<any>
        moveToDashboardFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        dashboard: DashboardType | null
        dashboardLoading: boolean
        receivedErrorsFromAPI: boolean
        filters: FilterType
        loadTimer: Date | null
        dashboardLoadTimerData: {
            dashboardQueryId: string
            action: string
            startTime: number
            responseBytes: number
        }
        refreshStatus: Record<string, RefreshStatus>
        columns: number | null
        containerWidth: number | null
        dashboardMode: DashboardMode | null
        lastDashboardModeSource: DashboardEventSource | null
        autoRefresh: {
            interval: number
            enabled: boolean
        }
        shouldReportOnAPILoad: boolean
        showSubscriptions: boolean
        subscriptionId: number | 'new' | null
        showTextTileModal: boolean
        textTileId: number | 'new' | null
    }
    events: {
        afterMount: () => void
        beforeUnmount: () => void
    }
    key: number | 'new'
    listeners: {
        updateFiltersSuccess: ((
            action: {
                type: 'update filters success (scenes.dashboard.dashboardLogic)'
                payload: {
                    dashboard: DashboardType | null
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setRefreshError: ((
            action: {
                type: 'set refresh error (scenes.dashboard.dashboardLogic)'
                payload: {
                    shortId: InsightShortId
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setRefreshStatuses: ((
            action: {
                type: 'set refresh statuses (scenes.dashboard.dashboardLogic)'
                payload: {
                    shortIds: InsightShortId[]
                    loading: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setRefreshStatus: ((
            action: {
                type: 'set refresh status (scenes.dashboard.dashboardLogic)'
                payload: {
                    shortId: InsightShortId
                    loading: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadDashboardItemsFailure: ((
            action: {
                type: 'load dashboard items failure (scenes.dashboard.dashboardLogic)'
                payload: {
                    error: string
                    errorObject?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        'duplicate insight success (models.insightsModel)': ((
            action: {
                type: 'duplicate insight success (models.insightsModel)'
                payload: {
                    item: InsightModel
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        'tile added to dashboard (models.dashboardsModel)': ((
            action: {
                type: 'tile added to dashboard (models.dashboardsModel)'
                payload: {
                    dashboardId: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        'update dashboard insight (models.dashboardsModel)': ((
            action: {
                type: 'update dashboard insight (models.dashboardsModel)'
                payload: {
                    insight: InsightModel
                    extraDashboardIds: number[] | undefined
                    updateTileOnDashboards: [number] | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateLayouts: ((
            action: {
                type: 'update layouts (scenes.dashboard.dashboardLogic)'
                payload: {
                    layouts: Layouts
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        saveLayouts: ((
            action: {
                type: 'save layouts (scenes.dashboard.dashboardLogic)'
                payload: {
                    tilesToSave: DashboardTileLayoutUpdatePayload[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        moveToDashboardSuccess: ((
            action: {
                type: 'move to dashboard success (scenes.dashboard.dashboardLogic)'
                payload: {
                    dashboard: DashboardType | null
                    payload?: {
                        tile: DashboardTile
                        fromDashboard: number
                        toDashboard: number
                        toDashboardName: string
                        allowUndo: boolean
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        triggerDashboardUpdate: ((
            action: {
                type: 'trigger dashboard update (scenes.dashboard.dashboardLogic)'
                payload: {
                    payload: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        refreshAllDashboardItemsManual: ((
            action: {
                type: 'refresh all dashboard items manual (scenes.dashboard.dashboardLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        refreshAllDashboardItems: ((
            action: {
                type: 'refresh all dashboard items (scenes.dashboard.dashboardLogic)'
                payload: {
                    tiles?: DashboardTile[] | undefined
                    action: string
                    initialLoad?: boolean | undefined
                    dashboardQueryId?: string | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setDates: ((
            action: {
                type: 'set dates (scenes.dashboard.dashboardLogic)'
                payload: {
                    dateFrom: string | null
                    dateTo: string | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setProperties: ((
            action: {
                type: 'set properties (scenes.dashboard.dashboardLogic)'
                payload: {
                    properties: AnyPropertyFilter[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setDashboardMode: ((
            action: {
                type: 'set dashboard mode (scenes.dashboard.dashboardLogic)'
                payload: {
                    mode: DashboardMode | null
                    source: DashboardEventSource | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setAutoRefresh: ((
            action: {
                type: 'set auto refresh (scenes.dashboard.dashboardLogic)'
                payload: {
                    enabled: boolean
                    interval: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        resetInterval: ((
            action: {
                type: 'reset interval (scenes.dashboard.dashboardLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadDashboardItemsSuccess: ((
            action: {
                type: 'load dashboard items success (scenes.dashboard.dashboardLogic)'
                payload: {
                    dashboard: DashboardType | null
                    payload?: {
                        refresh?: boolean | undefined
                        action: string
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDashboardViewed: ((
            action: {
                type: 'report dashboard viewed (scenes.dashboard.dashboardLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        abortAnyRunningQuery: ((
            action: {
                type: 'abort any running query (scenes.dashboard.dashboardLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        abortQuery: ((
            action: {
                type: 'abort query (scenes.dashboard.dashboardLogic)'
                payload: {
                    dashboardQueryId: string
                    queryId: string
                    queryStartTime: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'dashboard', 'dashboardLogic']
    pathString: 'scenes.dashboard.dashboardLogic'
    props: DashboardLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        dashboard: DashboardType | null
        dashboardLoading: boolean
        receivedErrorsFromAPI: boolean
        filters: FilterType
        loadTimer: Date | null
        dashboardLoadTimerData: {
            dashboardQueryId: string
            action: string
            startTime: number
            responseBytes: number
        }
        refreshStatus: Record<string, RefreshStatus>
        columns: number | null
        containerWidth: number | null
        dashboardMode: DashboardMode | null
        lastDashboardModeSource: DashboardEventSource | null
        autoRefresh: {
            interval: number
            enabled: boolean
        }
        shouldReportOnAPILoad: boolean
        showSubscriptions: boolean
        subscriptionId: number | 'new' | null
        showTextTileModal: boolean
        textTileId: number | 'new' | null
    }
    reducers: {
        dashboard: (state: DashboardType | null, action: any, fullState: any) => DashboardType | null
        dashboardLoading: (state: boolean, action: any, fullState: any) => boolean
        receivedErrorsFromAPI: (state: boolean, action: any, fullState: any) => boolean
        filters: (state: FilterType, action: any, fullState: any) => FilterType
        loadTimer: (state: Date | null, action: any, fullState: any) => Date | null
        dashboardLoadTimerData: (
            state: {
                dashboardQueryId: string
                action: string
                startTime: number
                responseBytes: number
            },
            action: any,
            fullState: any
        ) => {
            dashboardQueryId: string
            action: string
            startTime: number
            responseBytes: number
        }
        refreshStatus: (
            state: Record<string, RefreshStatus>,
            action: any,
            fullState: any
        ) => Record<string, RefreshStatus>
        columns: (state: number | null, action: any, fullState: any) => number | null
        containerWidth: (state: number | null, action: any, fullState: any) => number | null
        dashboardMode: (state: DashboardMode | null, action: any, fullState: any) => DashboardMode | null
        lastDashboardModeSource: (
            state: DashboardEventSource | null,
            action: any,
            fullState: any
        ) => DashboardEventSource | null
        autoRefresh: (
            state: {
                interval: number
                enabled: boolean
            },
            action: any,
            fullState: any
        ) => {
            interval: number
            enabled: boolean
        }
        shouldReportOnAPILoad: (state: boolean, action: any, fullState: any) => boolean
        showSubscriptions: (state: boolean, action: any, fullState: any) => boolean
        subscriptionId: (state: number | 'new' | null, action: any, fullState: any) => number | 'new' | null
        showTextTileModal: (state: boolean, action: any, fullState: any) => boolean
        textTileId: (state: number | 'new' | null, action: any, fullState: any) => number | 'new' | null
    }
    selector: (state: any) => {
        dashboard: DashboardType | null
        dashboardLoading: boolean
        receivedErrorsFromAPI: boolean
        filters: FilterType
        loadTimer: Date | null
        dashboardLoadTimerData: {
            dashboardQueryId: string
            action: string
            startTime: number
            responseBytes: number
        }
        refreshStatus: Record<string, RefreshStatus>
        columns: number | null
        containerWidth: number | null
        dashboardMode: DashboardMode | null
        lastDashboardModeSource: DashboardEventSource | null
        autoRefresh: {
            interval: number
            enabled: boolean
        }
        shouldReportOnAPILoad: boolean
        showSubscriptions: boolean
        subscriptionId: number | 'new' | null
        showTextTileModal: boolean
        textTileId: number | 'new' | null
    }
    selectors: {
        dashboard: (state: any, props?: any) => DashboardType | null
        dashboardLoading: (state: any, props?: any) => boolean
        receivedErrorsFromAPI: (state: any, props?: any) => boolean
        filters: (state: any, props?: any) => FilterType
        loadTimer: (state: any, props?: any) => Date | null
        dashboardLoadTimerData: (
            state: any,
            props?: any
        ) => {
            dashboardQueryId: string
            action: string
            startTime: number
            responseBytes: number
        }
        refreshStatus: (state: any, props?: any) => Record<string, RefreshStatus>
        columns: (state: any, props?: any) => number | null
        containerWidth: (state: any, props?: any) => number | null
        dashboardMode: (state: any, props?: any) => DashboardMode | null
        lastDashboardModeSource: (state: any, props?: any) => DashboardEventSource | null
        autoRefresh: (
            state: any,
            props?: any
        ) => {
            interval: number
            enabled: boolean
        }
        shouldReportOnAPILoad: (state: any, props?: any) => boolean
        showSubscriptions: (state: any, props?: any) => boolean
        subscriptionId: (state: any, props?: any) => number | 'new' | null
        showTextTileModal: (state: any, props?: any) => boolean
        textTileId: (state: any, props?: any) => number | 'new' | null
        currentTeamId: (state: any, props?: any) => number | null
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
        asDashboardTemplate: (state: any, props?: any) => DashboardTemplateEditorType | undefined
        placement: (state: any, props?: any) => DashboardPlacement
        apiUrl: (state: any, props?: any) => (refresh?: boolean | undefined) => string
        tiles: (state: any, props?: any) => DashboardTile[]
        insightTiles: (state: any, props?: any) => DashboardTile[]
        textTiles: (state: any, props?: any) => DashboardTile[]
        itemsLoading: (state: any, props?: any) => boolean
        isRefreshing: (state: any, props?: any) => (id: string) => boolean
        highlightedInsightId: (state: any, props?: any) => any
        lastRefreshed: (state: any, props?: any) => Dayjs | null
        blockRefresh: (state: any, props?: any) => boolean
        canEditDashboard: (state: any, props?: any) => boolean
        canRestrictDashboard: (state: any, props?: any) => boolean
        sizeKey: (state: any, props?: any) => DashboardLayoutSize | undefined
        layouts: (state: any, props?: any) => Partial<Record<DashboardLayoutSize, Layout[]>>
        layout: (state: any, props?: any) => Layout[] | undefined
        layoutForItem: (state: any, props?: any) => Record<string, Layout>
        refreshMetrics: (state: any, props?: any) => { completed: number; total: number }
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
        sortTilesByLayout: (state: any, props?: any) => (tiles: DashboardTile[]) => DashboardTile[]
    }
    sharedListeners: {
        reportRefreshTiming: (
            payload: any,
            breakpoint: BreakPointFunction,
            action: {
                type: string
                payload: any
            },
            previousState: any
        ) => void | Promise<void>
        reportLoadTiming: (
            payload: any,
            breakpoint: BreakPointFunction,
            action: {
                type: string
                payload: any
            },
            previousState: any
        ) => void | Promise<void>
    }
    values: {
        dashboard: DashboardType | null
        dashboardLoading: boolean
        receivedErrorsFromAPI: boolean
        filters: FilterType
        loadTimer: Date | null
        dashboardLoadTimerData: {
            dashboardQueryId: string
            action: string
            startTime: number
            responseBytes: number
        }
        refreshStatus: Record<string, RefreshStatus>
        columns: number | null
        containerWidth: number | null
        dashboardMode: DashboardMode | null
        lastDashboardModeSource: DashboardEventSource | null
        autoRefresh: {
            interval: number
            enabled: boolean
        }
        shouldReportOnAPILoad: boolean
        showSubscriptions: boolean
        subscriptionId: number | 'new' | null
        showTextTileModal: boolean
        textTileId: number | 'new' | null
        currentTeamId: number | null
        featureFlags: FeatureFlagsSet
        asDashboardTemplate: DashboardTemplateEditorType | undefined
        placement: DashboardPlacement
        apiUrl: (refresh?: boolean | undefined) => string
        tiles: DashboardTile[]
        insightTiles: DashboardTile[]
        textTiles: DashboardTile[]
        itemsLoading: boolean
        isRefreshing: (id: string) => boolean
        highlightedInsightId: any
        lastRefreshed: Dayjs | null
        blockRefresh: boolean
        canEditDashboard: boolean
        canRestrictDashboard: boolean
        sizeKey: DashboardLayoutSize | undefined
        layouts: Partial<Record<DashboardLayoutSize, Layout[]>>
        layout: Layout[] | undefined
        layoutForItem: Record<string, Layout>
        refreshMetrics: { completed: number; total: number }
        breadcrumbs: Breadcrumb[]
        sortTilesByLayout: (tiles: DashboardTile[]) => DashboardTile[]
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        asDashboardTemplate: (dashboard: DashboardType | null) => DashboardTemplateEditorType | undefined
        placement: (arg: any) => DashboardPlacement
        apiUrl: (arg: any) => (refresh?: boolean | undefined) => string
        tiles: (dashboard: DashboardType | null) => DashboardTile[]
        insightTiles: (tiles: DashboardTile[]) => DashboardTile[]
        textTiles: (tiles: DashboardTile[]) => DashboardTile[]
        itemsLoading: (dashboardLoading: boolean, refreshStatus: Record<string, RefreshStatus>) => boolean
        isRefreshing: (refreshStatus: Record<string, RefreshStatus>) => (id: string) => boolean
        highlightedInsightId: (searchParams: Record<string, any>) => any
        lastRefreshed: (insightTiles: DashboardTile[]) => Dayjs | null
        blockRefresh: (lastRefreshed: Dayjs | null, placement: DashboardPlacement) => boolean
        canEditDashboard: (dashboard: DashboardType | null) => boolean
        canRestrictDashboard: (
            dashboard: DashboardType | null,
            user:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').UserType
                | null,
            currentTeam:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamType
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamPublicType
                | null
        ) => boolean
        sizeKey: (columns: number | null) => DashboardLayoutSize | undefined
        layouts: (tiles: DashboardTile[]) => Partial<Record<DashboardLayoutSize, Layout[]>>
        layout: (
            layouts: Partial<Record<DashboardLayoutSize, Layout[]>>,
            sizeKey: DashboardLayoutSize | undefined
        ) => Layout[] | undefined
        layoutForItem: (layout: Layout[] | undefined) => Record<string, Layout>
        refreshMetrics: (refreshStatus: Record<string, RefreshStatus>) => { completed: number; total: number }
        breadcrumbs: (dashboard: DashboardType | null) => Breadcrumb[]
        sortTilesByLayout: (layoutForItem: Record<string, Layout>) => (tiles: DashboardTile[]) => DashboardTile[]
    }
    __keaTypeGenInternalReducerActions: {
        'tile moved to dashboard (models.dashboardsModel)': (
            tile: DashboardTile,
            dashboardId: number
        ) => {
            type: 'tile moved to dashboard (models.dashboardsModel)'
            payload: {
                tile: DashboardTile
                dashboardId: number
            }
        }
        'update dashboard insight (models.dashboardsModel)': (
            insight: InsightModel,
            extraDashboardIds?: number[],
            updateTileOnDashboards?: [number]
        ) => {
            type: 'update dashboard insight (models.dashboardsModel)'
            payload: {
                insight: InsightModel
                extraDashboardIds: number[] | undefined
                updateTileOnDashboards: [number] | undefined
            }
        }
        'update dashboard tile (models.dashboardsModel)': (
            tile: DashboardTile,
            extraDashboardIds?: number[]
        ) => {
            type: 'update dashboard tile (models.dashboardsModel)'
            payload: {
                tile: DashboardTile
                extraDashboardIds: number[] | undefined
            }
        }
        'update dashboard success (models.dashboardsModel)': (
            dashboard: DashboardType | undefined,
            payload?: any
        ) => {
            type: 'update dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType | undefined
                payload?: any
            }
        }
        'update dashboard refresh status (models.dashboardsModel)': (
            shortId: string | undefined | null,
            refreshing: boolean | null,
            last_refresh: string | null
        ) => {
            type: 'update dashboard refresh status (models.dashboardsModel)'
            payload: {
                shortId: string | null | undefined
                refreshing: boolean | null
                last_refresh: string | null
            }
        }
        'rename insight success (models.insightsModel)': (item: InsightModel) => {
            type: 'rename insight success (models.insightsModel)'
            payload: {
                item: InsightModel
            }
        }
        'duplicate insight success (models.insightsModel)': (item: InsightModel) => {
            type: 'duplicate insight success (models.insightsModel)'
            payload: {
                item: InsightModel
            }
        }
        'tile added to dashboard (models.dashboardsModel)': (dashboardId: number) => {
            type: 'tile added to dashboard (models.dashboardsModel)'
            payload: {
                dashboardId: number
            }
        }
    }
}
