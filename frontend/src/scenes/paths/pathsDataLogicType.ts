// Generated by kea-typegen on Thu, 20 Jul 2023 11:31:50 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { InsightLogicProps } from '../../types'
import type { DataNode, DateRange, InsightFilter, InsightQueryNode, PathsFilter } from '../../queries/schema'
import type { PathNodeData } from './pathUtils'
import type { PathNode } from './pathsDataLogic'
import type { TaxonomicFilterGroupType } from '../../lib/components/TaxonomicFilter/types'

export interface pathsDataLogicType extends Logic {
    actionCreators: {
        updateInsightFilter: (insightFilter: InsightFilter) => {
            type: 'update insight filter (scenes.paths.pathsDataLogic.*)'
            payload: {
                insightFilter: InsightFilter
            }
        }
        openPersonsModal: (props: { path_start_key?: string; path_end_key?: string; path_dropoff_key?: string }) => {
            type: 'open persons modal (scenes.paths.pathsDataLogic.*)'
            payload: {
                path_start_key?: string | undefined
                path_end_key?: string | undefined
                path_dropoff_key?: string | undefined
            }
        }
        viewPathToFunnel: (pathItemCard: PathNodeData) => {
            type: 'view path to funnel (scenes.paths.pathsDataLogic.*)'
            payload: {
                pathItemCard: PathNodeData
            }
        }
    }
    actionKeys: {
        'update insight filter (scenes.paths.pathsDataLogic.*)': 'updateInsightFilter'
        'open persons modal (scenes.paths.pathsDataLogic.*)': 'openPersonsModal'
        'view path to funnel (scenes.paths.pathsDataLogic.*)': 'viewPathToFunnel'
    }
    actionTypes: {
        updateInsightFilter: 'update insight filter (scenes.paths.pathsDataLogic.*)'
        openPersonsModal: 'open persons modal (scenes.paths.pathsDataLogic.*)'
        viewPathToFunnel: 'view path to funnel (scenes.paths.pathsDataLogic.*)'
    }
    actions: {
        updateInsightFilter: (insightFilter: InsightFilter) => void
        openPersonsModal: (props: { path_start_key?: string; path_end_key?: string; path_dropoff_key?: string }) => void
        viewPathToFunnel: (pathItemCard: PathNodeData) => void
    }
    asyncActions: {
        updateInsightFilter: (insightFilter: InsightFilter) => Promise<any>
        openPersonsModal: (props: {
            path_start_key?: string
            path_end_key?: string
            path_dropoff_key?: string
        }) => Promise<any>
        viewPathToFunnel: (pathItemCard: PathNodeData) => Promise<any>
    }
    defaults: {}
    events: {}
    key: string
    listeners: {
        openPersonsModal: ((
            action: {
                type: 'open persons modal (scenes.paths.pathsDataLogic.*)'
                payload: {
                    path_start_key?: string | undefined
                    path_end_key?: string | undefined
                    path_dropoff_key?: string | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        viewPathToFunnel: ((
            action: {
                type: 'view path to funnel (scenes.paths.pathsDataLogic.*)'
                payload: {
                    pathItemCard: PathNodeData
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'paths', 'pathsDataLogic', '*']
    pathString: 'scenes.paths.pathsDataLogic.*'
    props: InsightLogicProps
    reducer: (state: any, action: any, fullState: any) => {}
    reducers: {}
    selector: (state: any) => {}
    selectors: {
        insightData: (state: any, props?: any) => Record<string, any> | null
        insightDataLoading: (state: any, props?: any) => boolean
        insightDataError: (state: any, props?: any) => Record<string, any> | null
        insightQuery: (state: any, props?: any) => DataNode
        vizQuerySource: (state: any, props?: any) => InsightQueryNode | null
        dateRange: (state: any, props?: any) => DateRange | null | undefined
        pathsFilter: (state: any, props?: any) => PathsFilter | null | undefined
        results: (state: any, props?: any) => PathNode[]
        paths: (state: any, props?: any) => { nodes: any[]; links: PathNode[] }
        taxonomicGroupTypes: (state: any, props?: any) => TaxonomicFilterGroupType[]
    }
    sharedListeners: {}
    values: {
        insightData: Record<string, any> | null
        insightDataLoading: boolean
        insightDataError: Record<string, any> | null
        insightQuery: DataNode
        vizQuerySource: InsightQueryNode | null
        dateRange: DateRange | null | undefined
        pathsFilter: PathsFilter | null | undefined
        results: PathNode[]
        paths: { nodes: any[]; links: PathNode[] }
        taxonomicGroupTypes: TaxonomicFilterGroupType[]
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        results: (
            insightQuery: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').DataNode,
            insightData: Record<string, any> | null
        ) => PathNode[]
        paths: (results: PathNode[]) => { nodes: any[]; links: PathNode[] }
        taxonomicGroupTypes: (
            pathsFilter:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').PathsFilter
                | null
                | undefined
        ) => TaxonomicFilterGroupType[]
    }
}
