// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:59 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FeatureFlagsSet } from '../../../../lib/logic/featureFlagLogic'
import type { AccessLevel, OrganizationResourcePermissionType, Resource, RoleType } from '../../../../types'
import type { FormattedResourceLevel } from './permissionsLogic'

export interface permissionsLogicType extends Logic {
    actionCreators: {
        updateRole: (role: RoleType) => {
            type: 'update role (scenes.organization.Settings.Permissions.permissionsLogic)'
            payload: {
                role: RoleType
            }
        }
        updatePermission: (
            checked: boolean,
            role: RoleType,
            resourceId: OrganizationResourcePermissionType['id'] | null,
            resourceType: Resource
        ) => {
            type: 'update permission (scenes.organization.Settings.Permissions.permissionsLogic)'
            payload: {
                checked: boolean
                role: RoleType
                resourceId: string | null
                resourceType: Resource
            }
        }
        loadOrganizationResourcePermissions: () => {
            type: 'load organization resource permissions (scenes.organization.Settings.Permissions.permissionsLogic)'
            payload: any
        }
        loadOrganizationResourcePermissionsSuccess: (
            organizationResourcePermissions: OrganizationResourcePermissionType[],
            payload?: any
        ) => {
            type: 'load organization resource permissions success (scenes.organization.Settings.Permissions.permissionsLogic)'
            payload: {
                organizationResourcePermissions: OrganizationResourcePermissionType[]
                payload?: any
            }
        }
        loadOrganizationResourcePermissionsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load organization resource permissions failure (scenes.organization.Settings.Permissions.permissionsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateOrganizationResourcePermission: ({ id, resource, access_level }: any) => {
            type: 'update organization resource permission (scenes.organization.Settings.Permissions.permissionsLogic)'
            payload: any
        }
        updateOrganizationResourcePermissionSuccess: (
            organizationResourcePermissions: OrganizationResourcePermissionType[],
            payload?: any
        ) => {
            type: 'update organization resource permission success (scenes.organization.Settings.Permissions.permissionsLogic)'
            payload: {
                organizationResourcePermissions: OrganizationResourcePermissionType[]
                payload?: any
            }
        }
        updateOrganizationResourcePermissionFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update organization resource permission failure (scenes.organization.Settings.Permissions.permissionsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'update role (scenes.organization.Settings.Permissions.permissionsLogic)': 'updateRole'
        'update permission (scenes.organization.Settings.Permissions.permissionsLogic)': 'updatePermission'
        'load organization resource permissions (scenes.organization.Settings.Permissions.permissionsLogic)': 'loadOrganizationResourcePermissions'
        'load organization resource permissions success (scenes.organization.Settings.Permissions.permissionsLogic)': 'loadOrganizationResourcePermissionsSuccess'
        'load organization resource permissions failure (scenes.organization.Settings.Permissions.permissionsLogic)': 'loadOrganizationResourcePermissionsFailure'
        'update organization resource permission (scenes.organization.Settings.Permissions.permissionsLogic)': 'updateOrganizationResourcePermission'
        'update organization resource permission success (scenes.organization.Settings.Permissions.permissionsLogic)': 'updateOrganizationResourcePermissionSuccess'
        'update organization resource permission failure (scenes.organization.Settings.Permissions.permissionsLogic)': 'updateOrganizationResourcePermissionFailure'
    }
    actionTypes: {
        updateRole: 'update role (scenes.organization.Settings.Permissions.permissionsLogic)'
        updatePermission: 'update permission (scenes.organization.Settings.Permissions.permissionsLogic)'
        loadOrganizationResourcePermissions: 'load organization resource permissions (scenes.organization.Settings.Permissions.permissionsLogic)'
        loadOrganizationResourcePermissionsSuccess: 'load organization resource permissions success (scenes.organization.Settings.Permissions.permissionsLogic)'
        loadOrganizationResourcePermissionsFailure: 'load organization resource permissions failure (scenes.organization.Settings.Permissions.permissionsLogic)'
        updateOrganizationResourcePermission: 'update organization resource permission (scenes.organization.Settings.Permissions.permissionsLogic)'
        updateOrganizationResourcePermissionSuccess: 'update organization resource permission success (scenes.organization.Settings.Permissions.permissionsLogic)'
        updateOrganizationResourcePermissionFailure: 'update organization resource permission failure (scenes.organization.Settings.Permissions.permissionsLogic)'
    }
    actions: {
        updateRole: (role: RoleType) => void
        updatePermission: (
            checked: boolean,
            role: RoleType,
            resourceId: OrganizationResourcePermissionType['id'] | null,
            resourceType: Resource
        ) => void
        loadOrganizationResourcePermissions: () => void
        loadOrganizationResourcePermissionsSuccess: (
            organizationResourcePermissions: OrganizationResourcePermissionType[],
            payload?: any
        ) => void
        loadOrganizationResourcePermissionsFailure: (error: string, errorObject?: any) => void
        updateOrganizationResourcePermission: ({ id, resource, access_level }: any) => void
        updateOrganizationResourcePermissionSuccess: (
            organizationResourcePermissions: OrganizationResourcePermissionType[],
            payload?: any
        ) => void
        updateOrganizationResourcePermissionFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        updateRole: (role: RoleType) => Promise<any>
        updatePermission: (
            checked: boolean,
            role: RoleType,
            resourceId: OrganizationResourcePermissionType['id'] | null,
            resourceType: Resource
        ) => Promise<any>
        loadOrganizationResourcePermissions: () => Promise<any>
        loadOrganizationResourcePermissionsSuccess: (
            organizationResourcePermissions: OrganizationResourcePermissionType[],
            payload?: any
        ) => Promise<any>
        loadOrganizationResourcePermissionsFailure: (error: string, errorObject?: any) => Promise<any>
        updateOrganizationResourcePermission: ({ id, resource, access_level }: any) => Promise<any>
        updateOrganizationResourcePermissionSuccess: (
            organizationResourcePermissions: OrganizationResourcePermissionType[],
            payload?: any
        ) => Promise<any>
        updateOrganizationResourcePermissionFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        organizationResourcePermissions: OrganizationResourcePermissionType[]
        organizationResourcePermissionsLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {
        updatePermission: ((
            action: {
                type: 'update permission (scenes.organization.Settings.Permissions.permissionsLogic)'
                payload: {
                    checked: boolean
                    role: RoleType
                    resourceId: string | null
                    resourceType: Resource
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateOrganizationResourcePermissionSuccess: ((
            action: {
                type: 'update organization resource permission success (scenes.organization.Settings.Permissions.permissionsLogic)'
                payload: {
                    organizationResourcePermissions: OrganizationResourcePermissionType[]
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'organization', 'Settings', 'Permissions', 'permissionsLogic']
    pathString: 'scenes.organization.Settings.Permissions.permissionsLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        organizationResourcePermissions: OrganizationResourcePermissionType[]
        organizationResourcePermissionsLoading: boolean
    }
    reducers: {
        organizationResourcePermissions: (
            state: OrganizationResourcePermissionType[],
            action: any,
            fullState: any
        ) => OrganizationResourcePermissionType[]
        organizationResourcePermissionsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        organizationResourcePermissions: OrganizationResourcePermissionType[]
        organizationResourcePermissionsLoading: boolean
    }
    selectors: {
        organizationResourcePermissions: (state: any, props?: any) => OrganizationResourcePermissionType[]
        organizationResourcePermissionsLoading: (state: any, props?: any) => boolean
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
        roles: (state: any, props?: any) => RoleType[]
        organizationResourcePermissionsMap: (state: any, props?: any) => {}
        allPermissions: (state: any, props?: any) => FormattedResourceLevel[]
        shouldShowPermissionsTable: (state: any, props?: any) => boolean
        resourceRolesAccess: (
            state: any,
            props?: any
        ) => { 'feature flags': { organization_default: AccessLevel; id: string | null } }[]
    }
    sharedListeners: {}
    values: {
        organizationResourcePermissions: OrganizationResourcePermissionType[]
        organizationResourcePermissionsLoading: boolean
        featureFlags: FeatureFlagsSet
        roles: RoleType[]
        organizationResourcePermissionsMap: {}
        allPermissions: FormattedResourceLevel[]
        shouldShowPermissionsTable: boolean
        resourceRolesAccess: { 'feature flags': { organization_default: AccessLevel; id: string | null } }[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        organizationResourcePermissionsMap: (
            organizationResourcePermissions: OrganizationResourcePermissionType[]
        ) => {}
        allPermissions: (organizationResourcePermissionsMap: {}) => FormattedResourceLevel[]
        shouldShowPermissionsTable: (
            featureFlags: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/lib/logic/featureFlagLogic').FeatureFlagsSet
        ) => boolean
        resourceRolesAccess: (
            allPermissions: FormattedResourceLevel[],
            roles: RoleType[]
        ) => { 'feature flags': { organization_default: AccessLevel; id: string | null } }[]
    }
}
