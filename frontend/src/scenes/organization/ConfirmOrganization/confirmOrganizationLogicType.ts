// Generated by kea-typegen on Thu, 20 Jul 2023 10:56:56 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ConfirmOrganizationFormValues } from './confirmOrganizationLogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../../node_modules/kea-forms'

export interface confirmOrganizationLogicType extends Logic {
    actionCreators: {
        setEmail: (email: string) => {
            type: 'set email (scenes.organization.confirmOrganizationLogic)'
            payload: {
                email: string
            }
        }
        setShowNewOrgWarning: (show: boolean) => {
            type: 'set show new org warning (scenes.organization.confirmOrganizationLogic)'
            payload: {
                show: boolean
            }
        }
        setConfirmOrganizationValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set confirm organization value (scenes.organization.confirmOrganizationLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setConfirmOrganizationValues: (values: DeepPartial<ConfirmOrganizationFormValues>) => {
            type: 'set confirm organization values (scenes.organization.confirmOrganizationLogic)'
            payload: {
                values: DeepPartial<ConfirmOrganizationFormValues>
            }
        }
        setConfirmOrganizationManualErrors: (errors: Record<string, any>) => {
            type: 'set confirm organization manual errors (scenes.organization.confirmOrganizationLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchConfirmOrganizationField: (key: string) => {
            type: 'touch confirm organization field (scenes.organization.confirmOrganizationLogic)'
            payload: {
                key: string
            }
        }
        resetConfirmOrganization: (values?: ConfirmOrganizationFormValues) => {
            type: 'reset confirm organization (scenes.organization.confirmOrganizationLogic)'
            payload: {
                values?: ConfirmOrganizationFormValues
            }
        }
        submitConfirmOrganization: () => {
            type: 'submit confirm organization (scenes.organization.confirmOrganizationLogic)'
            payload: {
                value: boolean
            }
        }
        submitConfirmOrganizationRequest: (confirmOrganization: ConfirmOrganizationFormValues) => {
            type: 'submit confirm organization request (scenes.organization.confirmOrganizationLogic)'
            payload: {
                confirmOrganization: ConfirmOrganizationFormValues
            }
        }
        submitConfirmOrganizationSuccess: (confirmOrganization: ConfirmOrganizationFormValues) => {
            type: 'submit confirm organization success (scenes.organization.confirmOrganizationLogic)'
            payload: {
                confirmOrganization: ConfirmOrganizationFormValues
            }
        }
        submitConfirmOrganizationFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit confirm organization failure (scenes.organization.confirmOrganizationLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'set email (scenes.organization.confirmOrganizationLogic)': 'setEmail'
        'set show new org warning (scenes.organization.confirmOrganizationLogic)': 'setShowNewOrgWarning'
        'set confirm organization value (scenes.organization.confirmOrganizationLogic)': 'setConfirmOrganizationValue'
        'set confirm organization values (scenes.organization.confirmOrganizationLogic)': 'setConfirmOrganizationValues'
        'set confirm organization manual errors (scenes.organization.confirmOrganizationLogic)': 'setConfirmOrganizationManualErrors'
        'touch confirm organization field (scenes.organization.confirmOrganizationLogic)': 'touchConfirmOrganizationField'
        'reset confirm organization (scenes.organization.confirmOrganizationLogic)': 'resetConfirmOrganization'
        'submit confirm organization (scenes.organization.confirmOrganizationLogic)': 'submitConfirmOrganization'
        'submit confirm organization request (scenes.organization.confirmOrganizationLogic)': 'submitConfirmOrganizationRequest'
        'submit confirm organization success (scenes.organization.confirmOrganizationLogic)': 'submitConfirmOrganizationSuccess'
        'submit confirm organization failure (scenes.organization.confirmOrganizationLogic)': 'submitConfirmOrganizationFailure'
    }
    actionTypes: {
        setEmail: 'set email (scenes.organization.confirmOrganizationLogic)'
        setShowNewOrgWarning: 'set show new org warning (scenes.organization.confirmOrganizationLogic)'
        setConfirmOrganizationValue: 'set confirm organization value (scenes.organization.confirmOrganizationLogic)'
        setConfirmOrganizationValues: 'set confirm organization values (scenes.organization.confirmOrganizationLogic)'
        setConfirmOrganizationManualErrors: 'set confirm organization manual errors (scenes.organization.confirmOrganizationLogic)'
        touchConfirmOrganizationField: 'touch confirm organization field (scenes.organization.confirmOrganizationLogic)'
        resetConfirmOrganization: 'reset confirm organization (scenes.organization.confirmOrganizationLogic)'
        submitConfirmOrganization: 'submit confirm organization (scenes.organization.confirmOrganizationLogic)'
        submitConfirmOrganizationRequest: 'submit confirm organization request (scenes.organization.confirmOrganizationLogic)'
        submitConfirmOrganizationSuccess: 'submit confirm organization success (scenes.organization.confirmOrganizationLogic)'
        submitConfirmOrganizationFailure: 'submit confirm organization failure (scenes.organization.confirmOrganizationLogic)'
    }
    actions: {
        setEmail: (email: string) => void
        setShowNewOrgWarning: (show: boolean) => void
        setConfirmOrganizationValue: (key: FieldName, value: any) => void
        setConfirmOrganizationValues: (values: DeepPartial<ConfirmOrganizationFormValues>) => void
        setConfirmOrganizationManualErrors: (errors: Record<string, any>) => void
        touchConfirmOrganizationField: (key: string) => void
        resetConfirmOrganization: (values?: ConfirmOrganizationFormValues) => void
        submitConfirmOrganization: () => void
        submitConfirmOrganizationRequest: (confirmOrganization: ConfirmOrganizationFormValues) => void
        submitConfirmOrganizationSuccess: (confirmOrganization: ConfirmOrganizationFormValues) => void
        submitConfirmOrganizationFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        setEmail: (email: string) => Promise<any>
        setShowNewOrgWarning: (show: boolean) => Promise<any>
        setConfirmOrganizationValue: (key: FieldName, value: any) => Promise<any>
        setConfirmOrganizationValues: (values: DeepPartial<ConfirmOrganizationFormValues>) => Promise<any>
        setConfirmOrganizationManualErrors: (errors: Record<string, any>) => Promise<any>
        touchConfirmOrganizationField: (key: string) => Promise<any>
        resetConfirmOrganization: (values?: ConfirmOrganizationFormValues) => Promise<any>
        submitConfirmOrganization: () => Promise<any>
        submitConfirmOrganizationRequest: (confirmOrganization: ConfirmOrganizationFormValues) => Promise<any>
        submitConfirmOrganizationSuccess: (confirmOrganization: ConfirmOrganizationFormValues) => Promise<any>
        submitConfirmOrganizationFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        showNewOrgWarning: boolean
        email: string
        confirmOrganization: ConfirmOrganizationFormValues
        isConfirmOrganizationSubmitting: boolean
        showConfirmOrganizationErrors: boolean
        confirmOrganizationChanged: boolean
        confirmOrganizationTouches: Record<string, boolean>
        confirmOrganizationManualErrors: Record<string, any>
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'organization', 'confirmOrganizationLogic']
    pathString: 'scenes.organization.confirmOrganizationLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        showNewOrgWarning: boolean
        email: string
        confirmOrganization: ConfirmOrganizationFormValues
        isConfirmOrganizationSubmitting: boolean
        showConfirmOrganizationErrors: boolean
        confirmOrganizationChanged: boolean
        confirmOrganizationTouches: Record<string, boolean>
        confirmOrganizationManualErrors: Record<string, any>
    }
    reducers: {
        showNewOrgWarning: (state: boolean, action: any, fullState: any) => boolean
        email: (state: string, action: any, fullState: any) => string
        confirmOrganization: (
            state: ConfirmOrganizationFormValues,
            action: any,
            fullState: any
        ) => ConfirmOrganizationFormValues
        isConfirmOrganizationSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showConfirmOrganizationErrors: (state: boolean, action: any, fullState: any) => boolean
        confirmOrganizationChanged: (state: boolean, action: any, fullState: any) => boolean
        confirmOrganizationTouches: (
            state: Record<string, boolean>,
            action: any,
            fullState: any
        ) => Record<string, boolean>
        confirmOrganizationManualErrors: (
            state: Record<string, any>,
            action: any,
            fullState: any
        ) => Record<string, any>
    }
    selector: (state: any) => {
        showNewOrgWarning: boolean
        email: string
        confirmOrganization: ConfirmOrganizationFormValues
        isConfirmOrganizationSubmitting: boolean
        showConfirmOrganizationErrors: boolean
        confirmOrganizationChanged: boolean
        confirmOrganizationTouches: Record<string, boolean>
        confirmOrganizationManualErrors: Record<string, any>
    }
    selectors: {
        showNewOrgWarning: (state: any, props?: any) => boolean
        email: (state: any, props?: any) => string
        confirmOrganization: (state: any, props?: any) => ConfirmOrganizationFormValues
        isConfirmOrganizationSubmitting: (state: any, props?: any) => boolean
        showConfirmOrganizationErrors: (state: any, props?: any) => boolean
        confirmOrganizationChanged: (state: any, props?: any) => boolean
        confirmOrganizationTouches: (state: any, props?: any) => Record<string, boolean>
        confirmOrganizationManualErrors: (state: any, props?: any) => Record<string, any>
        confirmOrganizationTouched: (state: any, props?: any) => boolean
        confirmOrganizationValidationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<ConfirmOrganizationFormValues, ValidationErrorType>
        confirmOrganizationAllErrors: (state: any, props?: any) => Record<string, any>
        confirmOrganizationHasErrors: (state: any, props?: any) => boolean
        confirmOrganizationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<ConfirmOrganizationFormValues, ValidationErrorType>
        isConfirmOrganizationValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        showNewOrgWarning: boolean
        email: string
        confirmOrganization: ConfirmOrganizationFormValues
        isConfirmOrganizationSubmitting: boolean
        showConfirmOrganizationErrors: boolean
        confirmOrganizationChanged: boolean
        confirmOrganizationTouches: Record<string, boolean>
        confirmOrganizationManualErrors: Record<string, any>
        confirmOrganizationTouched: boolean
        confirmOrganizationValidationErrors: DeepPartialMap<ConfirmOrganizationFormValues, ValidationErrorType>
        confirmOrganizationAllErrors: Record<string, any>
        confirmOrganizationHasErrors: boolean
        confirmOrganizationErrors: DeepPartialMap<ConfirmOrganizationFormValues, ValidationErrorType>
        isConfirmOrganizationValid: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
