// Generated by kea-typegen on Thu, 20 Jul 2023 10:56:54 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Breadcrumb, EarlyAccessFeatureType } from '../../types'

export interface earlyAccessFeaturesLogicType extends Logic {
    actionCreators: {
        loadEarlyAccessFeatures: () => {
            type: 'load early access features (scenes.features.featuresLogic)'
            payload: any
        }
        loadEarlyAccessFeaturesSuccess: (
            earlyAccessFeatures: EarlyAccessFeatureType[],
            payload?: any
        ) => {
            type: 'load early access features success (scenes.features.featuresLogic)'
            payload: {
                earlyAccessFeatures: EarlyAccessFeatureType[]
                payload?: any
            }
        }
        loadEarlyAccessFeaturesFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load early access features failure (scenes.features.featuresLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load early access features (scenes.features.featuresLogic)': 'loadEarlyAccessFeatures'
        'load early access features success (scenes.features.featuresLogic)': 'loadEarlyAccessFeaturesSuccess'
        'load early access features failure (scenes.features.featuresLogic)': 'loadEarlyAccessFeaturesFailure'
    }
    actionTypes: {
        loadEarlyAccessFeatures: 'load early access features (scenes.features.featuresLogic)'
        loadEarlyAccessFeaturesSuccess: 'load early access features success (scenes.features.featuresLogic)'
        loadEarlyAccessFeaturesFailure: 'load early access features failure (scenes.features.featuresLogic)'
    }
    actions: {
        loadEarlyAccessFeatures: () => void
        loadEarlyAccessFeaturesSuccess: (earlyAccessFeatures: EarlyAccessFeatureType[], payload?: any) => void
        loadEarlyAccessFeaturesFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadEarlyAccessFeatures: () => Promise<any>
        loadEarlyAccessFeaturesSuccess: (earlyAccessFeatures: EarlyAccessFeatureType[], payload?: any) => Promise<any>
        loadEarlyAccessFeaturesFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        earlyAccessFeatures: EarlyAccessFeatureType[]
        earlyAccessFeaturesLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'features', 'featuresLogic']
    pathString: 'scenes.features.featuresLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        earlyAccessFeatures: EarlyAccessFeatureType[]
        earlyAccessFeaturesLoading: boolean
    }
    reducers: {
        earlyAccessFeatures: (state: EarlyAccessFeatureType[], action: any, fullState: any) => EarlyAccessFeatureType[]
        earlyAccessFeaturesLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        earlyAccessFeatures: EarlyAccessFeatureType[]
        earlyAccessFeaturesLoading: boolean
    }
    selectors: {
        earlyAccessFeatures: (state: any, props?: any) => EarlyAccessFeatureType[]
        earlyAccessFeaturesLoading: (state: any, props?: any) => boolean
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
    }
    sharedListeners: {}
    values: {
        earlyAccessFeatures: EarlyAccessFeatureType[]
        earlyAccessFeaturesLoading: boolean
        breadcrumbs: Breadcrumb[]
    }
    _isKea: true
    _isKeaWithKey: false
}
