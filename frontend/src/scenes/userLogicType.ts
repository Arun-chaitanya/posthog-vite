// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:19 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AvailableFeature, OrganizationBasicType, PreflightStatus, ProductKey, UserType } from '../types'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../node_modules/kea-forms'
import type { UserDetailsFormType } from './userLogic'

export interface userLogicType extends Logic {
    actionCreators: {
        loadUser: (resetOnFailure?: boolean) => {
            type: 'load user (scenes.userLogic)'
            payload: {
                resetOnFailure: boolean | undefined
            }
        }
        updateCurrentTeam: (
            teamId: number,
            destination?: string
        ) => {
            type: 'update current team (scenes.userLogic)'
            payload: {
                teamId: number
                destination: string | undefined
            }
        }
        updateCurrentOrganization: (
            organizationId: string,
            destination?: string
        ) => {
            type: 'update current organization (scenes.userLogic)'
            payload: {
                organizationId: string
                destination: string | undefined
            }
        }
        logout: () => {
            type: 'logout (scenes.userLogic)'
            payload: {
                value: true
            }
        }
        updateUser: (
            user: Partial<UserType>,
            successCallback?: () => void
        ) => {
            type: 'update user (scenes.userLogic)'
            payload: {
                user: Partial<UserType>
                successCallback: (() => void) | undefined
            }
        }
        updateHasSeenProductIntroFor: (
            productKey: ProductKey,
            value: boolean
        ) => {
            type: 'update has seen product intro for (scenes.userLogic)'
            payload: {
                productKey: ProductKey
                value: boolean
            }
        }
        setUserDetailsValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set user details value (scenes.userLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setUserDetailsValues: (values: DeepPartial<Record<string, any>>) => {
            type: 'set user details values (scenes.userLogic)'
            payload: {
                values: DeepPartial<Record<string, any>>
            }
        }
        setUserDetailsManualErrors: (errors: Record<string, any>) => {
            type: 'set user details manual errors (scenes.userLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchUserDetailsField: (key: string) => {
            type: 'touch user details field (scenes.userLogic)'
            payload: {
                key: string
            }
        }
        resetUserDetails: (values?: Record<string, any>) => {
            type: 'reset user details (scenes.userLogic)'
            payload: {
                values?: Record<string, any>
            }
        }
        submitUserDetails: () => {
            type: 'submit user details (scenes.userLogic)'
            payload: {
                value: boolean
            }
        }
        submitUserDetailsRequest: (userDetails: Record<string, any>) => {
            type: 'submit user details request (scenes.userLogic)'
            payload: {
                userDetails: Record<string, any>
            }
        }
        submitUserDetailsSuccess: (userDetails: Record<string, any>) => {
            type: 'submit user details success (scenes.userLogic)'
            payload: {
                userDetails: Record<string, any>
            }
        }
        submitUserDetailsFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit user details failure (scenes.userLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
        loadUserSuccess: (
            user: UserType | null,
            payload?: {
                resetOnFailure: boolean | undefined
            }
        ) => {
            type: 'load user success (scenes.userLogic)'
            payload: {
                user: UserType | null
                payload?: {
                    resetOnFailure: boolean | undefined
                }
            }
        }
        loadUserFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load user failure (scenes.userLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateUserSuccess: (
            user: UserType | null,
            payload?: {
                user: Partial<UserType>
                successCallback: (() => void) | undefined
            }
        ) => {
            type: 'update user success (scenes.userLogic)'
            payload: {
                user: UserType | null
                payload?: {
                    user: Partial<UserType>
                    successCallback: (() => void) | undefined
                }
            }
        }
        updateUserFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update user failure (scenes.userLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load user (scenes.userLogic)': 'loadUser'
        'update current team (scenes.userLogic)': 'updateCurrentTeam'
        'update current organization (scenes.userLogic)': 'updateCurrentOrganization'
        'logout (scenes.userLogic)': 'logout'
        'update user (scenes.userLogic)': 'updateUser'
        'update has seen product intro for (scenes.userLogic)': 'updateHasSeenProductIntroFor'
        'set user details value (scenes.userLogic)': 'setUserDetailsValue'
        'set user details values (scenes.userLogic)': 'setUserDetailsValues'
        'set user details manual errors (scenes.userLogic)': 'setUserDetailsManualErrors'
        'touch user details field (scenes.userLogic)': 'touchUserDetailsField'
        'reset user details (scenes.userLogic)': 'resetUserDetails'
        'submit user details (scenes.userLogic)': 'submitUserDetails'
        'submit user details request (scenes.userLogic)': 'submitUserDetailsRequest'
        'submit user details success (scenes.userLogic)': 'submitUserDetailsSuccess'
        'submit user details failure (scenes.userLogic)': 'submitUserDetailsFailure'
        'load user success (scenes.userLogic)': 'loadUserSuccess'
        'load user failure (scenes.userLogic)': 'loadUserFailure'
        'update user success (scenes.userLogic)': 'updateUserSuccess'
        'update user failure (scenes.userLogic)': 'updateUserFailure'
    }
    actionTypes: {
        loadUser: 'load user (scenes.userLogic)'
        updateCurrentTeam: 'update current team (scenes.userLogic)'
        updateCurrentOrganization: 'update current organization (scenes.userLogic)'
        logout: 'logout (scenes.userLogic)'
        updateUser: 'update user (scenes.userLogic)'
        updateHasSeenProductIntroFor: 'update has seen product intro for (scenes.userLogic)'
        setUserDetailsValue: 'set user details value (scenes.userLogic)'
        setUserDetailsValues: 'set user details values (scenes.userLogic)'
        setUserDetailsManualErrors: 'set user details manual errors (scenes.userLogic)'
        touchUserDetailsField: 'touch user details field (scenes.userLogic)'
        resetUserDetails: 'reset user details (scenes.userLogic)'
        submitUserDetails: 'submit user details (scenes.userLogic)'
        submitUserDetailsRequest: 'submit user details request (scenes.userLogic)'
        submitUserDetailsSuccess: 'submit user details success (scenes.userLogic)'
        submitUserDetailsFailure: 'submit user details failure (scenes.userLogic)'
        loadUserSuccess: 'load user success (scenes.userLogic)'
        loadUserFailure: 'load user failure (scenes.userLogic)'
        updateUserSuccess: 'update user success (scenes.userLogic)'
        updateUserFailure: 'update user failure (scenes.userLogic)'
    }
    actions: {
        loadUser: (resetOnFailure?: boolean) => void
        updateCurrentTeam: (teamId: number, destination?: string) => void
        updateCurrentOrganization: (organizationId: string, destination?: string) => void
        logout: () => void
        updateUser: (user: Partial<UserType>, successCallback?: () => void) => void
        updateHasSeenProductIntroFor: (productKey: ProductKey, value: boolean) => void
        setUserDetailsValue: (key: FieldName, value: any) => void
        setUserDetailsValues: (values: DeepPartial<Record<string, any>>) => void
        setUserDetailsManualErrors: (errors: Record<string, any>) => void
        touchUserDetailsField: (key: string) => void
        resetUserDetails: (values?: Record<string, any>) => void
        submitUserDetails: () => void
        submitUserDetailsRequest: (userDetails: Record<string, any>) => void
        submitUserDetailsSuccess: (userDetails: Record<string, any>) => void
        submitUserDetailsFailure: (error: Error, errors: Record<string, any>) => void
        loadUserSuccess: (
            user: UserType | null,
            payload?: {
                resetOnFailure: boolean | undefined
            }
        ) => void
        loadUserFailure: (error: string, errorObject?: any) => void
        updateUserSuccess: (
            user: UserType | null,
            payload?: {
                user: Partial<UserType>
                successCallback: (() => void) | undefined
            }
        ) => void
        updateUserFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadUser: (resetOnFailure?: boolean) => Promise<any>
        updateCurrentTeam: (teamId: number, destination?: string) => Promise<any>
        updateCurrentOrganization: (organizationId: string, destination?: string) => Promise<any>
        logout: () => Promise<any>
        updateUser: (user: Partial<UserType>, successCallback?: () => void) => Promise<any>
        updateHasSeenProductIntroFor: (productKey: ProductKey, value: boolean) => Promise<any>
        setUserDetailsValue: (key: FieldName, value: any) => Promise<any>
        setUserDetailsValues: (values: DeepPartial<Record<string, any>>) => Promise<any>
        setUserDetailsManualErrors: (errors: Record<string, any>) => Promise<any>
        touchUserDetailsField: (key: string) => Promise<any>
        resetUserDetails: (values?: Record<string, any>) => Promise<any>
        submitUserDetails: () => Promise<any>
        submitUserDetailsRequest: (userDetails: Record<string, any>) => Promise<any>
        submitUserDetailsSuccess: (userDetails: Record<string, any>) => Promise<any>
        submitUserDetailsFailure: (error: Error, errors: Record<string, any>) => Promise<any>
        loadUserSuccess: (
            user: UserType | null,
            payload?: {
                resetOnFailure: boolean | undefined
            }
        ) => Promise<any>
        loadUserFailure: (error: string, errorObject?: any) => Promise<any>
        updateUserSuccess: (
            user: UserType | null,
            payload?: {
                user: Partial<UserType>
                successCallback: (() => void) | undefined
            }
        ) => Promise<any>
        updateUserFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        userDetails: UserDetailsFormType
        isUserDetailsSubmitting: boolean
        showUserDetailsErrors: boolean
        userDetailsChanged: boolean
        userDetailsTouches: Record<string, boolean>
        userDetailsManualErrors: Record<string, any>
        user: UserType | null
        userLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {
        logout: ((
            action: {
                type: 'logout (scenes.userLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadUserSuccess: ((
            action: {
                type: 'load user success (scenes.userLogic)'
                payload: {
                    user: UserType | null
                    payload?: {
                        resetOnFailure: boolean | undefined
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateUserSuccess: ((
            action: {
                type: 'update user success (scenes.userLogic)'
                payload: {
                    user: UserType | null
                    payload?: {
                        user: Partial<UserType>
                        successCallback: (() => void) | undefined
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateUserFailure: ((
            action: {
                type: 'update user failure (scenes.userLogic)'
                payload: {
                    error: string
                    errorObject?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateCurrentTeam: ((
            action: {
                type: 'update current team (scenes.userLogic)'
                payload: {
                    teamId: number
                    destination: string | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateCurrentOrganization: ((
            action: {
                type: 'update current organization (scenes.userLogic)'
                payload: {
                    organizationId: string
                    destination: string | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateHasSeenProductIntroFor: ((
            action: {
                type: 'update has seen product intro for (scenes.userLogic)'
                payload: {
                    productKey: ProductKey
                    value: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'userLogic']
    pathString: 'scenes.userLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        userDetails: UserDetailsFormType
        isUserDetailsSubmitting: boolean
        showUserDetailsErrors: boolean
        userDetailsChanged: boolean
        userDetailsTouches: Record<string, boolean>
        userDetailsManualErrors: Record<string, any>
        user: UserType | null
        userLoading: boolean
    }
    reducers: {
        userDetails: (state: UserDetailsFormType, action: any, fullState: any) => UserDetailsFormType
        isUserDetailsSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showUserDetailsErrors: (state: boolean, action: any, fullState: any) => boolean
        userDetailsChanged: (state: boolean, action: any, fullState: any) => boolean
        userDetailsTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        userDetailsManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
        user: (state: UserType | null, action: any, fullState: any) => UserType | null
        userLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        userDetails: UserDetailsFormType
        isUserDetailsSubmitting: boolean
        showUserDetailsErrors: boolean
        userDetailsChanged: boolean
        userDetailsTouches: Record<string, boolean>
        userDetailsManualErrors: Record<string, any>
        user: UserType | null
        userLoading: boolean
    }
    selectors: {
        userDetails: (state: any, props?: any) => UserDetailsFormType
        isUserDetailsSubmitting: (state: any, props?: any) => boolean
        showUserDetailsErrors: (state: any, props?: any) => boolean
        userDetailsChanged: (state: any, props?: any) => boolean
        userDetailsTouches: (state: any, props?: any) => Record<string, boolean>
        userDetailsManualErrors: (state: any, props?: any) => Record<string, any>
        user: (state: any, props?: any) => UserType | null
        userLoading: (state: any, props?: any) => boolean
        preflight: (state: any, props?: any) => PreflightStatus | null
        userDetailsTouched: (state: any, props?: any) => boolean
        userDetailsValidationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<Record<string, any>, ValidationErrorType>
        userDetailsAllErrors: (state: any, props?: any) => Record<string, any>
        userDetailsHasErrors: (state: any, props?: any) => boolean
        userDetailsErrors: (state: any, props?: any) => DeepPartialMap<Record<string, any>, ValidationErrorType>
        isUserDetailsValid: (state: any, props?: any) => boolean
        hasAvailableFeature: (
            state: any,
            props?: any
        ) => (feature: AvailableFeature, currentUsage?: number | undefined) => boolean
        otherOrganizations: (state: any, props?: any) => OrganizationBasicType[]
    }
    sharedListeners: {}
    values: {
        userDetails: UserDetailsFormType
        isUserDetailsSubmitting: boolean
        showUserDetailsErrors: boolean
        userDetailsChanged: boolean
        userDetailsTouches: Record<string, boolean>
        userDetailsManualErrors: Record<string, any>
        user: UserType | null
        userLoading: boolean
        preflight: PreflightStatus | null
        userDetailsTouched: boolean
        userDetailsValidationErrors: DeepPartialMap<Record<string, any>, ValidationErrorType>
        userDetailsAllErrors: Record<string, any>
        userDetailsHasErrors: boolean
        userDetailsErrors: DeepPartialMap<Record<string, any>, ValidationErrorType>
        isUserDetailsValid: boolean
        hasAvailableFeature: (feature: AvailableFeature, currentUsage?: number | undefined) => boolean
        otherOrganizations: OrganizationBasicType[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        hasAvailableFeature: (
            user: UserType | null
        ) => (feature: AvailableFeature, currentUsage?: number | undefined) => boolean
        otherOrganizations: (user: UserType | null) => OrganizationBasicType[]
    }
}
