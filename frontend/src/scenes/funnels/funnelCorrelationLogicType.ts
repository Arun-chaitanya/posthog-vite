// Generated by kea-typegen on Tue, 08 Aug 2023 10:01:13 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { EventType, FunnelCorrelation, FunnelCorrelationResultsType, FunnelCorrelationType, FunnelsFilterType, InsightLogicProps, TeamPublicType, TeamType } from '../../types'
import type { FunnelsQuery } from '../../queries/schema'

export interface funnelCorrelationLogicType extends Logic {
    actionCreators: {
        setCorrelationTypes: (types: FunnelCorrelationType[]) => {
            type: 'set correlation types (scenes.funnels.funnelCorrelationLogic.*)'
            payload: {
                types: FunnelCorrelationType[]
            }
        }
        excludeEventFromProject: (eventName: string) => {
            type: 'exclude event from project (scenes.funnels.funnelCorrelationLogic.*)'
            payload: {
                eventName: string
            }
        }
        excludeEventPropertyFromProject: (
            eventName: string,
            propertyName: string
        ) => {
            type: 'exclude event property from project (scenes.funnels.funnelCorrelationLogic.*)'
            payload: {
                eventName: string
                propertyName: string
            }
        }
        addNestedTableExpandedKey: (expandKey: string) => {
            type: 'add nested table expanded key (scenes.funnels.funnelCorrelationLogic.*)'
            payload: {
                expandKey: string
            }
        }
        removeNestedTableExpandedKey: (expandKey: string) => {
            type: 'remove nested table expanded key (scenes.funnels.funnelCorrelationLogic.*)'
            payload: {
                expandKey: string
            }
        }
        loadEventCorrelations: (_: any) => {
            type: 'load event correlations (scenes.funnels.funnelCorrelationLogic.*)'
            payload: any
        }
        loadEventCorrelationsSuccess: (
            correlations: {
                events: {
                    result_type: FunnelCorrelationResultsType.Events
                    event: Pick<EventType, 'properties' | 'event' | 'elements'>
                    correlation_type: FunnelCorrelationType
                    odds_ratio: number
                    success_count: number
                    success_people_url: string
                    failure_count: number
                    failure_people_url: string
                }[]
            },
            payload?: any
        ) => {
            type: 'load event correlations success (scenes.funnels.funnelCorrelationLogic.*)'
            payload: {
                correlations: {
                    events: {
                        result_type: FunnelCorrelationResultsType.Events
                        event: Pick<EventType, 'properties' | 'event' | 'elements'>
                        correlation_type: FunnelCorrelationType
                        odds_ratio: number
                        success_count: number
                        success_people_url: string
                        failure_count: number
                        failure_people_url: string
                    }[]
                }
                payload?: any
            }
        }
        loadEventCorrelationsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load event correlations failure (scenes.funnels.funnelCorrelationLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadEventWithPropertyCorrelations: (eventName: string) => {
            type: 'load event with property correlations (scenes.funnels.funnelCorrelationLogic.*)'
            payload: string
        }
        loadEventWithPropertyCorrelationsSuccess: (
            eventWithPropertyCorrelations: {
                [x: string]: {
                    result_type: FunnelCorrelationResultsType.EventWithProperties
                    event: Pick<EventType, 'properties' | 'event' | 'elements'>
                    correlation_type: FunnelCorrelationType
                    odds_ratio: number
                    success_count: number
                    success_people_url: string
                    failure_count: number
                    failure_people_url: string
                }[]
            },
            payload?: string
        ) => {
            type: 'load event with property correlations success (scenes.funnels.funnelCorrelationLogic.*)'
            payload: {
                eventWithPropertyCorrelations: {
                    [x: string]: {
                        result_type: FunnelCorrelationResultsType.EventWithProperties
                        event: Pick<EventType, 'properties' | 'event' | 'elements'>
                        correlation_type: FunnelCorrelationType
                        odds_ratio: number
                        success_count: number
                        success_people_url: string
                        failure_count: number
                        failure_people_url: string
                    }[]
                }
                payload?: string
            }
        }
        loadEventWithPropertyCorrelationsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load event with property correlations failure (scenes.funnels.funnelCorrelationLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set correlation types (scenes.funnels.funnelCorrelationLogic.*)': 'setCorrelationTypes'
        'exclude event from project (scenes.funnels.funnelCorrelationLogic.*)': 'excludeEventFromProject'
        'exclude event property from project (scenes.funnels.funnelCorrelationLogic.*)': 'excludeEventPropertyFromProject'
        'add nested table expanded key (scenes.funnels.funnelCorrelationLogic.*)': 'addNestedTableExpandedKey'
        'remove nested table expanded key (scenes.funnels.funnelCorrelationLogic.*)': 'removeNestedTableExpandedKey'
        'load event correlations (scenes.funnels.funnelCorrelationLogic.*)': 'loadEventCorrelations'
        'load event correlations success (scenes.funnels.funnelCorrelationLogic.*)': 'loadEventCorrelationsSuccess'
        'load event correlations failure (scenes.funnels.funnelCorrelationLogic.*)': 'loadEventCorrelationsFailure'
        'load event with property correlations (scenes.funnels.funnelCorrelationLogic.*)': 'loadEventWithPropertyCorrelations'
        'load event with property correlations success (scenes.funnels.funnelCorrelationLogic.*)': 'loadEventWithPropertyCorrelationsSuccess'
        'load event with property correlations failure (scenes.funnels.funnelCorrelationLogic.*)': 'loadEventWithPropertyCorrelationsFailure'
    }
    actionTypes: {
        setCorrelationTypes: 'set correlation types (scenes.funnels.funnelCorrelationLogic.*)'
        excludeEventFromProject: 'exclude event from project (scenes.funnels.funnelCorrelationLogic.*)'
        excludeEventPropertyFromProject: 'exclude event property from project (scenes.funnels.funnelCorrelationLogic.*)'
        addNestedTableExpandedKey: 'add nested table expanded key (scenes.funnels.funnelCorrelationLogic.*)'
        removeNestedTableExpandedKey: 'remove nested table expanded key (scenes.funnels.funnelCorrelationLogic.*)'
        loadEventCorrelations: 'load event correlations (scenes.funnels.funnelCorrelationLogic.*)'
        loadEventCorrelationsSuccess: 'load event correlations success (scenes.funnels.funnelCorrelationLogic.*)'
        loadEventCorrelationsFailure: 'load event correlations failure (scenes.funnels.funnelCorrelationLogic.*)'
        loadEventWithPropertyCorrelations: 'load event with property correlations (scenes.funnels.funnelCorrelationLogic.*)'
        loadEventWithPropertyCorrelationsSuccess: 'load event with property correlations success (scenes.funnels.funnelCorrelationLogic.*)'
        loadEventWithPropertyCorrelationsFailure: 'load event with property correlations failure (scenes.funnels.funnelCorrelationLogic.*)'
    }
    actions: {
        setCorrelationTypes: (types: FunnelCorrelationType[]) => void
        excludeEventFromProject: (eventName: string) => void
        excludeEventPropertyFromProject: (eventName: string, propertyName: string) => void
        addNestedTableExpandedKey: (expandKey: string) => void
        removeNestedTableExpandedKey: (expandKey: string) => void
        loadEventCorrelations: (_: any) => void
        loadEventCorrelationsSuccess: (
            correlations: {
                events: {
                    result_type: FunnelCorrelationResultsType.Events
                    event: Pick<EventType, 'properties' | 'event' | 'elements'>
                    correlation_type: FunnelCorrelationType
                    odds_ratio: number
                    success_count: number
                    success_people_url: string
                    failure_count: number
                    failure_people_url: string
                }[]
            },
            payload?: any
        ) => void
        loadEventCorrelationsFailure: (error: string, errorObject?: any) => void
        loadEventWithPropertyCorrelations: (eventName: string) => void
        loadEventWithPropertyCorrelationsSuccess: (
            eventWithPropertyCorrelations: {
                [x: string]: {
                    result_type: FunnelCorrelationResultsType.EventWithProperties
                    event: Pick<EventType, 'properties' | 'event' | 'elements'>
                    correlation_type: FunnelCorrelationType
                    odds_ratio: number
                    success_count: number
                    success_people_url: string
                    failure_count: number
                    failure_people_url: string
                }[]
            },
            payload?: string
        ) => void
        loadEventWithPropertyCorrelationsFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setCorrelationTypes: (types: FunnelCorrelationType[]) => Promise<any>
        excludeEventFromProject: (eventName: string) => Promise<any>
        excludeEventPropertyFromProject: (eventName: string, propertyName: string) => Promise<any>
        addNestedTableExpandedKey: (expandKey: string) => Promise<any>
        removeNestedTableExpandedKey: (expandKey: string) => Promise<any>
        loadEventCorrelations: (_: any) => Promise<any>
        loadEventCorrelationsSuccess: (
            correlations: {
                events: {
                    result_type: FunnelCorrelationResultsType.Events
                    event: Pick<EventType, 'properties' | 'event' | 'elements'>
                    correlation_type: FunnelCorrelationType
                    odds_ratio: number
                    success_count: number
                    success_people_url: string
                    failure_count: number
                    failure_people_url: string
                }[]
            },
            payload?: any
        ) => Promise<any>
        loadEventCorrelationsFailure: (error: string, errorObject?: any) => Promise<any>
        loadEventWithPropertyCorrelations: (eventName: string) => Promise<any>
        loadEventWithPropertyCorrelationsSuccess: (
            eventWithPropertyCorrelations: {
                [x: string]: {
                    result_type: FunnelCorrelationResultsType.EventWithProperties
                    event: Pick<EventType, 'properties' | 'event' | 'elements'>
                    correlation_type: FunnelCorrelationType
                    odds_ratio: number
                    success_count: number
                    success_people_url: string
                    failure_count: number
                    failure_people_url: string
                }[]
            },
            payload?: string
        ) => Promise<any>
        loadEventWithPropertyCorrelationsFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        __ignore: FunnelCorrelationResultsType | null
        correlations: Record<'events', FunnelCorrelation[]>
        correlationsLoading: boolean
        eventWithPropertyCorrelations: Record<string, FunnelCorrelation[]>
        eventWithPropertyCorrelationsLoading: boolean
        correlationTypes: FunnelCorrelationType[]
        loadedEventCorrelationsTableOnce: boolean
        nestedTableExpandedKeys: string[]
    }
    events: {}
    key: string
    listeners: {
        excludeEventFromProject: ((
            action: {
                type: 'exclude event from project (scenes.funnels.funnelCorrelationLogic.*)'
                payload: {
                    eventName: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        excludeEventPropertyFromProject: ((
            action: {
                type: 'exclude event property from project (scenes.funnels.funnelCorrelationLogic.*)'
                payload: {
                    eventName: string
                    propertyName: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'funnels', 'funnelCorrelationLogic', '*']
    pathString: 'scenes.funnels.funnelCorrelationLogic.*'
    props: InsightLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        __ignore: FunnelCorrelationResultsType | null
        correlations: Record<'events', FunnelCorrelation[]>
        correlationsLoading: boolean
        eventWithPropertyCorrelations: Record<string, FunnelCorrelation[]>
        eventWithPropertyCorrelationsLoading: boolean
        correlationTypes: FunnelCorrelationType[]
        loadedEventCorrelationsTableOnce: boolean
        nestedTableExpandedKeys: string[]
    }
    reducers: {
        __ignore: (
            state: FunnelCorrelationResultsType | null,
            action: any,
            fullState: any
        ) => FunnelCorrelationResultsType | null
        correlations: (
            state: Record<'events', FunnelCorrelation[]>,
            action: any,
            fullState: any
        ) => Record<'events', FunnelCorrelation[]>
        correlationsLoading: (state: boolean, action: any, fullState: any) => boolean
        eventWithPropertyCorrelations: (
            state: Record<string, FunnelCorrelation[]>,
            action: any,
            fullState: any
        ) => Record<string, FunnelCorrelation[]>
        eventWithPropertyCorrelationsLoading: (state: boolean, action: any, fullState: any) => boolean
        correlationTypes: (state: FunnelCorrelationType[], action: any, fullState: any) => FunnelCorrelationType[]
        loadedEventCorrelationsTableOnce: (state: boolean, action: any, fullState: any) => boolean
        nestedTableExpandedKeys: (state: string[], action: any, fullState: any) => string[]
    }
    selector: (state: any) => {
        __ignore: FunnelCorrelationResultsType | null
        correlations: Record<'events', FunnelCorrelation[]>
        correlationsLoading: boolean
        eventWithPropertyCorrelations: Record<string, FunnelCorrelation[]>
        eventWithPropertyCorrelationsLoading: boolean
        correlationTypes: FunnelCorrelationType[]
        loadedEventCorrelationsTableOnce: boolean
        nestedTableExpandedKeys: string[]
    }
    selectors: {
        __ignore: (state: any, props?: any) => FunnelCorrelationResultsType | null
        correlations: (state: any, props?: any) => Record<'events', FunnelCorrelation[]>
        correlationsLoading: (state: any, props?: any) => boolean
        eventWithPropertyCorrelations: (state: any, props?: any) => Record<string, FunnelCorrelation[]>
        eventWithPropertyCorrelationsLoading: (state: any, props?: any) => boolean
        correlationTypes: (state: any, props?: any) => FunnelCorrelationType[]
        loadedEventCorrelationsTableOnce: (state: any, props?: any) => boolean
        nestedTableExpandedKeys: (state: any, props?: any) => string[]
        querySource: (state: any, props?: any) => FunnelsQuery | null
        currentTeam: (state: any, props?: any) => TeamType | TeamPublicType | null
        currentTeamId: (state: any, props?: any) => number | null
        apiParams: (state: any, props?: any) => Partial<FunnelsFilterType>
        aggregationGroupTypeIndex: (state: any, props?: any) => number | undefined
        correlationValues: (state: any, props?: any) => FunnelCorrelation[]
        excludedEventNames: (state: any, props?: any) => string[]
        isEventExcluded: (state: any, props?: any) => (eventName: string) => boolean
        excludedEventPropertyNames: (state: any, props?: any) => string[]
        isEventPropertyExcluded: (state: any, props?: any) => (propertyName: string) => boolean
        eventWithPropertyCorrelationsValues: (state: any, props?: any) => Record<string, FunnelCorrelation[]>
        eventHasPropertyCorrelations: (state: any, props?: any) => (eventName: string) => boolean
    }
    sharedListeners: {}
    values: {
        __ignore: FunnelCorrelationResultsType | null
        correlations: Record<'events', FunnelCorrelation[]>
        correlationsLoading: boolean
        eventWithPropertyCorrelations: Record<string, FunnelCorrelation[]>
        eventWithPropertyCorrelationsLoading: boolean
        correlationTypes: FunnelCorrelationType[]
        loadedEventCorrelationsTableOnce: boolean
        nestedTableExpandedKeys: string[]
        querySource: FunnelsQuery | null
        currentTeam: TeamType | TeamPublicType | null
        currentTeamId: number | null
        apiParams: Partial<FunnelsFilterType>
        aggregationGroupTypeIndex: number | undefined
        correlationValues: FunnelCorrelation[]
        excludedEventNames: string[]
        isEventExcluded: (eventName: string) => boolean
        excludedEventPropertyNames: string[]
        isEventPropertyExcluded: (propertyName: string) => boolean
        eventWithPropertyCorrelationsValues: Record<string, FunnelCorrelation[]>
        eventHasPropertyCorrelations: (eventName: string) => boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        apiParams: (
            querySource:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').FunnelsQuery
                | null
        ) => Partial<FunnelsFilterType>
        aggregationGroupTypeIndex: (
            querySource:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').FunnelsQuery
                | null
        ) => number | undefined
        correlationValues: (
            correlations: Record<'events', FunnelCorrelation[]>,
            correlationTypes: FunnelCorrelationType[],
            excludedEventNames: string[]
        ) => FunnelCorrelation[]
        excludedEventNames: (
            currentTeam:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamType
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamPublicType
                | null
        ) => string[]
        isEventExcluded: (excludedEventNames: string[]) => (eventName: string) => boolean
        excludedEventPropertyNames: (
            currentTeam:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamType
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamPublicType
                | null
        ) => string[]
        isEventPropertyExcluded: (excludedEventPropertyNames: string[]) => (propertyName: string) => boolean
        eventWithPropertyCorrelationsValues: (
            eventWithPropertyCorrelations: Record<string, FunnelCorrelation[]>,
            correlationTypes: FunnelCorrelationType[],
            excludedEventPropertyNames: string[]
        ) => Record<string, FunnelCorrelation[]>
        eventHasPropertyCorrelations: (
            eventWithPropertyCorrelationsValues: Record<string, FunnelCorrelation[]>
        ) => (eventName: string) => boolean
    }
}
