// Generated by kea-typegen on Thu, 20 Jul 2023 11:24:21 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FilterType, FlattenedFunnelStepByBreakdown, FunnelConversionWindow, FunnelResultType, FunnelStepRangeEntityFilter, FunnelStepWithConversionMetrics, FunnelStepWithNestedBreakdown, FunnelTimeConversionMetrics, FunnelsTimeConversionBins, HistogramGraphDatum, InsightLogicProps, IntervalType } from '../../types'
import type { ActionsNode, BreakdownFilter, EventsNode, FunnelsFilter, FunnelsQuery, InsightFilter, InsightQueryNode } from '../../queries/schema'
import type { Noun } from '../../models/groupsModel'

export interface funnelDataLogicType extends Logic {
    actionCreators: {
        updateQuerySource: (querySource: Omit<Partial<InsightQueryNode>, 'kind'>) => {
            type: 'update query source (scenes.funnels.funnelDataLogic.*)'
            payload: {
                querySource: Omit<Partial<InsightQueryNode>, 'kind'>
            }
        }
        updateInsightFilter: (insightFilter: InsightFilter) => {
            type: 'update insight filter (scenes.funnels.funnelDataLogic.*)'
            payload: {
                insightFilter: InsightFilter
            }
        }
        hideSkewWarning: () => {
            type: 'hide skew warning (scenes.funnels.funnelDataLogic.*)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'update query source (scenes.funnels.funnelDataLogic.*)': 'updateQuerySource'
        'update insight filter (scenes.funnels.funnelDataLogic.*)': 'updateInsightFilter'
        'hide skew warning (scenes.funnels.funnelDataLogic.*)': 'hideSkewWarning'
    }
    actionTypes: {
        updateQuerySource: 'update query source (scenes.funnels.funnelDataLogic.*)'
        updateInsightFilter: 'update insight filter (scenes.funnels.funnelDataLogic.*)'
        hideSkewWarning: 'hide skew warning (scenes.funnels.funnelDataLogic.*)'
    }
    actions: {
        updateQuerySource: (querySource: Omit<Partial<InsightQueryNode>, 'kind'>) => void
        updateInsightFilter: (insightFilter: InsightFilter) => void
        hideSkewWarning: () => void
    }
    asyncActions: {
        updateQuerySource: (querySource: Omit<Partial<InsightQueryNode>, 'kind'>) => Promise<any>
        updateInsightFilter: (insightFilter: InsightFilter) => Promise<any>
        hideSkewWarning: () => Promise<any>
    }
    defaults: {
        skewWarningHidden: boolean
    }
    events: {}
    key: string
    listeners: {}
    path: ['scenes', 'funnels', 'funnelDataLogic', '*']
    pathString: 'scenes.funnels.funnelDataLogic.*'
    props: InsightLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        skewWarningHidden: boolean
    }
    reducers: {
        skewWarningHidden: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        skewWarningHidden: boolean
    }
    selectors: {
        skewWarningHidden: (state: any, props?: any) => boolean
        insightData: (state: any, props?: any) => Record<string, any> | null
        insightDataError: (state: any, props?: any) => Record<string, any> | null
        vizQuerySource: (state: any, props?: any) => InsightQueryNode | null
        breakdown: (state: any, props?: any) => BreakdownFilter | null | undefined
        series: (state: any, props?: any) => (EventsNode | ActionsNode)[] | null | undefined
        interval: (state: any, props?: any) => IntervalType | null | undefined
        insightFilter: (state: any, props?: any) => InsightFilter | null | undefined
        funnelsFilter: (state: any, props?: any) => FunnelsFilter | null | undefined
        aggregationLabel: (
            state: any,
            props?: any
        ) => (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun
        querySource: (state: any, props?: any) => FunnelsQuery | null
        isStepsFunnel: (state: any, props?: any) => boolean | null
        isTimeToConvertFunnel: (state: any, props?: any) => boolean | null
        isTrendsFunnel: (state: any, props?: any) => boolean | null
        isEmptyFunnel: (state: any, props?: any) => boolean | null
        aggregationTargetLabel: (state: any, props?: any) => Noun
        results: (state: any, props?: any) => FunnelResultType
        isFunnelWithEnoughSteps: (state: any, props?: any) => boolean
        steps: (state: any, props?: any) => FunnelStepWithNestedBreakdown[]
        stepsWithConversionMetrics: (state: any, props?: any) => FunnelStepWithConversionMetrics[]
        disableFunnelBreakdownBaseline: (state: any, props?: any) => boolean
        flattenedBreakdowns: (state: any, props?: any) => FlattenedFunnelStepByBreakdown[]
        visibleStepsWithConversionMetrics: (state: any, props?: any) => FunnelStepWithConversionMetrics[]
        timeConversionResults: (state: any, props?: any) => FunnelsTimeConversionBins | null
        histogramGraphData: (state: any, props?: any) => HistogramGraphDatum[] | null
        hasFunnelResults: (state: any, props?: any) => boolean
        numericBinCount: (state: any, props?: any) => number
        conversionMetrics: (state: any, props?: any) => FunnelTimeConversionMetrics
        conversionWindow: (state: any, props?: any) => FunnelConversionWindow
        incompletenessOffsetFromEnd: (state: any, props?: any) => number
        advancedOptionsUsedCount: (state: any, props?: any) => number
        exclusionDefaultStepRange: (state: any, props?: any) => Omit<FunnelStepRangeEntityFilter, 'id' | 'name'>
        exclusionFilters: (state: any, props?: any) => FilterType
        areExclusionFiltersValid: (state: any, props?: any) => boolean
        isSkewed: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        skewWarningHidden: boolean
        insightData: Record<string, any> | null
        insightDataError: Record<string, any> | null
        vizQuerySource: InsightQueryNode | null
        breakdown: BreakdownFilter | null | undefined
        series: (EventsNode | ActionsNode)[] | null | undefined
        interval: IntervalType | null | undefined
        insightFilter: InsightFilter | null | undefined
        funnelsFilter: FunnelsFilter | null | undefined
        aggregationLabel: (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun
        querySource: FunnelsQuery | null
        isStepsFunnel: boolean | null
        isTimeToConvertFunnel: boolean | null
        isTrendsFunnel: boolean | null
        isEmptyFunnel: boolean | null
        aggregationTargetLabel: Noun
        results: FunnelResultType
        isFunnelWithEnoughSteps: boolean
        steps: FunnelStepWithNestedBreakdown[]
        stepsWithConversionMetrics: FunnelStepWithConversionMetrics[]
        disableFunnelBreakdownBaseline: boolean
        flattenedBreakdowns: FlattenedFunnelStepByBreakdown[]
        visibleStepsWithConversionMetrics: FunnelStepWithConversionMetrics[]
        timeConversionResults: FunnelsTimeConversionBins | null
        histogramGraphData: HistogramGraphDatum[] | null
        hasFunnelResults: boolean
        numericBinCount: number
        conversionMetrics: FunnelTimeConversionMetrics
        conversionWindow: FunnelConversionWindow
        incompletenessOffsetFromEnd: number
        advancedOptionsUsedCount: number
        exclusionDefaultStepRange: Omit<FunnelStepRangeEntityFilter, 'id' | 'name'>
        exclusionFilters: FilterType
        areExclusionFiltersValid: boolean
        isSkewed: boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        querySource: (
            vizQuerySource:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').InsightQueryNode
                | null
        ) => FunnelsQuery | null
        isStepsFunnel: (
            funnelsFilter:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').FunnelsFilter
                | null
                | undefined
        ) => boolean | null
        isTimeToConvertFunnel: (
            funnelsFilter:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').FunnelsFilter
                | null
                | undefined
        ) => boolean | null
        isTrendsFunnel: (
            funnelsFilter:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').FunnelsFilter
                | null
                | undefined
        ) => boolean | null
        isEmptyFunnel: (querySource: FunnelsQuery | null) => boolean | null
        aggregationTargetLabel: (
            querySource: FunnelsQuery | null,
            aggregationLabel: (
                groupTypeIndex: number | null | undefined,
                deferToUserWording?: boolean | undefined
            ) => Noun
        ) => Noun
        results: (insightData: Record<string, any> | null) => FunnelResultType
        isFunnelWithEnoughSteps: (
            series:
                | (
                      | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').EventsNode
                      | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').ActionsNode
                  )[]
                | null
                | undefined
        ) => boolean
        steps: (
            breakdown:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').BreakdownFilter
                | null
                | undefined,
            results: FunnelResultType,
            isTimeToConvertFunnel: boolean | null
        ) => FunnelStepWithNestedBreakdown[]
        stepsWithConversionMetrics: (
            steps: FunnelStepWithNestedBreakdown[],
            funnelsFilter:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').FunnelsFilter
                | null
                | undefined
        ) => FunnelStepWithConversionMetrics[]
        disableFunnelBreakdownBaseline: (arg: any) => boolean
        flattenedBreakdowns: (
            stepsWithConversionMetrics: FunnelStepWithConversionMetrics[],
            funnelsFilter:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').FunnelsFilter
                | null
                | undefined,
            disableFunnelBreakdownBaseline: boolean
        ) => FlattenedFunnelStepByBreakdown[]
        visibleStepsWithConversionMetrics: (
            stepsWithConversionMetrics: FunnelStepWithConversionMetrics[],
            funnelsFilter:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').FunnelsFilter
                | null
                | undefined,
            flattenedBreakdowns: FlattenedFunnelStepByBreakdown[]
        ) => FunnelStepWithConversionMetrics[]
        timeConversionResults: (
            results: FunnelResultType,
            funnelsFilter:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').FunnelsFilter
                | null
                | undefined
        ) => FunnelsTimeConversionBins | null
        histogramGraphData: (timeConversionResults: FunnelsTimeConversionBins | null) => HistogramGraphDatum[] | null
        hasFunnelResults: (
            funnelsFilter:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').FunnelsFilter
                | null
                | undefined,
            steps: FunnelStepWithNestedBreakdown[],
            histogramGraphData: HistogramGraphDatum[] | null
        ) => boolean
        numericBinCount: (
            funnelsFilter:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').FunnelsFilter
                | null
                | undefined,
            timeConversionResults: FunnelsTimeConversionBins | null
        ) => number
        conversionMetrics: (
            steps: FunnelStepWithNestedBreakdown[],
            funnelsFilter:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').FunnelsFilter
                | null
                | undefined,
            timeConversionResults: FunnelsTimeConversionBins | null
        ) => FunnelTimeConversionMetrics
        conversionWindow: (
            funnelsFilter:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').FunnelsFilter
                | null
                | undefined
        ) => FunnelConversionWindow
        incompletenessOffsetFromEnd: (
            steps: FunnelStepWithNestedBreakdown[],
            conversionWindow: FunnelConversionWindow
        ) => number
        advancedOptionsUsedCount: (
            funnelsFilter:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').FunnelsFilter
                | null
                | undefined
        ) => number
        exclusionDefaultStepRange: (
            querySource: FunnelsQuery | null
        ) => Omit<FunnelStepRangeEntityFilter, 'id' | 'name'>
        exclusionFilters: (
            funnelsFilter:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').FunnelsFilter
                | null
                | undefined
        ) => FilterType
        areExclusionFiltersValid: (insightDataError: Record<string, any> | null) => boolean
        isSkewed: (conversionMetrics: FunnelTimeConversionMetrics, skewWarningHidden: boolean) => boolean
    }
}
