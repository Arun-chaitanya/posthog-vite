// Generated by kea-typegen on Tue, 08 Aug 2023 10:01:13 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { EventType, FunnelCorrelation, FunnelCorrelationResultsType, FunnelCorrelationType, FunnelsFilterType, InsightLogicProps, PersonProperty, TeamPublicType, TeamType } from '../../types'

export interface funnelPropertyCorrelationLogicType extends Logic {
    actionCreators: {
        setPropertyCorrelationTypes: (types: FunnelCorrelationType[]) => {
            type: 'set property correlation types (scenes.funnels.funnelPropertyCorrelationLogic.*)'
            payload: {
                types: FunnelCorrelationType[]
            }
        }
        setPropertyNames: (propertyNames: string[]) => {
            type: 'set property names (scenes.funnels.funnelPropertyCorrelationLogic.*)'
            payload: {
                propertyNames: string[]
            }
        }
        excludePropertyFromProject: (propertyName: string) => {
            type: 'exclude property from project (scenes.funnels.funnelPropertyCorrelationLogic.*)'
            payload: {
                propertyName: string
            }
        }
        setAllProperties: () => {
            type: 'set all properties (scenes.funnels.funnelPropertyCorrelationLogic.*)'
            payload: {
                value: true
            }
        }
        loadPropertyCorrelations: (_: any) => {
            type: 'load property correlations (scenes.funnels.funnelPropertyCorrelationLogic.*)'
            payload: any
        }
        loadPropertyCorrelationsSuccess: (
            propertyCorrelations: {
                events: {
                    result_type: FunnelCorrelationResultsType.Properties
                    event: Pick<EventType, 'properties' | 'event' | 'elements'>
                    correlation_type: FunnelCorrelationType
                    odds_ratio: number
                    success_count: number
                    success_people_url: string
                    failure_count: number
                    failure_people_url: string
                }[]
            },
            payload?: any
        ) => {
            type: 'load property correlations success (scenes.funnels.funnelPropertyCorrelationLogic.*)'
            payload: {
                propertyCorrelations: {
                    events: {
                        result_type: FunnelCorrelationResultsType.Properties
                        event: Pick<EventType, 'properties' | 'event' | 'elements'>
                        correlation_type: FunnelCorrelationType
                        odds_ratio: number
                        success_count: number
                        success_people_url: string
                        failure_count: number
                        failure_people_url: string
                    }[]
                }
                payload?: any
            }
        }
        loadPropertyCorrelationsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load property correlations failure (scenes.funnels.funnelPropertyCorrelationLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set property correlation types (scenes.funnels.funnelPropertyCorrelationLogic.*)': 'setPropertyCorrelationTypes'
        'set property names (scenes.funnels.funnelPropertyCorrelationLogic.*)': 'setPropertyNames'
        'exclude property from project (scenes.funnels.funnelPropertyCorrelationLogic.*)': 'excludePropertyFromProject'
        'set all properties (scenes.funnels.funnelPropertyCorrelationLogic.*)': 'setAllProperties'
        'load property correlations (scenes.funnels.funnelPropertyCorrelationLogic.*)': 'loadPropertyCorrelations'
        'load property correlations success (scenes.funnels.funnelPropertyCorrelationLogic.*)': 'loadPropertyCorrelationsSuccess'
        'load property correlations failure (scenes.funnels.funnelPropertyCorrelationLogic.*)': 'loadPropertyCorrelationsFailure'
    }
    actionTypes: {
        setPropertyCorrelationTypes: 'set property correlation types (scenes.funnels.funnelPropertyCorrelationLogic.*)'
        setPropertyNames: 'set property names (scenes.funnels.funnelPropertyCorrelationLogic.*)'
        excludePropertyFromProject: 'exclude property from project (scenes.funnels.funnelPropertyCorrelationLogic.*)'
        setAllProperties: 'set all properties (scenes.funnels.funnelPropertyCorrelationLogic.*)'
        loadPropertyCorrelations: 'load property correlations (scenes.funnels.funnelPropertyCorrelationLogic.*)'
        loadPropertyCorrelationsSuccess: 'load property correlations success (scenes.funnels.funnelPropertyCorrelationLogic.*)'
        loadPropertyCorrelationsFailure: 'load property correlations failure (scenes.funnels.funnelPropertyCorrelationLogic.*)'
    }
    actions: {
        setPropertyCorrelationTypes: (types: FunnelCorrelationType[]) => void
        setPropertyNames: (propertyNames: string[]) => void
        excludePropertyFromProject: (propertyName: string) => void
        setAllProperties: () => void
        loadPropertyCorrelations: (_: any) => void
        loadPropertyCorrelationsSuccess: (
            propertyCorrelations: {
                events: {
                    result_type: FunnelCorrelationResultsType.Properties
                    event: Pick<EventType, 'properties' | 'event' | 'elements'>
                    correlation_type: FunnelCorrelationType
                    odds_ratio: number
                    success_count: number
                    success_people_url: string
                    failure_count: number
                    failure_people_url: string
                }[]
            },
            payload?: any
        ) => void
        loadPropertyCorrelationsFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setPropertyCorrelationTypes: (types: FunnelCorrelationType[]) => Promise<any>
        setPropertyNames: (propertyNames: string[]) => Promise<any>
        excludePropertyFromProject: (propertyName: string) => Promise<any>
        setAllProperties: () => Promise<any>
        loadPropertyCorrelations: (_: any) => Promise<any>
        loadPropertyCorrelationsSuccess: (
            propertyCorrelations: {
                events: {
                    result_type: FunnelCorrelationResultsType.Properties
                    event: Pick<EventType, 'properties' | 'event' | 'elements'>
                    correlation_type: FunnelCorrelationType
                    odds_ratio: number
                    success_count: number
                    success_people_url: string
                    failure_count: number
                    failure_people_url: string
                }[]
            },
            payload?: any
        ) => Promise<any>
        loadPropertyCorrelationsFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        __ignore: FunnelCorrelationResultsType | null
        propertyCorrelations: Record<'events', FunnelCorrelation[]>
        propertyCorrelationsLoading: boolean
        propertyCorrelationTypes: FunnelCorrelationType[]
        propertyNames: string[]
        loadedPropertyCorrelationsTableOnce: boolean
    }
    events: {}
    key: string
    listeners: {
        excludePropertyFromProject: ((
            action: {
                type: 'exclude property from project (scenes.funnels.funnelPropertyCorrelationLogic.*)'
                payload: {
                    propertyName: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setPropertyNames: ((
            action: {
                type: 'set property names (scenes.funnels.funnelPropertyCorrelationLogic.*)'
                payload: {
                    propertyNames: string[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setAllProperties: ((
            action: {
                type: 'set all properties (scenes.funnels.funnelPropertyCorrelationLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'funnels', 'funnelPropertyCorrelationLogic', '*']
    pathString: 'scenes.funnels.funnelPropertyCorrelationLogic.*'
    props: InsightLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        __ignore: FunnelCorrelationResultsType | null
        propertyCorrelations: Record<'events', FunnelCorrelation[]>
        propertyCorrelationsLoading: boolean
        propertyCorrelationTypes: FunnelCorrelationType[]
        propertyNames: string[]
        loadedPropertyCorrelationsTableOnce: boolean
    }
    reducers: {
        __ignore: (
            state: FunnelCorrelationResultsType | null,
            action: any,
            fullState: any
        ) => FunnelCorrelationResultsType | null
        propertyCorrelations: (
            state: Record<'events', FunnelCorrelation[]>,
            action: any,
            fullState: any
        ) => Record<'events', FunnelCorrelation[]>
        propertyCorrelationsLoading: (state: boolean, action: any, fullState: any) => boolean
        propertyCorrelationTypes: (
            state: FunnelCorrelationType[],
            action: any,
            fullState: any
        ) => FunnelCorrelationType[]
        propertyNames: (state: string[], action: any, fullState: any) => string[]
        loadedPropertyCorrelationsTableOnce: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        __ignore: FunnelCorrelationResultsType | null
        propertyCorrelations: Record<'events', FunnelCorrelation[]>
        propertyCorrelationsLoading: boolean
        propertyCorrelationTypes: FunnelCorrelationType[]
        propertyNames: string[]
        loadedPropertyCorrelationsTableOnce: boolean
    }
    selectors: {
        __ignore: (state: any, props?: any) => FunnelCorrelationResultsType | null
        propertyCorrelations: (state: any, props?: any) => Record<'events', FunnelCorrelation[]>
        propertyCorrelationsLoading: (state: any, props?: any) => boolean
        propertyCorrelationTypes: (state: any, props?: any) => FunnelCorrelationType[]
        propertyNames: (state: any, props?: any) => string[]
        loadedPropertyCorrelationsTableOnce: (state: any, props?: any) => boolean
        apiParams: (state: any, props?: any) => Partial<FunnelsFilterType>
        aggregationGroupTypeIndex: (state: any, props?: any) => number | undefined
        currentTeam: (state: any, props?: any) => TeamType | TeamPublicType | null
        currentTeamId: (state: any, props?: any) => number | null
        groupProperties: (state: any, props?: any) => (groupTypeIndex: number) => PersonProperty[]
        propertyCorrelationValues: (state: any, props?: any) => FunnelCorrelation[]
        excludedPropertyNames: (state: any, props?: any) => string[]
        isPropertyExcludedFromProject: (state: any, props?: any) => (propertyName: string) => boolean
    }
    sharedListeners: {}
    values: {
        __ignore: FunnelCorrelationResultsType | null
        propertyCorrelations: Record<'events', FunnelCorrelation[]>
        propertyCorrelationsLoading: boolean
        propertyCorrelationTypes: FunnelCorrelationType[]
        propertyNames: string[]
        loadedPropertyCorrelationsTableOnce: boolean
        apiParams: Partial<FunnelsFilterType>
        aggregationGroupTypeIndex: number | undefined
        currentTeam: TeamType | TeamPublicType | null
        currentTeamId: number | null
        groupProperties: (groupTypeIndex: number) => PersonProperty[]
        propertyCorrelationValues: FunnelCorrelation[]
        excludedPropertyNames: string[]
        isPropertyExcludedFromProject: (propertyName: string) => boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        propertyCorrelationValues: (
            propertyCorrelations: Record<'events', FunnelCorrelation[]>,
            propertyCorrelationTypes: FunnelCorrelationType[],
            excludedPropertyNames: string[]
        ) => FunnelCorrelation[]
        excludedPropertyNames: (
            currentTeam:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamType
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamPublicType
                | null
        ) => string[]
        isPropertyExcludedFromProject: (excludedPropertyNames: string[]) => (propertyName: string) => boolean
    }
}
