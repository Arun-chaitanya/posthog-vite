// Generated by kea-typegen on Thu, 20 Jul 2023 11:23:47 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FilterType, FunnelCorrelation, FunnelCorrelationResultsType, FunnelCorrelationType, InsightLogicProps } from '../../types'

export interface funnelCorrelationUsageLogicType extends Logic {
    actionCreators: {
        loadDataSuccess: (
            response: Record<string, any> | null,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => {
            type: 'load data success (scenes.funnels.funnelCorrelationUsageLogic.*)'
            payload: {
                response: Record<string, any> | null
                payload?: {
                    refresh: any
                    queryId: string
                }
            }
        }
        openCorrelationPersonsModal: (
            correlation: FunnelCorrelation,
            success: boolean
        ) => {
            type: 'open correlation persons modal (scenes.funnels.funnelCorrelationUsageLogic.*)'
            payload: {
                correlation: FunnelCorrelation
                success: boolean
            }
        }
        hideSkewWarning: () => {
            type: 'hide skew warning (scenes.funnels.funnelCorrelationUsageLogic.*)'
            payload: {
                value: true
            }
        }
        setCorrelationTypes: (types: FunnelCorrelationType[]) => {
            type: 'set correlation types (scenes.funnels.funnelCorrelationUsageLogic.*)'
            payload: {
                types: FunnelCorrelationType[]
            }
        }
        excludeEventFromProject: (eventName: string) => {
            type: 'exclude event from project (scenes.funnels.funnelCorrelationUsageLogic.*)'
            payload: {
                eventName: string
            }
        }
        excludeEventPropertyFromProject: (
            eventName: string,
            propertyName: string
        ) => {
            type: 'exclude event property from project (scenes.funnels.funnelCorrelationUsageLogic.*)'
            payload: {
                eventName: string
                propertyName: string
            }
        }
        loadEventWithPropertyCorrelations: (eventName: string) => {
            type: 'load event with property correlations (scenes.funnels.funnelCorrelationUsageLogic.*)'
            payload: string
        }
        setPropertyCorrelationTypes: (types: FunnelCorrelationType[]) => {
            type: 'set property correlation types (scenes.funnels.funnelCorrelationUsageLogic.*)'
            payload: {
                types: FunnelCorrelationType[]
            }
        }
        setPropertyNames: (propertyNames: string[]) => {
            type: 'set property names (scenes.funnels.funnelCorrelationUsageLogic.*)'
            payload: {
                propertyNames: string[]
            }
        }
        excludePropertyFromProject: (propertyName: string) => {
            type: 'exclude property from project (scenes.funnels.funnelCorrelationUsageLogic.*)'
            payload: {
                propertyName: string
            }
        }
        reportCorrelationViewed: (
            filters: Partial<FilterType>,
            delay?: number,
            propertiesTable?: boolean
        ) => {
            type: 'report correlation viewed (scenes.funnels.funnelCorrelationUsageLogic.*)'
            payload: {
                filters: Partial<FilterType>
                delay: number | undefined
                propertiesTable: boolean | undefined
            }
        }
        reportCorrelationInteraction: (
            correlationType: FunnelCorrelation['result_type'],
            action: string,
            props?: Record<string, any>
        ) => {
            type: 'report correlation interaction (scenes.funnels.funnelCorrelationUsageLogic.*)'
            payload: {
                correlationType: FunnelCorrelationResultsType
                action: string
                props: Record<string, any> | undefined
            }
        }
    }
    actionKeys: {
        'load data success (scenes.funnels.funnelCorrelationUsageLogic.*)': 'loadDataSuccess'
        'open correlation persons modal (scenes.funnels.funnelCorrelationUsageLogic.*)': 'openCorrelationPersonsModal'
        'hide skew warning (scenes.funnels.funnelCorrelationUsageLogic.*)': 'hideSkewWarning'
        'set correlation types (scenes.funnels.funnelCorrelationUsageLogic.*)': 'setCorrelationTypes'
        'exclude event from project (scenes.funnels.funnelCorrelationUsageLogic.*)': 'excludeEventFromProject'
        'exclude event property from project (scenes.funnels.funnelCorrelationUsageLogic.*)': 'excludeEventPropertyFromProject'
        'load event with property correlations (scenes.funnels.funnelCorrelationUsageLogic.*)': 'loadEventWithPropertyCorrelations'
        'set property correlation types (scenes.funnels.funnelCorrelationUsageLogic.*)': 'setPropertyCorrelationTypes'
        'set property names (scenes.funnels.funnelCorrelationUsageLogic.*)': 'setPropertyNames'
        'exclude property from project (scenes.funnels.funnelCorrelationUsageLogic.*)': 'excludePropertyFromProject'
        'report correlation viewed (scenes.funnels.funnelCorrelationUsageLogic.*)': 'reportCorrelationViewed'
        'report correlation interaction (scenes.funnels.funnelCorrelationUsageLogic.*)': 'reportCorrelationInteraction'
    }
    actionTypes: {
        loadDataSuccess: 'load data success (scenes.funnels.funnelCorrelationUsageLogic.*)'
        openCorrelationPersonsModal: 'open correlation persons modal (scenes.funnels.funnelCorrelationUsageLogic.*)'
        hideSkewWarning: 'hide skew warning (scenes.funnels.funnelCorrelationUsageLogic.*)'
        setCorrelationTypes: 'set correlation types (scenes.funnels.funnelCorrelationUsageLogic.*)'
        excludeEventFromProject: 'exclude event from project (scenes.funnels.funnelCorrelationUsageLogic.*)'
        excludeEventPropertyFromProject: 'exclude event property from project (scenes.funnels.funnelCorrelationUsageLogic.*)'
        loadEventWithPropertyCorrelations: 'load event with property correlations (scenes.funnels.funnelCorrelationUsageLogic.*)'
        setPropertyCorrelationTypes: 'set property correlation types (scenes.funnels.funnelCorrelationUsageLogic.*)'
        setPropertyNames: 'set property names (scenes.funnels.funnelCorrelationUsageLogic.*)'
        excludePropertyFromProject: 'exclude property from project (scenes.funnels.funnelCorrelationUsageLogic.*)'
        reportCorrelationViewed: 'report correlation viewed (scenes.funnels.funnelCorrelationUsageLogic.*)'
        reportCorrelationInteraction: 'report correlation interaction (scenes.funnels.funnelCorrelationUsageLogic.*)'
    }
    actions: {
        loadDataSuccess: (
            response: Record<string, any> | null,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => void
        openCorrelationPersonsModal: (correlation: FunnelCorrelation, success: boolean) => void
        hideSkewWarning: () => void
        setCorrelationTypes: (types: FunnelCorrelationType[]) => void
        excludeEventFromProject: (eventName: string) => void
        excludeEventPropertyFromProject: (eventName: string, propertyName: string) => void
        loadEventWithPropertyCorrelations: (eventName: string) => void
        setPropertyCorrelationTypes: (types: FunnelCorrelationType[]) => void
        setPropertyNames: (propertyNames: string[]) => void
        excludePropertyFromProject: (propertyName: string) => void
        reportCorrelationViewed: (filters: Partial<FilterType>, delay?: number, propertiesTable?: boolean) => void
        reportCorrelationInteraction: (
            correlationType: FunnelCorrelation['result_type'],
            action: string,
            props?: Record<string, any>
        ) => void
    }
    asyncActions: {
        loadDataSuccess: (
            response: Record<string, any> | null,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => Promise<any>
        openCorrelationPersonsModal: (correlation: FunnelCorrelation, success: boolean) => Promise<any>
        hideSkewWarning: () => Promise<any>
        setCorrelationTypes: (types: FunnelCorrelationType[]) => Promise<any>
        excludeEventFromProject: (eventName: string) => Promise<any>
        excludeEventPropertyFromProject: (eventName: string, propertyName: string) => Promise<any>
        loadEventWithPropertyCorrelations: (eventName: string) => Promise<any>
        setPropertyCorrelationTypes: (types: FunnelCorrelationType[]) => Promise<any>
        setPropertyNames: (propertyNames: string[]) => Promise<any>
        excludePropertyFromProject: (propertyName: string) => Promise<any>
        reportCorrelationViewed: (
            filters: Partial<FilterType>,
            delay?: number,
            propertiesTable?: boolean
        ) => Promise<any>
        reportCorrelationInteraction: (
            correlationType: FunnelCorrelation['result_type'],
            action: string,
            props?: Record<string, any>
        ) => Promise<any>
    }
    defaults: {
        shouldReportCorrelationViewed: boolean
        shouldReportPropertyCorrelationViewed: boolean
    }
    events: {}
    key: string
    listeners: {
        hideSkewWarning: ((
            action: {
                type: 'hide skew warning (scenes.funnels.funnelCorrelationUsageLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        'set visible (lib.components.VisibilitySensor.visibilitySensorLogic.*)': ((
            action: {
                type: 'set visible (lib.components.VisibilitySensor.visibilitySensorLogic.*)'
                payload: {
                    visible: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setCorrelationTypes: ((
            action: {
                type: 'set correlation types (scenes.funnels.funnelCorrelationUsageLogic.*)'
                payload: {
                    types: FunnelCorrelationType[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        excludeEventFromProject: ((
            action: {
                type: 'exclude event from project (scenes.funnels.funnelCorrelationUsageLogic.*)'
                payload: {
                    eventName: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setPropertyCorrelationTypes: ((
            action: {
                type: 'set property correlation types (scenes.funnels.funnelCorrelationUsageLogic.*)'
                payload: {
                    types: FunnelCorrelationType[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        excludePropertyFromProject: ((
            action: {
                type: 'exclude property from project (scenes.funnels.funnelCorrelationUsageLogic.*)'
                payload: {
                    propertyName: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setPropertyNames: ((
            action: {
                type: 'set property names (scenes.funnels.funnelCorrelationUsageLogic.*)'
                payload: {
                    propertyNames: string[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadEventWithPropertyCorrelations: ((
            action: {
                type: 'load event with property correlations (scenes.funnels.funnelCorrelationUsageLogic.*)'
                payload: string
            },
            previousState: any
        ) => void | Promise<void>)[]
        excludeEventPropertyFromProject: ((
            action: {
                type: 'exclude event property from project (scenes.funnels.funnelCorrelationUsageLogic.*)'
                payload: {
                    eventName: string
                    propertyName: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        openCorrelationPersonsModal: ((
            action: {
                type: 'open correlation persons modal (scenes.funnels.funnelCorrelationUsageLogic.*)'
                payload: {
                    correlation: FunnelCorrelation
                    success: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'funnels', 'funnelCorrelationUsageLogic', '*']
    pathString: 'scenes.funnels.funnelCorrelationUsageLogic.*'
    props: InsightLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        shouldReportCorrelationViewed: boolean
        shouldReportPropertyCorrelationViewed: boolean
    }
    reducers: {
        shouldReportCorrelationViewed: (state: boolean, action: any, fullState: any) => boolean
        shouldReportPropertyCorrelationViewed: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        shouldReportCorrelationViewed: boolean
        shouldReportPropertyCorrelationViewed: boolean
    }
    selectors: {
        shouldReportCorrelationViewed: (state: any, props?: any) => boolean
        shouldReportPropertyCorrelationViewed: (state: any, props?: any) => boolean
        filters: (state: any, props?: any) => Partial<FilterType>
        isInDashboardContext: (state: any, props?: any) => boolean
        correlationPropKey: (state: any, props?: any) => string
    }
    sharedListeners: {}
    values: {
        shouldReportCorrelationViewed: boolean
        shouldReportPropertyCorrelationViewed: boolean
        filters: Partial<FilterType>
        isInDashboardContext: boolean
        correlationPropKey: string
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        correlationPropKey: (arg: any) => string
    }
    __keaTypeGenInternalReducerActions: {
        'set visible (lib.components.VisibilitySensor.visibilitySensorLogic.*)': (visible: boolean) => {
            type: 'set visible (lib.components.VisibilitySensor.visibilitySensorLogic.*)'
            payload: {
                visible: boolean
            }
        }
    }
}
