// Generated by kea-typegen on Sun, 06 Aug 2023 09:52:47 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DataWarehouseSavedQuery, UserType } from '../../../types'
import type { PaginatedResponse } from '../../../lib/api'
import type { DataWarehouseSceneRow } from '../types'

export interface dataWarehouseSavedQueriesLogicType extends Logic {
    actionCreators: {
        loadDataWarehouseSavedQueries: () => {
            type: 'load data warehouse saved queries (scenes.warehouse.dataWarehouseSavedQueriesLogic)'
            payload: any
        }
        loadDataWarehouseSavedQueriesSuccess: (
            dataWarehouseSavedQueries: PaginatedResponse<DataWarehouseSavedQuery>,
            payload?: any
        ) => {
            type: 'load data warehouse saved queries success (scenes.warehouse.dataWarehouseSavedQueriesLogic)'
            payload: {
                dataWarehouseSavedQueries: PaginatedResponse<DataWarehouseSavedQuery>
                payload?: any
            }
        }
        loadDataWarehouseSavedQueriesFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load data warehouse saved queries failure (scenes.warehouse.dataWarehouseSavedQueriesLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        createDataWarehouseSavedQuery: (view: Partial<DataWarehouseSavedQuery>) => {
            type: 'create data warehouse saved query (scenes.warehouse.dataWarehouseSavedQueriesLogic)'
            payload: Partial<DataWarehouseSavedQuery>
        }
        createDataWarehouseSavedQuerySuccess: (
            dataWarehouseSavedQueries: {
                results: DataWarehouseSavedQuery[]
                next?: string | null | undefined
                previous?: string | null | undefined
            },
            payload?: Partial<DataWarehouseSavedQuery>
        ) => {
            type: 'create data warehouse saved query success (scenes.warehouse.dataWarehouseSavedQueriesLogic)'
            payload: {
                dataWarehouseSavedQueries: {
                    results: DataWarehouseSavedQuery[]
                    next?: string | null | undefined
                    previous?: string | null | undefined
                }
                payload?: Partial<DataWarehouseSavedQuery>
            }
        }
        createDataWarehouseSavedQueryFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'create data warehouse saved query failure (scenes.warehouse.dataWarehouseSavedQueriesLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load data warehouse saved queries (scenes.warehouse.dataWarehouseSavedQueriesLogic)': 'loadDataWarehouseSavedQueries'
        'load data warehouse saved queries success (scenes.warehouse.dataWarehouseSavedQueriesLogic)': 'loadDataWarehouseSavedQueriesSuccess'
        'load data warehouse saved queries failure (scenes.warehouse.dataWarehouseSavedQueriesLogic)': 'loadDataWarehouseSavedQueriesFailure'
        'create data warehouse saved query (scenes.warehouse.dataWarehouseSavedQueriesLogic)': 'createDataWarehouseSavedQuery'
        'create data warehouse saved query success (scenes.warehouse.dataWarehouseSavedQueriesLogic)': 'createDataWarehouseSavedQuerySuccess'
        'create data warehouse saved query failure (scenes.warehouse.dataWarehouseSavedQueriesLogic)': 'createDataWarehouseSavedQueryFailure'
    }
    actionTypes: {
        loadDataWarehouseSavedQueries: 'load data warehouse saved queries (scenes.warehouse.dataWarehouseSavedQueriesLogic)'
        loadDataWarehouseSavedQueriesSuccess: 'load data warehouse saved queries success (scenes.warehouse.dataWarehouseSavedQueriesLogic)'
        loadDataWarehouseSavedQueriesFailure: 'load data warehouse saved queries failure (scenes.warehouse.dataWarehouseSavedQueriesLogic)'
        createDataWarehouseSavedQuery: 'create data warehouse saved query (scenes.warehouse.dataWarehouseSavedQueriesLogic)'
        createDataWarehouseSavedQuerySuccess: 'create data warehouse saved query success (scenes.warehouse.dataWarehouseSavedQueriesLogic)'
        createDataWarehouseSavedQueryFailure: 'create data warehouse saved query failure (scenes.warehouse.dataWarehouseSavedQueriesLogic)'
    }
    actions: {
        loadDataWarehouseSavedQueries: () => void
        loadDataWarehouseSavedQueriesSuccess: (
            dataWarehouseSavedQueries: PaginatedResponse<DataWarehouseSavedQuery>,
            payload?: any
        ) => void
        loadDataWarehouseSavedQueriesFailure: (error: string, errorObject?: any) => void
        createDataWarehouseSavedQuery: (view: Partial<DataWarehouseSavedQuery>) => void
        createDataWarehouseSavedQuerySuccess: (
            dataWarehouseSavedQueries: {
                results: DataWarehouseSavedQuery[]
                next?: string | null | undefined
                previous?: string | null | undefined
            },
            payload?: Partial<DataWarehouseSavedQuery>
        ) => void
        createDataWarehouseSavedQueryFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadDataWarehouseSavedQueries: () => Promise<any>
        loadDataWarehouseSavedQueriesSuccess: (
            dataWarehouseSavedQueries: PaginatedResponse<DataWarehouseSavedQuery>,
            payload?: any
        ) => Promise<any>
        loadDataWarehouseSavedQueriesFailure: (error: string, errorObject?: any) => Promise<any>
        createDataWarehouseSavedQuery: (view: Partial<DataWarehouseSavedQuery>) => Promise<any>
        createDataWarehouseSavedQuerySuccess: (
            dataWarehouseSavedQueries: {
                results: DataWarehouseSavedQuery[]
                next?: string | null | undefined
                previous?: string | null | undefined
            },
            payload?: Partial<DataWarehouseSavedQuery>
        ) => Promise<any>
        createDataWarehouseSavedQueryFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        dataWarehouseSavedQueries: PaginatedResponse<DataWarehouseSavedQuery> | null
        dataWarehouseSavedQueriesLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'warehouse', 'dataWarehouseSavedQueriesLogic']
    pathString: 'scenes.warehouse.dataWarehouseSavedQueriesLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        dataWarehouseSavedQueries: PaginatedResponse<DataWarehouseSavedQuery> | null
        dataWarehouseSavedQueriesLoading: boolean
    }
    reducers: {
        dataWarehouseSavedQueries: (
            state: PaginatedResponse<DataWarehouseSavedQuery> | null,
            action: any,
            fullState: any
        ) => PaginatedResponse<DataWarehouseSavedQuery> | null
        dataWarehouseSavedQueriesLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        dataWarehouseSavedQueries: PaginatedResponse<DataWarehouseSavedQuery> | null
        dataWarehouseSavedQueriesLoading: boolean
    }
    selectors: {
        dataWarehouseSavedQueries: (state: any, props?: any) => PaginatedResponse<DataWarehouseSavedQuery> | null
        dataWarehouseSavedQueriesLoading: (state: any, props?: any) => boolean
        user: (state: any, props?: any) => UserType | null
        savedQueries: (state: any, props?: any) => DataWarehouseSceneRow[]
        shouldShowEmptyState: (state: any, props?: any) => boolean
        shouldShowProductIntroduction: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        dataWarehouseSavedQueries: PaginatedResponse<DataWarehouseSavedQuery> | null
        dataWarehouseSavedQueriesLoading: boolean
        user: UserType | null
        savedQueries: DataWarehouseSceneRow[]
        shouldShowEmptyState: boolean
        shouldShowProductIntroduction: boolean
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        savedQueries: (
            dataWarehouseSavedQueries: PaginatedResponse<DataWarehouseSavedQuery> | null
        ) => DataWarehouseSceneRow[]
        shouldShowEmptyState: (
            savedQueries: DataWarehouseSceneRow[],
            dataWarehouseSavedQueriesLoading: boolean
        ) => boolean
        shouldShowProductIntroduction: (
            user:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').UserType
                | null
        ) => boolean
    }
}
