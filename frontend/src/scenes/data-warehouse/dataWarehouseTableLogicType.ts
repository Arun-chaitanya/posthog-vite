// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:25 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { TableLogicProps } from './dataWarehouseTableLogic'
import type { AnyPropertyFilter, Breadcrumb, DataWarehouseTable } from '../../types'
import type { DataTableNode } from '../../queries/schema'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../node_modules/kea-forms'

export interface dataWarehouseTableLogicType extends Logic {
    actionCreators: {
        loadDatabase: () => {
            type: 'load database (scenes.data-warehouse.tableLogic)'
            payload: any
        }
        editingTable: (editing: boolean) => {
            type: 'editing table (scenes.data-warehouse.tableLogic)'
            payload: {
                editing: boolean
            }
        }
        updateTargetingFlagFilters: (
            index: number,
            properties: AnyPropertyFilter[]
        ) => {
            type: 'update targeting flag filters (scenes.data-warehouse.tableLogic)'
            payload: {
                index: number
                properties: AnyPropertyFilter[]
            }
        }
        addConditionSet: () => {
            type: 'add condition set (scenes.data-warehouse.tableLogic)'
            payload: {
                value: true
            }
        }
        removeConditionSet: (index: number) => {
            type: 'remove condition set (scenes.data-warehouse.tableLogic)'
            payload: {
                index: number
            }
        }
        launchTable: () => {
            type: 'launch table (scenes.data-warehouse.tableLogic)'
            payload: {
                value: true
            }
        }
        stopTable: () => {
            type: 'stop table (scenes.data-warehouse.tableLogic)'
            payload: {
                value: true
            }
        }
        archiveTable: () => {
            type: 'archive table (scenes.data-warehouse.tableLogic)'
            payload: {
                value: true
            }
        }
        setDataTableQuery: (query: DataTableNode) => {
            type: 'set data table query (scenes.data-warehouse.tableLogic)'
            payload: {
                query: DataTableNode
            }
        }
        loadTable: () => {
            type: 'load table (scenes.data-warehouse.tableLogic)'
            payload: any
        }
        loadTableSuccess: (
            table: DataWarehouseTable,
            payload?: any
        ) => {
            type: 'load table success (scenes.data-warehouse.tableLogic)'
            payload: {
                table: DataWarehouseTable
                payload?: any
            }
        }
        loadTableFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load table failure (scenes.data-warehouse.tableLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        createTable: (tablePayload: any) => {
            type: 'create table (scenes.data-warehouse.tableLogic)'
            payload: any
        }
        createTableSuccess: (
            table: DataWarehouseTable,
            payload?: any
        ) => {
            type: 'create table success (scenes.data-warehouse.tableLogic)'
            payload: {
                table: DataWarehouseTable
                payload?: any
            }
        }
        createTableFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'create table failure (scenes.data-warehouse.tableLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateTable: (tablePayload: any) => {
            type: 'update table (scenes.data-warehouse.tableLogic)'
            payload: any
        }
        updateTableSuccess: (
            table: DataWarehouseTable,
            payload?: any
        ) => {
            type: 'update table success (scenes.data-warehouse.tableLogic)'
            payload: {
                table: DataWarehouseTable
                payload?: any
            }
        }
        updateTableFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update table failure (scenes.data-warehouse.tableLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setTableValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set table value (scenes.data-warehouse.tableLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setTableValues: (values: DeepPartial<DataWarehouseTable>) => {
            type: 'set table values (scenes.data-warehouse.tableLogic)'
            payload: {
                values: DeepPartial<DataWarehouseTable>
            }
        }
        setTableManualErrors: (errors: Record<string, any>) => {
            type: 'set table manual errors (scenes.data-warehouse.tableLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchTableField: (key: string) => {
            type: 'touch table field (scenes.data-warehouse.tableLogic)'
            payload: {
                key: string
            }
        }
        resetTable: (values?: DataWarehouseTable) => {
            type: 'reset table (scenes.data-warehouse.tableLogic)'
            payload: {
                values?: DataWarehouseTable
            }
        }
        submitTable: () => {
            type: 'submit table (scenes.data-warehouse.tableLogic)'
            payload: {
                value: boolean
            }
        }
        submitTableRequest: (table: DataWarehouseTable) => {
            type: 'submit table request (scenes.data-warehouse.tableLogic)'
            payload: {
                table: DataWarehouseTable
            }
        }
        submitTableSuccess: (table: DataWarehouseTable) => {
            type: 'submit table success (scenes.data-warehouse.tableLogic)'
            payload: {
                table: DataWarehouseTable
            }
        }
        submitTableFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit table failure (scenes.data-warehouse.tableLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'load database (scenes.data-warehouse.tableLogic)': 'loadDatabase'
        'editing table (scenes.data-warehouse.tableLogic)': 'editingTable'
        'update targeting flag filters (scenes.data-warehouse.tableLogic)': 'updateTargetingFlagFilters'
        'add condition set (scenes.data-warehouse.tableLogic)': 'addConditionSet'
        'remove condition set (scenes.data-warehouse.tableLogic)': 'removeConditionSet'
        'launch table (scenes.data-warehouse.tableLogic)': 'launchTable'
        'stop table (scenes.data-warehouse.tableLogic)': 'stopTable'
        'archive table (scenes.data-warehouse.tableLogic)': 'archiveTable'
        'set data table query (scenes.data-warehouse.tableLogic)': 'setDataTableQuery'
        'load table (scenes.data-warehouse.tableLogic)': 'loadTable'
        'load table success (scenes.data-warehouse.tableLogic)': 'loadTableSuccess'
        'load table failure (scenes.data-warehouse.tableLogic)': 'loadTableFailure'
        'create table (scenes.data-warehouse.tableLogic)': 'createTable'
        'create table success (scenes.data-warehouse.tableLogic)': 'createTableSuccess'
        'create table failure (scenes.data-warehouse.tableLogic)': 'createTableFailure'
        'update table (scenes.data-warehouse.tableLogic)': 'updateTable'
        'update table success (scenes.data-warehouse.tableLogic)': 'updateTableSuccess'
        'update table failure (scenes.data-warehouse.tableLogic)': 'updateTableFailure'
        'set table value (scenes.data-warehouse.tableLogic)': 'setTableValue'
        'set table values (scenes.data-warehouse.tableLogic)': 'setTableValues'
        'set table manual errors (scenes.data-warehouse.tableLogic)': 'setTableManualErrors'
        'touch table field (scenes.data-warehouse.tableLogic)': 'touchTableField'
        'reset table (scenes.data-warehouse.tableLogic)': 'resetTable'
        'submit table (scenes.data-warehouse.tableLogic)': 'submitTable'
        'submit table request (scenes.data-warehouse.tableLogic)': 'submitTableRequest'
        'submit table success (scenes.data-warehouse.tableLogic)': 'submitTableSuccess'
        'submit table failure (scenes.data-warehouse.tableLogic)': 'submitTableFailure'
    }
    actionTypes: {
        loadDatabase: 'load database (scenes.data-warehouse.tableLogic)'
        editingTable: 'editing table (scenes.data-warehouse.tableLogic)'
        updateTargetingFlagFilters: 'update targeting flag filters (scenes.data-warehouse.tableLogic)'
        addConditionSet: 'add condition set (scenes.data-warehouse.tableLogic)'
        removeConditionSet: 'remove condition set (scenes.data-warehouse.tableLogic)'
        launchTable: 'launch table (scenes.data-warehouse.tableLogic)'
        stopTable: 'stop table (scenes.data-warehouse.tableLogic)'
        archiveTable: 'archive table (scenes.data-warehouse.tableLogic)'
        setDataTableQuery: 'set data table query (scenes.data-warehouse.tableLogic)'
        loadTable: 'load table (scenes.data-warehouse.tableLogic)'
        loadTableSuccess: 'load table success (scenes.data-warehouse.tableLogic)'
        loadTableFailure: 'load table failure (scenes.data-warehouse.tableLogic)'
        createTable: 'create table (scenes.data-warehouse.tableLogic)'
        createTableSuccess: 'create table success (scenes.data-warehouse.tableLogic)'
        createTableFailure: 'create table failure (scenes.data-warehouse.tableLogic)'
        updateTable: 'update table (scenes.data-warehouse.tableLogic)'
        updateTableSuccess: 'update table success (scenes.data-warehouse.tableLogic)'
        updateTableFailure: 'update table failure (scenes.data-warehouse.tableLogic)'
        setTableValue: 'set table value (scenes.data-warehouse.tableLogic)'
        setTableValues: 'set table values (scenes.data-warehouse.tableLogic)'
        setTableManualErrors: 'set table manual errors (scenes.data-warehouse.tableLogic)'
        touchTableField: 'touch table field (scenes.data-warehouse.tableLogic)'
        resetTable: 'reset table (scenes.data-warehouse.tableLogic)'
        submitTable: 'submit table (scenes.data-warehouse.tableLogic)'
        submitTableRequest: 'submit table request (scenes.data-warehouse.tableLogic)'
        submitTableSuccess: 'submit table success (scenes.data-warehouse.tableLogic)'
        submitTableFailure: 'submit table failure (scenes.data-warehouse.tableLogic)'
    }
    actions: {
        loadDatabase: () => void
        editingTable: (editing: boolean) => void
        updateTargetingFlagFilters: (index: number, properties: AnyPropertyFilter[]) => void
        addConditionSet: () => void
        removeConditionSet: (index: number) => void
        launchTable: () => void
        stopTable: () => void
        archiveTable: () => void
        setDataTableQuery: (query: DataTableNode) => void
        loadTable: () => void
        loadTableSuccess: (table: DataWarehouseTable, payload?: any) => void
        loadTableFailure: (error: string, errorObject?: any) => void
        createTable: (tablePayload: any) => void
        createTableSuccess: (table: DataWarehouseTable, payload?: any) => void
        createTableFailure: (error: string, errorObject?: any) => void
        updateTable: (tablePayload: any) => void
        updateTableSuccess: (table: DataWarehouseTable, payload?: any) => void
        updateTableFailure: (error: string, errorObject?: any) => void
        setTableValue: (key: FieldName, value: any) => void
        setTableValues: (values: DeepPartial<DataWarehouseTable>) => void
        setTableManualErrors: (errors: Record<string, any>) => void
        touchTableField: (key: string) => void
        resetTable: (values?: DataWarehouseTable) => void
        submitTable: () => void
        submitTableRequest: (table: DataWarehouseTable) => void
        submitTableSuccess: (table: DataWarehouseTable) => void
        submitTableFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        loadDatabase: () => Promise<any>
        editingTable: (editing: boolean) => Promise<any>
        updateTargetingFlagFilters: (index: number, properties: AnyPropertyFilter[]) => Promise<any>
        addConditionSet: () => Promise<any>
        removeConditionSet: (index: number) => Promise<any>
        launchTable: () => Promise<any>
        stopTable: () => Promise<any>
        archiveTable: () => Promise<any>
        setDataTableQuery: (query: DataTableNode) => Promise<any>
        loadTable: () => Promise<any>
        loadTableSuccess: (table: DataWarehouseTable, payload?: any) => Promise<any>
        loadTableFailure: (error: string, errorObject?: any) => Promise<any>
        createTable: (tablePayload: any) => Promise<any>
        createTableSuccess: (table: DataWarehouseTable, payload?: any) => Promise<any>
        createTableFailure: (error: string, errorObject?: any) => Promise<any>
        updateTable: (tablePayload: any) => Promise<any>
        updateTableSuccess: (table: DataWarehouseTable, payload?: any) => Promise<any>
        updateTableFailure: (error: string, errorObject?: any) => Promise<any>
        setTableValue: (key: FieldName, value: any) => Promise<any>
        setTableValues: (values: DeepPartial<DataWarehouseTable>) => Promise<any>
        setTableManualErrors: (errors: Record<string, any>) => Promise<any>
        touchTableField: (key: string) => Promise<any>
        resetTable: (values?: DataWarehouseTable) => Promise<any>
        submitTable: () => Promise<any>
        submitTableRequest: (table: DataWarehouseTable) => Promise<any>
        submitTableSuccess: (table: DataWarehouseTable) => Promise<any>
        submitTableFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        table: DataWarehouseTable
        tableLoading: boolean
        isEditingTable: boolean
        dataTableQuery: DataTableNode | null
        isTableSubmitting: boolean
        showTableErrors: boolean
        tableChanged: boolean
        tableTouches: Record<string, boolean>
        tableManualErrors: Record<string, any>
    }
    events: {}
    key: string
    listeners: {
        createTableSuccess: ((
            action: {
                type: 'create table success (scenes.data-warehouse.tableLogic)'
                payload: {
                    table: DataWarehouseTable
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateTableSuccess: ((
            action: {
                type: 'update table success (scenes.data-warehouse.tableLogic)'
                payload: {
                    table: DataWarehouseTable
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'data-warehouse', 'tableLogic']
    pathString: 'scenes.data-warehouse.tableLogic'
    props: TableLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        table: DataWarehouseTable
        tableLoading: boolean
        isEditingTable: boolean
        dataTableQuery: DataTableNode | null
        isTableSubmitting: boolean
        showTableErrors: boolean
        tableChanged: boolean
        tableTouches: Record<string, boolean>
        tableManualErrors: Record<string, any>
    }
    reducers: {
        table: (state: DataWarehouseTable, action: any, fullState: any) => DataWarehouseTable
        tableLoading: (state: boolean, action: any, fullState: any) => boolean
        isEditingTable: (state: boolean, action: any, fullState: any) => boolean
        dataTableQuery: (state: DataTableNode | null, action: any, fullState: any) => DataTableNode | null
        isTableSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showTableErrors: (state: boolean, action: any, fullState: any) => boolean
        tableChanged: (state: boolean, action: any, fullState: any) => boolean
        tableTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        tableManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        table: DataWarehouseTable
        tableLoading: boolean
        isEditingTable: boolean
        dataTableQuery: DataTableNode | null
        isTableSubmitting: boolean
        showTableErrors: boolean
        tableChanged: boolean
        tableTouches: Record<string, boolean>
        tableManualErrors: Record<string, any>
    }
    selectors: {
        table: (state: any, props?: any) => DataWarehouseTable
        tableLoading: (state: any, props?: any) => boolean
        isEditingTable: (state: any, props?: any) => boolean
        dataTableQuery: (state: any, props?: any) => DataTableNode | null
        isTableSubmitting: (state: any, props?: any) => boolean
        showTableErrors: (state: any, props?: any) => boolean
        tableChanged: (state: any, props?: any) => boolean
        tableTouches: (state: any, props?: any) => Record<string, boolean>
        tableManualErrors: (state: any, props?: any) => Record<string, any>
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
        tableTouched: (state: any, props?: any) => boolean
        tableValidationErrors: (state: any, props?: any) => DeepPartialMap<DataWarehouseTable, ValidationErrorType>
        tableAllErrors: (state: any, props?: any) => Record<string, any>
        tableHasErrors: (state: any, props?: any) => boolean
        tableErrors: (state: any, props?: any) => DeepPartialMap<DataWarehouseTable, ValidationErrorType>
        isTableValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        table: DataWarehouseTable
        tableLoading: boolean
        isEditingTable: boolean
        dataTableQuery: DataTableNode | null
        isTableSubmitting: boolean
        showTableErrors: boolean
        tableChanged: boolean
        tableTouches: Record<string, boolean>
        tableManualErrors: Record<string, any>
        breadcrumbs: Breadcrumb[]
        tableTouched: boolean
        tableValidationErrors: DeepPartialMap<DataWarehouseTable, ValidationErrorType>
        tableAllErrors: Record<string, any>
        tableHasErrors: boolean
        tableErrors: DeepPartialMap<DataWarehouseTable, ValidationErrorType>
        isTableValid: boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        breadcrumbs: (table: DataWarehouseTable) => Breadcrumb[]
    }
}
