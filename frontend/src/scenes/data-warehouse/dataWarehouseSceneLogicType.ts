// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:58 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DataWarehouseTable, UserType } from '../../types'
import type { PaginatedResponse } from '../../lib/api'
import type { DataWarehouseSceneRow } from './dataWarehouseSceneLogic'

export interface dataWarehouseSceneLogicType extends Logic {
    actionCreators: {
        loadDataWarehouse: () => {
            type: 'load data warehouse (scenes.warehouse.dataWarehouseSceneLogic)'
            payload: any
        }
        loadDataWarehouseSuccess: (
            dataWarehouse: PaginatedResponse<DataWarehouseTable>,
            payload?: any
        ) => {
            type: 'load data warehouse success (scenes.warehouse.dataWarehouseSceneLogic)'
            payload: {
                dataWarehouse: PaginatedResponse<DataWarehouseTable>
                payload?: any
            }
        }
        loadDataWarehouseFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load data warehouse failure (scenes.warehouse.dataWarehouseSceneLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load data warehouse (scenes.warehouse.dataWarehouseSceneLogic)': 'loadDataWarehouse'
        'load data warehouse success (scenes.warehouse.dataWarehouseSceneLogic)': 'loadDataWarehouseSuccess'
        'load data warehouse failure (scenes.warehouse.dataWarehouseSceneLogic)': 'loadDataWarehouseFailure'
    }
    actionTypes: {
        loadDataWarehouse: 'load data warehouse (scenes.warehouse.dataWarehouseSceneLogic)'
        loadDataWarehouseSuccess: 'load data warehouse success (scenes.warehouse.dataWarehouseSceneLogic)'
        loadDataWarehouseFailure: 'load data warehouse failure (scenes.warehouse.dataWarehouseSceneLogic)'
    }
    actions: {
        loadDataWarehouse: () => void
        loadDataWarehouseSuccess: (dataWarehouse: PaginatedResponse<DataWarehouseTable>, payload?: any) => void
        loadDataWarehouseFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadDataWarehouse: () => Promise<any>
        loadDataWarehouseSuccess: (dataWarehouse: PaginatedResponse<DataWarehouseTable>, payload?: any) => Promise<any>
        loadDataWarehouseFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        dataWarehouse: PaginatedResponse<DataWarehouseTable> | null
        dataWarehouseLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'warehouse', 'dataWarehouseSceneLogic']
    pathString: 'scenes.warehouse.dataWarehouseSceneLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        dataWarehouse: PaginatedResponse<DataWarehouseTable> | null
        dataWarehouseLoading: boolean
    }
    reducers: {
        dataWarehouse: (
            state: PaginatedResponse<DataWarehouseTable> | null,
            action: any,
            fullState: any
        ) => PaginatedResponse<DataWarehouseTable> | null
        dataWarehouseLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        dataWarehouse: PaginatedResponse<DataWarehouseTable> | null
        dataWarehouseLoading: boolean
    }
    selectors: {
        dataWarehouse: (state: any, props?: any) => PaginatedResponse<DataWarehouseTable> | null
        dataWarehouseLoading: (state: any, props?: any) => boolean
        user: (state: any, props?: any) => UserType | null
        tables: (state: any, props?: any) => DataWarehouseSceneRow[]
        shouldShowEmptyState: (state: any, props?: any) => boolean
        shouldShowProductIntroduction: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        dataWarehouse: PaginatedResponse<DataWarehouseTable> | null
        dataWarehouseLoading: boolean
        user: UserType | null
        tables: DataWarehouseSceneRow[]
        shouldShowEmptyState: boolean
        shouldShowProductIntroduction: boolean
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        tables: (dataWarehouse: PaginatedResponse<DataWarehouseTable> | null) => DataWarehouseSceneRow[]
        shouldShowEmptyState: (tables: DataWarehouseSceneRow[], dataWarehouseLoading: boolean) => boolean
        shouldShowProductIntroduction: (
            user:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').UserType
                | null
        ) => boolean
    }
}
