// Generated by kea-typegen on Thu, 20 Jul 2023 11:23:35 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { LoadedScene, Scene, SceneConfig, SceneParams } from './sceneTypes'
import type { LocationChangedPayload } from '../../../node_modules/.pnpm/kea-router@3.1.3_kea@3.1.5/node_modules/kea-router/lib/types.d'
import type { AvailableFeature } from '../types'
import type { BuiltLogic } from '../../../node_modules/.pnpm/kea@3.1.5_react@16.14.0/node_modules/kea/lib/index.d'

export interface sceneLogicType extends Logic {
    actionCreators: {
        locationChanged: ({
            method,
            pathname,
            search,
            searchParams,
            hash,
            hashParams,
            initial,
        }: LocationChangedPayload) => {
            type: 'location changed (scenes.sceneLogic)'
            payload: {
                method: 'PUSH' | 'REPLACE' | 'POP'
                pathname: string
                search: string
                searchParams: Record<string, any>
                hash: string
                hashParams: Record<string, any>
                initial: boolean
            }
        }
        openScene: (
            scene: Scene,
            params: SceneParams,
            method: string
        ) => {
            type: 'open scene (scenes.sceneLogic)'
            payload: {
                scene: Scene
                params: SceneParams
                method: string
            }
        }
        loadScene: (
            scene: Scene,
            params: SceneParams,
            method: string
        ) => {
            type: 'load scene (scenes.sceneLogic)'
            payload: {
                scene: Scene
                params: SceneParams
                method: string
            }
        }
        setScene: (
            scene: Scene,
            params: SceneParams,
            scrollToTop?: boolean
        ) => {
            type: 'set scene (scenes.sceneLogic)'
            payload: {
                scene: Scene
                params: SceneParams
                scrollToTop: boolean
            }
        }
        setLoadedScene: (loadedScene: LoadedScene) => {
            type: 'set loaded scene (scenes.sceneLogic)'
            payload: {
                loadedScene: LoadedScene
            }
        }
        showUpgradeModal: (
            featureName: string,
            featureCaption: string
        ) => {
            type: 'show upgrade modal (scenes.sceneLogic)'
            payload: {
                featureName: string
                featureCaption: string
            }
        }
        guardAvailableFeature: (
            featureKey: AvailableFeature,
            featureName: string,
            featureCaption: string,
            featureAvailableCallback?: () => void,
            guardOn?: {
                cloud: boolean
                selfHosted: boolean
            },
            currentUsage?: number
        ) => {
            type: 'guard available feature (scenes.sceneLogic)'
            payload: {
                featureKey: AvailableFeature
                featureName: string
                featureCaption: string
                featureAvailableCallback: (() => void) | undefined
                guardOn: {
                    cloud: boolean
                    selfHosted: boolean
                }
                currentUsage: number | undefined
            }
        }
        hideUpgradeModal: () => {
            type: 'hide upgrade modal (scenes.sceneLogic)'
            payload: {
                value: true
            }
        }
        reloadBrowserDueToImportError: () => {
            type: 'reload browser due to import error (scenes.sceneLogic)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'location changed (scenes.sceneLogic)': 'locationChanged'
        'open scene (scenes.sceneLogic)': 'openScene'
        'load scene (scenes.sceneLogic)': 'loadScene'
        'set scene (scenes.sceneLogic)': 'setScene'
        'set loaded scene (scenes.sceneLogic)': 'setLoadedScene'
        'show upgrade modal (scenes.sceneLogic)': 'showUpgradeModal'
        'guard available feature (scenes.sceneLogic)': 'guardAvailableFeature'
        'hide upgrade modal (scenes.sceneLogic)': 'hideUpgradeModal'
        'reload browser due to import error (scenes.sceneLogic)': 'reloadBrowserDueToImportError'
    }
    actionTypes: {
        locationChanged: 'location changed (scenes.sceneLogic)'
        openScene: 'open scene (scenes.sceneLogic)'
        loadScene: 'load scene (scenes.sceneLogic)'
        setScene: 'set scene (scenes.sceneLogic)'
        setLoadedScene: 'set loaded scene (scenes.sceneLogic)'
        showUpgradeModal: 'show upgrade modal (scenes.sceneLogic)'
        guardAvailableFeature: 'guard available feature (scenes.sceneLogic)'
        hideUpgradeModal: 'hide upgrade modal (scenes.sceneLogic)'
        reloadBrowserDueToImportError: 'reload browser due to import error (scenes.sceneLogic)'
    }
    actions: {
        locationChanged: ({
            method,
            pathname,
            search,
            searchParams,
            hash,
            hashParams,
            initial,
        }: LocationChangedPayload) => void
        openScene: (scene: Scene, params: SceneParams, method: string) => void
        loadScene: (scene: Scene, params: SceneParams, method: string) => void
        setScene: (scene: Scene, params: SceneParams, scrollToTop?: boolean) => void
        setLoadedScene: (loadedScene: LoadedScene) => void
        showUpgradeModal: (featureName: string, featureCaption: string) => void
        guardAvailableFeature: (
            featureKey: AvailableFeature,
            featureName: string,
            featureCaption: string,
            featureAvailableCallback?: () => void,
            guardOn?: {
                cloud: boolean
                selfHosted: boolean
            },
            currentUsage?: number
        ) => void
        hideUpgradeModal: () => void
        reloadBrowserDueToImportError: () => void
    }
    asyncActions: {
        locationChanged: ({
            method,
            pathname,
            search,
            searchParams,
            hash,
            hashParams,
            initial,
        }: LocationChangedPayload) => Promise<any>
        openScene: (scene: Scene, params: SceneParams, method: string) => Promise<any>
        loadScene: (scene: Scene, params: SceneParams, method: string) => Promise<any>
        setScene: (scene: Scene, params: SceneParams, scrollToTop?: boolean) => Promise<any>
        setLoadedScene: (loadedScene: LoadedScene) => Promise<any>
        showUpgradeModal: (featureName: string, featureCaption: string) => Promise<any>
        guardAvailableFeature: (
            featureKey: AvailableFeature,
            featureName: string,
            featureCaption: string,
            featureAvailableCallback?: () => void,
            guardOn?: {
                cloud: boolean
                selfHosted: boolean
            },
            currentUsage?: number
        ) => Promise<any>
        hideUpgradeModal: () => Promise<any>
        reloadBrowserDueToImportError: () => Promise<any>
    }
    defaults: {
        scene: Scene | null
        loadedScenes: Record<string, LoadedScene>
        loadingScene: Scene | null
        upgradeModalFeatureNameAndCaption: [string, string] | null
        lastReloadAt: number | null
    }
    events: {}
    key: undefined
    listeners: {
        showUpgradeModal: ((
            action: {
                type: 'show upgrade modal (scenes.sceneLogic)'
                payload: {
                    featureName: string
                    featureCaption: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        guardAvailableFeature: ((
            action: {
                type: 'guard available feature (scenes.sceneLogic)'
                payload: {
                    featureKey: AvailableFeature
                    featureName: string
                    featureCaption: string
                    featureAvailableCallback: (() => void) | undefined
                    guardOn: {
                        cloud: boolean
                        selfHosted: boolean
                    }
                    currentUsage: number | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setScene: ((
            action: {
                type: 'set scene (scenes.sceneLogic)'
                payload: {
                    scene: Scene
                    params: SceneParams
                    scrollToTop: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        openScene: ((
            action: {
                type: 'open scene (scenes.sceneLogic)'
                payload: {
                    scene: Scene
                    params: SceneParams
                    method: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadScene: ((
            action: {
                type: 'load scene (scenes.sceneLogic)'
                payload: {
                    scene: Scene
                    params: SceneParams
                    method: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reloadBrowserDueToImportError: ((
            action: {
                type: 'reload browser due to import error (scenes.sceneLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        locationChanged: ((
            action: {
                type: 'location changed (scenes.sceneLogic)'
                payload: {
                    method: 'PUSH' | 'REPLACE' | 'POP'
                    pathname: string
                    search: string
                    searchParams: Record<string, any>
                    hash: string
                    hashParams: Record<string, any>
                    initial: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'sceneLogic']
    pathString: 'scenes.sceneLogic'
    props: {
        scenes?: Record<Scene, () => any>
    }
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        scene: Scene | null
        loadedScenes: Record<string, LoadedScene>
        loadingScene: Scene | null
        upgradeModalFeatureNameAndCaption: [string, string] | null
        lastReloadAt: number | null
    }
    reducers: {
        scene: (state: Scene | null, action: any, fullState: any) => Scene | null
        loadedScenes: (state: Record<string, LoadedScene>, action: any, fullState: any) => Record<string, LoadedScene>
        loadingScene: (state: Scene | null, action: any, fullState: any) => Scene | null
        upgradeModalFeatureNameAndCaption: (
            state: [string, string] | null,
            action: any,
            fullState: any
        ) => [string, string] | null
        lastReloadAt: (state: number | null, action: any, fullState: any) => number | null
    }
    selector: (state: any) => {
        scene: Scene | null
        loadedScenes: Record<string, LoadedScene>
        loadingScene: Scene | null
        upgradeModalFeatureNameAndCaption: [string, string] | null
        lastReloadAt: number | null
    }
    selectors: {
        scene: (state: any, props?: any) => Scene | null
        loadedScenes: (state: any, props?: any) => Record<string, LoadedScene>
        loadingScene: (state: any, props?: any) => Scene | null
        upgradeModalFeatureNameAndCaption: (state: any, props?: any) => [string, string] | null
        lastReloadAt: (state: any, props?: any) => number | null
        sceneConfig: (state: any, props?: any) => SceneConfig | null
        activeScene: (state: any, props?: any) => Scene | null
        aliasedActiveScene: (state: any, props?: any) => Scene | null
        activeLoadedScene: (state: any, props?: any) => LoadedScene | null
        sceneParams: (state: any, props?: any) => SceneParams
        activeSceneLogic: (state: any, props?: any) => BuiltLogic | null
        params: (state: any, props?: any) => Record<string, string>
        searchParams: (state: any, props?: any) => Record<string, any>
        hashParams: (state: any, props?: any) => Record<string, any>
    }
    sharedListeners: {}
    values: {
        scene: Scene | null
        loadedScenes: Record<string, LoadedScene>
        loadingScene: Scene | null
        upgradeModalFeatureNameAndCaption: [string, string] | null
        lastReloadAt: number | null
        sceneConfig: SceneConfig | null
        activeScene: Scene | null
        aliasedActiveScene: Scene | null
        activeLoadedScene: LoadedScene | null
        sceneParams: SceneParams
        activeSceneLogic: BuiltLogic | null
        params: Record<string, string>
        searchParams: Record<string, any>
        hashParams: Record<string, any>
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        sceneConfig: (scene: Scene | null) => SceneConfig | null
        activeScene: (scene: Scene | null, isCurrentTeamUnavailable: boolean) => Scene | null
        aliasedActiveScene: (activeScene: Scene | null) => Scene | null
        activeLoadedScene: (activeScene: Scene | null, loadedScenes: Record<string, LoadedScene>) => LoadedScene | null
        sceneParams: (activeLoadedScene: LoadedScene | null) => SceneParams
        activeSceneLogic: (activeLoadedScene: LoadedScene | null, sceneParams: SceneParams) => BuiltLogic | null
        params: (sceneParams: SceneParams) => Record<string, string>
        searchParams: (sceneParams: SceneParams) => Record<string, any>
        hashParams: (sceneParams: SceneParams) => Record<string, any>
    }
}
