// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:22 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ActorType } from '../../types'

export interface relatedGroupsLogicType extends Logic {
    actionCreators: {
        loadRelatedActors: () => {
            type: 'load related actors (scenes.groups.relatedGroupsLogic)'
            payload: {
                value: true
            }
        }
        loadRelatedActorsSuccess: (
            relatedActors: ActorType[],
            payload?: {
                value: true
            }
        ) => {
            type: 'load related actors success (scenes.groups.relatedGroupsLogic)'
            payload: {
                relatedActors: ActorType[]
                payload?: {
                    value: true
                }
            }
        }
        loadRelatedActorsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load related actors failure (scenes.groups.relatedGroupsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setGroup: () => {
            type: 'set group (scenes.groups.relatedGroupsLogic)'
            payload: any
        }
        setGroupSuccess: (
            relatedActors: never[],
            payload?: any
        ) => {
            type: 'set group success (scenes.groups.relatedGroupsLogic)'
            payload: {
                relatedActors: never[]
                payload?: any
            }
        }
        setGroupFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'set group failure (scenes.groups.relatedGroupsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load related actors (scenes.groups.relatedGroupsLogic)': 'loadRelatedActors'
        'load related actors success (scenes.groups.relatedGroupsLogic)': 'loadRelatedActorsSuccess'
        'load related actors failure (scenes.groups.relatedGroupsLogic)': 'loadRelatedActorsFailure'
        'set group (scenes.groups.relatedGroupsLogic)': 'setGroup'
        'set group success (scenes.groups.relatedGroupsLogic)': 'setGroupSuccess'
        'set group failure (scenes.groups.relatedGroupsLogic)': 'setGroupFailure'
    }
    actionTypes: {
        loadRelatedActors: 'load related actors (scenes.groups.relatedGroupsLogic)'
        loadRelatedActorsSuccess: 'load related actors success (scenes.groups.relatedGroupsLogic)'
        loadRelatedActorsFailure: 'load related actors failure (scenes.groups.relatedGroupsLogic)'
        setGroup: 'set group (scenes.groups.relatedGroupsLogic)'
        setGroupSuccess: 'set group success (scenes.groups.relatedGroupsLogic)'
        setGroupFailure: 'set group failure (scenes.groups.relatedGroupsLogic)'
    }
    actions: {
        loadRelatedActors: () => void
        loadRelatedActorsSuccess: (
            relatedActors: ActorType[],
            payload?: {
                value: true
            }
        ) => void
        loadRelatedActorsFailure: (error: string, errorObject?: any) => void
        setGroup: () => void
        setGroupSuccess: (relatedActors: never[], payload?: any) => void
        setGroupFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadRelatedActors: () => Promise<any>
        loadRelatedActorsSuccess: (
            relatedActors: ActorType[],
            payload?: {
                value: true
            }
        ) => Promise<any>
        loadRelatedActorsFailure: (error: string, errorObject?: any) => Promise<any>
        setGroup: () => Promise<any>
        setGroupSuccess: (relatedActors: never[], payload?: any) => Promise<any>
        setGroupFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        relatedActors: ActorType[]
        relatedActorsLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: string
    listeners: {}
    path: ['scenes', 'groups', 'relatedGroupsLogic']
    pathString: 'scenes.groups.relatedGroupsLogic'
    props: {
        groupTypeIndex: number | null
        id: string
    }
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        relatedActors: ActorType[]
        relatedActorsLoading: boolean
    }
    reducers: {
        relatedActors: (state: ActorType[], action: any, fullState: any) => ActorType[]
        relatedActorsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        relatedActors: ActorType[]
        relatedActorsLoading: boolean
    }
    selectors: {
        relatedActors: (state: any, props?: any) => ActorType[]
        relatedActorsLoading: (state: any, props?: any) => boolean
        currentTeamId: (state: any, props?: any) => number | null
    }
    sharedListeners: {}
    values: {
        relatedActors: ActorType[]
        relatedActorsLoading: boolean
        currentTeamId: number | null
    }
    _isKea: true
    _isKeaWithKey: true
}
