// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:58 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Breadcrumb, Group, GroupType } from '../../types'
import type { Noun } from '../../models/groupsModel'
import type { DataTableNode, Node } from '../../queries/schema'

export interface groupLogicType extends Logic {
    actionCreators: {
        setGroup: (
            groupTypeIndex: number,
            groupKey: string,
            groupTab?: string | null
        ) => {
            type: 'set group (groups.groupLogic)'
            payload: {
                groupTypeIndex: number
                groupKey: string
                groupTab: string | null | undefined
            }
        }
        setGroupTab: (groupTab: string | null) => {
            type: 'set group tab (groups.groupLogic)'
            payload: {
                groupTab: string | null
            }
        }
        setGroupEventsQuery: (query: Node) => {
            type: 'set group events query (groups.groupLogic)'
            payload: {
                query: Node
            }
        }
        loadGroup: () => {
            type: 'load group (groups.groupLogic)'
            payload: any
        }
        loadGroupSuccess: (
            groupData: Group | null,
            payload?: any
        ) => {
            type: 'load group success (groups.groupLogic)'
            payload: {
                groupData: Group | null
                payload?: any
            }
        }
        loadGroupFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load group failure (groups.groupLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set group (groups.groupLogic)': 'setGroup'
        'set group tab (groups.groupLogic)': 'setGroupTab'
        'set group events query (groups.groupLogic)': 'setGroupEventsQuery'
        'load group (groups.groupLogic)': 'loadGroup'
        'load group success (groups.groupLogic)': 'loadGroupSuccess'
        'load group failure (groups.groupLogic)': 'loadGroupFailure'
    }
    actionTypes: {
        setGroup: 'set group (groups.groupLogic)'
        setGroupTab: 'set group tab (groups.groupLogic)'
        setGroupEventsQuery: 'set group events query (groups.groupLogic)'
        loadGroup: 'load group (groups.groupLogic)'
        loadGroupSuccess: 'load group success (groups.groupLogic)'
        loadGroupFailure: 'load group failure (groups.groupLogic)'
    }
    actions: {
        setGroup: (groupTypeIndex: number, groupKey: string, groupTab?: string | null) => void
        setGroupTab: (groupTab: string | null) => void
        setGroupEventsQuery: (query: Node) => void
        loadGroup: () => void
        loadGroupSuccess: (groupData: Group | null, payload?: any) => void
        loadGroupFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setGroup: (groupTypeIndex: number, groupKey: string, groupTab?: string | null) => Promise<any>
        setGroupTab: (groupTab: string | null) => Promise<any>
        setGroupEventsQuery: (query: Node) => Promise<any>
        loadGroup: () => Promise<any>
        loadGroupSuccess: (groupData: Group | null, payload?: any) => Promise<any>
        loadGroupFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        groupData: Group | null
        groupDataLoading: boolean
        groupTypeIndex: number
        groupKey: string
        groupTab: string | null
        groupEventsQuery: DataTableNode | null
    }
    events: {}
    key: undefined
    listeners: {
        setGroup: ((
            action: {
                type: 'set group (groups.groupLogic)'
                payload: {
                    groupTypeIndex: number
                    groupKey: string
                    groupTab: string | null | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['groups', 'groupLogic']
    pathString: 'groups.groupLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        groupData: Group | null
        groupDataLoading: boolean
        groupTypeIndex: number
        groupKey: string
        groupTab: string | null
        groupEventsQuery: DataTableNode | null
    }
    reducers: {
        groupData: (state: Group | null, action: any, fullState: any) => Group | null
        groupDataLoading: (state: boolean, action: any, fullState: any) => boolean
        groupTypeIndex: (state: number, action: any, fullState: any) => number
        groupKey: (state: string, action: any, fullState: any) => string
        groupTab: (state: string | null, action: any, fullState: any) => string | null
        groupEventsQuery: (state: DataTableNode | null, action: any, fullState: any) => DataTableNode | null
    }
    selector: (state: any) => {
        groupData: Group | null
        groupDataLoading: boolean
        groupTypeIndex: number
        groupKey: string
        groupTab: string | null
        groupEventsQuery: DataTableNode | null
    }
    selectors: {
        groupData: (state: any, props?: any) => Group | null
        groupDataLoading: (state: any, props?: any) => boolean
        groupTypeIndex: (state: any, props?: any) => number
        groupKey: (state: any, props?: any) => string
        groupTab: (state: any, props?: any) => string | null
        groupEventsQuery: (state: any, props?: any) => DataTableNode | null
        currentTeamId: (state: any, props?: any) => number | null
        groupTypes: (state: any, props?: any) => Array<GroupType>
        aggregationLabel: (
            state: any,
            props?: any
        ) => (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun
        groupTypeName: (state: any, props?: any) => string
        groupType: (state: any, props?: any) => string
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
    }
    sharedListeners: {}
    values: {
        groupData: Group | null
        groupDataLoading: boolean
        groupTypeIndex: number
        groupKey: string
        groupTab: string | null
        groupEventsQuery: DataTableNode | null
        currentTeamId: number | null
        groupTypes: Array<GroupType>
        aggregationLabel: (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun
        groupTypeName: string
        groupType: string
        breadcrumbs: Breadcrumb[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        groupTypeName: (
            aggregationLabel: (
                groupTypeIndex: number | null | undefined,
                deferToUserWording?: boolean | undefined
            ) => import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/models/groupsModel').Noun,
            groupTypeIndex: number
        ) => string
        groupType: (
            groupTypes: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').GroupType[],
            groupTypeIndex: number
        ) => string
        breadcrumbs: (
            groupTypeName: string,
            groupTypeIndex: number,
            groupKey: string,
            groupData: Group | null
        ) => Breadcrumb[]
    }
}
