// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:51 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { InsightLogicProps } from '../../types'
import type { InsightQueryNode } from '../../queries/schema'
import type { Noun } from '../../models/groupsModel'

export interface retentionModalLogicType extends Logic {
    actionCreators: {
        loadPeople: (rowIndex: number) => {
            type: 'load people (scenes.retention.retentionModalLogic.*)'
            payload: number
        }
        openModal: (rowIndex: number) => {
            type: 'open modal (scenes.retention.retentionModalLogic.*)'
            payload: {
                rowIndex: number
            }
        }
        closeModal: () => {
            type: 'close modal (scenes.retention.retentionModalLogic.*)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'load people (scenes.retention.retentionModalLogic.*)': 'loadPeople'
        'open modal (scenes.retention.retentionModalLogic.*)': 'openModal'
        'close modal (scenes.retention.retentionModalLogic.*)': 'closeModal'
    }
    actionTypes: {
        loadPeople: 'load people (scenes.retention.retentionModalLogic.*)'
        openModal: 'open modal (scenes.retention.retentionModalLogic.*)'
        closeModal: 'close modal (scenes.retention.retentionModalLogic.*)'
    }
    actions: {
        loadPeople: (rowIndex: number) => void
        openModal: (rowIndex: number) => void
        closeModal: () => void
    }
    asyncActions: {
        loadPeople: (rowIndex: number) => Promise<any>
        openModal: (rowIndex: number) => Promise<any>
        closeModal: () => Promise<any>
    }
    defaults: {
        selectedRow: number | null
    }
    events: {}
    key: string
    listeners: {
        openModal: ((
            action: {
                type: 'open modal (scenes.retention.retentionModalLogic.*)'
                payload: {
                    rowIndex: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'retention', 'retentionModalLogic', '*']
    pathString: 'scenes.retention.retentionModalLogic.*'
    props: InsightLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        selectedRow: number | null
    }
    reducers: {
        selectedRow: (state: number | null, action: any, fullState: any) => number | null
    }
    selector: (state: any) => {
        selectedRow: number | null
    }
    selectors: {
        selectedRow: (state: any, props?: any) => number | null
        querySource: (state: any, props?: any) => InsightQueryNode | null
        aggregationLabel: (
            state: any,
            props?: any
        ) => (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun
        aggregationTargetLabel: (state: any, props?: any) => Noun
    }
    sharedListeners: {}
    values: {
        selectedRow: number | null
        querySource: InsightQueryNode | null
        aggregationLabel: (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun
        aggregationTargetLabel: Noun
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        aggregationTargetLabel: (
            querySource:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').InsightQueryNode
                | null,
            aggregationLabel: (
                groupTypeIndex: number | null | undefined,
                deferToUserWording?: boolean | undefined
            ) => Noun
        ) => Noun
    }
}
