// Generated by kea-typegen on Thu, 20 Jul 2023 11:23:46 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FilterType, InsightLogicProps } from '../../types'
import type { InsightQueryNode } from '../../queries/schema'
import type { RetentionTablePeoplePayload } from './types'

export interface retentionPeopleLogicType extends Logic {
    actionCreators: {
        loadDataSuccess: (
            response: Record<string, any> | null,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => {
            type: 'load data success (scenes.retention.retentionPeopleLogic.*)'
            payload: {
                response: Record<string, any> | null
                payload?: {
                    refresh: any
                    queryId: string
                }
            }
        }
        clearPeople: () => {
            type: 'clear people (scenes.retention.retentionPeopleLogic.*)'
            payload: {
                value: true
            }
        }
        loadMorePeople: () => {
            type: 'load more people (scenes.retention.retentionPeopleLogic.*)'
            payload: {
                value: true
            }
        }
        loadMorePeopleSuccess: (payload: RetentionTablePeoplePayload) => {
            type: 'load more people success (scenes.retention.retentionPeopleLogic.*)'
            payload: {
                payload: RetentionTablePeoplePayload
            }
        }
        loadPeople: (rowIndex: number) => {
            type: 'load people (scenes.retention.retentionPeopleLogic.*)'
            payload: number
        }
        loadPeopleSuccess: (
            people: RetentionTablePeoplePayload,
            payload?: number
        ) => {
            type: 'load people success (scenes.retention.retentionPeopleLogic.*)'
            payload: {
                people: RetentionTablePeoplePayload
                payload?: number
            }
        }
        loadPeopleFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load people failure (scenes.retention.retentionPeopleLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load data success (scenes.retention.retentionPeopleLogic.*)': 'loadDataSuccess'
        'clear people (scenes.retention.retentionPeopleLogic.*)': 'clearPeople'
        'load more people (scenes.retention.retentionPeopleLogic.*)': 'loadMorePeople'
        'load more people success (scenes.retention.retentionPeopleLogic.*)': 'loadMorePeopleSuccess'
        'load people (scenes.retention.retentionPeopleLogic.*)': 'loadPeople'
        'load people success (scenes.retention.retentionPeopleLogic.*)': 'loadPeopleSuccess'
        'load people failure (scenes.retention.retentionPeopleLogic.*)': 'loadPeopleFailure'
    }
    actionTypes: {
        loadDataSuccess: 'load data success (scenes.retention.retentionPeopleLogic.*)'
        clearPeople: 'clear people (scenes.retention.retentionPeopleLogic.*)'
        loadMorePeople: 'load more people (scenes.retention.retentionPeopleLogic.*)'
        loadMorePeopleSuccess: 'load more people success (scenes.retention.retentionPeopleLogic.*)'
        loadPeople: 'load people (scenes.retention.retentionPeopleLogic.*)'
        loadPeopleSuccess: 'load people success (scenes.retention.retentionPeopleLogic.*)'
        loadPeopleFailure: 'load people failure (scenes.retention.retentionPeopleLogic.*)'
    }
    actions: {
        loadDataSuccess: (
            response: Record<string, any> | null,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => void
        clearPeople: () => void
        loadMorePeople: () => void
        loadMorePeopleSuccess: (payload: RetentionTablePeoplePayload) => void
        loadPeople: (rowIndex: number) => void
        loadPeopleSuccess: (people: RetentionTablePeoplePayload, payload?: number) => void
        loadPeopleFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadDataSuccess: (
            response: Record<string, any> | null,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => Promise<any>
        clearPeople: () => Promise<any>
        loadMorePeople: () => Promise<any>
        loadMorePeopleSuccess: (payload: RetentionTablePeoplePayload) => Promise<any>
        loadPeople: (rowIndex: number) => Promise<any>
        loadPeopleSuccess: (people: RetentionTablePeoplePayload, payload?: number) => Promise<any>
        loadPeopleFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        people: RetentionTablePeoplePayload
        peopleLoading: boolean
        peopleLoadingMore: boolean
    }
    events: {}
    key: string
    listeners: {
        loadDataSuccess: ((
            action: {
                type: 'load data success (scenes.retention.retentionPeopleLogic.*)'
                payload: {
                    response: Record<string, any> | null
                    payload?: {
                        refresh: any
                        queryId: string
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadMorePeople: ((
            action: {
                type: 'load more people (scenes.retention.retentionPeopleLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'retention', 'retentionPeopleLogic', '*']
    pathString: 'scenes.retention.retentionPeopleLogic.*'
    props: InsightLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        people: RetentionTablePeoplePayload
        peopleLoading: boolean
        peopleLoadingMore: boolean
    }
    reducers: {
        people: (state: RetentionTablePeoplePayload, action: any, fullState: any) => RetentionTablePeoplePayload
        peopleLoading: (state: boolean, action: any, fullState: any) => boolean
        peopleLoadingMore: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        people: RetentionTablePeoplePayload
        peopleLoading: boolean
        peopleLoadingMore: boolean
    }
    selectors: {
        people: (state: any, props?: any) => RetentionTablePeoplePayload
        peopleLoading: (state: any, props?: any) => boolean
        peopleLoadingMore: (state: any, props?: any) => boolean
        querySource: (state: any, props?: any) => InsightQueryNode | null
        apiFilters: (state: any, props?: any) => Partial<FilterType>
    }
    sharedListeners: {}
    values: {
        people: RetentionTablePeoplePayload
        peopleLoading: boolean
        peopleLoadingMore: boolean
        querySource: InsightQueryNode | null
        apiFilters: Partial<FilterType>
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        apiFilters: (
            querySource:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/queries/schema').InsightQueryNode
                | null
        ) => Partial<FilterType>
    }
}
