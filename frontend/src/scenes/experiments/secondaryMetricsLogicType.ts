// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:24 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { SecondaryMetricForm, SecondaryMetricsProps } from './secondaryMetricsLogic'
import type { InsightQueryNode, Node } from '../../queries/schema'
import type { FilterType, SecondaryExperimentMetric } from '../../types'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../node_modules/kea-forms'

export interface secondaryMetricsLogicType extends Logic {
    actionCreators: {
        setQuery: (query: Node | null) => {
            type: 'set query (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                query: Node | null
            }
        }
        updateQuerySource: (querySource: Omit<Partial<InsightQueryNode>, 'kind'>) => {
            type: 'update query source (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                querySource: Omit<Partial<InsightQueryNode>, 'kind'>
            }
        }
        openModalToCreateSecondaryMetric: () => {
            type: 'open modal to create secondary metric (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                value: true
            }
        }
        openModalToEditSecondaryMetric: (
            metric: SecondaryExperimentMetric,
            metricIdx: number
        ) => {
            type: 'open modal to edit secondary metric (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                metric: SecondaryExperimentMetric
                metricIdx: number
            }
        }
        saveSecondaryMetric: () => {
            type: 'save secondary metric (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                value: true
            }
        }
        closeModal: () => {
            type: 'close modal (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                value: true
            }
        }
        setMetricId: (metricIdx: number) => {
            type: 'set metric id (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                metricIdx: number
            }
        }
        addNewMetric: (metric: SecondaryExperimentMetric) => {
            type: 'add new metric (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                metric: SecondaryExperimentMetric
            }
        }
        updateMetric: (
            metric: SecondaryExperimentMetric,
            metricIdx: number
        ) => {
            type: 'update metric (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                metric: SecondaryExperimentMetric
                metricIdx: number
            }
        }
        deleteMetric: (metricIdx: number) => {
            type: 'delete metric (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                metricIdx: number
            }
        }
        setPreviewInsight: (filters?: Partial<FilterType>) => {
            type: 'set preview insight (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                filters: Partial<FilterType> | undefined
            }
        }
        setSecondaryMetricModalValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set secondary metric modal value (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setSecondaryMetricModalValues: (values: DeepPartial<SecondaryMetricForm>) => {
            type: 'set secondary metric modal values (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                values: DeepPartial<SecondaryMetricForm>
            }
        }
        setSecondaryMetricModalManualErrors: (errors: Record<string, any>) => {
            type: 'set secondary metric modal manual errors (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchSecondaryMetricModalField: (key: string) => {
            type: 'touch secondary metric modal field (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                key: string
            }
        }
        resetSecondaryMetricModal: (values?: SecondaryMetricForm) => {
            type: 'reset secondary metric modal (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                values?: SecondaryMetricForm
            }
        }
        submitSecondaryMetricModal: () => {
            type: 'submit secondary metric modal (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                value: boolean
            }
        }
        submitSecondaryMetricModalRequest: (secondaryMetricModal: SecondaryMetricForm) => {
            type: 'submit secondary metric modal request (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                secondaryMetricModal: SecondaryMetricForm
            }
        }
        submitSecondaryMetricModalSuccess: (secondaryMetricModal: SecondaryMetricForm) => {
            type: 'submit secondary metric modal success (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                secondaryMetricModal: SecondaryMetricForm
            }
        }
        submitSecondaryMetricModalFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit secondary metric modal failure (scenes.experiment.secondaryMetricsLogic.*)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'set query (scenes.experiment.secondaryMetricsLogic.*)': 'setQuery'
        'update query source (scenes.experiment.secondaryMetricsLogic.*)': 'updateQuerySource'
        'open modal to create secondary metric (scenes.experiment.secondaryMetricsLogic.*)': 'openModalToCreateSecondaryMetric'
        'open modal to edit secondary metric (scenes.experiment.secondaryMetricsLogic.*)': 'openModalToEditSecondaryMetric'
        'save secondary metric (scenes.experiment.secondaryMetricsLogic.*)': 'saveSecondaryMetric'
        'close modal (scenes.experiment.secondaryMetricsLogic.*)': 'closeModal'
        'set metric id (scenes.experiment.secondaryMetricsLogic.*)': 'setMetricId'
        'add new metric (scenes.experiment.secondaryMetricsLogic.*)': 'addNewMetric'
        'update metric (scenes.experiment.secondaryMetricsLogic.*)': 'updateMetric'
        'delete metric (scenes.experiment.secondaryMetricsLogic.*)': 'deleteMetric'
        'set preview insight (scenes.experiment.secondaryMetricsLogic.*)': 'setPreviewInsight'
        'set secondary metric modal value (scenes.experiment.secondaryMetricsLogic.*)': 'setSecondaryMetricModalValue'
        'set secondary metric modal values (scenes.experiment.secondaryMetricsLogic.*)': 'setSecondaryMetricModalValues'
        'set secondary metric modal manual errors (scenes.experiment.secondaryMetricsLogic.*)': 'setSecondaryMetricModalManualErrors'
        'touch secondary metric modal field (scenes.experiment.secondaryMetricsLogic.*)': 'touchSecondaryMetricModalField'
        'reset secondary metric modal (scenes.experiment.secondaryMetricsLogic.*)': 'resetSecondaryMetricModal'
        'submit secondary metric modal (scenes.experiment.secondaryMetricsLogic.*)': 'submitSecondaryMetricModal'
        'submit secondary metric modal request (scenes.experiment.secondaryMetricsLogic.*)': 'submitSecondaryMetricModalRequest'
        'submit secondary metric modal success (scenes.experiment.secondaryMetricsLogic.*)': 'submitSecondaryMetricModalSuccess'
        'submit secondary metric modal failure (scenes.experiment.secondaryMetricsLogic.*)': 'submitSecondaryMetricModalFailure'
    }
    actionTypes: {
        setQuery: 'set query (scenes.experiment.secondaryMetricsLogic.*)'
        updateQuerySource: 'update query source (scenes.experiment.secondaryMetricsLogic.*)'
        openModalToCreateSecondaryMetric: 'open modal to create secondary metric (scenes.experiment.secondaryMetricsLogic.*)'
        openModalToEditSecondaryMetric: 'open modal to edit secondary metric (scenes.experiment.secondaryMetricsLogic.*)'
        saveSecondaryMetric: 'save secondary metric (scenes.experiment.secondaryMetricsLogic.*)'
        closeModal: 'close modal (scenes.experiment.secondaryMetricsLogic.*)'
        setMetricId: 'set metric id (scenes.experiment.secondaryMetricsLogic.*)'
        addNewMetric: 'add new metric (scenes.experiment.secondaryMetricsLogic.*)'
        updateMetric: 'update metric (scenes.experiment.secondaryMetricsLogic.*)'
        deleteMetric: 'delete metric (scenes.experiment.secondaryMetricsLogic.*)'
        setPreviewInsight: 'set preview insight (scenes.experiment.secondaryMetricsLogic.*)'
        setSecondaryMetricModalValue: 'set secondary metric modal value (scenes.experiment.secondaryMetricsLogic.*)'
        setSecondaryMetricModalValues: 'set secondary metric modal values (scenes.experiment.secondaryMetricsLogic.*)'
        setSecondaryMetricModalManualErrors: 'set secondary metric modal manual errors (scenes.experiment.secondaryMetricsLogic.*)'
        touchSecondaryMetricModalField: 'touch secondary metric modal field (scenes.experiment.secondaryMetricsLogic.*)'
        resetSecondaryMetricModal: 'reset secondary metric modal (scenes.experiment.secondaryMetricsLogic.*)'
        submitSecondaryMetricModal: 'submit secondary metric modal (scenes.experiment.secondaryMetricsLogic.*)'
        submitSecondaryMetricModalRequest: 'submit secondary metric modal request (scenes.experiment.secondaryMetricsLogic.*)'
        submitSecondaryMetricModalSuccess: 'submit secondary metric modal success (scenes.experiment.secondaryMetricsLogic.*)'
        submitSecondaryMetricModalFailure: 'submit secondary metric modal failure (scenes.experiment.secondaryMetricsLogic.*)'
    }
    actions: {
        setQuery: (query: Node | null) => void
        updateQuerySource: (querySource: Omit<Partial<InsightQueryNode>, 'kind'>) => void
        openModalToCreateSecondaryMetric: () => void
        openModalToEditSecondaryMetric: (metric: SecondaryExperimentMetric, metricIdx: number) => void
        saveSecondaryMetric: () => void
        closeModal: () => void
        setMetricId: (metricIdx: number) => void
        addNewMetric: (metric: SecondaryExperimentMetric) => void
        updateMetric: (metric: SecondaryExperimentMetric, metricIdx: number) => void
        deleteMetric: (metricIdx: number) => void
        setPreviewInsight: (filters?: Partial<FilterType>) => void
        setSecondaryMetricModalValue: (key: FieldName, value: any) => void
        setSecondaryMetricModalValues: (values: DeepPartial<SecondaryMetricForm>) => void
        setSecondaryMetricModalManualErrors: (errors: Record<string, any>) => void
        touchSecondaryMetricModalField: (key: string) => void
        resetSecondaryMetricModal: (values?: SecondaryMetricForm) => void
        submitSecondaryMetricModal: () => void
        submitSecondaryMetricModalRequest: (secondaryMetricModal: SecondaryMetricForm) => void
        submitSecondaryMetricModalSuccess: (secondaryMetricModal: SecondaryMetricForm) => void
        submitSecondaryMetricModalFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        setQuery: (query: Node | null) => Promise<any>
        updateQuerySource: (querySource: Omit<Partial<InsightQueryNode>, 'kind'>) => Promise<any>
        openModalToCreateSecondaryMetric: () => Promise<any>
        openModalToEditSecondaryMetric: (metric: SecondaryExperimentMetric, metricIdx: number) => Promise<any>
        saveSecondaryMetric: () => Promise<any>
        closeModal: () => Promise<any>
        setMetricId: (metricIdx: number) => Promise<any>
        addNewMetric: (metric: SecondaryExperimentMetric) => Promise<any>
        updateMetric: (metric: SecondaryExperimentMetric, metricIdx: number) => Promise<any>
        deleteMetric: (metricIdx: number) => Promise<any>
        setPreviewInsight: (filters?: Partial<FilterType>) => Promise<any>
        setSecondaryMetricModalValue: (key: FieldName, value: any) => Promise<any>
        setSecondaryMetricModalValues: (values: DeepPartial<SecondaryMetricForm>) => Promise<any>
        setSecondaryMetricModalManualErrors: (errors: Record<string, any>) => Promise<any>
        touchSecondaryMetricModalField: (key: string) => Promise<any>
        resetSecondaryMetricModal: (values?: SecondaryMetricForm) => Promise<any>
        submitSecondaryMetricModal: () => Promise<any>
        submitSecondaryMetricModalRequest: (secondaryMetricModal: SecondaryMetricForm) => Promise<any>
        submitSecondaryMetricModalSuccess: (secondaryMetricModal: SecondaryMetricForm) => Promise<any>
        submitSecondaryMetricModalFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        isModalOpen: boolean
        existingModalSecondaryMetric: SecondaryExperimentMetric | null
        metrics: SecondaryExperimentMetric[]
        metricIdx: number
        secondaryMetricModal: SecondaryMetricForm
        isSecondaryMetricModalSubmitting: boolean
        showSecondaryMetricModalErrors: boolean
        secondaryMetricModalChanged: boolean
        secondaryMetricModalTouches: Record<string, boolean>
        secondaryMetricModalManualErrors: Record<string, any>
    }
    events: {}
    key: string
    listeners: {
        openModalToCreateSecondaryMetric: ((
            action: {
                type: 'open modal to create secondary metric (scenes.experiment.secondaryMetricsLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        openModalToEditSecondaryMetric: ((
            action: {
                type: 'open modal to edit secondary metric (scenes.experiment.secondaryMetricsLogic.*)'
                payload: {
                    metric: SecondaryExperimentMetric
                    metricIdx: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setPreviewInsight: ((
            action: {
                type: 'set preview insight (scenes.experiment.secondaryMetricsLogic.*)'
                payload: {
                    filters: Partial<FilterType> | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setQuery: ((
            action: {
                type: 'set query (scenes.experiment.secondaryMetricsLogic.*)'
                payload: {
                    query: Node | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        saveSecondaryMetric: ((
            action: {
                type: 'save secondary metric (scenes.experiment.secondaryMetricsLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        deleteMetric: ((
            action: {
                type: 'delete metric (scenes.experiment.secondaryMetricsLogic.*)'
                payload: {
                    metricIdx: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'experiment', 'secondaryMetricsLogic', '*']
    pathString: 'scenes.experiment.secondaryMetricsLogic.*'
    props: SecondaryMetricsProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        isModalOpen: boolean
        existingModalSecondaryMetric: SecondaryExperimentMetric | null
        metrics: SecondaryExperimentMetric[]
        metricIdx: number
        secondaryMetricModal: SecondaryMetricForm
        isSecondaryMetricModalSubmitting: boolean
        showSecondaryMetricModalErrors: boolean
        secondaryMetricModalChanged: boolean
        secondaryMetricModalTouches: Record<string, boolean>
        secondaryMetricModalManualErrors: Record<string, any>
    }
    reducers: {
        isModalOpen: (state: boolean, action: any, fullState: any) => boolean
        existingModalSecondaryMetric: (
            state: SecondaryExperimentMetric | null,
            action: any,
            fullState: any
        ) => SecondaryExperimentMetric | null
        metrics: (state: SecondaryExperimentMetric[], action: any, fullState: any) => SecondaryExperimentMetric[]
        metricIdx: (state: number, action: any, fullState: any) => number
        secondaryMetricModal: (state: SecondaryMetricForm, action: any, fullState: any) => SecondaryMetricForm
        isSecondaryMetricModalSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showSecondaryMetricModalErrors: (state: boolean, action: any, fullState: any) => boolean
        secondaryMetricModalChanged: (state: boolean, action: any, fullState: any) => boolean
        secondaryMetricModalTouches: (
            state: Record<string, boolean>,
            action: any,
            fullState: any
        ) => Record<string, boolean>
        secondaryMetricModalManualErrors: (
            state: Record<string, any>,
            action: any,
            fullState: any
        ) => Record<string, any>
    }
    selector: (state: any) => {
        isModalOpen: boolean
        existingModalSecondaryMetric: SecondaryExperimentMetric | null
        metrics: SecondaryExperimentMetric[]
        metricIdx: number
        secondaryMetricModal: SecondaryMetricForm
        isSecondaryMetricModalSubmitting: boolean
        showSecondaryMetricModalErrors: boolean
        secondaryMetricModalChanged: boolean
        secondaryMetricModalTouches: Record<string, boolean>
        secondaryMetricModalManualErrors: Record<string, any>
    }
    selectors: {
        isModalOpen: (state: any, props?: any) => boolean
        existingModalSecondaryMetric: (state: any, props?: any) => SecondaryExperimentMetric | null
        metrics: (state: any, props?: any) => SecondaryExperimentMetric[]
        metricIdx: (state: any, props?: any) => number
        secondaryMetricModal: (state: any, props?: any) => SecondaryMetricForm
        isSecondaryMetricModalSubmitting: (state: any, props?: any) => boolean
        showSecondaryMetricModalErrors: (state: any, props?: any) => boolean
        secondaryMetricModalChanged: (state: any, props?: any) => boolean
        secondaryMetricModalTouches: (state: any, props?: any) => Record<string, boolean>
        secondaryMetricModalManualErrors: (state: any, props?: any) => Record<string, any>
        currentTeamId: (state: any, props?: any) => number | null
        secondaryMetricModalTouched: (state: any, props?: any) => boolean
        secondaryMetricModalValidationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<SecondaryMetricForm, ValidationErrorType>
        secondaryMetricModalAllErrors: (state: any, props?: any) => Record<string, any>
        secondaryMetricModalHasErrors: (state: any, props?: any) => boolean
        secondaryMetricModalErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<SecondaryMetricForm, ValidationErrorType>
        isSecondaryMetricModalValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        isModalOpen: boolean
        existingModalSecondaryMetric: SecondaryExperimentMetric | null
        metrics: SecondaryExperimentMetric[]
        metricIdx: number
        secondaryMetricModal: SecondaryMetricForm
        isSecondaryMetricModalSubmitting: boolean
        showSecondaryMetricModalErrors: boolean
        secondaryMetricModalChanged: boolean
        secondaryMetricModalTouches: Record<string, boolean>
        secondaryMetricModalManualErrors: Record<string, any>
        currentTeamId: number | null
        secondaryMetricModalTouched: boolean
        secondaryMetricModalValidationErrors: DeepPartialMap<SecondaryMetricForm, ValidationErrorType>
        secondaryMetricModalAllErrors: Record<string, any>
        secondaryMetricModalHasErrors: boolean
        secondaryMetricModalErrors: DeepPartialMap<SecondaryMetricForm, ValidationErrorType>
        isSecondaryMetricModalValid: boolean
    }
    _isKea: true
    _isKeaWithKey: true
}
