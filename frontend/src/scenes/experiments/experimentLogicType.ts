// Generated by kea-typegen on Tue, 08 Aug 2023 10:01:22 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ExperimentLogicProps, TabularSecondaryMetricResults } from './experimentLogic'
import type { Breadcrumb, Experiment, ExperimentResults, FilterType, FunnelExperimentVariant, FunnelStep, FunnelsFilterType, GroupType, InsightType, MultivariateFlagVariant, SecondaryExperimentMetric, SignificanceCode, TrendExperimentVariant, TrendResult, TrendsFilterType } from '../../types'
import type { Noun } from '../../models/groupsModel'
import type { Dayjs } from '../../lib/dayjs'
import type { InsightQueryNode, Node } from '../../queries/schema'
import type { ReactElement } from '../../../../node_modules/.pnpm/@types+react@16.14.34/node_modules/@types/react/index.d'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../node_modules/kea-forms'

export interface experimentLogicType extends Logic {
    actionCreators: {
        addToExperiments: (experiment: Experiment) => {
            type: 'add to experiments (scenes.experiment.experimentLogic.*)'
            payload: Experiment
        }
        updateExperiments: (experiment: Experiment) => {
            type: 'update experiments (scenes.experiment.experimentLogic.*)'
            payload: Experiment
        }
        reportExperimentArchived: (experiment: Experiment) => {
            type: 'report experiment archived (scenes.experiment.experimentLogic.*)'
            payload: {
                experiment: Experiment
            }
        }
        reportExperimentReset: (experiment: Experiment) => {
            type: 'report experiment reset (scenes.experiment.experimentLogic.*)'
            payload: {
                experiment: Experiment
            }
        }
        reportExperimentCreated: (experiment: Experiment) => {
            type: 'report experiment created (scenes.experiment.experimentLogic.*)'
            payload: {
                experiment: Experiment
            }
        }
        reportExperimentViewed: (experiment: Experiment) => {
            type: 'report experiment viewed (scenes.experiment.experimentLogic.*)'
            payload: {
                experiment: Experiment
            }
        }
        reportExperimentLaunched: (
            experiment: Experiment,
            launchDate: Dayjs
        ) => {
            type: 'report experiment launched (scenes.experiment.experimentLogic.*)'
            payload: {
                experiment: Experiment
                launchDate: Dayjs
            }
        }
        reportExperimentCompleted: (
            experiment: Experiment,
            endDate: Dayjs,
            duration: number,
            significant: boolean
        ) => {
            type: 'report experiment completed (scenes.experiment.experimentLogic.*)'
            payload: {
                experiment: Experiment
                endDate: Dayjs
                duration: number
                significant: boolean
            }
        }
        setQuery: (query: Node | null) => {
            type: 'set query (scenes.experiment.experimentLogic.*)'
            payload: {
                query: Node | null
            }
        }
        updateQuerySource: (querySource: Omit<Partial<InsightQueryNode>, 'kind'>) => {
            type: 'update query source (scenes.experiment.experimentLogic.*)'
            payload: {
                querySource: Omit<Partial<InsightQueryNode>, 'kind'>
            }
        }
        setExposureQuery: (query: Node | null) => {
            type: 'set exposure query (scenes.experiment.experimentLogic.*)'
            payload: {
                query: Node | null
            }
        }
        updateExposureQuerySource: (querySource: Omit<Partial<InsightQueryNode>, 'kind'>) => {
            type: 'update exposure query source (scenes.experiment.experimentLogic.*)'
            payload: {
                querySource: Omit<Partial<InsightQueryNode>, 'kind'>
            }
        }
        setExperiment: (experiment: Partial<Experiment>) => {
            type: 'set experiment (scenes.experiment.experimentLogic.*)'
            payload: {
                experiment: Partial<Experiment>
            }
        }
        createExperiment: (
            draft?: boolean,
            runningTime?: number,
            sampleSize?: number
        ) => {
            type: 'create experiment (scenes.experiment.experimentLogic.*)'
            payload: {
                draft: boolean | undefined
                runningTime: number | undefined
                sampleSize: number | undefined
            }
        }
        setNewExperimentInsight: (filters?: Partial<FilterType>) => {
            type: 'set new experiment insight (scenes.experiment.experimentLogic.*)'
            payload: {
                filters: Partial<FilterType> | undefined
            }
        }
        setExperimentExposureInsight: (filters?: Partial<FilterType>) => {
            type: 'set experiment exposure insight (scenes.experiment.experimentLogic.*)'
            payload: {
                filters: Partial<FilterType> | undefined
            }
        }
        removeExperimentGroup: (idx: number) => {
            type: 'remove experiment group (scenes.experiment.experimentLogic.*)'
            payload: {
                idx: number
            }
        }
        setEditExperiment: (editing: boolean) => {
            type: 'set edit experiment (scenes.experiment.experimentLogic.*)'
            payload: {
                editing: boolean
            }
        }
        setExperimentResultCalculationError: (error: string) => {
            type: 'set experiment result calculation error (scenes.experiment.experimentLogic.*)'
            payload: {
                error: string
            }
        }
        setFlagImplementationWarning: (warning: boolean) => {
            type: 'set flag implementation warning (scenes.experiment.experimentLogic.*)'
            payload: {
                warning: boolean
            }
        }
        setExposureAndSampleSize: (
            exposure: number,
            sampleSize: number
        ) => {
            type: 'set exposure and sample size (scenes.experiment.experimentLogic.*)'
            payload: {
                exposure: number
                sampleSize: number
            }
        }
        updateExperimentGoal: (filters: Partial<FilterType>) => {
            type: 'update experiment goal (scenes.experiment.experimentLogic.*)'
            payload: {
                filters: Partial<FilterType>
            }
        }
        updateExperimentExposure: (filters: Partial<FilterType> | null) => {
            type: 'update experiment exposure (scenes.experiment.experimentLogic.*)'
            payload: {
                filters: Partial<FilterType> | null
            }
        }
        updateExperimentSecondaryMetrics: (metrics: SecondaryExperimentMetric[]) => {
            type: 'update experiment secondary metrics (scenes.experiment.experimentLogic.*)'
            payload: {
                metrics: SecondaryExperimentMetric[]
            }
        }
        launchExperiment: () => {
            type: 'launch experiment (scenes.experiment.experimentLogic.*)'
            payload: {
                value: true
            }
        }
        endExperiment: () => {
            type: 'end experiment (scenes.experiment.experimentLogic.*)'
            payload: {
                value: true
            }
        }
        addExperimentGroup: () => {
            type: 'add experiment group (scenes.experiment.experimentLogic.*)'
            payload: {
                value: true
            }
        }
        archiveExperiment: () => {
            type: 'archive experiment (scenes.experiment.experimentLogic.*)'
            payload: {
                value: true
            }
        }
        resetRunningExperiment: () => {
            type: 'reset running experiment (scenes.experiment.experimentLogic.*)'
            payload: {
                value: true
            }
        }
        checkFlagImplementationWarning: () => {
            type: 'check flag implementation warning (scenes.experiment.experimentLogic.*)'
            payload: {
                value: true
            }
        }
        openExperimentGoalModal: () => {
            type: 'open experiment goal modal (scenes.experiment.experimentLogic.*)'
            payload: {
                value: true
            }
        }
        closeExperimentGoalModal: () => {
            type: 'close experiment goal modal (scenes.experiment.experimentLogic.*)'
            payload: {
                value: true
            }
        }
        openExperimentExposureModal: () => {
            type: 'open experiment exposure modal (scenes.experiment.experimentLogic.*)'
            payload: {
                value: true
            }
        }
        closeExperimentExposureModal: () => {
            type: 'close experiment exposure modal (scenes.experiment.experimentLogic.*)'
            payload: {
                value: true
            }
        }
        loadExperiment: () => {
            type: 'load experiment (scenes.experiment.experimentLogic.*)'
            payload: any
        }
        loadExperimentSuccess: (
            experiment: Experiment,
            payload?: any
        ) => {
            type: 'load experiment success (scenes.experiment.experimentLogic.*)'
            payload: {
                experiment: Experiment
                payload?: any
            }
        }
        loadExperimentFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load experiment failure (scenes.experiment.experimentLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateExperiment: (update: Partial<Experiment>) => {
            type: 'update experiment (scenes.experiment.experimentLogic.*)'
            payload: Partial<Experiment>
        }
        updateExperimentSuccess: (
            experiment: Experiment,
            payload?: Partial<Experiment>
        ) => {
            type: 'update experiment success (scenes.experiment.experimentLogic.*)'
            payload: {
                experiment: Experiment
                payload?: Partial<Experiment>
            }
        }
        updateExperimentFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update experiment failure (scenes.experiment.experimentLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadExperimentResults: (refresh?: boolean) => {
            type: 'load experiment results (scenes.experiment.experimentLogic.*)'
            payload: boolean
        }
        loadExperimentResultsSuccess: (
            experimentResults:
                | {
                      fakeInsightId: string
                      last_refresh: string | null | undefined
                      insight: FunnelStep[][]
                      filters: FunnelsFilterType
                      variants: FunnelExperimentVariant[]
                      probability: Record<string, number>
                      significant: boolean
                      noData?: boolean | undefined
                      significance_code: SignificanceCode
                      expected_loss?: number | undefined
                      p_value?: number | undefined
                  }
                | {
                      fakeInsightId: string
                      last_refresh: string | null | undefined
                      insight: TrendResult[]
                      filters: TrendsFilterType
                      variants: TrendExperimentVariant[]
                      probability: Record<string, number>
                      significant: boolean
                      noData?: boolean | undefined
                      significance_code: SignificanceCode
                      expected_loss?: number | undefined
                      p_value?: number | undefined
                  }
                | null,
            payload?: boolean
        ) => {
            type: 'load experiment results success (scenes.experiment.experimentLogic.*)'
            payload: {
                experimentResults:
                    | {
                          fakeInsightId: string
                          last_refresh: string | null | undefined
                          insight: FunnelStep[][]
                          filters: FunnelsFilterType
                          variants: FunnelExperimentVariant[]
                          probability: Record<string, number>
                          significant: boolean
                          noData?: boolean | undefined
                          significance_code: SignificanceCode
                          expected_loss?: number | undefined
                          p_value?: number | undefined
                      }
                    | {
                          fakeInsightId: string
                          last_refresh: string | null | undefined
                          insight: TrendResult[]
                          filters: TrendsFilterType
                          variants: TrendExperimentVariant[]
                          probability: Record<string, number>
                          significant: boolean
                          noData?: boolean | undefined
                          significance_code: SignificanceCode
                          expected_loss?: number | undefined
                          p_value?: number | undefined
                      }
                    | null
                payload?: boolean
            }
        }
        loadExperimentResultsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load experiment results failure (scenes.experiment.experimentLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadSecondaryMetricResults: () => {
            type: 'load secondary metric results (scenes.experiment.experimentLogic.*)'
            payload: any
        }
        loadSecondaryMetricResultsSuccess: (
            secondaryMetricResults: any[],
            payload?: any
        ) => {
            type: 'load secondary metric results success (scenes.experiment.experimentLogic.*)'
            payload: {
                secondaryMetricResults: any[]
                payload?: any
            }
        }
        loadSecondaryMetricResultsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load secondary metric results failure (scenes.experiment.experimentLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setExperimentValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set experiment value (scenes.experiment.experimentLogic.*)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setExperimentValues: (values: DeepPartial<Experiment>) => {
            type: 'set experiment values (scenes.experiment.experimentLogic.*)'
            payload: {
                values: DeepPartial<Experiment>
            }
        }
        setExperimentManualErrors: (errors: Record<string, any>) => {
            type: 'set experiment manual errors (scenes.experiment.experimentLogic.*)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchExperimentField: (key: string) => {
            type: 'touch experiment field (scenes.experiment.experimentLogic.*)'
            payload: {
                key: string
            }
        }
        resetExperiment: (values?: Experiment) => {
            type: 'reset experiment (scenes.experiment.experimentLogic.*)'
            payload: {
                values?: Experiment
            }
        }
        submitExperiment: () => {
            type: 'submit experiment (scenes.experiment.experimentLogic.*)'
            payload: {
                value: boolean
            }
        }
        submitExperimentRequest: (experiment: Experiment) => {
            type: 'submit experiment request (scenes.experiment.experimentLogic.*)'
            payload: {
                experiment: Experiment
            }
        }
        submitExperimentSuccess: (experiment: Experiment) => {
            type: 'submit experiment success (scenes.experiment.experimentLogic.*)'
            payload: {
                experiment: Experiment
            }
        }
        submitExperimentFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit experiment failure (scenes.experiment.experimentLogic.*)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'add to experiments (scenes.experiment.experimentLogic.*)': 'addToExperiments'
        'update experiments (scenes.experiment.experimentLogic.*)': 'updateExperiments'
        'report experiment archived (scenes.experiment.experimentLogic.*)': 'reportExperimentArchived'
        'report experiment reset (scenes.experiment.experimentLogic.*)': 'reportExperimentReset'
        'report experiment created (scenes.experiment.experimentLogic.*)': 'reportExperimentCreated'
        'report experiment viewed (scenes.experiment.experimentLogic.*)': 'reportExperimentViewed'
        'report experiment launched (scenes.experiment.experimentLogic.*)': 'reportExperimentLaunched'
        'report experiment completed (scenes.experiment.experimentLogic.*)': 'reportExperimentCompleted'
        'set query (scenes.experiment.experimentLogic.*)': 'setQuery'
        'update query source (scenes.experiment.experimentLogic.*)': 'updateQuerySource'
        'set exposure query (scenes.experiment.experimentLogic.*)': 'setExposureQuery'
        'update exposure query source (scenes.experiment.experimentLogic.*)': 'updateExposureQuerySource'
        'set experiment (scenes.experiment.experimentLogic.*)': 'setExperiment'
        'create experiment (scenes.experiment.experimentLogic.*)': 'createExperiment'
        'set new experiment insight (scenes.experiment.experimentLogic.*)': 'setNewExperimentInsight'
        'set experiment exposure insight (scenes.experiment.experimentLogic.*)': 'setExperimentExposureInsight'
        'remove experiment group (scenes.experiment.experimentLogic.*)': 'removeExperimentGroup'
        'set edit experiment (scenes.experiment.experimentLogic.*)': 'setEditExperiment'
        'set experiment result calculation error (scenes.experiment.experimentLogic.*)': 'setExperimentResultCalculationError'
        'set flag implementation warning (scenes.experiment.experimentLogic.*)': 'setFlagImplementationWarning'
        'set exposure and sample size (scenes.experiment.experimentLogic.*)': 'setExposureAndSampleSize'
        'update experiment goal (scenes.experiment.experimentLogic.*)': 'updateExperimentGoal'
        'update experiment exposure (scenes.experiment.experimentLogic.*)': 'updateExperimentExposure'
        'update experiment secondary metrics (scenes.experiment.experimentLogic.*)': 'updateExperimentSecondaryMetrics'
        'launch experiment (scenes.experiment.experimentLogic.*)': 'launchExperiment'
        'end experiment (scenes.experiment.experimentLogic.*)': 'endExperiment'
        'add experiment group (scenes.experiment.experimentLogic.*)': 'addExperimentGroup'
        'archive experiment (scenes.experiment.experimentLogic.*)': 'archiveExperiment'
        'reset running experiment (scenes.experiment.experimentLogic.*)': 'resetRunningExperiment'
        'check flag implementation warning (scenes.experiment.experimentLogic.*)': 'checkFlagImplementationWarning'
        'open experiment goal modal (scenes.experiment.experimentLogic.*)': 'openExperimentGoalModal'
        'close experiment goal modal (scenes.experiment.experimentLogic.*)': 'closeExperimentGoalModal'
        'open experiment exposure modal (scenes.experiment.experimentLogic.*)': 'openExperimentExposureModal'
        'close experiment exposure modal (scenes.experiment.experimentLogic.*)': 'closeExperimentExposureModal'
        'load experiment (scenes.experiment.experimentLogic.*)': 'loadExperiment'
        'load experiment success (scenes.experiment.experimentLogic.*)': 'loadExperimentSuccess'
        'load experiment failure (scenes.experiment.experimentLogic.*)': 'loadExperimentFailure'
        'update experiment (scenes.experiment.experimentLogic.*)': 'updateExperiment'
        'update experiment success (scenes.experiment.experimentLogic.*)': 'updateExperimentSuccess'
        'update experiment failure (scenes.experiment.experimentLogic.*)': 'updateExperimentFailure'
        'load experiment results (scenes.experiment.experimentLogic.*)': 'loadExperimentResults'
        'load experiment results success (scenes.experiment.experimentLogic.*)': 'loadExperimentResultsSuccess'
        'load experiment results failure (scenes.experiment.experimentLogic.*)': 'loadExperimentResultsFailure'
        'load secondary metric results (scenes.experiment.experimentLogic.*)': 'loadSecondaryMetricResults'
        'load secondary metric results success (scenes.experiment.experimentLogic.*)': 'loadSecondaryMetricResultsSuccess'
        'load secondary metric results failure (scenes.experiment.experimentLogic.*)': 'loadSecondaryMetricResultsFailure'
        'set experiment value (scenes.experiment.experimentLogic.*)': 'setExperimentValue'
        'set experiment values (scenes.experiment.experimentLogic.*)': 'setExperimentValues'
        'set experiment manual errors (scenes.experiment.experimentLogic.*)': 'setExperimentManualErrors'
        'touch experiment field (scenes.experiment.experimentLogic.*)': 'touchExperimentField'
        'reset experiment (scenes.experiment.experimentLogic.*)': 'resetExperiment'
        'submit experiment (scenes.experiment.experimentLogic.*)': 'submitExperiment'
        'submit experiment request (scenes.experiment.experimentLogic.*)': 'submitExperimentRequest'
        'submit experiment success (scenes.experiment.experimentLogic.*)': 'submitExperimentSuccess'
        'submit experiment failure (scenes.experiment.experimentLogic.*)': 'submitExperimentFailure'
    }
    actionTypes: {
        addToExperiments: 'add to experiments (scenes.experiment.experimentLogic.*)'
        updateExperiments: 'update experiments (scenes.experiment.experimentLogic.*)'
        reportExperimentArchived: 'report experiment archived (scenes.experiment.experimentLogic.*)'
        reportExperimentReset: 'report experiment reset (scenes.experiment.experimentLogic.*)'
        reportExperimentCreated: 'report experiment created (scenes.experiment.experimentLogic.*)'
        reportExperimentViewed: 'report experiment viewed (scenes.experiment.experimentLogic.*)'
        reportExperimentLaunched: 'report experiment launched (scenes.experiment.experimentLogic.*)'
        reportExperimentCompleted: 'report experiment completed (scenes.experiment.experimentLogic.*)'
        setQuery: 'set query (scenes.experiment.experimentLogic.*)'
        updateQuerySource: 'update query source (scenes.experiment.experimentLogic.*)'
        setExposureQuery: 'set exposure query (scenes.experiment.experimentLogic.*)'
        updateExposureQuerySource: 'update exposure query source (scenes.experiment.experimentLogic.*)'
        setExperiment: 'set experiment (scenes.experiment.experimentLogic.*)'
        createExperiment: 'create experiment (scenes.experiment.experimentLogic.*)'
        setNewExperimentInsight: 'set new experiment insight (scenes.experiment.experimentLogic.*)'
        setExperimentExposureInsight: 'set experiment exposure insight (scenes.experiment.experimentLogic.*)'
        removeExperimentGroup: 'remove experiment group (scenes.experiment.experimentLogic.*)'
        setEditExperiment: 'set edit experiment (scenes.experiment.experimentLogic.*)'
        setExperimentResultCalculationError: 'set experiment result calculation error (scenes.experiment.experimentLogic.*)'
        setFlagImplementationWarning: 'set flag implementation warning (scenes.experiment.experimentLogic.*)'
        setExposureAndSampleSize: 'set exposure and sample size (scenes.experiment.experimentLogic.*)'
        updateExperimentGoal: 'update experiment goal (scenes.experiment.experimentLogic.*)'
        updateExperimentExposure: 'update experiment exposure (scenes.experiment.experimentLogic.*)'
        updateExperimentSecondaryMetrics: 'update experiment secondary metrics (scenes.experiment.experimentLogic.*)'
        launchExperiment: 'launch experiment (scenes.experiment.experimentLogic.*)'
        endExperiment: 'end experiment (scenes.experiment.experimentLogic.*)'
        addExperimentGroup: 'add experiment group (scenes.experiment.experimentLogic.*)'
        archiveExperiment: 'archive experiment (scenes.experiment.experimentLogic.*)'
        resetRunningExperiment: 'reset running experiment (scenes.experiment.experimentLogic.*)'
        checkFlagImplementationWarning: 'check flag implementation warning (scenes.experiment.experimentLogic.*)'
        openExperimentGoalModal: 'open experiment goal modal (scenes.experiment.experimentLogic.*)'
        closeExperimentGoalModal: 'close experiment goal modal (scenes.experiment.experimentLogic.*)'
        openExperimentExposureModal: 'open experiment exposure modal (scenes.experiment.experimentLogic.*)'
        closeExperimentExposureModal: 'close experiment exposure modal (scenes.experiment.experimentLogic.*)'
        loadExperiment: 'load experiment (scenes.experiment.experimentLogic.*)'
        loadExperimentSuccess: 'load experiment success (scenes.experiment.experimentLogic.*)'
        loadExperimentFailure: 'load experiment failure (scenes.experiment.experimentLogic.*)'
        updateExperiment: 'update experiment (scenes.experiment.experimentLogic.*)'
        updateExperimentSuccess: 'update experiment success (scenes.experiment.experimentLogic.*)'
        updateExperimentFailure: 'update experiment failure (scenes.experiment.experimentLogic.*)'
        loadExperimentResults: 'load experiment results (scenes.experiment.experimentLogic.*)'
        loadExperimentResultsSuccess: 'load experiment results success (scenes.experiment.experimentLogic.*)'
        loadExperimentResultsFailure: 'load experiment results failure (scenes.experiment.experimentLogic.*)'
        loadSecondaryMetricResults: 'load secondary metric results (scenes.experiment.experimentLogic.*)'
        loadSecondaryMetricResultsSuccess: 'load secondary metric results success (scenes.experiment.experimentLogic.*)'
        loadSecondaryMetricResultsFailure: 'load secondary metric results failure (scenes.experiment.experimentLogic.*)'
        setExperimentValue: 'set experiment value (scenes.experiment.experimentLogic.*)'
        setExperimentValues: 'set experiment values (scenes.experiment.experimentLogic.*)'
        setExperimentManualErrors: 'set experiment manual errors (scenes.experiment.experimentLogic.*)'
        touchExperimentField: 'touch experiment field (scenes.experiment.experimentLogic.*)'
        resetExperiment: 'reset experiment (scenes.experiment.experimentLogic.*)'
        submitExperiment: 'submit experiment (scenes.experiment.experimentLogic.*)'
        submitExperimentRequest: 'submit experiment request (scenes.experiment.experimentLogic.*)'
        submitExperimentSuccess: 'submit experiment success (scenes.experiment.experimentLogic.*)'
        submitExperimentFailure: 'submit experiment failure (scenes.experiment.experimentLogic.*)'
    }
    actions: {
        addToExperiments: (experiment: Experiment) => void
        updateExperiments: (experiment: Experiment) => void
        reportExperimentArchived: (experiment: Experiment) => void
        reportExperimentReset: (experiment: Experiment) => void
        reportExperimentCreated: (experiment: Experiment) => void
        reportExperimentViewed: (experiment: Experiment) => void
        reportExperimentLaunched: (experiment: Experiment, launchDate: Dayjs) => void
        reportExperimentCompleted: (
            experiment: Experiment,
            endDate: Dayjs,
            duration: number,
            significant: boolean
        ) => void
        setQuery: (query: Node | null) => void
        updateQuerySource: (querySource: Omit<Partial<InsightQueryNode>, 'kind'>) => void
        setExposureQuery: (query: Node | null) => void
        updateExposureQuerySource: (querySource: Omit<Partial<InsightQueryNode>, 'kind'>) => void
        setExperiment: (experiment: Partial<Experiment>) => void
        createExperiment: (draft?: boolean, runningTime?: number, sampleSize?: number) => void
        setNewExperimentInsight: (filters?: Partial<FilterType>) => void
        setExperimentExposureInsight: (filters?: Partial<FilterType>) => void
        removeExperimentGroup: (idx: number) => void
        setEditExperiment: (editing: boolean) => void
        setExperimentResultCalculationError: (error: string) => void
        setFlagImplementationWarning: (warning: boolean) => void
        setExposureAndSampleSize: (exposure: number, sampleSize: number) => void
        updateExperimentGoal: (filters: Partial<FilterType>) => void
        updateExperimentExposure: (filters: Partial<FilterType> | null) => void
        updateExperimentSecondaryMetrics: (metrics: SecondaryExperimentMetric[]) => void
        launchExperiment: () => void
        endExperiment: () => void
        addExperimentGroup: () => void
        archiveExperiment: () => void
        resetRunningExperiment: () => void
        checkFlagImplementationWarning: () => void
        openExperimentGoalModal: () => void
        closeExperimentGoalModal: () => void
        openExperimentExposureModal: () => void
        closeExperimentExposureModal: () => void
        loadExperiment: () => void
        loadExperimentSuccess: (experiment: Experiment, payload?: any) => void
        loadExperimentFailure: (error: string, errorObject?: any) => void
        updateExperiment: (update: Partial<Experiment>) => void
        updateExperimentSuccess: (experiment: Experiment, payload?: Partial<Experiment>) => void
        updateExperimentFailure: (error: string, errorObject?: any) => void
        loadExperimentResults: (refresh?: boolean) => void
        loadExperimentResultsSuccess: (
            experimentResults:
                | {
                      fakeInsightId: string
                      last_refresh: string | null | undefined
                      insight: FunnelStep[][]
                      filters: FunnelsFilterType
                      variants: FunnelExperimentVariant[]
                      probability: Record<string, number>
                      significant: boolean
                      noData?: boolean | undefined
                      significance_code: SignificanceCode
                      expected_loss?: number | undefined
                      p_value?: number | undefined
                  }
                | {
                      fakeInsightId: string
                      last_refresh: string | null | undefined
                      insight: TrendResult[]
                      filters: TrendsFilterType
                      variants: TrendExperimentVariant[]
                      probability: Record<string, number>
                      significant: boolean
                      noData?: boolean | undefined
                      significance_code: SignificanceCode
                      expected_loss?: number | undefined
                      p_value?: number | undefined
                  }
                | null,
            payload?: boolean
        ) => void
        loadExperimentResultsFailure: (error: string, errorObject?: any) => void
        loadSecondaryMetricResults: () => void
        loadSecondaryMetricResultsSuccess: (secondaryMetricResults: any[], payload?: any) => void
        loadSecondaryMetricResultsFailure: (error: string, errorObject?: any) => void
        setExperimentValue: (key: FieldName, value: any) => void
        setExperimentValues: (values: DeepPartial<Experiment>) => void
        setExperimentManualErrors: (errors: Record<string, any>) => void
        touchExperimentField: (key: string) => void
        resetExperiment: (values?: Experiment) => void
        submitExperiment: () => void
        submitExperimentRequest: (experiment: Experiment) => void
        submitExperimentSuccess: (experiment: Experiment) => void
        submitExperimentFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        addToExperiments: (experiment: Experiment) => Promise<any>
        updateExperiments: (experiment: Experiment) => Promise<any>
        reportExperimentArchived: (experiment: Experiment) => Promise<any>
        reportExperimentReset: (experiment: Experiment) => Promise<any>
        reportExperimentCreated: (experiment: Experiment) => Promise<any>
        reportExperimentViewed: (experiment: Experiment) => Promise<any>
        reportExperimentLaunched: (experiment: Experiment, launchDate: Dayjs) => Promise<any>
        reportExperimentCompleted: (
            experiment: Experiment,
            endDate: Dayjs,
            duration: number,
            significant: boolean
        ) => Promise<any>
        setQuery: (query: Node | null) => Promise<any>
        updateQuerySource: (querySource: Omit<Partial<InsightQueryNode>, 'kind'>) => Promise<any>
        setExposureQuery: (query: Node | null) => Promise<any>
        updateExposureQuerySource: (querySource: Omit<Partial<InsightQueryNode>, 'kind'>) => Promise<any>
        setExperiment: (experiment: Partial<Experiment>) => Promise<any>
        createExperiment: (draft?: boolean, runningTime?: number, sampleSize?: number) => Promise<any>
        setNewExperimentInsight: (filters?: Partial<FilterType>) => Promise<any>
        setExperimentExposureInsight: (filters?: Partial<FilterType>) => Promise<any>
        removeExperimentGroup: (idx: number) => Promise<any>
        setEditExperiment: (editing: boolean) => Promise<any>
        setExperimentResultCalculationError: (error: string) => Promise<any>
        setFlagImplementationWarning: (warning: boolean) => Promise<any>
        setExposureAndSampleSize: (exposure: number, sampleSize: number) => Promise<any>
        updateExperimentGoal: (filters: Partial<FilterType>) => Promise<any>
        updateExperimentExposure: (filters: Partial<FilterType> | null) => Promise<any>
        updateExperimentSecondaryMetrics: (metrics: SecondaryExperimentMetric[]) => Promise<any>
        launchExperiment: () => Promise<any>
        endExperiment: () => Promise<any>
        addExperimentGroup: () => Promise<any>
        archiveExperiment: () => Promise<any>
        resetRunningExperiment: () => Promise<any>
        checkFlagImplementationWarning: () => Promise<any>
        openExperimentGoalModal: () => Promise<any>
        closeExperimentGoalModal: () => Promise<any>
        openExperimentExposureModal: () => Promise<any>
        closeExperimentExposureModal: () => Promise<any>
        loadExperiment: () => Promise<any>
        loadExperimentSuccess: (experiment: Experiment, payload?: any) => Promise<any>
        loadExperimentFailure: (error: string, errorObject?: any) => Promise<any>
        updateExperiment: (update: Partial<Experiment>) => Promise<any>
        updateExperimentSuccess: (experiment: Experiment, payload?: Partial<Experiment>) => Promise<any>
        updateExperimentFailure: (error: string, errorObject?: any) => Promise<any>
        loadExperimentResults: (refresh?: boolean) => Promise<any>
        loadExperimentResultsSuccess: (
            experimentResults:
                | {
                      fakeInsightId: string
                      last_refresh: string | null | undefined
                      insight: FunnelStep[][]
                      filters: FunnelsFilterType
                      variants: FunnelExperimentVariant[]
                      probability: Record<string, number>
                      significant: boolean
                      noData?: boolean | undefined
                      significance_code: SignificanceCode
                      expected_loss?: number | undefined
                      p_value?: number | undefined
                  }
                | {
                      fakeInsightId: string
                      last_refresh: string | null | undefined
                      insight: TrendResult[]
                      filters: TrendsFilterType
                      variants: TrendExperimentVariant[]
                      probability: Record<string, number>
                      significant: boolean
                      noData?: boolean | undefined
                      significance_code: SignificanceCode
                      expected_loss?: number | undefined
                      p_value?: number | undefined
                  }
                | null,
            payload?: boolean
        ) => Promise<any>
        loadExperimentResultsFailure: (error: string, errorObject?: any) => Promise<any>
        loadSecondaryMetricResults: () => Promise<any>
        loadSecondaryMetricResultsSuccess: (secondaryMetricResults: any[], payload?: any) => Promise<any>
        loadSecondaryMetricResultsFailure: (error: string, errorObject?: any) => Promise<any>
        setExperimentValue: (key: FieldName, value: any) => Promise<any>
        setExperimentValues: (values: DeepPartial<Experiment>) => Promise<any>
        setExperimentManualErrors: (errors: Record<string, any>) => Promise<any>
        touchExperimentField: (key: string) => Promise<any>
        resetExperiment: (values?: Experiment) => Promise<any>
        submitExperiment: () => Promise<any>
        submitExperimentRequest: (experiment: Experiment) => Promise<any>
        submitExperimentSuccess: (experiment: Experiment) => Promise<any>
        submitExperimentFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        experiment: Experiment
        editingExistingExperiment: boolean
        changingGoalMetric: boolean
        changingSecondaryMetrics: boolean
        experimentResultCalculationError: string | null
        flagImplementationWarning: boolean
        exposureAndSampleSize: {
            exposure: number
            sampleSize: number
        }
        isExperimentGoalModalOpen: boolean
        isExperimentExposureModalOpen: boolean
        experimentValuesChangedLocally: boolean
        experimentLoading: boolean
        experimentResults: ExperimentResults['result'] | null
        experimentResultsLoading: boolean
        secondaryMetricResults: Record<string, number>[] | null
        secondaryMetricResultsLoading: boolean
        isExperimentSubmitting: boolean
        showExperimentErrors: boolean
        experimentChanged: boolean
        experimentTouches: Record<string, boolean>
        experimentManualErrors: Record<string, any>
    }
    events: {}
    key: number | 'new'
    listeners: {
        createExperiment: ((
            action: {
                type: 'create experiment (scenes.experiment.experimentLogic.*)'
                payload: {
                    draft: boolean | undefined
                    runningTime: number | undefined
                    sampleSize: number | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setNewExperimentInsight: ((
            action: {
                type: 'set new experiment insight (scenes.experiment.experimentLogic.*)'
                payload: {
                    filters: Partial<FilterType> | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setQuery: ((
            action: {
                type: 'set query (scenes.experiment.experimentLogic.*)'
                payload: {
                    query: Node | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setExperimentExposureInsight: ((
            action: {
                type: 'set experiment exposure insight (scenes.experiment.experimentLogic.*)'
                payload: {
                    filters: Partial<FilterType> | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setExposureQuery: ((
            action: {
                type: 'set exposure query (scenes.experiment.experimentLogic.*)'
                payload: {
                    query: Node | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        launchExperiment: ((
            action: {
                type: 'launch experiment (scenes.experiment.experimentLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        endExperiment: ((
            action: {
                type: 'end experiment (scenes.experiment.experimentLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        archiveExperiment: ((
            action: {
                type: 'archive experiment (scenes.experiment.experimentLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateExperimentGoal: ((
            action: {
                type: 'update experiment goal (scenes.experiment.experimentLogic.*)'
                payload: {
                    filters: Partial<FilterType>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateExperimentExposure: ((
            action: {
                type: 'update experiment exposure (scenes.experiment.experimentLogic.*)'
                payload: {
                    filters: Partial<FilterType> | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateExperimentSecondaryMetrics: ((
            action: {
                type: 'update experiment secondary metrics (scenes.experiment.experimentLogic.*)'
                payload: {
                    metrics: SecondaryExperimentMetric[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        closeExperimentGoalModal: ((
            action: {
                type: 'close experiment goal modal (scenes.experiment.experimentLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        closeExperimentExposureModal: ((
            action: {
                type: 'close experiment exposure modal (scenes.experiment.experimentLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        resetRunningExperiment: ((
            action: {
                type: 'reset running experiment (scenes.experiment.experimentLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setExperiment: ((
            action: {
                type: 'set experiment (scenes.experiment.experimentLogic.*)'
                payload: {
                    experiment: Partial<Experiment>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        checkFlagImplementationWarning: ((
            action: {
                type: 'check flag implementation warning (scenes.experiment.experimentLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        openExperimentGoalModal: ((
            action: {
                type: 'open experiment goal modal (scenes.experiment.experimentLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        openExperimentExposureModal: ((
            action: {
                type: 'open experiment exposure modal (scenes.experiment.experimentLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'experiment', 'experimentLogic', '*']
    pathString: 'scenes.experiment.experimentLogic.*'
    props: ExperimentLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        experiment: Experiment
        editingExistingExperiment: boolean
        changingGoalMetric: boolean
        changingSecondaryMetrics: boolean
        experimentResultCalculationError: string | null
        flagImplementationWarning: boolean
        exposureAndSampleSize: {
            exposure: number
            sampleSize: number
        }
        isExperimentGoalModalOpen: boolean
        isExperimentExposureModalOpen: boolean
        experimentValuesChangedLocally: boolean
        experimentLoading: boolean
        experimentResults: ExperimentResults['result'] | null
        experimentResultsLoading: boolean
        secondaryMetricResults: Record<string, number>[] | null
        secondaryMetricResultsLoading: boolean
        isExperimentSubmitting: boolean
        showExperimentErrors: boolean
        experimentChanged: boolean
        experimentTouches: Record<string, boolean>
        experimentManualErrors: Record<string, any>
    }
    reducers: {
        experiment: (state: Experiment, action: any, fullState: any) => Experiment
        editingExistingExperiment: (state: boolean, action: any, fullState: any) => boolean
        changingGoalMetric: (state: boolean, action: any, fullState: any) => boolean
        changingSecondaryMetrics: (state: boolean, action: any, fullState: any) => boolean
        experimentResultCalculationError: (state: string | null, action: any, fullState: any) => string | null
        flagImplementationWarning: (state: boolean, action: any, fullState: any) => boolean
        exposureAndSampleSize: (
            state: {
                exposure: number
                sampleSize: number
            },
            action: any,
            fullState: any
        ) => {
            exposure: number
            sampleSize: number
        }
        isExperimentGoalModalOpen: (state: boolean, action: any, fullState: any) => boolean
        isExperimentExposureModalOpen: (state: boolean, action: any, fullState: any) => boolean
        experimentValuesChangedLocally: (state: boolean, action: any, fullState: any) => boolean
        experimentLoading: (state: boolean, action: any, fullState: any) => boolean
        experimentResults: (
            state: ExperimentResults['result'] | null,
            action: any,
            fullState: any
        ) => ExperimentResults['result'] | null
        experimentResultsLoading: (state: boolean, action: any, fullState: any) => boolean
        secondaryMetricResults: (
            state: Record<string, number>[] | null,
            action: any,
            fullState: any
        ) => Record<string, number>[] | null
        secondaryMetricResultsLoading: (state: boolean, action: any, fullState: any) => boolean
        isExperimentSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showExperimentErrors: (state: boolean, action: any, fullState: any) => boolean
        experimentChanged: (state: boolean, action: any, fullState: any) => boolean
        experimentTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        experimentManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        experiment: Experiment
        editingExistingExperiment: boolean
        changingGoalMetric: boolean
        changingSecondaryMetrics: boolean
        experimentResultCalculationError: string | null
        flagImplementationWarning: boolean
        exposureAndSampleSize: {
            exposure: number
            sampleSize: number
        }
        isExperimentGoalModalOpen: boolean
        isExperimentExposureModalOpen: boolean
        experimentValuesChangedLocally: boolean
        experimentLoading: boolean
        experimentResults: ExperimentResults['result'] | null
        experimentResultsLoading: boolean
        secondaryMetricResults: Record<string, number>[] | null
        secondaryMetricResultsLoading: boolean
        isExperimentSubmitting: boolean
        showExperimentErrors: boolean
        experimentChanged: boolean
        experimentTouches: Record<string, boolean>
        experimentManualErrors: Record<string, any>
    }
    selectors: {
        experiment: (state: any, props?: any) => Experiment
        editingExistingExperiment: (state: any, props?: any) => boolean
        changingGoalMetric: (state: any, props?: any) => boolean
        changingSecondaryMetrics: (state: any, props?: any) => boolean
        experimentResultCalculationError: (state: any, props?: any) => string | null
        flagImplementationWarning: (state: any, props?: any) => boolean
        exposureAndSampleSize: (
            state: any,
            props?: any
        ) => {
            exposure: number
            sampleSize: number
        }
        isExperimentGoalModalOpen: (state: any, props?: any) => boolean
        isExperimentExposureModalOpen: (state: any, props?: any) => boolean
        experimentValuesChangedLocally: (state: any, props?: any) => boolean
        experimentLoading: (state: any, props?: any) => boolean
        experimentResults: (state: any, props?: any) => ExperimentResults['result'] | null
        experimentResultsLoading: (state: any, props?: any) => boolean
        secondaryMetricResults: (state: any, props?: any) => Record<string, number>[] | null
        secondaryMetricResultsLoading: (state: any, props?: any) => boolean
        isExperimentSubmitting: (state: any, props?: any) => boolean
        showExperimentErrors: (state: any, props?: any) => boolean
        experimentChanged: (state: any, props?: any) => boolean
        experimentTouches: (state: any, props?: any) => Record<string, boolean>
        experimentManualErrors: (state: any, props?: any) => Record<string, any>
        currentTeamId: (state: any, props?: any) => number | null
        groupTypes: (state: any, props?: any) => Array<GroupType>
        aggregationLabel: (
            state: any,
            props?: any
        ) => (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun
        props: (state: any, props?: any) => any
        experimentId: (state: any, props?: any) => Experiment['id']
        experimentInsightType: (state: any, props?: any) => InsightType
        isExperimentRunning: (state: any, props?: any) => boolean
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
        variants: (state: any, props?: any) => MultivariateFlagVariant[]
        experimentCountPerUserMath: (state: any, props?: any) => string | undefined
        minimumDetectableChange: (state: any, props?: any) => number
        minimumSampleSizePerVariant: (state: any, props?: any) => (conversionRate: number) => number
        areResultsSignificant: (state: any, props?: any) => boolean
        significanceBannerDetails: (state: any, props?: any) => string | ReactElement
        recommendedExposureForCountData: (state: any, props?: any) => (baseCountData: number) => number
        expectedRunningTime: (
            state: any,
            props?: any
        ) => (entrants: number, sampleSize: number, duration?: number) => number
        conversionRateForVariant: (state: any, props?: any) => (variant: string) => string
        getIndexForVariant: (state: any, props?: any) => (variant: string, insightType: InsightType) => number
        countDataForVariant: (state: any, props?: any) => (variant: string) => string
        exposureCountDataForVariant: (state: any, props?: any) => (variant: string) => string
        highestProbabilityVariant: (state: any, props?: any) => string | undefined
        areTrendResultsConfusing: (state: any, props?: any) => boolean
        sortedExperimentResultVariants: (state: any, props?: any) => string[]
        tabularSecondaryMetricResults: (state: any, props?: any) => TabularSecondaryMetricResults[]
        experimentTouched: (state: any, props?: any) => boolean
        experimentValidationErrors: (state: any, props?: any) => DeepPartialMap<Experiment, ValidationErrorType>
        experimentAllErrors: (state: any, props?: any) => Record<string, any>
        experimentHasErrors: (state: any, props?: any) => boolean
        experimentErrors: (state: any, props?: any) => DeepPartialMap<Experiment, ValidationErrorType>
        isExperimentValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        experiment: Experiment
        editingExistingExperiment: boolean
        changingGoalMetric: boolean
        changingSecondaryMetrics: boolean
        experimentResultCalculationError: string | null
        flagImplementationWarning: boolean
        exposureAndSampleSize: {
            exposure: number
            sampleSize: number
        }
        isExperimentGoalModalOpen: boolean
        isExperimentExposureModalOpen: boolean
        experimentValuesChangedLocally: boolean
        experimentLoading: boolean
        experimentResults: ExperimentResults['result'] | null
        experimentResultsLoading: boolean
        secondaryMetricResults: Record<string, number>[] | null
        secondaryMetricResultsLoading: boolean
        isExperimentSubmitting: boolean
        showExperimentErrors: boolean
        experimentChanged: boolean
        experimentTouches: Record<string, boolean>
        experimentManualErrors: Record<string, any>
        currentTeamId: number | null
        groupTypes: Array<GroupType>
        aggregationLabel: (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun
        props: any
        experimentId: Experiment['id']
        experimentInsightType: InsightType
        isExperimentRunning: boolean
        breadcrumbs: Breadcrumb[]
        variants: MultivariateFlagVariant[]
        experimentCountPerUserMath: string | undefined
        minimumDetectableChange: number
        minimumSampleSizePerVariant: (conversionRate: number) => number
        areResultsSignificant: boolean
        significanceBannerDetails: string | ReactElement
        recommendedExposureForCountData: (baseCountData: number) => number
        expectedRunningTime: (entrants: number, sampleSize: number, duration?: number) => number
        conversionRateForVariant: (variant: string) => string
        getIndexForVariant: (variant: string, insightType: InsightType) => number
        countDataForVariant: (variant: string) => string
        exposureCountDataForVariant: (variant: string) => string
        highestProbabilityVariant: string | undefined
        areTrendResultsConfusing: boolean
        sortedExperimentResultVariants: string[]
        tabularSecondaryMetricResults: TabularSecondaryMetricResults[]
        experimentTouched: boolean
        experimentValidationErrors: DeepPartialMap<Experiment, ValidationErrorType>
        experimentAllErrors: Record<string, any>
        experimentHasErrors: boolean
        experimentErrors: DeepPartialMap<Experiment, ValidationErrorType>
        isExperimentValid: boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        props: (arg: any) => any
        experimentId: (arg: any) => Experiment['id']
        experimentInsightType: (experiment: Experiment) => InsightType
        isExperimentRunning: (experiment: Experiment) => boolean
        breadcrumbs: (experiment: Experiment, experimentId: number | 'new') => Breadcrumb[]
        variants: (experiment: Experiment) => MultivariateFlagVariant[]
        experimentCountPerUserMath: (experiment: Experiment) => string | undefined
        minimumDetectableChange: (experiment: Experiment) => number
        minimumSampleSizePerVariant: (minimumDetectableChange: number) => (conversionRate: number) => number
        areResultsSignificant: (
            experimentResults:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._FunnelExperimentResults
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._TrendsExperimentResults
                | null
        ) => boolean
        significanceBannerDetails: (
            experimentResults:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._FunnelExperimentResults
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._TrendsExperimentResults
                | null
        ) => string | ReactElement
        recommendedExposureForCountData: (minimumDetectableChange: number) => (baseCountData: number) => number
        conversionRateForVariant: (
            experimentResults:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._FunnelExperimentResults
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._TrendsExperimentResults
                | null
        ) => (variant: string) => string
        getIndexForVariant: (
            experimentResults:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._FunnelExperimentResults
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._TrendsExperimentResults
                | null
        ) => (variant: string, insightType: InsightType) => number
        countDataForVariant: (
            experimentResults:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._FunnelExperimentResults
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._TrendsExperimentResults
                | null,
            experimentCountPerUserMath: string | undefined
        ) => (variant: string) => string
        exposureCountDataForVariant: (
            experimentResults:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._FunnelExperimentResults
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._TrendsExperimentResults
                | null
        ) => (variant: string) => string
        highestProbabilityVariant: (
            experimentResults:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._FunnelExperimentResults
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._TrendsExperimentResults
                | null
        ) => string | undefined
        areTrendResultsConfusing: (
            experimentResults:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._FunnelExperimentResults
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._TrendsExperimentResults
                | null,
            highestProbabilityVariant: string | undefined
        ) => boolean
        sortedExperimentResultVariants: (
            experimentResults:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._FunnelExperimentResults
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types')._TrendsExperimentResults
                | null,
            experiment: Experiment
        ) => string[]
        tabularSecondaryMetricResults: (
            experiment: Experiment,
            secondaryMetricResults: Record<string, number>[] | null
        ) => TabularSecondaryMetricResults[]
    }
}
