// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:23 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ActionLogicProps } from './actionLogic'
import type { ActionType, Breadcrumb } from '../../types'

export interface actionLogicType extends Logic {
    actionCreators: {
        checkIsFinished: (action: any) => {
            type: 'check is finished (scenes.actions.actionLogic.*)'
            payload: {
                action: any
            }
        }
        setPollTimeout: (pollTimeout: any) => {
            type: 'set poll timeout (scenes.actions.actionLogic.*)'
            payload: {
                pollTimeout: any
            }
        }
        setIsComplete: (isComplete: any) => {
            type: 'set is complete (scenes.actions.actionLogic.*)'
            payload: {
                isComplete: any
            }
        }
        loadAction: () => {
            type: 'load action (scenes.actions.actionLogic.*)'
            payload: any
        }
        loadActionSuccess: (
            action: ActionType,
            payload?: any
        ) => {
            type: 'load action success (scenes.actions.actionLogic.*)'
            payload: {
                action: ActionType
                payload?: any
            }
        }
        loadActionFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load action failure (scenes.actions.actionLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'check is finished (scenes.actions.actionLogic.*)': 'checkIsFinished'
        'set poll timeout (scenes.actions.actionLogic.*)': 'setPollTimeout'
        'set is complete (scenes.actions.actionLogic.*)': 'setIsComplete'
        'load action (scenes.actions.actionLogic.*)': 'loadAction'
        'load action success (scenes.actions.actionLogic.*)': 'loadActionSuccess'
        'load action failure (scenes.actions.actionLogic.*)': 'loadActionFailure'
    }
    actionTypes: {
        checkIsFinished: 'check is finished (scenes.actions.actionLogic.*)'
        setPollTimeout: 'set poll timeout (scenes.actions.actionLogic.*)'
        setIsComplete: 'set is complete (scenes.actions.actionLogic.*)'
        loadAction: 'load action (scenes.actions.actionLogic.*)'
        loadActionSuccess: 'load action success (scenes.actions.actionLogic.*)'
        loadActionFailure: 'load action failure (scenes.actions.actionLogic.*)'
    }
    actions: {
        checkIsFinished: (action: any) => void
        setPollTimeout: (pollTimeout: any) => void
        setIsComplete: (isComplete: any) => void
        loadAction: () => void
        loadActionSuccess: (action: ActionType, payload?: any) => void
        loadActionFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        checkIsFinished: (action: any) => Promise<any>
        setPollTimeout: (pollTimeout: any) => Promise<any>
        setIsComplete: (isComplete: any) => Promise<any>
        loadAction: () => Promise<any>
        loadActionSuccess: (action: ActionType, payload?: any) => Promise<any>
        loadActionFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        pollTimeout: number | null
        isComplete: boolean
        action: any
        actionLoading: boolean
    }
    events: {
        afterMount: () => void
        beforeUnmount: () => void
    }
    key: number | 'new'
    listeners: {
        checkIsFinished: ((
            action: {
                type: 'check is finished (scenes.actions.actionLogic.*)'
                payload: {
                    action: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'actions', 'actionLogic', '*']
    pathString: 'scenes.actions.actionLogic.*'
    props: ActionLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        pollTimeout: number | null
        isComplete: boolean
        action: any
        actionLoading: boolean
    }
    reducers: {
        pollTimeout: (state: number | null, action: any, fullState: any) => number | null
        isComplete: (state: boolean, action: any, fullState: any) => boolean
        action: (state: any, action: any, fullState: any) => any
        actionLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        pollTimeout: number | null
        isComplete: boolean
        action: any
        actionLoading: boolean
    }
    selectors: {
        pollTimeout: (state: any, props?: any) => number | null
        isComplete: (state: any, props?: any) => boolean
        action: (state: any, props?: any) => any
        actionLoading: (state: any, props?: any) => boolean
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
    }
    sharedListeners: {}
    values: {
        pollTimeout: number | null
        isComplete: boolean
        action: any
        actionLoading: boolean
        breadcrumbs: Breadcrumb[]
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        breadcrumbs: (action: any) => Breadcrumb[]
    }
}
