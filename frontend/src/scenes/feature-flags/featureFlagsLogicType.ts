// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:44 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FeatureFlagsFilters, FeatureFlagsTab, FlagLogicProps } from './featureFlagsLogic'
import type { Breadcrumb, FeatureFlagType } from '../../types'
import type { LemonSelectOption } from '../../lib/lemon-ui/LemonSelect/LemonSelect'

export interface featureFlagsLogicType extends Logic {
    actionCreators: {
        updateFlag: (flag: FeatureFlagType) => {
            type: 'update flag (scenes.feature-flags.featureFlagsLogic)'
            payload: {
                flag: FeatureFlagType
            }
        }
        deleteFlag: (id: number) => {
            type: 'delete flag (scenes.feature-flags.featureFlagsLogic)'
            payload: {
                id: number
            }
        }
        setSearchTerm: (searchTerm: string) => {
            type: 'set search term (scenes.feature-flags.featureFlagsLogic)'
            payload: {
                searchTerm: string
            }
        }
        setActiveTab: (tabKey: FeatureFlagsTab) => {
            type: 'set active tab (scenes.feature-flags.featureFlagsLogic)'
            payload: {
                tabKey: FeatureFlagsTab
            }
        }
        setFeatureFlagsFilters: (
            filters: Partial<FeatureFlagsFilters>,
            replace?: boolean
        ) => {
            type: 'set feature flags filters (scenes.feature-flags.featureFlagsLogic)'
            payload: {
                filters: Partial<FeatureFlagsFilters>
                replace: boolean | undefined
            }
        }
        loadFeatureFlags: () => {
            type: 'load feature flags (scenes.feature-flags.featureFlagsLogic)'
            payload: any
        }
        loadFeatureFlagsSuccess: (
            featureFlags: FeatureFlagType[],
            payload?: any
        ) => {
            type: 'load feature flags success (scenes.feature-flags.featureFlagsLogic)'
            payload: {
                featureFlags: FeatureFlagType[]
                payload?: any
            }
        }
        loadFeatureFlagsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load feature flags failure (scenes.feature-flags.featureFlagsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateFeatureFlag: ({ id, payload }: { id: number; payload: Partial<FeatureFlagType> }) => {
            type: 'update feature flag (scenes.feature-flags.featureFlagsLogic)'
            payload: {
                id: number
                payload: Partial<FeatureFlagType>
            }
        }
        updateFeatureFlagSuccess: (
            featureFlags: any[],
            payload?: {
                id: number
                payload: Partial<FeatureFlagType>
            }
        ) => {
            type: 'update feature flag success (scenes.feature-flags.featureFlagsLogic)'
            payload: {
                featureFlags: any[]
                payload?: {
                    id: number
                    payload: Partial<FeatureFlagType>
                }
            }
        }
        updateFeatureFlagFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update feature flag failure (scenes.feature-flags.featureFlagsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'update flag (scenes.feature-flags.featureFlagsLogic)': 'updateFlag'
        'delete flag (scenes.feature-flags.featureFlagsLogic)': 'deleteFlag'
        'set search term (scenes.feature-flags.featureFlagsLogic)': 'setSearchTerm'
        'set active tab (scenes.feature-flags.featureFlagsLogic)': 'setActiveTab'
        'set feature flags filters (scenes.feature-flags.featureFlagsLogic)': 'setFeatureFlagsFilters'
        'load feature flags (scenes.feature-flags.featureFlagsLogic)': 'loadFeatureFlags'
        'load feature flags success (scenes.feature-flags.featureFlagsLogic)': 'loadFeatureFlagsSuccess'
        'load feature flags failure (scenes.feature-flags.featureFlagsLogic)': 'loadFeatureFlagsFailure'
        'update feature flag (scenes.feature-flags.featureFlagsLogic)': 'updateFeatureFlag'
        'update feature flag success (scenes.feature-flags.featureFlagsLogic)': 'updateFeatureFlagSuccess'
        'update feature flag failure (scenes.feature-flags.featureFlagsLogic)': 'updateFeatureFlagFailure'
    }
    actionTypes: {
        updateFlag: 'update flag (scenes.feature-flags.featureFlagsLogic)'
        deleteFlag: 'delete flag (scenes.feature-flags.featureFlagsLogic)'
        setSearchTerm: 'set search term (scenes.feature-flags.featureFlagsLogic)'
        setActiveTab: 'set active tab (scenes.feature-flags.featureFlagsLogic)'
        setFeatureFlagsFilters: 'set feature flags filters (scenes.feature-flags.featureFlagsLogic)'
        loadFeatureFlags: 'load feature flags (scenes.feature-flags.featureFlagsLogic)'
        loadFeatureFlagsSuccess: 'load feature flags success (scenes.feature-flags.featureFlagsLogic)'
        loadFeatureFlagsFailure: 'load feature flags failure (scenes.feature-flags.featureFlagsLogic)'
        updateFeatureFlag: 'update feature flag (scenes.feature-flags.featureFlagsLogic)'
        updateFeatureFlagSuccess: 'update feature flag success (scenes.feature-flags.featureFlagsLogic)'
        updateFeatureFlagFailure: 'update feature flag failure (scenes.feature-flags.featureFlagsLogic)'
    }
    actions: {
        updateFlag: (flag: FeatureFlagType) => void
        deleteFlag: (id: number) => void
        setSearchTerm: (searchTerm: string) => void
        setActiveTab: (tabKey: FeatureFlagsTab) => void
        setFeatureFlagsFilters: (filters: Partial<FeatureFlagsFilters>, replace?: boolean) => void
        loadFeatureFlags: () => void
        loadFeatureFlagsSuccess: (featureFlags: FeatureFlagType[], payload?: any) => void
        loadFeatureFlagsFailure: (error: string, errorObject?: any) => void
        updateFeatureFlag: ({ id, payload }: { id: number; payload: Partial<FeatureFlagType> }) => void
        updateFeatureFlagSuccess: (
            featureFlags: any[],
            payload?: {
                id: number
                payload: Partial<FeatureFlagType>
            }
        ) => void
        updateFeatureFlagFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        updateFlag: (flag: FeatureFlagType) => Promise<any>
        deleteFlag: (id: number) => Promise<any>
        setSearchTerm: (searchTerm: string) => Promise<any>
        setActiveTab: (tabKey: FeatureFlagsTab) => Promise<any>
        setFeatureFlagsFilters: (filters: Partial<FeatureFlagsFilters>, replace?: boolean) => Promise<any>
        loadFeatureFlags: () => Promise<any>
        loadFeatureFlagsSuccess: (featureFlags: FeatureFlagType[], payload?: any) => Promise<any>
        loadFeatureFlagsFailure: (error: string, errorObject?: any) => Promise<any>
        updateFeatureFlag: ({ id, payload }: { id: number; payload: Partial<FeatureFlagType> }) => Promise<any>
        updateFeatureFlagSuccess: (
            featureFlags: any[],
            payload?: {
                id: number
                payload: Partial<FeatureFlagType>
            }
        ) => Promise<any>
        updateFeatureFlagFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        featureFlags: FeatureFlagType[]
        featureFlagsLoading: boolean
        searchTerm: any
        activeTab: FeatureFlagsTab
        filters: Partial<FeatureFlagsFilters>
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {
        setFeatureFlagsFilters: ((
            action: {
                type: 'set feature flags filters (scenes.feature-flags.featureFlagsLogic)'
                payload: {
                    filters: Partial<FeatureFlagsFilters>
                    replace: boolean | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'feature-flags', 'featureFlagsLogic']
    pathString: 'scenes.feature-flags.featureFlagsLogic'
    props: FlagLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        featureFlags: FeatureFlagType[]
        featureFlagsLoading: boolean
        searchTerm: any
        activeTab: FeatureFlagsTab
        filters: Partial<FeatureFlagsFilters>
    }
    reducers: {
        featureFlags: (state: FeatureFlagType[], action: any, fullState: any) => FeatureFlagType[]
        featureFlagsLoading: (state: boolean, action: any, fullState: any) => boolean
        searchTerm: (state: any, action: any, fullState: any) => any
        activeTab: (state: FeatureFlagsTab, action: any, fullState: any) => FeatureFlagsTab
        filters: (state: Partial<FeatureFlagsFilters>, action: any, fullState: any) => Partial<FeatureFlagsFilters>
    }
    selector: (state: any) => {
        featureFlags: FeatureFlagType[]
        featureFlagsLoading: boolean
        searchTerm: any
        activeTab: FeatureFlagsTab
        filters: Partial<FeatureFlagsFilters>
    }
    selectors: {
        featureFlags: (state: any, props?: any) => FeatureFlagType[]
        featureFlagsLoading: (state: any, props?: any) => boolean
        searchTerm: (state: any, props?: any) => any
        activeTab: (state: any, props?: any) => FeatureFlagsTab
        filters: (state: any, props?: any) => Partial<FeatureFlagsFilters>
        currentTeamId: (state: any, props?: any) => number | null
        searchedFeatureFlags: (state: any, props?: any) => FeatureFlagType[]
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
        uniqueCreators: (state: any, props?: any) => LemonSelectOption<string>[]
        shouldShowEmptyState: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        featureFlags: FeatureFlagType[]
        featureFlagsLoading: boolean
        searchTerm: any
        activeTab: FeatureFlagsTab
        filters: Partial<FeatureFlagsFilters>
        currentTeamId: number | null
        searchedFeatureFlags: FeatureFlagType[]
        breadcrumbs: Breadcrumb[]
        uniqueCreators: LemonSelectOption<string>[]
        shouldShowEmptyState: boolean
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        searchedFeatureFlags: (
            featureFlags: FeatureFlagType[],
            searchTerm: any,
            filters: Partial<FeatureFlagsFilters>,
            arg: any
        ) => FeatureFlagType[]
        uniqueCreators: (featureFlags: FeatureFlagType[]) => LemonSelectOption<string>[]
        shouldShowEmptyState: (
            featureFlagsLoading: boolean,
            searchedFeatureFlags: FeatureFlagType[],
            searchTerm: any
        ) => boolean
    }
}
