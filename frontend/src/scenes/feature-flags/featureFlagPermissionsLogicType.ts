// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:23 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FeatureFlagPermissionsLogicProps } from './featureFlagPermissionsLogic'
import type { FeatureFlagAssociatedRoleType, RoleType } from '../../types'

export interface featureFlagPermissionsLogicType extends Logic {
    actionCreators: {
        setModalOpen: (visible: boolean) => {
            type: 'set modal open (scenes.feature-flags.featureFlagPermissionsLogic)'
            payload: {
                visible: boolean
            }
        }
        setRolesToAdd: (roleIds: string[]) => {
            type: 'set roles to add (scenes.feature-flags.featureFlagPermissionsLogic)'
            payload: {
                roleIds: string[]
            }
        }
        loadPossibleRolesToAdd: () => {
            type: 'load possible roles to add (scenes.feature-flags.featureFlagPermissionsLogic)'
            payload: any
        }
        loadPossibleRolesToAddSuccess: (
            unfilteredAddableRoles: RoleType[],
            payload?: any
        ) => {
            type: 'load possible roles to add success (scenes.feature-flags.featureFlagPermissionsLogic)'
            payload: {
                unfilteredAddableRoles: RoleType[]
                payload?: any
            }
        }
        loadPossibleRolesToAddFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load possible roles to add failure (scenes.feature-flags.featureFlagPermissionsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadAssociatedRoles: () => {
            type: 'load associated roles (scenes.feature-flags.featureFlagPermissionsLogic)'
            payload: any
        }
        loadAssociatedRolesSuccess: (
            associatedRoles: FeatureFlagAssociatedRoleType[],
            payload?: any
        ) => {
            type: 'load associated roles success (scenes.feature-flags.featureFlagPermissionsLogic)'
            payload: {
                associatedRoles: FeatureFlagAssociatedRoleType[]
                payload?: any
            }
        }
        loadAssociatedRolesFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load associated roles failure (scenes.feature-flags.featureFlagPermissionsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        addAssociatedRoles: (flagId?: number) => {
            type: 'add associated roles (scenes.feature-flags.featureFlagPermissionsLogic)'
            payload: number
        }
        addAssociatedRolesSuccess: (
            associatedRoles: FeatureFlagAssociatedRoleType[],
            payload?: number
        ) => {
            type: 'add associated roles success (scenes.feature-flags.featureFlagPermissionsLogic)'
            payload: {
                associatedRoles: FeatureFlagAssociatedRoleType[]
                payload?: number
            }
        }
        addAssociatedRolesFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'add associated roles failure (scenes.feature-flags.featureFlagPermissionsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deleteAssociatedRole: ({ roleId }: any) => {
            type: 'delete associated role (scenes.feature-flags.featureFlagPermissionsLogic)'
            payload: any
        }
        deleteAssociatedRoleSuccess: (
            associatedRoles: FeatureFlagAssociatedRoleType[],
            payload?: any
        ) => {
            type: 'delete associated role success (scenes.feature-flags.featureFlagPermissionsLogic)'
            payload: {
                associatedRoles: FeatureFlagAssociatedRoleType[]
                payload?: any
            }
        }
        deleteAssociatedRoleFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete associated role failure (scenes.feature-flags.featureFlagPermissionsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set modal open (scenes.feature-flags.featureFlagPermissionsLogic)': 'setModalOpen'
        'set roles to add (scenes.feature-flags.featureFlagPermissionsLogic)': 'setRolesToAdd'
        'load possible roles to add (scenes.feature-flags.featureFlagPermissionsLogic)': 'loadPossibleRolesToAdd'
        'load possible roles to add success (scenes.feature-flags.featureFlagPermissionsLogic)': 'loadPossibleRolesToAddSuccess'
        'load possible roles to add failure (scenes.feature-flags.featureFlagPermissionsLogic)': 'loadPossibleRolesToAddFailure'
        'load associated roles (scenes.feature-flags.featureFlagPermissionsLogic)': 'loadAssociatedRoles'
        'load associated roles success (scenes.feature-flags.featureFlagPermissionsLogic)': 'loadAssociatedRolesSuccess'
        'load associated roles failure (scenes.feature-flags.featureFlagPermissionsLogic)': 'loadAssociatedRolesFailure'
        'add associated roles (scenes.feature-flags.featureFlagPermissionsLogic)': 'addAssociatedRoles'
        'add associated roles success (scenes.feature-flags.featureFlagPermissionsLogic)': 'addAssociatedRolesSuccess'
        'add associated roles failure (scenes.feature-flags.featureFlagPermissionsLogic)': 'addAssociatedRolesFailure'
        'delete associated role (scenes.feature-flags.featureFlagPermissionsLogic)': 'deleteAssociatedRole'
        'delete associated role success (scenes.feature-flags.featureFlagPermissionsLogic)': 'deleteAssociatedRoleSuccess'
        'delete associated role failure (scenes.feature-flags.featureFlagPermissionsLogic)': 'deleteAssociatedRoleFailure'
    }
    actionTypes: {
        setModalOpen: 'set modal open (scenes.feature-flags.featureFlagPermissionsLogic)'
        setRolesToAdd: 'set roles to add (scenes.feature-flags.featureFlagPermissionsLogic)'
        loadPossibleRolesToAdd: 'load possible roles to add (scenes.feature-flags.featureFlagPermissionsLogic)'
        loadPossibleRolesToAddSuccess: 'load possible roles to add success (scenes.feature-flags.featureFlagPermissionsLogic)'
        loadPossibleRolesToAddFailure: 'load possible roles to add failure (scenes.feature-flags.featureFlagPermissionsLogic)'
        loadAssociatedRoles: 'load associated roles (scenes.feature-flags.featureFlagPermissionsLogic)'
        loadAssociatedRolesSuccess: 'load associated roles success (scenes.feature-flags.featureFlagPermissionsLogic)'
        loadAssociatedRolesFailure: 'load associated roles failure (scenes.feature-flags.featureFlagPermissionsLogic)'
        addAssociatedRoles: 'add associated roles (scenes.feature-flags.featureFlagPermissionsLogic)'
        addAssociatedRolesSuccess: 'add associated roles success (scenes.feature-flags.featureFlagPermissionsLogic)'
        addAssociatedRolesFailure: 'add associated roles failure (scenes.feature-flags.featureFlagPermissionsLogic)'
        deleteAssociatedRole: 'delete associated role (scenes.feature-flags.featureFlagPermissionsLogic)'
        deleteAssociatedRoleSuccess: 'delete associated role success (scenes.feature-flags.featureFlagPermissionsLogic)'
        deleteAssociatedRoleFailure: 'delete associated role failure (scenes.feature-flags.featureFlagPermissionsLogic)'
    }
    actions: {
        setModalOpen: (visible: boolean) => void
        setRolesToAdd: (roleIds: string[]) => void
        loadPossibleRolesToAdd: () => void
        loadPossibleRolesToAddSuccess: (unfilteredAddableRoles: RoleType[], payload?: any) => void
        loadPossibleRolesToAddFailure: (error: string, errorObject?: any) => void
        loadAssociatedRoles: () => void
        loadAssociatedRolesSuccess: (associatedRoles: FeatureFlagAssociatedRoleType[], payload?: any) => void
        loadAssociatedRolesFailure: (error: string, errorObject?: any) => void
        addAssociatedRoles: (flagId?: number) => void
        addAssociatedRolesSuccess: (associatedRoles: FeatureFlagAssociatedRoleType[], payload?: number) => void
        addAssociatedRolesFailure: (error: string, errorObject?: any) => void
        deleteAssociatedRole: ({ roleId }: any) => void
        deleteAssociatedRoleSuccess: (associatedRoles: FeatureFlagAssociatedRoleType[], payload?: any) => void
        deleteAssociatedRoleFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setModalOpen: (visible: boolean) => Promise<any>
        setRolesToAdd: (roleIds: string[]) => Promise<any>
        loadPossibleRolesToAdd: () => Promise<any>
        loadPossibleRolesToAddSuccess: (unfilteredAddableRoles: RoleType[], payload?: any) => Promise<any>
        loadPossibleRolesToAddFailure: (error: string, errorObject?: any) => Promise<any>
        loadAssociatedRoles: () => Promise<any>
        loadAssociatedRolesSuccess: (associatedRoles: FeatureFlagAssociatedRoleType[], payload?: any) => Promise<any>
        loadAssociatedRolesFailure: (error: string, errorObject?: any) => Promise<any>
        addAssociatedRoles: (flagId?: number) => Promise<any>
        addAssociatedRolesSuccess: (associatedRoles: FeatureFlagAssociatedRoleType[], payload?: number) => Promise<any>
        addAssociatedRolesFailure: (error: string, errorObject?: any) => Promise<any>
        deleteAssociatedRole: ({ roleId }: any) => Promise<any>
        deleteAssociatedRoleSuccess: (associatedRoles: FeatureFlagAssociatedRoleType[], payload?: any) => Promise<any>
        deleteAssociatedRoleFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        permissionModalVisible: boolean
        rolesToAdd: string[]
        unfilteredAddableRoles: RoleType[]
        unfilteredAddableRolesLoading: boolean
        associatedRoles: FeatureFlagAssociatedRoleType[]
        associatedRolesLoading: boolean
    }
    events: {}
    key: string
    listeners: {}
    path: ['scenes', 'feature-flags', 'featureFlagPermissionsLogic']
    pathString: 'scenes.feature-flags.featureFlagPermissionsLogic'
    props: FeatureFlagPermissionsLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        permissionModalVisible: boolean
        rolesToAdd: string[]
        unfilteredAddableRoles: RoleType[]
        unfilteredAddableRolesLoading: boolean
        associatedRoles: FeatureFlagAssociatedRoleType[]
        associatedRolesLoading: boolean
    }
    reducers: {
        permissionModalVisible: (state: boolean, action: any, fullState: any) => boolean
        rolesToAdd: (state: string[], action: any, fullState: any) => string[]
        unfilteredAddableRoles: (state: RoleType[], action: any, fullState: any) => RoleType[]
        unfilteredAddableRolesLoading: (state: boolean, action: any, fullState: any) => boolean
        associatedRoles: (
            state: FeatureFlagAssociatedRoleType[],
            action: any,
            fullState: any
        ) => FeatureFlagAssociatedRoleType[]
        associatedRolesLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        permissionModalVisible: boolean
        rolesToAdd: string[]
        unfilteredAddableRoles: RoleType[]
        unfilteredAddableRolesLoading: boolean
        associatedRoles: FeatureFlagAssociatedRoleType[]
        associatedRolesLoading: boolean
    }
    selectors: {
        permissionModalVisible: (state: any, props?: any) => boolean
        rolesToAdd: (state: any, props?: any) => string[]
        unfilteredAddableRoles: (state: any, props?: any) => RoleType[]
        unfilteredAddableRolesLoading: (state: any, props?: any) => boolean
        associatedRoles: (state: any, props?: any) => FeatureFlagAssociatedRoleType[]
        associatedRolesLoading: (state: any, props?: any) => boolean
        roles: (state: any, props?: any) => RoleType[]
        derivedRoles: (state: any, props?: any) => RoleType[]
        addableRoles: (state: any, props?: any) => RoleType[]
    }
    sharedListeners: {}
    values: {
        permissionModalVisible: boolean
        rolesToAdd: string[]
        unfilteredAddableRoles: RoleType[]
        unfilteredAddableRolesLoading: boolean
        associatedRoles: FeatureFlagAssociatedRoleType[]
        associatedRolesLoading: boolean
        roles: RoleType[]
        derivedRoles: RoleType[]
        addableRoles: RoleType[]
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        derivedRoles: (associatedRoles: FeatureFlagAssociatedRoleType[]) => RoleType[]
        addableRoles: (
            unfilteredAddableRoles: RoleType[],
            associatedRoles: FeatureFlagAssociatedRoleType[]
        ) => RoleType[]
    }
}
