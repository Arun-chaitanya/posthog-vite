// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:58 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FeatureFlagType } from '../../types'
import type { RelatedFeatureFlag, RelatedFeatureFlagResponse, RelatedFlagsFilters } from './relatedFeatureFlagsLogic'

export interface relatedFeatureFlagsLogicType extends Logic {
    actionCreators: {
        setSearchTerm: (searchTerm: string) => {
            type: 'set search term (scenes.persons.relatedFeatureFlagsLogic)'
            payload: {
                searchTerm: string
            }
        }
        setFilters: (
            filters: Partial<RelatedFlagsFilters>,
            replace?: boolean
        ) => {
            type: 'set filters (scenes.persons.relatedFeatureFlagsLogic)'
            payload: {
                filters: Partial<RelatedFlagsFilters>
                replace: boolean | undefined
            }
        }
        loadRelatedFeatureFlags: () => {
            type: 'load related feature flags (scenes.persons.relatedFeatureFlagsLogic)'
            payload: {
                value: true
            }
        }
        loadRelatedFeatureFlagsSuccess: (
            relatedFeatureFlags: RelatedFeatureFlagResponse | null,
            payload?: {
                value: true
            }
        ) => {
            type: 'load related feature flags success (scenes.persons.relatedFeatureFlagsLogic)'
            payload: {
                relatedFeatureFlags: RelatedFeatureFlagResponse | null
                payload?: {
                    value: true
                }
            }
        }
        loadRelatedFeatureFlagsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load related feature flags failure (scenes.persons.relatedFeatureFlagsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set search term (scenes.persons.relatedFeatureFlagsLogic)': 'setSearchTerm'
        'set filters (scenes.persons.relatedFeatureFlagsLogic)': 'setFilters'
        'load related feature flags (scenes.persons.relatedFeatureFlagsLogic)': 'loadRelatedFeatureFlags'
        'load related feature flags success (scenes.persons.relatedFeatureFlagsLogic)': 'loadRelatedFeatureFlagsSuccess'
        'load related feature flags failure (scenes.persons.relatedFeatureFlagsLogic)': 'loadRelatedFeatureFlagsFailure'
    }
    actionTypes: {
        setSearchTerm: 'set search term (scenes.persons.relatedFeatureFlagsLogic)'
        setFilters: 'set filters (scenes.persons.relatedFeatureFlagsLogic)'
        loadRelatedFeatureFlags: 'load related feature flags (scenes.persons.relatedFeatureFlagsLogic)'
        loadRelatedFeatureFlagsSuccess: 'load related feature flags success (scenes.persons.relatedFeatureFlagsLogic)'
        loadRelatedFeatureFlagsFailure: 'load related feature flags failure (scenes.persons.relatedFeatureFlagsLogic)'
    }
    actions: {
        setSearchTerm: (searchTerm: string) => void
        setFilters: (filters: Partial<RelatedFlagsFilters>, replace?: boolean) => void
        loadRelatedFeatureFlags: () => void
        loadRelatedFeatureFlagsSuccess: (
            relatedFeatureFlags: RelatedFeatureFlagResponse | null,
            payload?: {
                value: true
            }
        ) => void
        loadRelatedFeatureFlagsFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setSearchTerm: (searchTerm: string) => Promise<any>
        setFilters: (filters: Partial<RelatedFlagsFilters>, replace?: boolean) => Promise<any>
        loadRelatedFeatureFlags: () => Promise<any>
        loadRelatedFeatureFlagsSuccess: (
            relatedFeatureFlags: RelatedFeatureFlagResponse | null,
            payload?: {
                value: true
            }
        ) => Promise<any>
        loadRelatedFeatureFlagsFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        relatedFeatureFlags: RelatedFeatureFlagResponse | null
        relatedFeatureFlagsLoading: boolean
        searchTerm: string
        filters: Partial<RelatedFlagsFilters>
    }
    events: {
        afterMount: () => void
    }
    key: string
    listeners: {}
    path: ['scenes', 'persons', 'relatedFeatureFlagsLogic']
    pathString: 'scenes.persons.relatedFeatureFlagsLogic'
    props: {
        distinctId: string
        groups?: {
            [key: string]: string
        }
    }
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        relatedFeatureFlags: RelatedFeatureFlagResponse | null
        relatedFeatureFlagsLoading: boolean
        searchTerm: string
        filters: Partial<RelatedFlagsFilters>
    }
    reducers: {
        relatedFeatureFlags: (
            state: RelatedFeatureFlagResponse | null,
            action: any,
            fullState: any
        ) => RelatedFeatureFlagResponse | null
        relatedFeatureFlagsLoading: (state: boolean, action: any, fullState: any) => boolean
        searchTerm: (state: string, action: any, fullState: any) => string
        filters: (state: Partial<RelatedFlagsFilters>, action: any, fullState: any) => Partial<RelatedFlagsFilters>
    }
    selector: (state: any) => {
        relatedFeatureFlags: RelatedFeatureFlagResponse | null
        relatedFeatureFlagsLoading: boolean
        searchTerm: string
        filters: Partial<RelatedFlagsFilters>
    }
    selectors: {
        relatedFeatureFlags: (state: any, props?: any) => RelatedFeatureFlagResponse | null
        relatedFeatureFlagsLoading: (state: any, props?: any) => boolean
        searchTerm: (state: any, props?: any) => string
        filters: (state: any, props?: any) => Partial<RelatedFlagsFilters>
        currentTeamId: (state: any, props?: any) => number | null
        featureFlags: (state: any, props?: any) => FeatureFlagType[]
        mappedRelatedFeatureFlags: (state: any, props?: any) => RelatedFeatureFlag[]
        filteredMappedFlags: (state: any, props?: any) => RelatedFeatureFlag[]
    }
    sharedListeners: {}
    values: {
        relatedFeatureFlags: RelatedFeatureFlagResponse | null
        relatedFeatureFlagsLoading: boolean
        searchTerm: string
        filters: Partial<RelatedFlagsFilters>
        currentTeamId: number | null
        featureFlags: FeatureFlagType[]
        mappedRelatedFeatureFlags: RelatedFeatureFlag[]
        filteredMappedFlags: RelatedFeatureFlag[]
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        mappedRelatedFeatureFlags: (
            relatedFeatureFlags: RelatedFeatureFlagResponse | null,
            featureFlags: FeatureFlagType[]
        ) => RelatedFeatureFlag[]
        filteredMappedFlags: (
            mappedRelatedFeatureFlags: RelatedFeatureFlag[],
            searchTerm: string,
            filters: Partial<RelatedFlagsFilters>
        ) => RelatedFeatureFlag[]
    }
}
