// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:26 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PersonLogicProps } from './personLogic'
import type { PersonType } from '../../types'

export interface personLogicType extends Logic {
    actionCreators: {
        loadPerson: () => {
            type: 'load person (scenes.persons.personLogic.*)'
            payload: {
                value: true
            }
        }
        loadPersonSuccess: (
            person: PersonType | null,
            payload?: {
                value: true
            }
        ) => {
            type: 'load person success (scenes.persons.personLogic.*)'
            payload: {
                person: PersonType | null
                payload?: {
                    value: true
                }
            }
        }
        loadPersonFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load person failure (scenes.persons.personLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load person (scenes.persons.personLogic.*)': 'loadPerson'
        'load person success (scenes.persons.personLogic.*)': 'loadPersonSuccess'
        'load person failure (scenes.persons.personLogic.*)': 'loadPersonFailure'
    }
    actionTypes: {
        loadPerson: 'load person (scenes.persons.personLogic.*)'
        loadPersonSuccess: 'load person success (scenes.persons.personLogic.*)'
        loadPersonFailure: 'load person failure (scenes.persons.personLogic.*)'
    }
    actions: {
        loadPerson: () => void
        loadPersonSuccess: (
            person: PersonType | null,
            payload?: {
                value: true
            }
        ) => void
        loadPersonFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadPerson: () => Promise<any>
        loadPersonSuccess: (
            person: PersonType | null,
            payload?: {
                value: true
            }
        ) => Promise<any>
        loadPersonFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        person: PersonType | null
        personLoading: boolean
    }
    events: {}
    key: string
    listeners: {}
    path: ['scenes', 'persons', 'personLogic', '*']
    pathString: 'scenes.persons.personLogic.*'
    props: PersonLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        person: PersonType | null
        personLoading: boolean
    }
    reducers: {
        person: (state: PersonType | null, action: any, fullState: any) => PersonType | null
        personLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        person: PersonType | null
        personLoading: boolean
    }
    selectors: {
        person: (state: any, props?: any) => PersonType | null
        personLoading: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        person: PersonType | null
        personLoading: boolean
    }
    _isKea: true
    _isKeaWithKey: true
}
