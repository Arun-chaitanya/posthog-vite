// Generated by kea-typegen on Thu, 20 Jul 2023 11:18:05 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PersonsLogicProps } from './personsLogic'
import type { AnyPropertyFilter, Breadcrumb, CohortType, PersonListParams, PersonType, PersonsTabType, TeamPublicType, TeamType } from '../../types'
import type { FeatureFlagsSet } from '../../lib/logic/featureFlagLogic'
import type { TriggerExportProps } from '../../lib/components/ExportButton/exporter'
import type { CountedPaginatedResponse } from '../../lib/api'

export interface personsLogicType extends Logic {
    actionCreators: {
        reportPersonDetailViewed: (person: PersonType) => {
            type: 'report person detail viewed (scenes.persons.personsLogic.*)'
            payload: {
                person: PersonType
            }
        }
        setPerson: (person: PersonType | null) => {
            type: 'set person (scenes.persons.personsLogic.*)'
            payload: {
                person: PersonType | null
            }
        }
        setPersons: (persons: PersonType[]) => {
            type: 'set persons (scenes.persons.personsLogic.*)'
            payload: {
                persons: PersonType[]
            }
        }
        loadPerson: (id: string) => {
            type: 'load person (scenes.persons.personsLogic.*)'
            payload: {
                id: string
            }
        }
        loadPersons: (url?: string | null) => {
            type: 'load persons (scenes.persons.personsLogic.*)'
            payload: {
                url: string | null
            }
        }
        setListFilters: (payload: PersonListParams) => {
            type: 'set list filters (scenes.persons.personsLogic.*)'
            payload: {
                payload: PersonListParams
            }
        }
        setHiddenListProperties: (payload: AnyPropertyFilter[]) => {
            type: 'set hidden list properties (scenes.persons.personsLogic.*)'
            payload: {
                payload: AnyPropertyFilter[]
            }
        }
        editProperty: (
            key: string,
            newValue?: string | number | boolean | null
        ) => {
            type: 'edit property (scenes.persons.personsLogic.*)'
            payload: {
                key: string
                newValue: string | number | boolean | null | undefined
            }
        }
        deleteProperty: (key: string) => {
            type: 'delete property (scenes.persons.personsLogic.*)'
            payload: {
                key: string
            }
        }
        navigateToCohort: (cohort: CohortType) => {
            type: 'navigate to cohort (scenes.persons.personsLogic.*)'
            payload: {
                cohort: CohortType
            }
        }
        navigateToTab: (tab: PersonsTabType) => {
            type: 'navigate to tab (scenes.persons.personsLogic.*)'
            payload: {
                tab: PersonsTabType
            }
        }
        setActiveTab: (tab: PersonsTabType) => {
            type: 'set active tab (scenes.persons.personsLogic.*)'
            payload: {
                tab: PersonsTabType
            }
        }
        setSplitMergeModalShown: (shown: boolean) => {
            type: 'set split merge modal shown (scenes.persons.personsLogic.*)'
            payload: {
                shown: boolean
            }
        }
        setDistinctId: (distinctId: string) => {
            type: 'set distinct id (scenes.persons.personsLogic.*)'
            payload: {
                distinctId: string
            }
        }
        loadPersonsSuccess: (
            persons: CountedPaginatedResponse<PersonType> & { offset: number },
            payload?: {
                url: string | null
            }
        ) => {
            type: 'load persons success (scenes.persons.personsLogic.*)'
            payload: {
                persons: CountedPaginatedResponse<PersonType> & { offset: number }
                payload?: {
                    url: string | null
                }
            }
        }
        loadPersonsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load persons failure (scenes.persons.personsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadPersonSuccess: (
            person: PersonType | null,
            payload?: {
                id: string
            }
        ) => {
            type: 'load person success (scenes.persons.personsLogic.*)'
            payload: {
                person: PersonType | null
                payload?: {
                    id: string
                }
            }
        }
        loadPersonFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load person failure (scenes.persons.personsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadCohorts: () => {
            type: 'load cohorts (scenes.persons.personsLogic.*)'
            payload: any
        }
        loadCohortsSuccess: (
            cohorts: CohortType[] | null,
            payload?: any
        ) => {
            type: 'load cohorts success (scenes.persons.personsLogic.*)'
            payload: {
                cohorts: CohortType[] | null
                payload?: any
            }
        }
        loadCohortsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load cohorts failure (scenes.persons.personsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'report person detail viewed (scenes.persons.personsLogic.*)': 'reportPersonDetailViewed'
        'set person (scenes.persons.personsLogic.*)': 'setPerson'
        'set persons (scenes.persons.personsLogic.*)': 'setPersons'
        'load person (scenes.persons.personsLogic.*)': 'loadPerson'
        'load persons (scenes.persons.personsLogic.*)': 'loadPersons'
        'set list filters (scenes.persons.personsLogic.*)': 'setListFilters'
        'set hidden list properties (scenes.persons.personsLogic.*)': 'setHiddenListProperties'
        'edit property (scenes.persons.personsLogic.*)': 'editProperty'
        'delete property (scenes.persons.personsLogic.*)': 'deleteProperty'
        'navigate to cohort (scenes.persons.personsLogic.*)': 'navigateToCohort'
        'navigate to tab (scenes.persons.personsLogic.*)': 'navigateToTab'
        'set active tab (scenes.persons.personsLogic.*)': 'setActiveTab'
        'set split merge modal shown (scenes.persons.personsLogic.*)': 'setSplitMergeModalShown'
        'set distinct id (scenes.persons.personsLogic.*)': 'setDistinctId'
        'load persons success (scenes.persons.personsLogic.*)': 'loadPersonsSuccess'
        'load persons failure (scenes.persons.personsLogic.*)': 'loadPersonsFailure'
        'load person success (scenes.persons.personsLogic.*)': 'loadPersonSuccess'
        'load person failure (scenes.persons.personsLogic.*)': 'loadPersonFailure'
        'load cohorts (scenes.persons.personsLogic.*)': 'loadCohorts'
        'load cohorts success (scenes.persons.personsLogic.*)': 'loadCohortsSuccess'
        'load cohorts failure (scenes.persons.personsLogic.*)': 'loadCohortsFailure'
    }
    actionTypes: {
        reportPersonDetailViewed: 'report person detail viewed (scenes.persons.personsLogic.*)'
        setPerson: 'set person (scenes.persons.personsLogic.*)'
        setPersons: 'set persons (scenes.persons.personsLogic.*)'
        loadPerson: 'load person (scenes.persons.personsLogic.*)'
        loadPersons: 'load persons (scenes.persons.personsLogic.*)'
        setListFilters: 'set list filters (scenes.persons.personsLogic.*)'
        setHiddenListProperties: 'set hidden list properties (scenes.persons.personsLogic.*)'
        editProperty: 'edit property (scenes.persons.personsLogic.*)'
        deleteProperty: 'delete property (scenes.persons.personsLogic.*)'
        navigateToCohort: 'navigate to cohort (scenes.persons.personsLogic.*)'
        navigateToTab: 'navigate to tab (scenes.persons.personsLogic.*)'
        setActiveTab: 'set active tab (scenes.persons.personsLogic.*)'
        setSplitMergeModalShown: 'set split merge modal shown (scenes.persons.personsLogic.*)'
        setDistinctId: 'set distinct id (scenes.persons.personsLogic.*)'
        loadPersonsSuccess: 'load persons success (scenes.persons.personsLogic.*)'
        loadPersonsFailure: 'load persons failure (scenes.persons.personsLogic.*)'
        loadPersonSuccess: 'load person success (scenes.persons.personsLogic.*)'
        loadPersonFailure: 'load person failure (scenes.persons.personsLogic.*)'
        loadCohorts: 'load cohorts (scenes.persons.personsLogic.*)'
        loadCohortsSuccess: 'load cohorts success (scenes.persons.personsLogic.*)'
        loadCohortsFailure: 'load cohorts failure (scenes.persons.personsLogic.*)'
    }
    actions: {
        reportPersonDetailViewed: (person: PersonType) => void
        setPerson: (person: PersonType | null) => void
        setPersons: (persons: PersonType[]) => void
        loadPerson: (id: string) => void
        loadPersons: (url?: string | null) => void
        setListFilters: (payload: PersonListParams) => void
        setHiddenListProperties: (payload: AnyPropertyFilter[]) => void
        editProperty: (key: string, newValue?: string | number | boolean | null) => void
        deleteProperty: (key: string) => void
        navigateToCohort: (cohort: CohortType) => void
        navigateToTab: (tab: PersonsTabType) => void
        setActiveTab: (tab: PersonsTabType) => void
        setSplitMergeModalShown: (shown: boolean) => void
        setDistinctId: (distinctId: string) => void
        loadPersonsSuccess: (
            persons: CountedPaginatedResponse<PersonType> & { offset: number },
            payload?: {
                url: string | null
            }
        ) => void
        loadPersonsFailure: (error: string, errorObject?: any) => void
        loadPersonSuccess: (
            person: PersonType | null,
            payload?: {
                id: string
            }
        ) => void
        loadPersonFailure: (error: string, errorObject?: any) => void
        loadCohorts: () => void
        loadCohortsSuccess: (cohorts: CohortType[] | null, payload?: any) => void
        loadCohortsFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        reportPersonDetailViewed: (person: PersonType) => Promise<any>
        setPerson: (person: PersonType | null) => Promise<any>
        setPersons: (persons: PersonType[]) => Promise<any>
        loadPerson: (id: string) => Promise<any>
        loadPersons: (url?: string | null) => Promise<any>
        setListFilters: (payload: PersonListParams) => Promise<any>
        setHiddenListProperties: (payload: AnyPropertyFilter[]) => Promise<any>
        editProperty: (key: string, newValue?: string | number | boolean | null) => Promise<any>
        deleteProperty: (key: string) => Promise<any>
        navigateToCohort: (cohort: CohortType) => Promise<any>
        navigateToTab: (tab: PersonsTabType) => Promise<any>
        setActiveTab: (tab: PersonsTabType) => Promise<any>
        setSplitMergeModalShown: (shown: boolean) => Promise<any>
        setDistinctId: (distinctId: string) => Promise<any>
        loadPersonsSuccess: (
            persons: CountedPaginatedResponse<PersonType> & { offset: number },
            payload?: {
                url: string | null
            }
        ) => Promise<any>
        loadPersonsFailure: (error: string, errorObject?: any) => Promise<any>
        loadPersonSuccess: (
            person: PersonType | null,
            payload?: {
                id: string
            }
        ) => Promise<any>
        loadPersonFailure: (error: string, errorObject?: any) => Promise<any>
        loadCohorts: () => Promise<any>
        loadCohortsSuccess: (cohorts: CohortType[] | null, payload?: any) => Promise<any>
        loadCohortsFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        listFilters: PersonListParams
        hiddenListProperties: AnyPropertyFilter[]
        activeTab: PersonsTabType | null
        splitMergeModalShown: boolean
        persons: CountedPaginatedResponse<PersonType> & {
            offset: number
        }
        person: PersonType | null
        distinctId: string | null
        personsLoading: boolean
        personLoading: boolean
        cohorts: CohortType[] | null
        cohortsLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: string
    listeners: {
        editProperty: ((
            action: {
                type: 'edit property (scenes.persons.personsLogic.*)'
                payload: {
                    key: string
                    newValue: string | number | boolean | null | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        deleteProperty: ((
            action: {
                type: 'delete property (scenes.persons.personsLogic.*)'
                payload: {
                    key: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        navigateToCohort: ((
            action: {
                type: 'navigate to cohort (scenes.persons.personsLogic.*)'
                payload: {
                    cohort: CohortType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'persons', 'personsLogic', '*']
    pathString: 'scenes.persons.personsLogic.*'
    props: PersonsLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        listFilters: PersonListParams
        hiddenListProperties: AnyPropertyFilter[]
        activeTab: PersonsTabType | null
        splitMergeModalShown: boolean
        persons: CountedPaginatedResponse<PersonType> & {
            offset: number
        }
        person: PersonType | null
        distinctId: string | null
        personsLoading: boolean
        personLoading: boolean
        cohorts: CohortType[] | null
        cohortsLoading: boolean
    }
    reducers: {
        listFilters: (state: PersonListParams, action: any, fullState: any) => PersonListParams
        hiddenListProperties: (state: AnyPropertyFilter[], action: any, fullState: any) => AnyPropertyFilter[]
        activeTab: (state: PersonsTabType | null, action: any, fullState: any) => PersonsTabType | null
        splitMergeModalShown: (state: boolean, action: any, fullState: any) => boolean
        persons: (
            state: CountedPaginatedResponse<PersonType> & {
                offset: number
            },
            action: any,
            fullState: any
        ) => CountedPaginatedResponse<PersonType> & {
            offset: number
        }
        person: (state: PersonType | null, action: any, fullState: any) => PersonType | null
        distinctId: (state: string | null, action: any, fullState: any) => string | null
        personsLoading: (state: boolean, action: any, fullState: any) => boolean
        personLoading: (state: boolean, action: any, fullState: any) => boolean
        cohorts: (state: CohortType[] | null, action: any, fullState: any) => CohortType[] | null
        cohortsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        listFilters: PersonListParams
        hiddenListProperties: AnyPropertyFilter[]
        activeTab: PersonsTabType | null
        splitMergeModalShown: boolean
        persons: CountedPaginatedResponse<PersonType> & {
            offset: number
        }
        person: PersonType | null
        distinctId: string | null
        personsLoading: boolean
        personLoading: boolean
        cohorts: CohortType[] | null
        cohortsLoading: boolean
    }
    selectors: {
        listFilters: (state: any, props?: any) => PersonListParams
        hiddenListProperties: (state: any, props?: any) => AnyPropertyFilter[]
        activeTab: (state: any, props?: any) => PersonsTabType | null
        splitMergeModalShown: (state: any, props?: any) => boolean
        persons: (
            state: any,
            props?: any
        ) => CountedPaginatedResponse<PersonType> & {
            offset: number
        }
        person: (state: any, props?: any) => PersonType | null
        distinctId: (state: any, props?: any) => string | null
        personsLoading: (state: any, props?: any) => boolean
        personLoading: (state: any, props?: any) => boolean
        cohorts: (state: any, props?: any) => CohortType[] | null
        cohortsLoading: (state: any, props?: any) => boolean
        currentTeam: (state: any, props?: any) => TeamType | TeamPublicType | null
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
        apiDocsURL: (
            state: any,
            props?: any
        ) =>
            | 'https://posthog.com/docs/api/cohorts#get-api-projects-project_id-cohorts-id-persons'
            | 'https://posthog.com/docs/api/persons'
        cohortId: (state: any, props?: any) => number | 'new' | undefined
        currentTab: (state: any, props?: any) => PersonsTabType
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
        exporterProps: (state: any, props?: any) => TriggerExportProps[]
        urlId: (state: any, props?: any) => any
    }
    sharedListeners: {}
    values: {
        listFilters: PersonListParams
        hiddenListProperties: AnyPropertyFilter[]
        activeTab: PersonsTabType | null
        splitMergeModalShown: boolean
        persons: CountedPaginatedResponse<PersonType> & {
            offset: number
        }
        person: PersonType | null
        distinctId: string | null
        personsLoading: boolean
        personLoading: boolean
        cohorts: CohortType[] | null
        cohortsLoading: boolean
        currentTeam: TeamType | TeamPublicType | null
        featureFlags: FeatureFlagsSet
        apiDocsURL:
            | 'https://posthog.com/docs/api/cohorts#get-api-projects-project_id-cohorts-id-persons'
            | 'https://posthog.com/docs/api/persons'
        cohortId: number | 'new' | undefined
        currentTab: PersonsTabType
        breadcrumbs: Breadcrumb[]
        exporterProps: TriggerExportProps[]
        urlId: any
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        apiDocsURL: (
            arg: any
        ) =>
            | 'https://posthog.com/docs/api/cohorts#get-api-projects-project_id-cohorts-id-persons'
            | 'https://posthog.com/docs/api/persons'
        cohortId: (arg: any) => number | 'new' | undefined
        currentTab: (activeTab: PersonsTabType | null) => PersonsTabType
        breadcrumbs: (
            person: PersonType | null,
            location: {
                pathname: string
                search: string
                hash: string
            }
        ) => Breadcrumb[]
        exporterProps: (listFilters: PersonListParams, arg: any) => TriggerExportProps[]
        urlId: (arg: any) => any
    }
}
