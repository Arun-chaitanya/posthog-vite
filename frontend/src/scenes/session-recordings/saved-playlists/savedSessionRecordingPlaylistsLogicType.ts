// Generated by kea-typegen on Tue, 08 Aug 2023 10:01:14 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { SavedSessionRecordingPlaylistsFilters, SavedSessionRecordingPlaylistsLogicProps, SavedSessionRecordingPlaylistsResult } from './savedSessionRecordingPlaylistsLogic'
import type { ReplayTabs, SessionRecordingPlaylistType } from '../../../types'
import type { Sorting } from '../../../lib/lemon-ui/LemonTable/index'
import type { PaginationManual } from '../../../lib/lemon-ui/PaginationControl/index'

export interface savedSessionRecordingPlaylistsLogicType extends Logic {
    actionCreators: {
        reportRecordingPlaylistCreated: (source: 'filters' | 'new' | 'pin' | 'duplicate') => {
            type: 'report recording playlist created (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
            payload: {
                source: 'new' | 'filters' | 'pin' | 'duplicate'
            }
        }
        setSavedPlaylistsFilters: (filters: Partial<SavedSessionRecordingPlaylistsFilters>) => {
            type: 'set saved playlists filters (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
            payload: {
                filters: Partial<SavedSessionRecordingPlaylistsFilters>
            }
        }
        loadPlaylists: () => {
            type: 'load playlists (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
            payload: {
                value: true
            }
        }
        updatePlaylist: (
            shortId: SessionRecordingPlaylistType['short_id'],
            properties: Partial<SessionRecordingPlaylistType>
        ) => {
            type: 'update playlist (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
            payload: {
                shortId: string
                properties: Partial<SessionRecordingPlaylistType>
            }
        }
        deletePlaylist: (playlist: SessionRecordingPlaylistType) => {
            type: 'delete playlist (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
            payload: {
                playlist: SessionRecordingPlaylistType
            }
        }
        duplicatePlaylist: (playlist: SessionRecordingPlaylistType) => {
            type: 'duplicate playlist (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
            payload: {
                playlist: SessionRecordingPlaylistType
            }
        }
        loadPlaylistsSuccess: (
            playlists: SavedSessionRecordingPlaylistsResult,
            payload?: {
                value: true
            }
        ) => {
            type: 'load playlists success (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
            payload: {
                playlists: SavedSessionRecordingPlaylistsResult
                payload?: {
                    value: true
                }
            }
        }
        loadPlaylistsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load playlists failure (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updatePlaylistSuccess: (
            playlists: {
                results: SessionRecordingPlaylistType[]
                count: number
                filters?: SavedSessionRecordingPlaylistsFilters | null | undefined
                next?: string | null | undefined
                previous?: string | null | undefined
            },
            payload?: {
                shortId: string
                properties: Partial<SessionRecordingPlaylistType>
            }
        ) => {
            type: 'update playlist success (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
            payload: {
                playlists: {
                    results: SessionRecordingPlaylistType[]
                    count: number
                    filters?: SavedSessionRecordingPlaylistsFilters | null | undefined
                    next?: string | null | undefined
                    previous?: string | null | undefined
                }
                payload?: {
                    shortId: string
                    properties: Partial<SessionRecordingPlaylistType>
                }
            }
        }
        updatePlaylistFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update playlist failure (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deletePlaylistSuccess: (
            playlists: SavedSessionRecordingPlaylistsResult,
            payload?: {
                playlist: SessionRecordingPlaylistType
            }
        ) => {
            type: 'delete playlist success (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
            payload: {
                playlists: SavedSessionRecordingPlaylistsResult
                payload?: {
                    playlist: SessionRecordingPlaylistType
                }
            }
        }
        deletePlaylistFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete playlist failure (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        duplicatePlaylistSuccess: (
            playlists: SavedSessionRecordingPlaylistsResult,
            payload?: {
                playlist: SessionRecordingPlaylistType
            }
        ) => {
            type: 'duplicate playlist success (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
            payload: {
                playlists: SavedSessionRecordingPlaylistsResult
                payload?: {
                    playlist: SessionRecordingPlaylistType
                }
            }
        }
        duplicatePlaylistFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'duplicate playlist failure (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'report recording playlist created (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)': 'reportRecordingPlaylistCreated'
        'set saved playlists filters (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)': 'setSavedPlaylistsFilters'
        'load playlists (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)': 'loadPlaylists'
        'update playlist (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)': 'updatePlaylist'
        'delete playlist (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)': 'deletePlaylist'
        'duplicate playlist (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)': 'duplicatePlaylist'
        'load playlists success (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)': 'loadPlaylistsSuccess'
        'load playlists failure (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)': 'loadPlaylistsFailure'
        'update playlist success (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)': 'updatePlaylistSuccess'
        'update playlist failure (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)': 'updatePlaylistFailure'
        'delete playlist success (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)': 'deletePlaylistSuccess'
        'delete playlist failure (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)': 'deletePlaylistFailure'
        'duplicate playlist success (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)': 'duplicatePlaylistSuccess'
        'duplicate playlist failure (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)': 'duplicatePlaylistFailure'
    }
    actionTypes: {
        reportRecordingPlaylistCreated: 'report recording playlist created (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
        setSavedPlaylistsFilters: 'set saved playlists filters (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
        loadPlaylists: 'load playlists (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
        updatePlaylist: 'update playlist (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
        deletePlaylist: 'delete playlist (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
        duplicatePlaylist: 'duplicate playlist (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
        loadPlaylistsSuccess: 'load playlists success (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
        loadPlaylistsFailure: 'load playlists failure (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
        updatePlaylistSuccess: 'update playlist success (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
        updatePlaylistFailure: 'update playlist failure (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
        deletePlaylistSuccess: 'delete playlist success (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
        deletePlaylistFailure: 'delete playlist failure (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
        duplicatePlaylistSuccess: 'duplicate playlist success (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
        duplicatePlaylistFailure: 'duplicate playlist failure (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
    }
    actions: {
        reportRecordingPlaylistCreated: (source: 'filters' | 'new' | 'pin' | 'duplicate') => void
        setSavedPlaylistsFilters: (filters: Partial<SavedSessionRecordingPlaylistsFilters>) => void
        loadPlaylists: () => void
        updatePlaylist: (
            shortId: SessionRecordingPlaylistType['short_id'],
            properties: Partial<SessionRecordingPlaylistType>
        ) => void
        deletePlaylist: (playlist: SessionRecordingPlaylistType) => void
        duplicatePlaylist: (playlist: SessionRecordingPlaylistType) => void
        loadPlaylistsSuccess: (
            playlists: SavedSessionRecordingPlaylistsResult,
            payload?: {
                value: true
            }
        ) => void
        loadPlaylistsFailure: (error: string, errorObject?: any) => void
        updatePlaylistSuccess: (
            playlists: {
                results: SessionRecordingPlaylistType[]
                count: number
                filters?: SavedSessionRecordingPlaylistsFilters | null | undefined
                next?: string | null | undefined
                previous?: string | null | undefined
            },
            payload?: {
                shortId: string
                properties: Partial<SessionRecordingPlaylistType>
            }
        ) => void
        updatePlaylistFailure: (error: string, errorObject?: any) => void
        deletePlaylistSuccess: (
            playlists: SavedSessionRecordingPlaylistsResult,
            payload?: {
                playlist: SessionRecordingPlaylistType
            }
        ) => void
        deletePlaylistFailure: (error: string, errorObject?: any) => void
        duplicatePlaylistSuccess: (
            playlists: SavedSessionRecordingPlaylistsResult,
            payload?: {
                playlist: SessionRecordingPlaylistType
            }
        ) => void
        duplicatePlaylistFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        reportRecordingPlaylistCreated: (source: 'filters' | 'new' | 'pin' | 'duplicate') => Promise<any>
        setSavedPlaylistsFilters: (filters: Partial<SavedSessionRecordingPlaylistsFilters>) => Promise<any>
        loadPlaylists: () => Promise<any>
        updatePlaylist: (
            shortId: SessionRecordingPlaylistType['short_id'],
            properties: Partial<SessionRecordingPlaylistType>
        ) => Promise<any>
        deletePlaylist: (playlist: SessionRecordingPlaylistType) => Promise<any>
        duplicatePlaylist: (playlist: SessionRecordingPlaylistType) => Promise<any>
        loadPlaylistsSuccess: (
            playlists: SavedSessionRecordingPlaylistsResult,
            payload?: {
                value: true
            }
        ) => Promise<any>
        loadPlaylistsFailure: (error: string, errorObject?: any) => Promise<any>
        updatePlaylistSuccess: (
            playlists: {
                results: SessionRecordingPlaylistType[]
                count: number
                filters?: SavedSessionRecordingPlaylistsFilters | null | undefined
                next?: string | null | undefined
                previous?: string | null | undefined
            },
            payload?: {
                shortId: string
                properties: Partial<SessionRecordingPlaylistType>
            }
        ) => Promise<any>
        updatePlaylistFailure: (error: string, errorObject?: any) => Promise<any>
        deletePlaylistSuccess: (
            playlists: SavedSessionRecordingPlaylistsResult,
            payload?: {
                playlist: SessionRecordingPlaylistType
            }
        ) => Promise<any>
        deletePlaylistFailure: (error: string, errorObject?: any) => Promise<any>
        duplicatePlaylistSuccess: (
            playlists: SavedSessionRecordingPlaylistsResult,
            payload?: {
                playlist: SessionRecordingPlaylistType
            }
        ) => Promise<any>
        duplicatePlaylistFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        filters: SavedSessionRecordingPlaylistsFilters | Record<string, any>
        loadPlaylistsFailed: boolean
        playlists: SavedSessionRecordingPlaylistsResult
        playlistsLoading: boolean
    }
    events: {}
    key: ReplayTabs
    listeners: {
        setSavedPlaylistsFilters: ((
            action: {
                type: 'set saved playlists filters (scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*)'
                payload: {
                    filters: Partial<SavedSessionRecordingPlaylistsFilters>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'session-recordings', 'saved-playlists', 'savedSessionRecordingPlaylistsLogic', '*']
    pathString: 'scenes.session-recordings.saved-playlists.savedSessionRecordingPlaylistsLogic.*'
    props: SavedSessionRecordingPlaylistsLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        filters: SavedSessionRecordingPlaylistsFilters | Record<string, any>
        loadPlaylistsFailed: boolean
        playlists: SavedSessionRecordingPlaylistsResult
        playlistsLoading: boolean
    }
    reducers: {
        filters: (
            state: SavedSessionRecordingPlaylistsFilters | Record<string, any>,
            action: any,
            fullState: any
        ) => SavedSessionRecordingPlaylistsFilters | Record<string, any>
        loadPlaylistsFailed: (state: boolean, action: any, fullState: any) => boolean
        playlists: (
            state: SavedSessionRecordingPlaylistsResult,
            action: any,
            fullState: any
        ) => SavedSessionRecordingPlaylistsResult
        playlistsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        filters: SavedSessionRecordingPlaylistsFilters | Record<string, any>
        loadPlaylistsFailed: boolean
        playlists: SavedSessionRecordingPlaylistsResult
        playlistsLoading: boolean
    }
    selectors: {
        filters: (state: any, props?: any) => SavedSessionRecordingPlaylistsFilters | Record<string, any>
        loadPlaylistsFailed: (state: any, props?: any) => boolean
        playlists: (state: any, props?: any) => SavedSessionRecordingPlaylistsResult
        playlistsLoading: (state: any, props?: any) => boolean
        sorting: (state: any, props?: any) => Sorting | null
        pagination: (state: any, props?: any) => PaginationManual
    }
    sharedListeners: {}
    values: {
        filters: SavedSessionRecordingPlaylistsFilters | Record<string, any>
        loadPlaylistsFailed: boolean
        playlists: SavedSessionRecordingPlaylistsResult
        playlistsLoading: boolean
        sorting: Sorting | null
        pagination: PaginationManual
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        sorting: (filters: Record<string, any> | SavedSessionRecordingPlaylistsFilters) => Sorting | null
        pagination: (
            filters: Record<string, any> | SavedSessionRecordingPlaylistsFilters,
            playlists: SavedSessionRecordingPlaylistsResult
        ) => PaginationManual
    }
}
