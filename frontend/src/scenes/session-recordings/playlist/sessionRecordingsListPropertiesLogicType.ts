// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:20 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { SessionRecordingPropertiesType, SessionRecordingType } from '../../../types'

export interface sessionRecordingsListPropertiesLogicType extends Logic {
    actionCreators: {
        reportRecordingsListPropertiesFetched: (loadTime: number) => {
            type: 'report recordings list properties fetched (scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic)'
            payload: {
                loadTime: number
            }
        }
        loadPropertiesForSessions: (sessions: SessionRecordingType[]) => {
            type: 'load properties for sessions (scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic)'
            payload: {
                sessions: SessionRecordingType[]
            }
        }
        maybeLoadPropertiesForSessions: (sessions: SessionRecordingType[]) => {
            type: 'maybe load properties for sessions (scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic)'
            payload: {
                sessions: SessionRecordingType[]
            }
        }
        loadPropertiesForSessionsSuccess: (
            recordingProperties: SessionRecordingPropertiesType[],
            payload?: {
                sessions: SessionRecordingType[]
            }
        ) => {
            type: 'load properties for sessions success (scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic)'
            payload: {
                recordingProperties: SessionRecordingPropertiesType[]
                payload?: {
                    sessions: SessionRecordingType[]
                }
            }
        }
        loadPropertiesForSessionsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load properties for sessions failure (scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'report recordings list properties fetched (scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic)': 'reportRecordingsListPropertiesFetched'
        'load properties for sessions (scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic)': 'loadPropertiesForSessions'
        'maybe load properties for sessions (scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic)': 'maybeLoadPropertiesForSessions'
        'load properties for sessions success (scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic)': 'loadPropertiesForSessionsSuccess'
        'load properties for sessions failure (scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic)': 'loadPropertiesForSessionsFailure'
    }
    actionTypes: {
        reportRecordingsListPropertiesFetched: 'report recordings list properties fetched (scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic)'
        loadPropertiesForSessions: 'load properties for sessions (scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic)'
        maybeLoadPropertiesForSessions: 'maybe load properties for sessions (scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic)'
        loadPropertiesForSessionsSuccess: 'load properties for sessions success (scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic)'
        loadPropertiesForSessionsFailure: 'load properties for sessions failure (scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic)'
    }
    actions: {
        reportRecordingsListPropertiesFetched: (loadTime: number) => void
        loadPropertiesForSessions: (sessions: SessionRecordingType[]) => void
        maybeLoadPropertiesForSessions: (sessions: SessionRecordingType[]) => void
        loadPropertiesForSessionsSuccess: (
            recordingProperties: SessionRecordingPropertiesType[],
            payload?: {
                sessions: SessionRecordingType[]
            }
        ) => void
        loadPropertiesForSessionsFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        reportRecordingsListPropertiesFetched: (loadTime: number) => Promise<any>
        loadPropertiesForSessions: (sessions: SessionRecordingType[]) => Promise<any>
        maybeLoadPropertiesForSessions: (sessions: SessionRecordingType[]) => Promise<any>
        loadPropertiesForSessionsSuccess: (
            recordingProperties: SessionRecordingPropertiesType[],
            payload?: {
                sessions: SessionRecordingType[]
            }
        ) => Promise<any>
        loadPropertiesForSessionsFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        recordingProperties: SessionRecordingPropertiesType[]
        recordingPropertiesLoading: boolean
        recordingPropertiesById: Record<string, SessionRecordingPropertiesType['properties']>
    }
    events: {}
    key: undefined
    listeners: {
        maybeLoadPropertiesForSessions: ((
            action: {
                type: 'maybe load properties for sessions (scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic)'
                payload: {
                    sessions: SessionRecordingType[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'session-recordings', 'playlist', 'sessionRecordingsListPropertiesLogic']
    pathString: 'scenes.session-recordings.playlist.sessionRecordingsListPropertiesLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        recordingProperties: SessionRecordingPropertiesType[]
        recordingPropertiesLoading: boolean
        recordingPropertiesById: Record<string, SessionRecordingPropertiesType['properties']>
    }
    reducers: {
        recordingProperties: (
            state: SessionRecordingPropertiesType[],
            action: any,
            fullState: any
        ) => SessionRecordingPropertiesType[]
        recordingPropertiesLoading: (state: boolean, action: any, fullState: any) => boolean
        recordingPropertiesById: (
            state: Record<string, SessionRecordingPropertiesType['properties']>,
            action: any,
            fullState: any
        ) => Record<string, SessionRecordingPropertiesType['properties']>
    }
    selector: (state: any) => {
        recordingProperties: SessionRecordingPropertiesType[]
        recordingPropertiesLoading: boolean
        recordingPropertiesById: Record<string, SessionRecordingPropertiesType['properties']>
    }
    selectors: {
        recordingProperties: (state: any, props?: any) => SessionRecordingPropertiesType[]
        recordingPropertiesLoading: (state: any, props?: any) => boolean
        recordingPropertiesById: (
            state: any,
            props?: any
        ) => Record<string, SessionRecordingPropertiesType['properties']>
    }
    sharedListeners: {}
    values: {
        recordingProperties: SessionRecordingPropertiesType[]
        recordingPropertiesLoading: boolean
        recordingPropertiesById: Record<string, SessionRecordingPropertiesType['properties']>
    }
    _isKea: true
    _isKeaWithKey: false
}
