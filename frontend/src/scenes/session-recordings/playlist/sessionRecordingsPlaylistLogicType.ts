// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:58 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { SessionRecordingsPlaylistLogicProps } from './sessionRecordingsPlaylistLogic'
import type { Breadcrumb, CohortType, RecordingFilters, SessionRecordingPlaylistType } from '../../../types'

export interface sessionRecordingsPlaylistLogicType extends Logic {
    actionCreators: {
        updatePlaylist: (
            properties?: Partial<SessionRecordingPlaylistType>,
            silent?: any
        ) => {
            type: 'update playlist (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
            payload: {
                properties: Partial<SessionRecordingPlaylistType> | undefined
                silent: any
            }
        }
        setFilters: (filters: RecordingFilters | null) => {
            type: 'set filters (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
            payload: {
                filters: RecordingFilters | null
            }
        }
        getPlaylist: () => {
            type: 'get playlist (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
            payload: any
        }
        getPlaylistSuccess: (
            playlist: SessionRecordingPlaylistType,
            payload?: any
        ) => {
            type: 'get playlist success (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
            payload: {
                playlist: SessionRecordingPlaylistType
                payload?: any
            }
        }
        getPlaylistFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'get playlist failure (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updatePlaylistSuccess: (
            playlist: SessionRecordingPlaylistType | null,
            payload?: {
                properties: Partial<SessionRecordingPlaylistType> | undefined
                silent: any
            }
        ) => {
            type: 'update playlist success (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
            payload: {
                playlist: SessionRecordingPlaylistType | null
                payload?: {
                    properties: Partial<SessionRecordingPlaylistType> | undefined
                    silent: any
                }
            }
        }
        updatePlaylistFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update playlist failure (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        duplicatePlaylist: () => {
            type: 'duplicate playlist (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
            payload: any
        }
        duplicatePlaylistSuccess: (
            playlist: SessionRecordingPlaylistType | null,
            payload?: any
        ) => {
            type: 'duplicate playlist success (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
            payload: {
                playlist: SessionRecordingPlaylistType | null
                payload?: any
            }
        }
        duplicatePlaylistFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'duplicate playlist failure (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deletePlaylist: () => {
            type: 'delete playlist (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
            payload: any
        }
        deletePlaylistSuccess: (
            playlist: SessionRecordingPlaylistType | null,
            payload?: any
        ) => {
            type: 'delete playlist success (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
            payload: {
                playlist: SessionRecordingPlaylistType | null
                payload?: any
            }
        }
        deletePlaylistFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete playlist failure (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'update playlist (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)': 'updatePlaylist'
        'set filters (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)': 'setFilters'
        'get playlist (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)': 'getPlaylist'
        'get playlist success (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)': 'getPlaylistSuccess'
        'get playlist failure (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)': 'getPlaylistFailure'
        'update playlist success (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)': 'updatePlaylistSuccess'
        'update playlist failure (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)': 'updatePlaylistFailure'
        'duplicate playlist (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)': 'duplicatePlaylist'
        'duplicate playlist success (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)': 'duplicatePlaylistSuccess'
        'duplicate playlist failure (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)': 'duplicatePlaylistFailure'
        'delete playlist (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)': 'deletePlaylist'
        'delete playlist success (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)': 'deletePlaylistSuccess'
        'delete playlist failure (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)': 'deletePlaylistFailure'
    }
    actionTypes: {
        updatePlaylist: 'update playlist (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
        setFilters: 'set filters (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
        getPlaylist: 'get playlist (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
        getPlaylistSuccess: 'get playlist success (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
        getPlaylistFailure: 'get playlist failure (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
        updatePlaylistSuccess: 'update playlist success (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
        updatePlaylistFailure: 'update playlist failure (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
        duplicatePlaylist: 'duplicate playlist (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
        duplicatePlaylistSuccess: 'duplicate playlist success (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
        duplicatePlaylistFailure: 'duplicate playlist failure (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
        deletePlaylist: 'delete playlist (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
        deletePlaylistSuccess: 'delete playlist success (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
        deletePlaylistFailure: 'delete playlist failure (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
    }
    actions: {
        updatePlaylist: (properties?: Partial<SessionRecordingPlaylistType>, silent?: any) => void
        setFilters: (filters: RecordingFilters | null) => void
        getPlaylist: () => void
        getPlaylistSuccess: (playlist: SessionRecordingPlaylistType, payload?: any) => void
        getPlaylistFailure: (error: string, errorObject?: any) => void
        updatePlaylistSuccess: (
            playlist: SessionRecordingPlaylistType | null,
            payload?: {
                properties: Partial<SessionRecordingPlaylistType> | undefined
                silent: any
            }
        ) => void
        updatePlaylistFailure: (error: string, errorObject?: any) => void
        duplicatePlaylist: () => void
        duplicatePlaylistSuccess: (playlist: SessionRecordingPlaylistType | null, payload?: any) => void
        duplicatePlaylistFailure: (error: string, errorObject?: any) => void
        deletePlaylist: () => void
        deletePlaylistSuccess: (playlist: SessionRecordingPlaylistType | null, payload?: any) => void
        deletePlaylistFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        updatePlaylist: (properties?: Partial<SessionRecordingPlaylistType>, silent?: any) => Promise<any>
        setFilters: (filters: RecordingFilters | null) => Promise<any>
        getPlaylist: () => Promise<any>
        getPlaylistSuccess: (playlist: SessionRecordingPlaylistType, payload?: any) => Promise<any>
        getPlaylistFailure: (error: string, errorObject?: any) => Promise<any>
        updatePlaylistSuccess: (
            playlist: SessionRecordingPlaylistType | null,
            payload?: {
                properties: Partial<SessionRecordingPlaylistType> | undefined
                silent: any
            }
        ) => Promise<any>
        updatePlaylistFailure: (error: string, errorObject?: any) => Promise<any>
        duplicatePlaylist: () => Promise<any>
        duplicatePlaylistSuccess: (playlist: SessionRecordingPlaylistType | null, payload?: any) => Promise<any>
        duplicatePlaylistFailure: (error: string, errorObject?: any) => Promise<any>
        deletePlaylist: () => Promise<any>
        deletePlaylistSuccess: (playlist: SessionRecordingPlaylistType | null, payload?: any) => Promise<any>
        deletePlaylistFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        playlist: SessionRecordingPlaylistType | null
        playlistLoading: boolean
        filters: RecordingFilters | null
    }
    events: {}
    key: string
    listeners: {
        getPlaylistSuccess: ((
            action: {
                type: 'get playlist success (scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*)'
                payload: {
                    playlist: SessionRecordingPlaylistType
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'session-recordings', 'playlist', 'sessionRecordingsPlaylistLogic', '*']
    pathString: 'scenes.session-recordings.playlist.sessionRecordingsPlaylistLogic.*'
    props: SessionRecordingsPlaylistLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        playlist: SessionRecordingPlaylistType | null
        playlistLoading: boolean
        filters: RecordingFilters | null
    }
    reducers: {
        playlist: (
            state: SessionRecordingPlaylistType | null,
            action: any,
            fullState: any
        ) => SessionRecordingPlaylistType | null
        playlistLoading: (state: boolean, action: any, fullState: any) => boolean
        filters: (state: RecordingFilters | null, action: any, fullState: any) => RecordingFilters | null
    }
    selector: (state: any) => {
        playlist: SessionRecordingPlaylistType | null
        playlistLoading: boolean
        filters: RecordingFilters | null
    }
    selectors: {
        playlist: (state: any, props?: any) => SessionRecordingPlaylistType | null
        playlistLoading: (state: any, props?: any) => boolean
        filters: (state: any, props?: any) => RecordingFilters | null
        cohortsById: (state: any, props?: any) => Partial<Record<string | number, CohortType>>
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
        hasChanges: (state: any, props?: any) => boolean
        derivedName: (state: any, props?: any) => string
    }
    sharedListeners: {}
    values: {
        playlist: SessionRecordingPlaylistType | null
        playlistLoading: boolean
        filters: RecordingFilters | null
        cohortsById: Partial<Record<string | number, CohortType>>
        breadcrumbs: Breadcrumb[]
        hasChanges: boolean
        derivedName: string
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        breadcrumbs: (playlist: SessionRecordingPlaylistType | null) => Breadcrumb[]
        hasChanges: (playlist: SessionRecordingPlaylistType | null, filters: RecordingFilters | null) => boolean
        derivedName: (
            filters: RecordingFilters | null,
            cohortsById: Partial<
                Record<
                    string | number,
                    import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').CohortType
                >
            >
        ) => string
    }
}
