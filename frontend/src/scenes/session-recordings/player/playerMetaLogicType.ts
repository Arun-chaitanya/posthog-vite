// Generated by kea-typegen on Sun, 06 Aug 2023 18:18:13 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { SessionRecordingLogicProps } from './sessionRecordingPlayerLogic'
import type { PersonType, RecordingEventType, RecordingSegment, SessionPlayerData, SessionRecordingPropertiesType, SessionRecordingType } from '../../../types'
import type { Dayjs } from '../../../lib/dayjs'

export interface playerMetaLogicType extends Logic {
    actionCreators: {
        loadRecordingMetaSuccess: (
            sessionPlayerMetaData: SessionRecordingType | null,
            payload?: {
                value: true
            }
        ) => {
            type: 'load recording meta success (scenes.session-recordings.player.playerMetaLogic.*)'
            payload: {
                sessionPlayerMetaData: SessionRecordingType | null
                payload?: {
                    value: true
                }
            }
        }
        maybeLoadPropertiesForSessions: (sessions: SessionRecordingType[]) => {
            type: 'maybe load properties for sessions (scenes.session-recordings.player.playerMetaLogic.*)'
            payload: {
                sessions: SessionRecordingType[]
            }
        }
    }
    actionKeys: {
        'load recording meta success (scenes.session-recordings.player.playerMetaLogic.*)': 'loadRecordingMetaSuccess'
        'maybe load properties for sessions (scenes.session-recordings.player.playerMetaLogic.*)': 'maybeLoadPropertiesForSessions'
    }
    actionTypes: {
        loadRecordingMetaSuccess: 'load recording meta success (scenes.session-recordings.player.playerMetaLogic.*)'
        maybeLoadPropertiesForSessions: 'maybe load properties for sessions (scenes.session-recordings.player.playerMetaLogic.*)'
    }
    actions: {
        loadRecordingMetaSuccess: (
            sessionPlayerMetaData: SessionRecordingType | null,
            payload?: {
                value: true
            }
        ) => void
        maybeLoadPropertiesForSessions: (sessions: SessionRecordingType[]) => void
    }
    asyncActions: {
        loadRecordingMetaSuccess: (
            sessionPlayerMetaData: SessionRecordingType | null,
            payload?: {
                value: true
            }
        ) => Promise<any>
        maybeLoadPropertiesForSessions: (sessions: SessionRecordingType[]) => Promise<any>
    }
    defaults: {}
    events: {}
    key: string
    listeners: {
        loadRecordingMetaSuccess: ((
            action: {
                type: 'load recording meta success (scenes.session-recordings.player.playerMetaLogic.*)'
                payload: {
                    sessionPlayerMetaData: SessionRecordingType | null
                    payload?: {
                        value: true
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'session-recordings', 'player', 'playerMetaLogic', '*']
    pathString: 'scenes.session-recordings.player.playerMetaLogic.*'
    props: SessionRecordingLogicProps
    reducer: (state: any, action: any, fullState: any) => {}
    reducers: {}
    selector: (state: any) => {}
    selectors: {
        sessionPlayerMetaData: (state: any, props?: any) => SessionRecordingType | null
        sessionPlayerMetaDataLoading: (state: any, props?: any) => boolean
        sessionEventsData: (state: any, props?: any) => null | RecordingEventType[]
        sessionPlayerData: (state: any, props?: any) => SessionPlayerData
        urls: (
            state: any,
            props?: any
        ) => {
            url: string
            timestamp: number
        }[]
        windowIds: (state: any, props?: any) => string[]
        currentTimestamp: (state: any, props?: any) => number | undefined
        currentSegment: (state: any, props?: any) => RecordingSegment | null
        scale: (state: any, props?: any) => number
        currentPlayerTime: (state: any, props?: any) => number
        recordingPropertiesById: (state: any, props?: any) => Record<string, SessionRecordingPropertiesType[]>
        sessionPerson: (state: any, props?: any) => PersonType | null
        resolution: (
            state: any,
            props?: any
        ) => {
            width: number
            height: number
        } | null
        startTime: (state: any, props?: any) => Dayjs | null
        currentWindowIndex: (state: any, props?: any) => number
        lastUrl: (state: any, props?: any) => string | undefined
        lastPageviewEvent: (state: any, props?: any) => RecordingEventType | null | undefined
        sessionProperties: (state: any, props?: any) => SessionRecordingPropertiesType[]
    }
    sharedListeners: {}
    values: {
        sessionPlayerMetaData: SessionRecordingType | null
        sessionPlayerMetaDataLoading: boolean
        sessionEventsData: null | RecordingEventType[]
        sessionPlayerData: SessionPlayerData
        urls: {
            url: string
            timestamp: number
        }[]
        windowIds: string[]
        currentTimestamp: number | undefined
        currentSegment: RecordingSegment | null
        scale: number
        currentPlayerTime: number
        recordingPropertiesById: Record<string, SessionRecordingPropertiesType[]>
        sessionPerson: PersonType | null
        resolution: {
            width: number
            height: number
        } | null
        startTime: Dayjs | null
        currentWindowIndex: number
        lastUrl: string | undefined
        lastPageviewEvent: RecordingEventType | null | undefined
        sessionProperties: SessionRecordingPropertiesType[]
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        sessionPerson: (
            sessionPlayerData: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').SessionPlayerData
        ) => PersonType | null
        resolution: (
            sessionPlayerData: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').SessionPlayerData,
            currentTimestamp: number | undefined,
            currentSegment:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').RecordingSegment
                | null
        ) => {
            width: number
            height: number
        } | null
        startTime: (
            sessionPlayerData: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').SessionPlayerData
        ) => Dayjs | null
        currentWindowIndex: (
            windowIds: string[],
            currentSegment:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').RecordingSegment
                | null
        ) => number
        lastUrl: (
            urls: { url: string; timestamp: number }[],
            sessionPlayerMetaData:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').SessionRecordingType
                | null,
            currentTimestamp: number | undefined
        ) => string | undefined
        lastPageviewEvent: (
            sessionEventsData:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').RecordingEventType[]
                | null,
            currentPlayerTime: number
        ) => RecordingEventType | null | undefined
        sessionProperties: (
            sessionPlayerData: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').SessionPlayerData,
            recordingPropertiesById: Record<
                string,
                import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').SessionRecordingPropertiesType[]
            >,
            arg: any
        ) => SessionRecordingPropertiesType[]
    }
}
