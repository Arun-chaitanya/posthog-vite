// Generated by kea-typegen on Tue, 08 Aug 2023 10:01:02 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { SessionRecordingDataLogicProps } from './sessionRecordingDataLogic'
import type { AvailableFeature, MatchedRecording, PersonType, RecordingEventType, RecordingEventsFilters, RecordingSegment, SessionPlayerData, SessionPlayerSnapshotData, SessionRecordingSnapshotSource, SessionRecordingType } from '../../../types'
import type { FeatureFlagsSet } from '../../../lib/logic/featureFlagLogic'
import type { eventWithTime } from '../../../../../node_modules/.pnpm/@rrweb+types@2.0.0-alpha.9/node_modules/@rrweb/types/dist/index.d'
import type { Dayjs } from '../../../lib/dayjs'

export interface sessionRecordingDataLogicType extends Logic {
    actionCreators: {
        setFilters: (filters: Partial<RecordingEventsFilters>) => {
            type: 'set filters (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                filters: Partial<RecordingEventsFilters>
            }
        }
        loadRecordingMeta: () => {
            type: 'load recording meta (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                value: true
            }
        }
        maybeLoadRecordingMeta: () => {
            type: 'maybe load recording meta (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                value: true
            }
        }
        addDiffToRecordingMetaPinnedCount: (diffCount: number) => {
            type: 'add diff to recording meta pinned count (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                diffCount: number
            }
        }
        loadRecordingSnapshotsV1: (nextUrl?: string) => {
            type: 'load recording snapshots v1 (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                nextUrl: string | undefined
            }
        }
        loadRecordingSnapshotsV2: (source?: SessionRecordingSnapshotSource) => {
            type: 'load recording snapshots v2 (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                source: SessionRecordingSnapshotSource | undefined
            }
        }
        loadRecordingSnapshots: () => {
            type: 'load recording snapshots (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                value: true
            }
        }
        loadRecordingSnapshotsSuccess: () => {
            type: 'load recording snapshots success (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                value: true
            }
        }
        loadRecordingSnapshotsFailure: () => {
            type: 'load recording snapshots failure (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                value: true
            }
        }
        loadEvents: () => {
            type: 'load events (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                value: true
            }
        }
        loadFullEventData: (event: RecordingEventType) => {
            type: 'load full event data (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                event: RecordingEventType
            }
        }
        reportViewed: () => {
            type: 'report viewed (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                value: true
            }
        }
        reportUsageIfFullyLoaded: () => {
            type: 'report usage if fully loaded (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                value: true
            }
        }
        loadRecordingMetaSuccess: (
            sessionPlayerMetaData: SessionRecordingType | null,
            payload?: {
                value: true
            }
        ) => {
            type: 'load recording meta success (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                sessionPlayerMetaData: SessionRecordingType | null
                payload?: {
                    value: true
                }
            }
        }
        loadRecordingMetaFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load recording meta failure (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        addDiffToRecordingMetaPinnedCountSuccess: (
            sessionPlayerMetaData: {
                pinned_count: number
                id: string
                viewed: boolean
                recording_duration: number
                active_seconds?: number | undefined
                inactive_seconds?: number | undefined
                start_time: string
                end_time: string
                matching_events?: MatchedRecording[] | undefined
                distinct_id?: string | undefined
                email?: string | undefined
                person?: PersonType | undefined
                click_count?: number | undefined
                keypress_count?: number | undefined
                mouse_activity_count?: number | undefined
                start_url?: string | undefined
                console_log_count?: number | undefined
                console_warn_count?: number | undefined
                console_error_count?: number | undefined
                storage?: 'clickhouse' | 'object_storage_lts' | 'object_storage' | undefined
            } | null,
            payload?: {
                diffCount: number
            }
        ) => {
            type: 'add diff to recording meta pinned count success (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                sessionPlayerMetaData: {
                    pinned_count: number
                    id: string
                    viewed: boolean
                    recording_duration: number
                    active_seconds?: number | undefined
                    inactive_seconds?: number | undefined
                    start_time: string
                    end_time: string
                    matching_events?: MatchedRecording[] | undefined
                    distinct_id?: string | undefined
                    email?: string | undefined
                    person?: PersonType | undefined
                    click_count?: number | undefined
                    keypress_count?: number | undefined
                    mouse_activity_count?: number | undefined
                    start_url?: string | undefined
                    console_log_count?: number | undefined
                    console_warn_count?: number | undefined
                    console_error_count?: number | undefined
                    storage?: 'clickhouse' | 'object_storage_lts' | 'object_storage' | undefined
                } | null
                payload?: {
                    diffCount: number
                }
            }
        }
        addDiffToRecordingMetaPinnedCountFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'add diff to recording meta pinned count failure (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadRecordingSnapshotsV1Success: (
            sessionPlayerSnapshotData: SessionPlayerSnapshotData | null,
            payload?: {
                nextUrl: string | undefined
            }
        ) => {
            type: 'load recording snapshots v1 success (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                sessionPlayerSnapshotData: SessionPlayerSnapshotData | null
                payload?: {
                    nextUrl: string | undefined
                }
            }
        }
        loadRecordingSnapshotsV1Failure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load recording snapshots v1 failure (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadRecordingSnapshotsV2Success: (
            sessionPlayerSnapshotData: SessionPlayerSnapshotData | null,
            payload?: {
                source: SessionRecordingSnapshotSource | undefined
            }
        ) => {
            type: 'load recording snapshots v2 success (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                sessionPlayerSnapshotData: SessionPlayerSnapshotData | null
                payload?: {
                    source: SessionRecordingSnapshotSource | undefined
                }
            }
        }
        loadRecordingSnapshotsV2Failure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load recording snapshots v2 failure (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadEventsSuccess: (
            sessionEventsData: RecordingEventType[] | null,
            payload?: {
                value: true
            }
        ) => {
            type: 'load events success (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                sessionEventsData: RecordingEventType[] | null
                payload?: {
                    value: true
                }
            }
        }
        loadEventsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load events failure (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadFullEventDataSuccess: (
            sessionEventsData: RecordingEventType[] | null,
            payload?: {
                event: RecordingEventType
            }
        ) => {
            type: 'load full event data success (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                sessionEventsData: RecordingEventType[] | null
                payload?: {
                    event: RecordingEventType
                }
            }
        }
        loadFullEventDataFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load full event data failure (scenes.session-recordings.sessionRecordingDataLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set filters (scenes.session-recordings.sessionRecordingDataLogic.*)': 'setFilters'
        'load recording meta (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadRecordingMeta'
        'maybe load recording meta (scenes.session-recordings.sessionRecordingDataLogic.*)': 'maybeLoadRecordingMeta'
        'add diff to recording meta pinned count (scenes.session-recordings.sessionRecordingDataLogic.*)': 'addDiffToRecordingMetaPinnedCount'
        'load recording snapshots v1 (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadRecordingSnapshotsV1'
        'load recording snapshots v2 (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadRecordingSnapshotsV2'
        'load recording snapshots (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadRecordingSnapshots'
        'load recording snapshots success (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadRecordingSnapshotsSuccess'
        'load recording snapshots failure (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadRecordingSnapshotsFailure'
        'load events (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadEvents'
        'load full event data (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadFullEventData'
        'report viewed (scenes.session-recordings.sessionRecordingDataLogic.*)': 'reportViewed'
        'report usage if fully loaded (scenes.session-recordings.sessionRecordingDataLogic.*)': 'reportUsageIfFullyLoaded'
        'load recording meta success (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadRecordingMetaSuccess'
        'load recording meta failure (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadRecordingMetaFailure'
        'add diff to recording meta pinned count success (scenes.session-recordings.sessionRecordingDataLogic.*)': 'addDiffToRecordingMetaPinnedCountSuccess'
        'add diff to recording meta pinned count failure (scenes.session-recordings.sessionRecordingDataLogic.*)': 'addDiffToRecordingMetaPinnedCountFailure'
        'load recording snapshots v1 success (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadRecordingSnapshotsV1Success'
        'load recording snapshots v1 failure (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadRecordingSnapshotsV1Failure'
        'load recording snapshots v2 success (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadRecordingSnapshotsV2Success'
        'load recording snapshots v2 failure (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadRecordingSnapshotsV2Failure'
        'load events success (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadEventsSuccess'
        'load events failure (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadEventsFailure'
        'load full event data success (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadFullEventDataSuccess'
        'load full event data failure (scenes.session-recordings.sessionRecordingDataLogic.*)': 'loadFullEventDataFailure'
    }
    actionTypes: {
        setFilters: 'set filters (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadRecordingMeta: 'load recording meta (scenes.session-recordings.sessionRecordingDataLogic.*)'
        maybeLoadRecordingMeta: 'maybe load recording meta (scenes.session-recordings.sessionRecordingDataLogic.*)'
        addDiffToRecordingMetaPinnedCount: 'add diff to recording meta pinned count (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadRecordingSnapshotsV1: 'load recording snapshots v1 (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadRecordingSnapshotsV2: 'load recording snapshots v2 (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadRecordingSnapshots: 'load recording snapshots (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadRecordingSnapshotsSuccess: 'load recording snapshots success (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadRecordingSnapshotsFailure: 'load recording snapshots failure (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadEvents: 'load events (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadFullEventData: 'load full event data (scenes.session-recordings.sessionRecordingDataLogic.*)'
        reportViewed: 'report viewed (scenes.session-recordings.sessionRecordingDataLogic.*)'
        reportUsageIfFullyLoaded: 'report usage if fully loaded (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadRecordingMetaSuccess: 'load recording meta success (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadRecordingMetaFailure: 'load recording meta failure (scenes.session-recordings.sessionRecordingDataLogic.*)'
        addDiffToRecordingMetaPinnedCountSuccess: 'add diff to recording meta pinned count success (scenes.session-recordings.sessionRecordingDataLogic.*)'
        addDiffToRecordingMetaPinnedCountFailure: 'add diff to recording meta pinned count failure (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadRecordingSnapshotsV1Success: 'load recording snapshots v1 success (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadRecordingSnapshotsV1Failure: 'load recording snapshots v1 failure (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadRecordingSnapshotsV2Success: 'load recording snapshots v2 success (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadRecordingSnapshotsV2Failure: 'load recording snapshots v2 failure (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadEventsSuccess: 'load events success (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadEventsFailure: 'load events failure (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadFullEventDataSuccess: 'load full event data success (scenes.session-recordings.sessionRecordingDataLogic.*)'
        loadFullEventDataFailure: 'load full event data failure (scenes.session-recordings.sessionRecordingDataLogic.*)'
    }
    actions: {
        setFilters: (filters: Partial<RecordingEventsFilters>) => void
        loadRecordingMeta: () => void
        maybeLoadRecordingMeta: () => void
        addDiffToRecordingMetaPinnedCount: (diffCount: number) => void
        loadRecordingSnapshotsV1: (nextUrl?: string) => void
        loadRecordingSnapshotsV2: (source?: SessionRecordingSnapshotSource) => void
        loadRecordingSnapshots: () => void
        loadRecordingSnapshotsSuccess: () => void
        loadRecordingSnapshotsFailure: () => void
        loadEvents: () => void
        loadFullEventData: (event: RecordingEventType) => void
        reportViewed: () => void
        reportUsageIfFullyLoaded: () => void
        loadRecordingMetaSuccess: (
            sessionPlayerMetaData: SessionRecordingType | null,
            payload?: {
                value: true
            }
        ) => void
        loadRecordingMetaFailure: (error: string, errorObject?: any) => void
        addDiffToRecordingMetaPinnedCountSuccess: (
            sessionPlayerMetaData: {
                pinned_count: number
                id: string
                viewed: boolean
                recording_duration: number
                active_seconds?: number | undefined
                inactive_seconds?: number | undefined
                start_time: string
                end_time: string
                matching_events?: MatchedRecording[] | undefined
                distinct_id?: string | undefined
                email?: string | undefined
                person?: PersonType | undefined
                click_count?: number | undefined
                keypress_count?: number | undefined
                mouse_activity_count?: number | undefined
                start_url?: string | undefined
                console_log_count?: number | undefined
                console_warn_count?: number | undefined
                console_error_count?: number | undefined
                storage?: 'clickhouse' | 'object_storage_lts' | 'object_storage' | undefined
            } | null,
            payload?: {
                diffCount: number
            }
        ) => void
        addDiffToRecordingMetaPinnedCountFailure: (error: string, errorObject?: any) => void
        loadRecordingSnapshotsV1Success: (
            sessionPlayerSnapshotData: SessionPlayerSnapshotData | null,
            payload?: {
                nextUrl: string | undefined
            }
        ) => void
        loadRecordingSnapshotsV1Failure: (error: string, errorObject?: any) => void
        loadRecordingSnapshotsV2Success: (
            sessionPlayerSnapshotData: SessionPlayerSnapshotData | null,
            payload?: {
                source: SessionRecordingSnapshotSource | undefined
            }
        ) => void
        loadRecordingSnapshotsV2Failure: (error: string, errorObject?: any) => void
        loadEventsSuccess: (
            sessionEventsData: RecordingEventType[] | null,
            payload?: {
                value: true
            }
        ) => void
        loadEventsFailure: (error: string, errorObject?: any) => void
        loadFullEventDataSuccess: (
            sessionEventsData: RecordingEventType[] | null,
            payload?: {
                event: RecordingEventType
            }
        ) => void
        loadFullEventDataFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setFilters: (filters: Partial<RecordingEventsFilters>) => Promise<any>
        loadRecordingMeta: () => Promise<any>
        maybeLoadRecordingMeta: () => Promise<any>
        addDiffToRecordingMetaPinnedCount: (diffCount: number) => Promise<any>
        loadRecordingSnapshotsV1: (nextUrl?: string) => Promise<any>
        loadRecordingSnapshotsV2: (source?: SessionRecordingSnapshotSource) => Promise<any>
        loadRecordingSnapshots: () => Promise<any>
        loadRecordingSnapshotsSuccess: () => Promise<any>
        loadRecordingSnapshotsFailure: () => Promise<any>
        loadEvents: () => Promise<any>
        loadFullEventData: (event: RecordingEventType) => Promise<any>
        reportViewed: () => Promise<any>
        reportUsageIfFullyLoaded: () => Promise<any>
        loadRecordingMetaSuccess: (
            sessionPlayerMetaData: SessionRecordingType | null,
            payload?: {
                value: true
            }
        ) => Promise<any>
        loadRecordingMetaFailure: (error: string, errorObject?: any) => Promise<any>
        addDiffToRecordingMetaPinnedCountSuccess: (
            sessionPlayerMetaData: {
                pinned_count: number
                id: string
                viewed: boolean
                recording_duration: number
                active_seconds?: number | undefined
                inactive_seconds?: number | undefined
                start_time: string
                end_time: string
                matching_events?: MatchedRecording[] | undefined
                distinct_id?: string | undefined
                email?: string | undefined
                person?: PersonType | undefined
                click_count?: number | undefined
                keypress_count?: number | undefined
                mouse_activity_count?: number | undefined
                start_url?: string | undefined
                console_log_count?: number | undefined
                console_warn_count?: number | undefined
                console_error_count?: number | undefined
                storage?: 'clickhouse' | 'object_storage_lts' | 'object_storage' | undefined
            } | null,
            payload?: {
                diffCount: number
            }
        ) => Promise<any>
        addDiffToRecordingMetaPinnedCountFailure: (error: string, errorObject?: any) => Promise<any>
        loadRecordingSnapshotsV1Success: (
            sessionPlayerSnapshotData: SessionPlayerSnapshotData | null,
            payload?: {
                nextUrl: string | undefined
            }
        ) => Promise<any>
        loadRecordingSnapshotsV1Failure: (error: string, errorObject?: any) => Promise<any>
        loadRecordingSnapshotsV2Success: (
            sessionPlayerSnapshotData: SessionPlayerSnapshotData | null,
            payload?: {
                source: SessionRecordingSnapshotSource | undefined
            }
        ) => Promise<any>
        loadRecordingSnapshotsV2Failure: (error: string, errorObject?: any) => Promise<any>
        loadEventsSuccess: (
            sessionEventsData: RecordingEventType[] | null,
            payload?: {
                value: true
            }
        ) => Promise<any>
        loadEventsFailure: (error: string, errorObject?: any) => Promise<any>
        loadFullEventDataSuccess: (
            sessionEventsData: RecordingEventType[] | null,
            payload?: {
                event: RecordingEventType
            }
        ) => Promise<any>
        loadFullEventDataFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        sessionPlayerMetaData: SessionRecordingType | null
        filters: Partial<RecordingEventsFilters>
        chunkPaginationIndex: number
        loadedFromBlobStorage: boolean
        isNotFound: boolean
        snapshotsLoaded: boolean
        sessionPlayerMetaDataLoading: boolean
        sessionPlayerSnapshotData: SessionPlayerSnapshotData | null
        sessionPlayerSnapshotDataLoading: boolean
        sessionEventsData: null | RecordingEventType[]
        sessionEventsDataLoading: boolean
    }
    events: {}
    key: string
    listeners: {
        maybeLoadRecordingMeta: ((
            action: {
                type: 'maybe load recording meta (scenes.session-recordings.sessionRecordingDataLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadRecordingSnapshots: ((
            action: {
                type: 'load recording snapshots (scenes.session-recordings.sessionRecordingDataLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportUsageIfFullyLoaded: ((
            action: {
                type: 'report usage if fully loaded (scenes.session-recordings.sessionRecordingDataLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportViewed: ((
            action: {
                type: 'report viewed (scenes.session-recordings.sessionRecordingDataLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'session-recordings', 'sessionRecordingDataLogic', '*']
    pathString: 'scenes.session-recordings.sessionRecordingDataLogic.*'
    props: SessionRecordingDataLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        sessionPlayerMetaData: SessionRecordingType | null
        filters: Partial<RecordingEventsFilters>
        chunkPaginationIndex: number
        loadedFromBlobStorage: boolean
        isNotFound: boolean
        snapshotsLoaded: boolean
        sessionPlayerMetaDataLoading: boolean
        sessionPlayerSnapshotData: SessionPlayerSnapshotData | null
        sessionPlayerSnapshotDataLoading: boolean
        sessionEventsData: null | RecordingEventType[]
        sessionEventsDataLoading: boolean
    }
    reducers: {
        sessionPlayerMetaData: (
            state: SessionRecordingType | null,
            action: any,
            fullState: any
        ) => SessionRecordingType | null
        filters: (
            state: Partial<RecordingEventsFilters>,
            action: any,
            fullState: any
        ) => Partial<RecordingEventsFilters>
        chunkPaginationIndex: (state: number, action: any, fullState: any) => number
        loadedFromBlobStorage: (state: boolean, action: any, fullState: any) => boolean
        isNotFound: (state: boolean, action: any, fullState: any) => boolean
        snapshotsLoaded: (state: boolean, action: any, fullState: any) => boolean
        sessionPlayerMetaDataLoading: (state: boolean, action: any, fullState: any) => boolean
        sessionPlayerSnapshotData: (
            state: SessionPlayerSnapshotData | null,
            action: any,
            fullState: any
        ) => SessionPlayerSnapshotData | null
        sessionPlayerSnapshotDataLoading: (state: boolean, action: any, fullState: any) => boolean
        sessionEventsData: (
            state: null | RecordingEventType[],
            action: any,
            fullState: any
        ) => null | RecordingEventType[]
        sessionEventsDataLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        sessionPlayerMetaData: SessionRecordingType | null
        filters: Partial<RecordingEventsFilters>
        chunkPaginationIndex: number
        loadedFromBlobStorage: boolean
        isNotFound: boolean
        snapshotsLoaded: boolean
        sessionPlayerMetaDataLoading: boolean
        sessionPlayerSnapshotData: SessionPlayerSnapshotData | null
        sessionPlayerSnapshotDataLoading: boolean
        sessionEventsData: null | RecordingEventType[]
        sessionEventsDataLoading: boolean
    }
    selectors: {
        sessionPlayerMetaData: (state: any, props?: any) => SessionRecordingType | null
        filters: (state: any, props?: any) => Partial<RecordingEventsFilters>
        chunkPaginationIndex: (state: any, props?: any) => number
        loadedFromBlobStorage: (state: any, props?: any) => boolean
        isNotFound: (state: any, props?: any) => boolean
        snapshotsLoaded: (state: any, props?: any) => boolean
        sessionPlayerMetaDataLoading: (state: any, props?: any) => boolean
        sessionPlayerSnapshotData: (state: any, props?: any) => SessionPlayerSnapshotData | null
        sessionPlayerSnapshotDataLoading: (state: any, props?: any) => boolean
        sessionEventsData: (state: any, props?: any) => null | RecordingEventType[]
        sessionEventsDataLoading: (state: any, props?: any) => boolean
        currentTeamId: (state: any, props?: any) => number | null
        hasAvailableFeature: (
            state: any,
            props?: any
        ) => (feature: AvailableFeature, currentUsage?: number | undefined) => boolean
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
        sessionPlayerData: (state: any, props?: any) => SessionPlayerData
        fullyLoaded: (state: any, props?: any) => boolean
        start: (state: any, props?: any) => Dayjs | undefined
        end: (state: any, props?: any) => Dayjs | undefined
        durationMs: (state: any, props?: any) => number
        segments: (state: any, props?: any) => RecordingSegment[]
        urls: (
            state: any,
            props?: any
        ) => {
            url: string
            timestamp: number
        }[]
        snapshotsByWindowId: (state: any, props?: any) => Record<string, eventWithTime[]>
        bufferedToTime: (state: any, props?: any) => number | null
        windowIds: (state: any, props?: any) => string[]
    }
    sharedListeners: {}
    values: {
        sessionPlayerMetaData: SessionRecordingType | null
        filters: Partial<RecordingEventsFilters>
        chunkPaginationIndex: number
        loadedFromBlobStorage: boolean
        isNotFound: boolean
        snapshotsLoaded: boolean
        sessionPlayerMetaDataLoading: boolean
        sessionPlayerSnapshotData: SessionPlayerSnapshotData | null
        sessionPlayerSnapshotDataLoading: boolean
        sessionEventsData: null | RecordingEventType[]
        sessionEventsDataLoading: boolean
        currentTeamId: number | null
        hasAvailableFeature: (feature: AvailableFeature, currentUsage?: number | undefined) => boolean
        featureFlags: FeatureFlagsSet
        sessionPlayerData: SessionPlayerData
        fullyLoaded: boolean
        start: Dayjs | undefined
        end: Dayjs | undefined
        durationMs: number
        segments: RecordingSegment[]
        urls: {
            url: string
            timestamp: number
        }[]
        snapshotsByWindowId: Record<string, eventWithTime[]>
        bufferedToTime: number | null
        windowIds: string[]
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        sessionPlayerData: (
            sessionPlayerMetaData: SessionRecordingType | null,
            snapshotsByWindowId: Record<string, eventWithTime[]>,
            segments: RecordingSegment[],
            bufferedToTime: number | null,
            start: Dayjs | undefined,
            end: Dayjs | undefined,
            durationMs: number,
            fullyLoaded: boolean
        ) => SessionPlayerData
        fullyLoaded: (
            sessionPlayerSnapshotData: SessionPlayerSnapshotData | null,
            sessionPlayerMetaDataLoading: boolean,
            sessionPlayerSnapshotDataLoading: boolean,
            sessionEventsDataLoading: boolean,
            hasAvailableFeature: (
                feature: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').AvailableFeature,
                currentUsage?: number | undefined
            ) => boolean
        ) => boolean
        start: (sessionPlayerMetaData: SessionRecordingType | null) => Dayjs | undefined
        end: (
            sessionPlayerMetaData: SessionRecordingType | null,
            sessionPlayerSnapshotData: SessionPlayerSnapshotData | null
        ) => Dayjs | undefined
        durationMs: (start: Dayjs | undefined, end: Dayjs | undefined) => number
        segments: (
            sessionPlayerSnapshotData: SessionPlayerSnapshotData | null,
            start: Dayjs | undefined,
            end: Dayjs | undefined
        ) => RecordingSegment[]
        urls: (sessionPlayerSnapshotData: SessionPlayerSnapshotData | null) => {
            url: string
            timestamp: number
        }[]
        snapshotsByWindowId: (
            sessionPlayerSnapshotData: SessionPlayerSnapshotData | null
        ) => Record<string, eventWithTime[]>
        bufferedToTime: (segments: RecordingSegment[]) => number | null
        windowIds: (snapshotsByWindowId: Record<string, eventWithTime[]>) => string[]
    }
}
