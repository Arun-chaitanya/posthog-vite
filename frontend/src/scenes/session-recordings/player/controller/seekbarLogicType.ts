// Generated by kea-typegen on Thu, 20 Jul 2023 11:23:37 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { SessionRecordingLogicProps } from '../sessionRecordingPlayerLogic'
import type { SessionPlayerData } from '../../../../types'
import type { InteractEvent, ReactInteractEvent } from '../utils/playerUtils'
import type { MutableRefObject } from '../../../../../../node_modules/.pnpm/@types+react@16.14.34/node_modules/@types/react/index.d'

export interface seekbarLogicType extends Logic {
    actionCreators: {
        startScrub: () => {
            type: 'start scrub (scenes.session-recordings.player.seekbarLogic.*)'
            payload: {
                value: true
            }
        }
        endScrub: () => {
            type: 'end scrub (scenes.session-recordings.player.seekbarLogic.*)'
            payload: {
                value: true
            }
        }
        setCurrentTimestamp: (timestamp: number) => {
            type: 'set current timestamp (scenes.session-recordings.player.seekbarLogic.*)'
            payload: {
                timestamp: number
            }
        }
        seekToTime: (timeInMilliseconds: number) => {
            type: 'seek to time (scenes.session-recordings.player.seekbarLogic.*)'
            payload: {
                timeInMilliseconds: number
            }
        }
        setThumbLeftPos: (
            thumbLeftPos: number,
            shouldSeek: boolean
        ) => {
            type: 'set thumb left pos (scenes.session-recordings.player.seekbarLogic.*)'
            payload: {
                thumbLeftPos: number
                shouldSeek: boolean
            }
        }
        setCursorDiff: (cursorDiff: number) => {
            type: 'set cursor diff (scenes.session-recordings.player.seekbarLogic.*)'
            payload: {
                cursorDiff: number
            }
        }
        handleSeek: (
            newX: number,
            shouldSeek?: boolean
        ) => {
            type: 'handle seek (scenes.session-recordings.player.seekbarLogic.*)'
            payload: {
                newX: number
                shouldSeek: boolean
            }
        }
        handleMove: (event: InteractEvent) => {
            type: 'handle move (scenes.session-recordings.player.seekbarLogic.*)'
            payload: {
                event: InteractEvent
            }
        }
        handleUp: (event: InteractEvent) => {
            type: 'handle up (scenes.session-recordings.player.seekbarLogic.*)'
            payload: {
                event: InteractEvent
            }
        }
        handleDown: (event: ReactInteractEvent) => {
            type: 'handle down (scenes.session-recordings.player.seekbarLogic.*)'
            payload: {
                event: ReactInteractEvent
            }
        }
        handleClick: (event: ReactInteractEvent) => {
            type: 'handle click (scenes.session-recordings.player.seekbarLogic.*)'
            payload: {
                event: ReactInteractEvent
            }
        }
        setSlider: (ref: MutableRefObject<HTMLDivElement | null>) => {
            type: 'set slider (scenes.session-recordings.player.seekbarLogic.*)'
            payload: {
                ref: MutableRefObject<HTMLDivElement | null>
            }
        }
        setThumb: (ref: MutableRefObject<HTMLDivElement | null>) => {
            type: 'set thumb (scenes.session-recordings.player.seekbarLogic.*)'
            payload: {
                ref: MutableRefObject<HTMLDivElement | null>
            }
        }
        debouncedSetTime: (time: number) => {
            type: 'debounced set time (scenes.session-recordings.player.seekbarLogic.*)'
            payload: {
                time: number
            }
        }
        endSeeking: () => {
            type: 'end seeking (scenes.session-recordings.player.seekbarLogic.*)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'start scrub (scenes.session-recordings.player.seekbarLogic.*)': 'startScrub'
        'end scrub (scenes.session-recordings.player.seekbarLogic.*)': 'endScrub'
        'set current timestamp (scenes.session-recordings.player.seekbarLogic.*)': 'setCurrentTimestamp'
        'seek to time (scenes.session-recordings.player.seekbarLogic.*)': 'seekToTime'
        'set thumb left pos (scenes.session-recordings.player.seekbarLogic.*)': 'setThumbLeftPos'
        'set cursor diff (scenes.session-recordings.player.seekbarLogic.*)': 'setCursorDiff'
        'handle seek (scenes.session-recordings.player.seekbarLogic.*)': 'handleSeek'
        'handle move (scenes.session-recordings.player.seekbarLogic.*)': 'handleMove'
        'handle up (scenes.session-recordings.player.seekbarLogic.*)': 'handleUp'
        'handle down (scenes.session-recordings.player.seekbarLogic.*)': 'handleDown'
        'handle click (scenes.session-recordings.player.seekbarLogic.*)': 'handleClick'
        'set slider (scenes.session-recordings.player.seekbarLogic.*)': 'setSlider'
        'set thumb (scenes.session-recordings.player.seekbarLogic.*)': 'setThumb'
        'debounced set time (scenes.session-recordings.player.seekbarLogic.*)': 'debouncedSetTime'
        'end seeking (scenes.session-recordings.player.seekbarLogic.*)': 'endSeeking'
    }
    actionTypes: {
        startScrub: 'start scrub (scenes.session-recordings.player.seekbarLogic.*)'
        endScrub: 'end scrub (scenes.session-recordings.player.seekbarLogic.*)'
        setCurrentTimestamp: 'set current timestamp (scenes.session-recordings.player.seekbarLogic.*)'
        seekToTime: 'seek to time (scenes.session-recordings.player.seekbarLogic.*)'
        setThumbLeftPos: 'set thumb left pos (scenes.session-recordings.player.seekbarLogic.*)'
        setCursorDiff: 'set cursor diff (scenes.session-recordings.player.seekbarLogic.*)'
        handleSeek: 'handle seek (scenes.session-recordings.player.seekbarLogic.*)'
        handleMove: 'handle move (scenes.session-recordings.player.seekbarLogic.*)'
        handleUp: 'handle up (scenes.session-recordings.player.seekbarLogic.*)'
        handleDown: 'handle down (scenes.session-recordings.player.seekbarLogic.*)'
        handleClick: 'handle click (scenes.session-recordings.player.seekbarLogic.*)'
        setSlider: 'set slider (scenes.session-recordings.player.seekbarLogic.*)'
        setThumb: 'set thumb (scenes.session-recordings.player.seekbarLogic.*)'
        debouncedSetTime: 'debounced set time (scenes.session-recordings.player.seekbarLogic.*)'
        endSeeking: 'end seeking (scenes.session-recordings.player.seekbarLogic.*)'
    }
    actions: {
        startScrub: () => void
        endScrub: () => void
        setCurrentTimestamp: (timestamp: number) => void
        seekToTime: (timeInMilliseconds: number) => void
        setThumbLeftPos: (thumbLeftPos: number, shouldSeek: boolean) => void
        setCursorDiff: (cursorDiff: number) => void
        handleSeek: (newX: number, shouldSeek?: boolean) => void
        handleMove: (event: InteractEvent) => void
        handleUp: (event: InteractEvent) => void
        handleDown: (event: ReactInteractEvent) => void
        handleClick: (event: ReactInteractEvent) => void
        setSlider: (ref: MutableRefObject<HTMLDivElement | null>) => void
        setThumb: (ref: MutableRefObject<HTMLDivElement | null>) => void
        debouncedSetTime: (time: number) => void
        endSeeking: () => void
    }
    asyncActions: {
        startScrub: () => Promise<any>
        endScrub: () => Promise<any>
        setCurrentTimestamp: (timestamp: number) => Promise<any>
        seekToTime: (timeInMilliseconds: number) => Promise<any>
        setThumbLeftPos: (thumbLeftPos: number, shouldSeek: boolean) => Promise<any>
        setCursorDiff: (cursorDiff: number) => Promise<any>
        handleSeek: (newX: number, shouldSeek?: boolean) => Promise<any>
        handleMove: (event: InteractEvent) => Promise<any>
        handleUp: (event: InteractEvent) => Promise<any>
        handleDown: (event: ReactInteractEvent) => Promise<any>
        handleClick: (event: ReactInteractEvent) => Promise<any>
        setSlider: (ref: MutableRefObject<HTMLDivElement | null>) => Promise<any>
        setThumb: (ref: MutableRefObject<HTMLDivElement | null>) => Promise<any>
        debouncedSetTime: (time: number) => Promise<any>
        endSeeking: () => Promise<any>
    }
    defaults: {
        thumbLeftPos: number
        cursorDiff: number
        slider: HTMLDivElement | null
        thumb: HTMLDivElement | null
        isSeeking: boolean
        isScrubbing: boolean
    }
    events: {}
    key: string
    listeners: {
        setCurrentTimestamp: ((
            action: {
                type: 'set current timestamp (scenes.session-recordings.player.seekbarLogic.*)'
                payload: {
                    timestamp: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setThumbLeftPos: ((
            action: {
                type: 'set thumb left pos (scenes.session-recordings.player.seekbarLogic.*)'
                payload: {
                    thumbLeftPos: number
                    shouldSeek: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        handleSeek: ((
            action: {
                type: 'handle seek (scenes.session-recordings.player.seekbarLogic.*)'
                payload: {
                    newX: number
                    shouldSeek: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        handleMove: ((
            action: {
                type: 'handle move (scenes.session-recordings.player.seekbarLogic.*)'
                payload: {
                    event: InteractEvent
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        handleUp: ((
            action: {
                type: 'handle up (scenes.session-recordings.player.seekbarLogic.*)'
                payload: {
                    event: InteractEvent
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        handleDown: ((
            action: {
                type: 'handle down (scenes.session-recordings.player.seekbarLogic.*)'
                payload: {
                    event: ReactInteractEvent
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'session-recordings', 'player', 'seekbarLogic', '*']
    pathString: 'scenes.session-recordings.player.seekbarLogic.*'
    props: SessionRecordingLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        thumbLeftPos: number
        cursorDiff: number
        slider: HTMLDivElement | null
        thumb: HTMLDivElement | null
        isSeeking: boolean
        isScrubbing: boolean
    }
    reducers: {
        thumbLeftPos: (state: number, action: any, fullState: any) => number
        cursorDiff: (state: number, action: any, fullState: any) => number
        slider: (state: HTMLDivElement | null, action: any, fullState: any) => HTMLDivElement | null
        thumb: (state: HTMLDivElement | null, action: any, fullState: any) => HTMLDivElement | null
        isSeeking: (state: boolean, action: any, fullState: any) => boolean
        isScrubbing: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        thumbLeftPos: number
        cursorDiff: number
        slider: HTMLDivElement | null
        thumb: HTMLDivElement | null
        isSeeking: boolean
        isScrubbing: boolean
    }
    selectors: {
        thumbLeftPos: (state: any, props?: any) => number
        cursorDiff: (state: any, props?: any) => number
        slider: (state: any, props?: any) => HTMLDivElement | null
        thumb: (state: any, props?: any) => HTMLDivElement | null
        isSeeking: (state: any, props?: any) => boolean
        isScrubbing: (state: any, props?: any) => boolean
        sessionPlayerData: (state: any, props?: any) => SessionPlayerData
        currentPlayerTime: (state: any, props?: any) => number
        endTimeMs: (state: any, props?: any) => number
        bufferPercent: (state: any, props?: any) => number
        scrubbingTime: (state: any, props?: any) => number
    }
    sharedListeners: {}
    values: {
        thumbLeftPos: number
        cursorDiff: number
        slider: HTMLDivElement | null
        thumb: HTMLDivElement | null
        isSeeking: boolean
        isScrubbing: boolean
        sessionPlayerData: SessionPlayerData
        currentPlayerTime: number
        endTimeMs: number
        bufferPercent: number
        scrubbingTime: number
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        endTimeMs: (
            sessionPlayerData: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').SessionPlayerData
        ) => number
        bufferPercent: (
            sessionPlayerData: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').SessionPlayerData
        ) => number
        scrubbingTime: (
            thumbLeftPos: number,
            slider: HTMLDivElement | null,
            sessionPlayerData: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').SessionPlayerData
        ) => number
    }
}
