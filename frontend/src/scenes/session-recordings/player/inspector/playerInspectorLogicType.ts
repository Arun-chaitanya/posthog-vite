// Generated by kea-typegen on Sun, 06 Aug 2023 18:18:13 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { SessionRecordingLogicProps } from '../sessionRecordingPlayerLogic'
import type { MatchedRecordingEvent, PerformanceEvent, RecordingConsoleLogV2, RecordingEventType, SessionPlayerData, SessionRecordingPlayerTab } from '../../../../types'
import type { SharedListMiniFilter } from '../playerSettingsLogic'
import type { Dayjs } from '../../../../lib/dayjs'
import type { Fuse, InspectorListItem, InspectorListItemEvent } from './playerInspectorLogic'

export interface playerInspectorLogicType extends Logic {
    actionCreators: {
        setTab: (tab: SessionRecordingPlayerTab) => {
            type: 'set tab (scenes.session-recordings.player.playerInspectorLogic.*)'
            payload: {
                tab: SessionRecordingPlayerTab
            }
        }
        setMiniFilter: (
            key: string,
            enabled: boolean
        ) => {
            type: 'set mini filter (scenes.session-recordings.player.playerInspectorLogic.*)'
            payload: {
                key: string
                enabled: boolean
            }
        }
        setSyncScroll: (enabled: boolean) => {
            type: 'set sync scroll (scenes.session-recordings.player.playerInspectorLogic.*)'
            payload: {
                enabled: boolean
            }
        }
        reportRecordingInspectorItemExpanded: (
            tab: SessionRecordingPlayerTab,
            index: number
        ) => {
            type: 'report recording inspector item expanded (scenes.session-recordings.player.playerInspectorLogic.*)'
            payload: {
                tab: SessionRecordingPlayerTab
                index: number
            }
        }
        loadFullEventData: (event: RecordingEventType) => {
            type: 'load full event data (scenes.session-recordings.player.playerInspectorLogic.*)'
            payload: {
                event: RecordingEventType
            }
        }
        setWindowIdFilter: (windowId: string | null) => {
            type: 'set window id filter (scenes.session-recordings.player.playerInspectorLogic.*)'
            payload: {
                windowId: string | null
            }
        }
        setSearchQuery: (search: string) => {
            type: 'set search query (scenes.session-recordings.player.playerInspectorLogic.*)'
            payload: {
                search: string
            }
        }
        setItemExpanded: (
            index: number,
            expanded: boolean
        ) => {
            type: 'set item expanded (scenes.session-recordings.player.playerInspectorLogic.*)'
            payload: {
                index: number
                expanded: boolean
            }
        }
        setSyncScrollPaused: (paused: boolean) => {
            type: 'set sync scroll paused (scenes.session-recordings.player.playerInspectorLogic.*)'
            payload: {
                paused: boolean
            }
        }
    }
    actionKeys: {
        'set tab (scenes.session-recordings.player.playerInspectorLogic.*)': 'setTab'
        'set mini filter (scenes.session-recordings.player.playerInspectorLogic.*)': 'setMiniFilter'
        'set sync scroll (scenes.session-recordings.player.playerInspectorLogic.*)': 'setSyncScroll'
        'report recording inspector item expanded (scenes.session-recordings.player.playerInspectorLogic.*)': 'reportRecordingInspectorItemExpanded'
        'load full event data (scenes.session-recordings.player.playerInspectorLogic.*)': 'loadFullEventData'
        'set window id filter (scenes.session-recordings.player.playerInspectorLogic.*)': 'setWindowIdFilter'
        'set search query (scenes.session-recordings.player.playerInspectorLogic.*)': 'setSearchQuery'
        'set item expanded (scenes.session-recordings.player.playerInspectorLogic.*)': 'setItemExpanded'
        'set sync scroll paused (scenes.session-recordings.player.playerInspectorLogic.*)': 'setSyncScrollPaused'
    }
    actionTypes: {
        setTab: 'set tab (scenes.session-recordings.player.playerInspectorLogic.*)'
        setMiniFilter: 'set mini filter (scenes.session-recordings.player.playerInspectorLogic.*)'
        setSyncScroll: 'set sync scroll (scenes.session-recordings.player.playerInspectorLogic.*)'
        reportRecordingInspectorItemExpanded: 'report recording inspector item expanded (scenes.session-recordings.player.playerInspectorLogic.*)'
        loadFullEventData: 'load full event data (scenes.session-recordings.player.playerInspectorLogic.*)'
        setWindowIdFilter: 'set window id filter (scenes.session-recordings.player.playerInspectorLogic.*)'
        setSearchQuery: 'set search query (scenes.session-recordings.player.playerInspectorLogic.*)'
        setItemExpanded: 'set item expanded (scenes.session-recordings.player.playerInspectorLogic.*)'
        setSyncScrollPaused: 'set sync scroll paused (scenes.session-recordings.player.playerInspectorLogic.*)'
    }
    actions: {
        setTab: (tab: SessionRecordingPlayerTab) => void
        setMiniFilter: (key: string, enabled: boolean) => void
        setSyncScroll: (enabled: boolean) => void
        reportRecordingInspectorItemExpanded: (tab: SessionRecordingPlayerTab, index: number) => void
        loadFullEventData: (event: RecordingEventType) => void
        setWindowIdFilter: (windowId: string | null) => void
        setSearchQuery: (search: string) => void
        setItemExpanded: (index: number, expanded: boolean) => void
        setSyncScrollPaused: (paused: boolean) => void
    }
    asyncActions: {
        setTab: (tab: SessionRecordingPlayerTab) => Promise<any>
        setMiniFilter: (key: string, enabled: boolean) => Promise<any>
        setSyncScroll: (enabled: boolean) => Promise<any>
        reportRecordingInspectorItemExpanded: (tab: SessionRecordingPlayerTab, index: number) => Promise<any>
        loadFullEventData: (event: RecordingEventType) => Promise<any>
        setWindowIdFilter: (windowId: string | null) => Promise<any>
        setSearchQuery: (search: string) => Promise<any>
        setItemExpanded: (index: number, expanded: boolean) => Promise<any>
        setSyncScrollPaused: (paused: boolean) => Promise<any>
    }
    defaults: {
        searchQuery: string
        windowIdFilter: string | null
        expandedItems: number[]
        syncScrollingPaused: boolean
    }
    events: {}
    key: string
    listeners: {
        setItemExpanded: ((
            action: {
                type: 'set item expanded (scenes.session-recordings.player.playerInspectorLogic.*)'
                payload: {
                    index: number
                    expanded: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'session-recordings', 'player', 'playerInspectorLogic', '*']
    pathString: 'scenes.session-recordings.player.playerInspectorLogic.*'
    props: SessionRecordingLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        searchQuery: string
        windowIdFilter: string | null
        expandedItems: number[]
        syncScrollingPaused: boolean
    }
    reducers: {
        searchQuery: (state: string, action: any, fullState: any) => string
        windowIdFilter: (state: string | null, action: any, fullState: any) => string | null
        expandedItems: (state: number[], action: any, fullState: any) => number[]
        syncScrollingPaused: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        searchQuery: string
        windowIdFilter: string | null
        expandedItems: number[]
        syncScrollingPaused: boolean
    }
    selectors: {
        searchQuery: (state: any, props?: any) => string
        windowIdFilter: (state: any, props?: any) => string | null
        expandedItems: (state: any, props?: any) => number[]
        syncScrollingPaused: (state: any, props?: any) => boolean
        showOnlyMatching: (state: any, props?: any) => boolean
        tab: (state: any, props?: any) => SessionRecordingPlayerTab
        miniFiltersByKey: (
            state: any,
            props?: any
        ) => {
            [key: string]: SharedListMiniFilter
        }
        sessionPlayerMetaDataLoading: (state: any, props?: any) => boolean
        sessionPlayerSnapshotDataLoading: (state: any, props?: any) => boolean
        sessionEventsData: (state: any, props?: any) => null | RecordingEventType[]
        sessionEventsDataLoading: (state: any, props?: any) => boolean
        sessionPlayerData: (state: any, props?: any) => SessionPlayerData
        start: (state: any, props?: any) => Dayjs | undefined
        end: (state: any, props?: any) => Dayjs | undefined
        durationMs: (state: any, props?: any) => number
        windowIds: (state: any, props?: any) => string[]
        currentPlayerTime: (state: any, props?: any) => number
        matchingEvents: (state: any, props?: any) => MatchedRecordingEvent[]
        showMatchingEventsFilter: (state: any, props?: any) => boolean
        consoleLogs: (state: any, props?: any) => RecordingConsoleLogV2[]
        allPerformanceEvents: (state: any, props?: any) => PerformanceEvent[]
        allItems: (state: any, props?: any) => InspectorListItem[]
        filteredItems: (state: any, props?: any) => InspectorListItem[]
        seekbarItems: (state: any, props?: any) => InspectorListItemEvent[]
        tabsState: (state: any, props?: any) => Record<SessionRecordingPlayerTab, 'loading' | 'ready' | 'empty'>
        playbackIndicatorIndex: (state: any, props?: any) => number
        playbackIndicatorIndexStop: (state: any, props?: any) => number
        fuse: (state: any, props?: any) => Fuse
        items: (state: any, props?: any) => InspectorListItem[]
    }
    sharedListeners: {}
    values: {
        searchQuery: string
        windowIdFilter: string | null
        expandedItems: number[]
        syncScrollingPaused: boolean
        showOnlyMatching: boolean
        tab: SessionRecordingPlayerTab
        miniFiltersByKey: {
            [key: string]: SharedListMiniFilter
        }
        sessionPlayerMetaDataLoading: boolean
        sessionPlayerSnapshotDataLoading: boolean
        sessionEventsData: null | RecordingEventType[]
        sessionEventsDataLoading: boolean
        sessionPlayerData: SessionPlayerData
        start: Dayjs | undefined
        end: Dayjs | undefined
        durationMs: number
        windowIds: string[]
        currentPlayerTime: number
        matchingEvents: MatchedRecordingEvent[]
        showMatchingEventsFilter: boolean
        consoleLogs: RecordingConsoleLogV2[]
        allPerformanceEvents: PerformanceEvent[]
        allItems: InspectorListItem[]
        filteredItems: InspectorListItem[]
        seekbarItems: InspectorListItemEvent[]
        tabsState: Record<SessionRecordingPlayerTab, 'loading' | 'ready' | 'empty'>
        playbackIndicatorIndex: number
        playbackIndicatorIndexStop: number
        fuse: Fuse
        items: InspectorListItem[]
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        matchingEvents: (arg: any) => MatchedRecordingEvent[]
        showMatchingEventsFilter: (matchingEvents: MatchedRecordingEvent[], tab: SessionRecordingPlayerTab) => boolean
        consoleLogs: (
            sessionPlayerData: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').SessionPlayerData
        ) => RecordingConsoleLogV2[]
        allPerformanceEvents: (
            sessionPlayerData: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').SessionPlayerData
        ) => PerformanceEvent[]
        allItems: (
            start: Dayjs | undefined,
            allPerformanceEvents: PerformanceEvent[],
            consoleLogs: RecordingConsoleLogV2[],
            sessionEventsData: RecordingEventType[] | null,
            matchingEvents: MatchedRecordingEvent[]
        ) => InspectorListItem[]
        filteredItems: (
            allItems: InspectorListItem[],
            tab: SessionRecordingPlayerTab,
            miniFiltersByKey: {
                [
                    key: string
                ]: import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/scenes/session-recordings/player/playerSettingsLogic').SharedListMiniFilter
            },
            showOnlyMatching: boolean,
            showMatchingEventsFilter: boolean,
            windowIdFilter: string | null
        ) => InspectorListItem[]
        seekbarItems: (
            allItems: InspectorListItem[],
            showOnlyMatching: boolean,
            showMatchingEventsFilter: boolean
        ) => InspectorListItemEvent[]
        tabsState: (
            sessionEventsDataLoading: boolean,
            sessionPlayerMetaDataLoading: boolean,
            sessionPlayerSnapshotDataLoading: boolean,
            sessionEventsData: RecordingEventType[] | null,
            consoleLogs: RecordingConsoleLogV2[],
            allPerformanceEvents: PerformanceEvent[]
        ) => Record<SessionRecordingPlayerTab, 'loading' | 'ready' | 'empty'>
        playbackIndicatorIndex: (currentPlayerTime: number, items: InspectorListItem[]) => number
        playbackIndicatorIndexStop: (playbackIndicatorIndex: number, items: InspectorListItem[]) => number
        fuse: (filteredItems: InspectorListItem[]) => Fuse
        items: (filteredItems: InspectorListItem[], fuse: Fuse, searchQuery: string) => InspectorListItem[]
    }
}
