// Generated by kea-typegen on Mon, 07 Aug 2023 16:49:28 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AutoplayDirection, DurationType, SessionRecordingPlayerTab } from '../../../types'
import type { SharedListMiniFilter } from './playerSettingsLogic'

export interface playerSettingsLogicType extends Logic {
    actionCreators: {
        setSkipInactivitySetting: (skipInactivitySetting: boolean) => {
            type: 'set skip inactivity setting (scenes.session-recordings.player.playerSettingsLogic)'
            payload: {
                skipInactivitySetting: boolean
            }
        }
        setSpeed: (speed: number) => {
            type: 'set speed (scenes.session-recordings.player.playerSettingsLogic)'
            payload: {
                speed: number
            }
        }
        setShowOnlyMatching: (showOnlyMatching: boolean) => {
            type: 'set show only matching (scenes.session-recordings.player.playerSettingsLogic)'
            payload: {
                showOnlyMatching: boolean
            }
        }
        toggleAutoplayDirection: () => {
            type: 'toggle autoplay direction (scenes.session-recordings.player.playerSettingsLogic)'
            payload: {
                value: true
            }
        }
        setTab: (tab: SessionRecordingPlayerTab) => {
            type: 'set tab (scenes.session-recordings.player.playerSettingsLogic)'
            payload: {
                tab: SessionRecordingPlayerTab
            }
        }
        setTimestampMode: (mode: 'absolute' | 'relative') => {
            type: 'set timestamp mode (scenes.session-recordings.player.playerSettingsLogic)'
            payload: {
                mode: 'absolute' | 'relative'
            }
        }
        setMiniFilter: (
            key: string,
            enabled: boolean
        ) => {
            type: 'set mini filter (scenes.session-recordings.player.playerSettingsLogic)'
            payload: {
                key: string
                enabled: boolean
            }
        }
        setSyncScroll: (enabled: boolean) => {
            type: 'set sync scroll (scenes.session-recordings.player.playerSettingsLogic)'
            payload: {
                enabled: boolean
            }
        }
        setDurationTypeToShow: (type: DurationType) => {
            type: 'set duration type to show (scenes.session-recordings.player.playerSettingsLogic)'
            payload: {
                type: DurationType
            }
        }
        setShowFilters: (showFilters: boolean) => {
            type: 'set show filters (scenes.session-recordings.player.playerSettingsLogic)'
            payload: {
                showFilters: boolean
            }
        }
    }
    actionKeys: {
        'set skip inactivity setting (scenes.session-recordings.player.playerSettingsLogic)': 'setSkipInactivitySetting'
        'set speed (scenes.session-recordings.player.playerSettingsLogic)': 'setSpeed'
        'set show only matching (scenes.session-recordings.player.playerSettingsLogic)': 'setShowOnlyMatching'
        'toggle autoplay direction (scenes.session-recordings.player.playerSettingsLogic)': 'toggleAutoplayDirection'
        'set tab (scenes.session-recordings.player.playerSettingsLogic)': 'setTab'
        'set timestamp mode (scenes.session-recordings.player.playerSettingsLogic)': 'setTimestampMode'
        'set mini filter (scenes.session-recordings.player.playerSettingsLogic)': 'setMiniFilter'
        'set sync scroll (scenes.session-recordings.player.playerSettingsLogic)': 'setSyncScroll'
        'set duration type to show (scenes.session-recordings.player.playerSettingsLogic)': 'setDurationTypeToShow'
        'set show filters (scenes.session-recordings.player.playerSettingsLogic)': 'setShowFilters'
    }
    actionTypes: {
        setSkipInactivitySetting: 'set skip inactivity setting (scenes.session-recordings.player.playerSettingsLogic)'
        setSpeed: 'set speed (scenes.session-recordings.player.playerSettingsLogic)'
        setShowOnlyMatching: 'set show only matching (scenes.session-recordings.player.playerSettingsLogic)'
        toggleAutoplayDirection: 'toggle autoplay direction (scenes.session-recordings.player.playerSettingsLogic)'
        setTab: 'set tab (scenes.session-recordings.player.playerSettingsLogic)'
        setTimestampMode: 'set timestamp mode (scenes.session-recordings.player.playerSettingsLogic)'
        setMiniFilter: 'set mini filter (scenes.session-recordings.player.playerSettingsLogic)'
        setSyncScroll: 'set sync scroll (scenes.session-recordings.player.playerSettingsLogic)'
        setDurationTypeToShow: 'set duration type to show (scenes.session-recordings.player.playerSettingsLogic)'
        setShowFilters: 'set show filters (scenes.session-recordings.player.playerSettingsLogic)'
    }
    actions: {
        setSkipInactivitySetting: (skipInactivitySetting: boolean) => void
        setSpeed: (speed: number) => void
        setShowOnlyMatching: (showOnlyMatching: boolean) => void
        toggleAutoplayDirection: () => void
        setTab: (tab: SessionRecordingPlayerTab) => void
        setTimestampMode: (mode: 'absolute' | 'relative') => void
        setMiniFilter: (key: string, enabled: boolean) => void
        setSyncScroll: (enabled: boolean) => void
        setDurationTypeToShow: (type: DurationType) => void
        setShowFilters: (showFilters: boolean) => void
    }
    asyncActions: {
        setSkipInactivitySetting: (skipInactivitySetting: boolean) => Promise<any>
        setSpeed: (speed: number) => Promise<any>
        setShowOnlyMatching: (showOnlyMatching: boolean) => Promise<any>
        toggleAutoplayDirection: () => Promise<any>
        setTab: (tab: SessionRecordingPlayerTab) => Promise<any>
        setTimestampMode: (mode: 'absolute' | 'relative') => Promise<any>
        setMiniFilter: (key: string, enabled: boolean) => Promise<any>
        setSyncScroll: (enabled: boolean) => Promise<any>
        setDurationTypeToShow: (type: DurationType) => Promise<any>
        setShowFilters: (showFilters: boolean) => Promise<any>
    }
    defaults: {
        showFilters: boolean
        durationTypeToShow: DurationType
        speed: number
        skipInactivitySetting: boolean
        showOnlyMatching: boolean
        autoplayDirection: AutoplayDirection
        tab: SessionRecordingPlayerTab
        timestampMode: 'absolute' | 'relative'
        selectedMiniFilters: string[]
        syncScroll: boolean
    }
    events: {}
    key: undefined
    listeners: {
        setTab: ((
            action: {
                type: 'set tab (scenes.session-recordings.player.playerSettingsLogic)'
                payload: {
                    tab: SessionRecordingPlayerTab
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setMiniFilter: ((
            action: {
                type: 'set mini filter (scenes.session-recordings.player.playerSettingsLogic)'
                payload: {
                    key: string
                    enabled: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'session-recordings', 'player', 'playerSettingsLogic']
    pathString: 'scenes.session-recordings.player.playerSettingsLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        showFilters: boolean
        durationTypeToShow: DurationType
        speed: number
        skipInactivitySetting: boolean
        showOnlyMatching: boolean
        autoplayDirection: AutoplayDirection
        tab: SessionRecordingPlayerTab
        timestampMode: 'absolute' | 'relative'
        selectedMiniFilters: string[]
        syncScroll: boolean
    }
    reducers: {
        showFilters: (state: boolean, action: any, fullState: any) => boolean
        durationTypeToShow: (state: DurationType, action: any, fullState: any) => DurationType
        speed: (state: number, action: any, fullState: any) => number
        skipInactivitySetting: (state: boolean, action: any, fullState: any) => boolean
        showOnlyMatching: (state: boolean, action: any, fullState: any) => boolean
        autoplayDirection: (state: AutoplayDirection, action: any, fullState: any) => AutoplayDirection
        tab: (state: SessionRecordingPlayerTab, action: any, fullState: any) => SessionRecordingPlayerTab
        timestampMode: (state: 'absolute' | 'relative', action: any, fullState: any) => 'absolute' | 'relative'
        selectedMiniFilters: (state: string[], action: any, fullState: any) => string[]
        syncScroll: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        showFilters: boolean
        durationTypeToShow: DurationType
        speed: number
        skipInactivitySetting: boolean
        showOnlyMatching: boolean
        autoplayDirection: AutoplayDirection
        tab: SessionRecordingPlayerTab
        timestampMode: 'absolute' | 'relative'
        selectedMiniFilters: string[]
        syncScroll: boolean
    }
    selectors: {
        showFilters: (state: any, props?: any) => boolean
        durationTypeToShow: (state: any, props?: any) => DurationType
        speed: (state: any, props?: any) => number
        skipInactivitySetting: (state: any, props?: any) => boolean
        showOnlyMatching: (state: any, props?: any) => boolean
        autoplayDirection: (state: any, props?: any) => AutoplayDirection
        tab: (state: any, props?: any) => SessionRecordingPlayerTab
        timestampMode: (state: any, props?: any) => 'absolute' | 'relative'
        selectedMiniFilters: (state: any, props?: any) => string[]
        syncScroll: (state: any, props?: any) => boolean
        miniFilters: (state: any, props?: any) => SharedListMiniFilter[]
        miniFiltersByKey: (
            state: any,
            props?: any
        ) => {
            [key: string]: SharedListMiniFilter
        }
    }
    sharedListeners: {}
    values: {
        showFilters: boolean
        durationTypeToShow: DurationType
        speed: number
        skipInactivitySetting: boolean
        showOnlyMatching: boolean
        autoplayDirection: AutoplayDirection
        tab: SessionRecordingPlayerTab
        timestampMode: 'absolute' | 'relative'
        selectedMiniFilters: string[]
        syncScroll: boolean
        miniFilters: SharedListMiniFilter[]
        miniFiltersByKey: {
            [key: string]: SharedListMiniFilter
        }
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        miniFilters: (tab: SessionRecordingPlayerTab, selectedMiniFilters: string[]) => SharedListMiniFilter[]
        miniFiltersByKey: (miniFilters: SharedListMiniFilter[]) => {
            [key: string]: SharedListMiniFilter
        }
    }
}
