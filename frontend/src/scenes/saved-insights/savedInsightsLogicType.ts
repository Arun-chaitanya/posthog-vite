// Generated by kea-typegen on Thu, 20 Jul 2023 11:23:46 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FeatureFlagsSet } from '../../lib/logic/featureFlagLogic'
import type { InsightsResult, SavedInsightFilters } from './savedInsightsLogic'
import type { InsightModel } from '../../types'
import type { Sorting } from '../../lib/lemon-ui/LemonTable/index'
import type { Dayjs } from '../../../../node_modules/.pnpm/dayjs@1.11.6/node_modules/dayjs/index.d'
import type { PaginationManual } from '../../lib/lemon-ui/PaginationControl/index'
import type { DeleteDashboardForm } from '../dashboard/deleteDashboardLogic'
import type { DuplicateDashboardForm } from '../dashboard/duplicateDashboardLogic'

export interface savedInsightsLogicType extends Logic {
    actionCreators: {
        setSavedInsightsFilters: (
            filters: Partial<SavedInsightFilters>,
            merge?: boolean,
            debounce?: boolean
        ) => {
            type: 'set saved insights filters (scenes.saved-insights.savedInsightsLogic)'
            payload: {
                filters: Partial<SavedInsightFilters>
                merge: boolean
                debounce: boolean
            }
        }
        updateFavoritedInsight: (
            insight: InsightModel,
            favorited: boolean
        ) => {
            type: 'update favorited insight (scenes.saved-insights.savedInsightsLogic)'
            payload: {
                insight: InsightModel
                favorited: boolean
            }
        }
        renameInsight: (insight: InsightModel) => {
            type: 'rename insight (scenes.saved-insights.savedInsightsLogic)'
            payload: {
                insight: InsightModel
            }
        }
        duplicateInsight: (
            insight: InsightModel,
            redirectToInsight?: any
        ) => {
            type: 'duplicate insight (scenes.saved-insights.savedInsightsLogic)'
            payload: {
                insight: InsightModel
                redirectToInsight: any
            }
        }
        loadInsights: (debounce?: boolean) => {
            type: 'load insights (scenes.saved-insights.savedInsightsLogic)'
            payload: {
                debounce: boolean
            }
        }
        setInsight: (insight: InsightModel) => {
            type: 'set insight (scenes.saved-insights.savedInsightsLogic)'
            payload: {
                insight: InsightModel
            }
        }
        addInsight: (insight: InsightModel) => {
            type: 'add insight (scenes.saved-insights.savedInsightsLogic)'
            payload: {
                insight: InsightModel
            }
        }
        loadInsightsSuccess: (
            insights: InsightsResult,
            payload?: {
                debounce: boolean
            }
        ) => {
            type: 'load insights success (scenes.saved-insights.savedInsightsLogic)'
            payload: {
                insights: InsightsResult
                payload?: {
                    debounce: boolean
                }
            }
        }
        loadInsightsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load insights failure (scenes.saved-insights.savedInsightsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateFavoritedInsightSuccess: (
            insights: {
                results: any[]
                count: number
                previous?: string | undefined
                next?: string | undefined
                filters?: SavedInsightFilters | null | undefined
                offset: number
            },
            payload?: {
                insight: InsightModel
                favorited: boolean
            }
        ) => {
            type: 'update favorited insight success (scenes.saved-insights.savedInsightsLogic)'
            payload: {
                insights: {
                    results: any[]
                    count: number
                    previous?: string | undefined
                    next?: string | undefined
                    filters?: SavedInsightFilters | null | undefined
                    offset: number
                }
                payload?: {
                    insight: InsightModel
                    favorited: boolean
                }
            }
        }
        updateFavoritedInsightFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update favorited insight failure (scenes.saved-insights.savedInsightsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set saved insights filters (scenes.saved-insights.savedInsightsLogic)': 'setSavedInsightsFilters'
        'update favorited insight (scenes.saved-insights.savedInsightsLogic)': 'updateFavoritedInsight'
        'rename insight (scenes.saved-insights.savedInsightsLogic)': 'renameInsight'
        'duplicate insight (scenes.saved-insights.savedInsightsLogic)': 'duplicateInsight'
        'load insights (scenes.saved-insights.savedInsightsLogic)': 'loadInsights'
        'set insight (scenes.saved-insights.savedInsightsLogic)': 'setInsight'
        'add insight (scenes.saved-insights.savedInsightsLogic)': 'addInsight'
        'load insights success (scenes.saved-insights.savedInsightsLogic)': 'loadInsightsSuccess'
        'load insights failure (scenes.saved-insights.savedInsightsLogic)': 'loadInsightsFailure'
        'update favorited insight success (scenes.saved-insights.savedInsightsLogic)': 'updateFavoritedInsightSuccess'
        'update favorited insight failure (scenes.saved-insights.savedInsightsLogic)': 'updateFavoritedInsightFailure'
    }
    actionTypes: {
        setSavedInsightsFilters: 'set saved insights filters (scenes.saved-insights.savedInsightsLogic)'
        updateFavoritedInsight: 'update favorited insight (scenes.saved-insights.savedInsightsLogic)'
        renameInsight: 'rename insight (scenes.saved-insights.savedInsightsLogic)'
        duplicateInsight: 'duplicate insight (scenes.saved-insights.savedInsightsLogic)'
        loadInsights: 'load insights (scenes.saved-insights.savedInsightsLogic)'
        setInsight: 'set insight (scenes.saved-insights.savedInsightsLogic)'
        addInsight: 'add insight (scenes.saved-insights.savedInsightsLogic)'
        loadInsightsSuccess: 'load insights success (scenes.saved-insights.savedInsightsLogic)'
        loadInsightsFailure: 'load insights failure (scenes.saved-insights.savedInsightsLogic)'
        updateFavoritedInsightSuccess: 'update favorited insight success (scenes.saved-insights.savedInsightsLogic)'
        updateFavoritedInsightFailure: 'update favorited insight failure (scenes.saved-insights.savedInsightsLogic)'
    }
    actions: {
        setSavedInsightsFilters: (filters: Partial<SavedInsightFilters>, merge?: boolean, debounce?: boolean) => void
        updateFavoritedInsight: (insight: InsightModel, favorited: boolean) => void
        renameInsight: (insight: InsightModel) => void
        duplicateInsight: (insight: InsightModel, redirectToInsight?: any) => void
        loadInsights: (debounce?: boolean) => void
        setInsight: (insight: InsightModel) => void
        addInsight: (insight: InsightModel) => void
        loadInsightsSuccess: (
            insights: InsightsResult,
            payload?: {
                debounce: boolean
            }
        ) => void
        loadInsightsFailure: (error: string, errorObject?: any) => void
        updateFavoritedInsightSuccess: (
            insights: {
                results: any[]
                count: number
                previous?: string | undefined
                next?: string | undefined
                filters?: SavedInsightFilters | null | undefined
                offset: number
            },
            payload?: {
                insight: InsightModel
                favorited: boolean
            }
        ) => void
        updateFavoritedInsightFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setSavedInsightsFilters: (
            filters: Partial<SavedInsightFilters>,
            merge?: boolean,
            debounce?: boolean
        ) => Promise<any>
        updateFavoritedInsight: (insight: InsightModel, favorited: boolean) => Promise<any>
        renameInsight: (insight: InsightModel) => Promise<any>
        duplicateInsight: (insight: InsightModel, redirectToInsight?: any) => Promise<any>
        loadInsights: (debounce?: boolean) => Promise<any>
        setInsight: (insight: InsightModel) => Promise<any>
        addInsight: (insight: InsightModel) => Promise<any>
        loadInsightsSuccess: (
            insights: InsightsResult,
            payload?: {
                debounce: boolean
            }
        ) => Promise<any>
        loadInsightsFailure: (error: string, errorObject?: any) => Promise<any>
        updateFavoritedInsightSuccess: (
            insights: {
                results: any[]
                count: number
                previous?: string | undefined
                next?: string | undefined
                filters?: SavedInsightFilters | null | undefined
                offset: number
            },
            payload?: {
                insight: InsightModel
                favorited: boolean
            }
        ) => Promise<any>
        updateFavoritedInsightFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        insights: InsightsResult
        insightsLoading: boolean
        rawFilters: Partial<SavedInsightFilters> | null
    }
    events: {}
    key: undefined
    listeners: {
        setSavedInsightsFilters: ((
            action: {
                type: 'set saved insights filters (scenes.saved-insights.savedInsightsLogic)'
                payload: {
                    filters: Partial<SavedInsightFilters>
                    merge: boolean
                    debounce: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        renameInsight: ((
            action: {
                type: 'rename insight (scenes.saved-insights.savedInsightsLogic)'
                payload: {
                    insight: InsightModel
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        duplicateInsight: ((
            action: {
                type: 'duplicate insight (scenes.saved-insights.savedInsightsLogic)'
                payload: {
                    insight: InsightModel
                    redirectToInsight: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        'rename insight success (models.insightsModel)': ((
            action: {
                type: 'rename insight success (models.insightsModel)'
                payload: {
                    item: InsightModel
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        'update dashboard insight (models.dashboardsModel)': ((
            action: {
                type: 'update dashboard insight (models.dashboardsModel)'
                payload: {
                    insight: InsightModel
                    extraDashboardIds: number[] | undefined
                    updateTileOnDashboards: [number] | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        'submit delete dashboard success (scenes.dashboard.deleteDashboardLogic)': ((
            action: {
                type: 'submit delete dashboard success (scenes.dashboard.deleteDashboardLogic)'
                payload: {
                    deleteDashboard: DeleteDashboardForm
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        'submit duplicate dashboard success (scenes.dashboard.duplicateDashboardLogic)': ((
            action: {
                type: 'submit duplicate dashboard success (scenes.dashboard.duplicateDashboardLogic)'
                payload: {
                    duplicateDashboard: DuplicateDashboardForm
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'saved-insights', 'savedInsightsLogic']
    pathString: 'scenes.saved-insights.savedInsightsLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        insights: InsightsResult
        insightsLoading: boolean
        rawFilters: Partial<SavedInsightFilters> | null
    }
    reducers: {
        insights: (state: InsightsResult, action: any, fullState: any) => InsightsResult
        insightsLoading: (state: boolean, action: any, fullState: any) => boolean
        rawFilters: (
            state: Partial<SavedInsightFilters> | null,
            action: any,
            fullState: any
        ) => Partial<SavedInsightFilters> | null
    }
    selector: (state: any) => {
        insights: InsightsResult
        insightsLoading: boolean
        rawFilters: Partial<SavedInsightFilters> | null
    }
    selectors: {
        insights: (state: any, props?: any) => InsightsResult
        insightsLoading: (state: any, props?: any) => boolean
        rawFilters: (state: any, props?: any) => Partial<SavedInsightFilters> | null
        currentTeamId: (state: any, props?: any) => number | null
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
        filters: (state: any, props?: any) => SavedInsightFilters
        count: (state: any, props?: any) => number
        usingFilters: (state: any, props?: any) => boolean
        sorting: (state: any, props?: any) => Sorting | null
        paramsFromFilters: (
            state: any,
            props?: any
        ) => {
            dashboards?: number[] | undefined
            date_from?: string | Dayjs | undefined
            date_to?: string | Dayjs | null | undefined
            created_by?: number | undefined
            insight?: string | undefined
            search?: string | undefined
            favorited?: true | undefined
            user?: true | undefined
            order: string
            limit: number
            offset: number
            saved: true
        }
        pagination: (state: any, props?: any) => PaginationManual
    }
    sharedListeners: {}
    values: {
        insights: InsightsResult
        insightsLoading: boolean
        rawFilters: Partial<SavedInsightFilters> | null
        currentTeamId: number | null
        featureFlags: FeatureFlagsSet
        filters: SavedInsightFilters
        count: number
        usingFilters: boolean
        sorting: Sorting | null
        paramsFromFilters: {
            dashboards?: number[] | undefined
            date_from?: string | Dayjs | undefined
            date_to?: string | Dayjs | null | undefined
            created_by?: number | undefined
            insight?: string | undefined
            search?: string | undefined
            favorited?: true | undefined
            user?: true | undefined
            order: string
            limit: number
            offset: number
            saved: true
        }
        pagination: PaginationManual
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        filters: (rawFilters: Partial<SavedInsightFilters> | null) => SavedInsightFilters
        count: (insights: InsightsResult) => number
        usingFilters: (filters: SavedInsightFilters) => boolean
        sorting: (filters: SavedInsightFilters) => Sorting | null
        paramsFromFilters: (filters: SavedInsightFilters) => {
            dashboards?: number[] | undefined
            date_from?: string | Dayjs | undefined
            date_to?: string | Dayjs | null | undefined
            created_by?: number | undefined
            insight?: string | undefined
            search?: string | undefined
            favorited?: true | undefined
            user?: true | undefined
            order: string
            limit: number
            offset: number
            saved: true
        }
        pagination: (filters: SavedInsightFilters, count: number) => PaginationManual
    }
    __keaTypeGenInternalReducerActions: {
        'rename insight success (models.insightsModel)': (item: InsightModel) => {
            type: 'rename insight success (models.insightsModel)'
            payload: {
                item: InsightModel
            }
        }
        'update dashboard insight (models.dashboardsModel)': (
            insight: InsightModel,
            extraDashboardIds?: number[],
            updateTileOnDashboards?: [number]
        ) => {
            type: 'update dashboard insight (models.dashboardsModel)'
            payload: {
                insight: InsightModel
                extraDashboardIds: number[] | undefined
                updateTileOnDashboards: [number] | undefined
            }
        }
        'submit delete dashboard success (scenes.dashboard.deleteDashboardLogic)': (
            deleteDashboard: DeleteDashboardForm
        ) => {
            type: 'submit delete dashboard success (scenes.dashboard.deleteDashboardLogic)'
            payload: {
                deleteDashboard: DeleteDashboardForm
            }
        }
        'submit duplicate dashboard success (scenes.dashboard.duplicateDashboardLogic)': (
            duplicateDashboard: DuplicateDashboardForm
        ) => {
            type: 'submit duplicate dashboard success (scenes.dashboard.duplicateDashboardLogic)'
            payload: {
                duplicateDashboard: DuplicateDashboardForm
            }
        }
    }
}
