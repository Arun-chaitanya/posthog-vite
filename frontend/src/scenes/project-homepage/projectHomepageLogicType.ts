// Generated by kea-typegen on Thu, 20 Jul 2023 11:23:55 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { InsightModel, PersonType, TeamPublicType, TeamType } from '../../types'
import type { DashboardLogicProps } from '../dashboard/dashboardLogic'

export interface projectHomepageLogicType extends Logic {
    actionCreators: {
        loadRecentInsights: () => {
            type: 'load recent insights (scenes.project-homepage.projectHomepageLogic)'
            payload: any
        }
        loadRecentInsightsSuccess: (
            recentInsights: InsightModel[],
            payload?: any
        ) => {
            type: 'load recent insights success (scenes.project-homepage.projectHomepageLogic)'
            payload: {
                recentInsights: InsightModel[]
                payload?: any
            }
        }
        loadRecentInsightsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load recent insights failure (scenes.project-homepage.projectHomepageLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadPersons: () => {
            type: 'load persons (scenes.project-homepage.projectHomepageLogic)'
            payload: any
        }
        loadPersonsSuccess: (
            persons: PersonType[],
            payload?: any
        ) => {
            type: 'load persons success (scenes.project-homepage.projectHomepageLogic)'
            payload: {
                persons: PersonType[]
                payload?: any
            }
        }
        loadPersonsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load persons failure (scenes.project-homepage.projectHomepageLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load recent insights (scenes.project-homepage.projectHomepageLogic)': 'loadRecentInsights'
        'load recent insights success (scenes.project-homepage.projectHomepageLogic)': 'loadRecentInsightsSuccess'
        'load recent insights failure (scenes.project-homepage.projectHomepageLogic)': 'loadRecentInsightsFailure'
        'load persons (scenes.project-homepage.projectHomepageLogic)': 'loadPersons'
        'load persons success (scenes.project-homepage.projectHomepageLogic)': 'loadPersonsSuccess'
        'load persons failure (scenes.project-homepage.projectHomepageLogic)': 'loadPersonsFailure'
    }
    actionTypes: {
        loadRecentInsights: 'load recent insights (scenes.project-homepage.projectHomepageLogic)'
        loadRecentInsightsSuccess: 'load recent insights success (scenes.project-homepage.projectHomepageLogic)'
        loadRecentInsightsFailure: 'load recent insights failure (scenes.project-homepage.projectHomepageLogic)'
        loadPersons: 'load persons (scenes.project-homepage.projectHomepageLogic)'
        loadPersonsSuccess: 'load persons success (scenes.project-homepage.projectHomepageLogic)'
        loadPersonsFailure: 'load persons failure (scenes.project-homepage.projectHomepageLogic)'
    }
    actions: {
        loadRecentInsights: () => void
        loadRecentInsightsSuccess: (recentInsights: InsightModel[], payload?: any) => void
        loadRecentInsightsFailure: (error: string, errorObject?: any) => void
        loadPersons: () => void
        loadPersonsSuccess: (persons: PersonType[], payload?: any) => void
        loadPersonsFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadRecentInsights: () => Promise<any>
        loadRecentInsightsSuccess: (recentInsights: InsightModel[], payload?: any) => Promise<any>
        loadRecentInsightsFailure: (error: string, errorObject?: any) => Promise<any>
        loadPersons: () => Promise<any>
        loadPersonsSuccess: (persons: PersonType[], payload?: any) => Promise<any>
        loadPersonsFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        recentInsights: InsightModel[]
        recentInsightsLoading: boolean
        persons: PersonType[]
        personsLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'project-homepage', 'projectHomepageLogic']
    pathString: 'scenes.project-homepage.projectHomepageLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        recentInsights: InsightModel[]
        recentInsightsLoading: boolean
        persons: PersonType[]
        personsLoading: boolean
    }
    reducers: {
        recentInsights: (state: InsightModel[], action: any, fullState: any) => InsightModel[]
        recentInsightsLoading: (state: boolean, action: any, fullState: any) => boolean
        persons: (state: PersonType[], action: any, fullState: any) => PersonType[]
        personsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        recentInsights: InsightModel[]
        recentInsightsLoading: boolean
        persons: PersonType[]
        personsLoading: boolean
    }
    selectors: {
        recentInsights: (state: any, props?: any) => InsightModel[]
        recentInsightsLoading: (state: any, props?: any) => boolean
        persons: (state: any, props?: any) => PersonType[]
        personsLoading: (state: any, props?: any) => boolean
        currentTeam: (state: any, props?: any) => TeamType | TeamPublicType | null
        currentTeamId: (state: any, props?: any) => number | null
        primaryDashboardId: (state: any, props?: any) => number | undefined
        dashboardLogicProps: (state: any, props?: any) => DashboardLogicProps
    }
    sharedListeners: {}
    values: {
        recentInsights: InsightModel[]
        recentInsightsLoading: boolean
        persons: PersonType[]
        personsLoading: boolean
        currentTeam: TeamType | TeamPublicType | null
        currentTeamId: number | null
        primaryDashboardId: number | undefined
        dashboardLogicProps: DashboardLogicProps
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        primaryDashboardId: (
            currentTeam:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamType
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').TeamPublicType
                | null
        ) => number | undefined
        dashboardLogicProps: (primaryDashboardId: number | undefined) => DashboardLogicProps
    }
}
