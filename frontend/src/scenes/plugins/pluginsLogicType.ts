// Generated by kea-typegen on Thu, 20 Jul 2023 11:31:51 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PluginInstallationType, PluginRepositoryEntry, PluginTab, PluginTypeWithConfig, PluginUpdateStatusType } from './types'
import type { AvailableFeature, PluginConfigType, PluginType } from '../../types'
import type { PluginForm, PluginSection, PluginSelectionType } from './pluginsLogic'

export interface pluginsLogicType extends Logic {
    actionCreators: {
        editPlugin: (
            id: number | null,
            pluginConfigChanges?: Record<string, any>
        ) => {
            type: 'edit plugin (scenes.plugins.pluginsLogic)'
            payload: {
                id: number | null
                pluginConfigChanges: Record<string, any>
            }
        }
        savePluginConfig: (pluginConfigChanges: Record<string, any>) => {
            type: 'save plugin config (scenes.plugins.pluginsLogic)'
            payload: {
                pluginConfigChanges: Record<string, any>
            }
        }
        installPlugin: (
            pluginUrl: string,
            pluginType: PluginInstallationType
        ) => {
            type: 'install plugin (scenes.plugins.pluginsLogic)'
            payload: {
                pluginUrl: string
                pluginType: PluginInstallationType
            }
        }
        uninstallPlugin: (name: string) => {
            type: 'uninstall plugin (scenes.plugins.pluginsLogic)'
            payload: {
                name: string
            }
        }
        setCustomPluginUrl: (customPluginUrl: string) => {
            type: 'set custom plugin url (scenes.plugins.pluginsLogic)'
            payload: {
                customPluginUrl: string
            }
        }
        setLocalPluginUrl: (localPluginUrl: string) => {
            type: 'set local plugin url (scenes.plugins.pluginsLogic)'
            payload: {
                localPluginUrl: string
            }
        }
        setSourcePluginName: (sourcePluginName: string) => {
            type: 'set source plugin name (scenes.plugins.pluginsLogic)'
            payload: {
                sourcePluginName: string
            }
        }
        setPluginTab: (tab: PluginTab) => {
            type: 'set plugin tab (scenes.plugins.pluginsLogic)'
            payload: {
                tab: PluginTab
            }
        }
        setEditingSource: (editingSource: boolean) => {
            type: 'set editing source (scenes.plugins.pluginsLogic)'
            payload: {
                editingSource: boolean
            }
        }
        resetPluginConfigError: (id: number) => {
            type: 'reset plugin config error (scenes.plugins.pluginsLogic)'
            payload: {
                id: number
            }
        }
        checkForUpdates: (
            checkAll: boolean,
            initialUpdateStatus?: Record<string, PluginUpdateStatusType>
        ) => {
            type: 'check for updates (scenes.plugins.pluginsLogic)'
            payload: {
                checkAll: boolean
                initialUpdateStatus: Record<string, PluginUpdateStatusType>
            }
        }
        checkedForUpdates: () => {
            type: 'checked for updates (scenes.plugins.pluginsLogic)'
            payload: {
                value: true
            }
        }
        setUpdateStatus: (
            id: number,
            tag: string,
            latestTag: string
        ) => {
            type: 'set update status (scenes.plugins.pluginsLogic)'
            payload: {
                id: number
                tag: string
                latestTag: string
            }
        }
        setUpdateError: (id: number) => {
            type: 'set update error (scenes.plugins.pluginsLogic)'
            payload: {
                id: number
            }
        }
        updatePlugin: (id: number) => {
            type: 'update plugin (scenes.plugins.pluginsLogic)'
            payload: {
                id: number
            }
        }
        pluginUpdated: (id: number) => {
            type: 'plugin updated (scenes.plugins.pluginsLogic)'
            payload: {
                id: number
            }
        }
        patchPlugin: (
            id: number,
            pluginChanges?: Partial<PluginType>
        ) => {
            type: 'patch plugin (scenes.plugins.pluginsLogic)'
            payload: {
                id: number
                pluginChanges: Partial<PluginType>
            }
        }
        generateApiKeysIfNeeded: (form: PluginForm) => {
            type: 'generate api keys if needed (scenes.plugins.pluginsLogic)'
            payload: {
                form: PluginForm
            }
        }
        rearrange: () => {
            type: 'rearrange (scenes.plugins.pluginsLogic)'
            payload: {
                value: true
            }
        }
        setTemporaryOrder: (
            temporaryOrder: Record<number, number>,
            movedPluginId: number
        ) => {
            type: 'set temporary order (scenes.plugins.pluginsLogic)'
            payload: {
                temporaryOrder: Record<number, number>
                movedPluginId: number
            }
        }
        makePluginOrderSaveable: () => {
            type: 'make plugin order saveable (scenes.plugins.pluginsLogic)'
            payload: {
                value: true
            }
        }
        savePluginOrders: (newOrders: Record<number, number>) => {
            type: 'save plugin orders (scenes.plugins.pluginsLogic)'
            payload: {
                newOrders: Record<number, number>
            }
        }
        cancelRearranging: () => {
            type: 'cancel rearranging (scenes.plugins.pluginsLogic)'
            payload: {
                value: true
            }
        }
        showPluginLogs: (id: number) => {
            type: 'show plugin logs (scenes.plugins.pluginsLogic)'
            payload: {
                id: number
            }
        }
        hidePluginLogs: () => {
            type: 'hide plugin logs (scenes.plugins.pluginsLogic)'
            payload: {
                value: true
            }
        }
        processSearchInput: (term: string) => {
            type: 'process search input (scenes.plugins.pluginsLogic)'
            payload: {
                term: string
            }
        }
        setSearchTerm: (term: string | null) => {
            type: 'set search term (scenes.plugins.pluginsLogic)'
            payload: {
                term: string | null
            }
        }
        setPluginConfigPollTimeout: (timeout: number | null) => {
            type: 'set plugin config poll timeout (scenes.plugins.pluginsLogic)'
            payload: {
                timeout: number | null
            }
        }
        toggleSectionOpen: (section: PluginSection) => {
            type: 'toggle section open (scenes.plugins.pluginsLogic)'
            payload: {
                section: PluginSection
            }
        }
        syncFrontendAppState: (id: number) => {
            type: 'sync frontend app state (scenes.plugins.pluginsLogic)'
            payload: {
                id: number
            }
        }
        loadPlugins: () => {
            type: 'load plugins (scenes.plugins.pluginsLogic)'
            payload: any
        }
        loadPluginsSuccess: (
            plugins: Record<string, PluginType>,
            payload?: any
        ) => {
            type: 'load plugins success (scenes.plugins.pluginsLogic)'
            payload: {
                plugins: Record<string, PluginType>
                payload?: any
            }
        }
        loadPluginsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load plugins failure (scenes.plugins.pluginsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        installPluginSuccess: (
            plugins: { [x: number]: any },
            payload?: {
                pluginUrl: string
                pluginType: PluginInstallationType
            }
        ) => {
            type: 'install plugin success (scenes.plugins.pluginsLogic)'
            payload: {
                plugins: { [x: number]: any }
                payload?: {
                    pluginUrl: string
                    pluginType: PluginInstallationType
                }
            }
        }
        installPluginFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'install plugin failure (scenes.plugins.pluginsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        uninstallPluginSuccess: (
            plugins: Record<number, PluginType>,
            payload?: {
                name: string
            }
        ) => {
            type: 'uninstall plugin success (scenes.plugins.pluginsLogic)'
            payload: {
                plugins: Record<number, PluginType>
                payload?: {
                    name: string
                }
            }
        }
        uninstallPluginFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'uninstall plugin failure (scenes.plugins.pluginsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updatePluginSuccess: (
            plugins: { [x: number]: any },
            payload?: {
                id: number
            }
        ) => {
            type: 'update plugin success (scenes.plugins.pluginsLogic)'
            payload: {
                plugins: { [x: number]: any }
                payload?: {
                    id: number
                }
            }
        }
        updatePluginFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update plugin failure (scenes.plugins.pluginsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        patchPluginSuccess: (
            plugins: { [x: number]: any },
            payload?: {
                id: number
                pluginChanges: Partial<PluginType>
            }
        ) => {
            type: 'patch plugin success (scenes.plugins.pluginsLogic)'
            payload: {
                plugins: { [x: number]: any }
                payload?: {
                    id: number
                    pluginChanges: Partial<PluginType>
                }
            }
        }
        patchPluginFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'patch plugin failure (scenes.plugins.pluginsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadPluginConfigs: () => {
            type: 'load plugin configs (scenes.plugins.pluginsLogic)'
            payload: any
        }
        loadPluginConfigsSuccess: (
            pluginConfigs: Record<string, PluginConfigType>,
            payload?: any
        ) => {
            type: 'load plugin configs success (scenes.plugins.pluginsLogic)'
            payload: {
                pluginConfigs: Record<string, PluginConfigType>
                payload?: any
            }
        }
        loadPluginConfigsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load plugin configs failure (scenes.plugins.pluginsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        savePluginConfigSuccess: (
            pluginConfigs: Record<string, PluginConfigType>,
            payload?: {
                pluginConfigChanges: Record<string, any>
            }
        ) => {
            type: 'save plugin config success (scenes.plugins.pluginsLogic)'
            payload: {
                pluginConfigs: Record<string, PluginConfigType>
                payload?: {
                    pluginConfigChanges: Record<string, any>
                }
            }
        }
        savePluginConfigFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'save plugin config failure (scenes.plugins.pluginsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        toggleEnabled: ({ id, enabled }: any) => {
            type: 'toggle enabled (scenes.plugins.pluginsLogic)'
            payload: any
        }
        toggleEnabledSuccess: (
            pluginConfigs: Record<string, PluginConfigType>,
            payload?: any
        ) => {
            type: 'toggle enabled success (scenes.plugins.pluginsLogic)'
            payload: {
                pluginConfigs: Record<string, PluginConfigType>
                payload?: any
            }
        }
        toggleEnabledFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'toggle enabled failure (scenes.plugins.pluginsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        resetPluginConfigErrorSuccess: (
            pluginConfigs: Record<string, PluginConfigType>,
            payload?: {
                id: number
            }
        ) => {
            type: 'reset plugin config error success (scenes.plugins.pluginsLogic)'
            payload: {
                pluginConfigs: Record<string, PluginConfigType>
                payload?: {
                    id: number
                }
            }
        }
        resetPluginConfigErrorFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'reset plugin config error failure (scenes.plugins.pluginsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        savePluginOrdersSuccess: (
            pluginConfigs: Record<string, PluginConfigType>,
            payload?: {
                newOrders: Record<number, number>
            }
        ) => {
            type: 'save plugin orders success (scenes.plugins.pluginsLogic)'
            payload: {
                pluginConfigs: Record<string, PluginConfigType>
                payload?: {
                    newOrders: Record<number, number>
                }
            }
        }
        savePluginOrdersFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'save plugin orders failure (scenes.plugins.pluginsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadRepository: () => {
            type: 'load repository (scenes.plugins.pluginsLogic)'
            payload: any
        }
        loadRepositorySuccess: (
            repository: Record<string, PluginRepositoryEntry>,
            payload?: any
        ) => {
            type: 'load repository success (scenes.plugins.pluginsLogic)'
            payload: {
                repository: Record<string, PluginRepositoryEntry>
                payload?: any
            }
        }
        loadRepositoryFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load repository failure (scenes.plugins.pluginsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'edit plugin (scenes.plugins.pluginsLogic)': 'editPlugin'
        'save plugin config (scenes.plugins.pluginsLogic)': 'savePluginConfig'
        'install plugin (scenes.plugins.pluginsLogic)': 'installPlugin'
        'uninstall plugin (scenes.plugins.pluginsLogic)': 'uninstallPlugin'
        'set custom plugin url (scenes.plugins.pluginsLogic)': 'setCustomPluginUrl'
        'set local plugin url (scenes.plugins.pluginsLogic)': 'setLocalPluginUrl'
        'set source plugin name (scenes.plugins.pluginsLogic)': 'setSourcePluginName'
        'set plugin tab (scenes.plugins.pluginsLogic)': 'setPluginTab'
        'set editing source (scenes.plugins.pluginsLogic)': 'setEditingSource'
        'reset plugin config error (scenes.plugins.pluginsLogic)': 'resetPluginConfigError'
        'check for updates (scenes.plugins.pluginsLogic)': 'checkForUpdates'
        'checked for updates (scenes.plugins.pluginsLogic)': 'checkedForUpdates'
        'set update status (scenes.plugins.pluginsLogic)': 'setUpdateStatus'
        'set update error (scenes.plugins.pluginsLogic)': 'setUpdateError'
        'update plugin (scenes.plugins.pluginsLogic)': 'updatePlugin'
        'plugin updated (scenes.plugins.pluginsLogic)': 'pluginUpdated'
        'patch plugin (scenes.plugins.pluginsLogic)': 'patchPlugin'
        'generate api keys if needed (scenes.plugins.pluginsLogic)': 'generateApiKeysIfNeeded'
        'rearrange (scenes.plugins.pluginsLogic)': 'rearrange'
        'set temporary order (scenes.plugins.pluginsLogic)': 'setTemporaryOrder'
        'make plugin order saveable (scenes.plugins.pluginsLogic)': 'makePluginOrderSaveable'
        'save plugin orders (scenes.plugins.pluginsLogic)': 'savePluginOrders'
        'cancel rearranging (scenes.plugins.pluginsLogic)': 'cancelRearranging'
        'show plugin logs (scenes.plugins.pluginsLogic)': 'showPluginLogs'
        'hide plugin logs (scenes.plugins.pluginsLogic)': 'hidePluginLogs'
        'process search input (scenes.plugins.pluginsLogic)': 'processSearchInput'
        'set search term (scenes.plugins.pluginsLogic)': 'setSearchTerm'
        'set plugin config poll timeout (scenes.plugins.pluginsLogic)': 'setPluginConfigPollTimeout'
        'toggle section open (scenes.plugins.pluginsLogic)': 'toggleSectionOpen'
        'sync frontend app state (scenes.plugins.pluginsLogic)': 'syncFrontendAppState'
        'load plugins (scenes.plugins.pluginsLogic)': 'loadPlugins'
        'load plugins success (scenes.plugins.pluginsLogic)': 'loadPluginsSuccess'
        'load plugins failure (scenes.plugins.pluginsLogic)': 'loadPluginsFailure'
        'install plugin success (scenes.plugins.pluginsLogic)': 'installPluginSuccess'
        'install plugin failure (scenes.plugins.pluginsLogic)': 'installPluginFailure'
        'uninstall plugin success (scenes.plugins.pluginsLogic)': 'uninstallPluginSuccess'
        'uninstall plugin failure (scenes.plugins.pluginsLogic)': 'uninstallPluginFailure'
        'update plugin success (scenes.plugins.pluginsLogic)': 'updatePluginSuccess'
        'update plugin failure (scenes.plugins.pluginsLogic)': 'updatePluginFailure'
        'patch plugin success (scenes.plugins.pluginsLogic)': 'patchPluginSuccess'
        'patch plugin failure (scenes.plugins.pluginsLogic)': 'patchPluginFailure'
        'load plugin configs (scenes.plugins.pluginsLogic)': 'loadPluginConfigs'
        'load plugin configs success (scenes.plugins.pluginsLogic)': 'loadPluginConfigsSuccess'
        'load plugin configs failure (scenes.plugins.pluginsLogic)': 'loadPluginConfigsFailure'
        'save plugin config success (scenes.plugins.pluginsLogic)': 'savePluginConfigSuccess'
        'save plugin config failure (scenes.plugins.pluginsLogic)': 'savePluginConfigFailure'
        'toggle enabled (scenes.plugins.pluginsLogic)': 'toggleEnabled'
        'toggle enabled success (scenes.plugins.pluginsLogic)': 'toggleEnabledSuccess'
        'toggle enabled failure (scenes.plugins.pluginsLogic)': 'toggleEnabledFailure'
        'reset plugin config error success (scenes.plugins.pluginsLogic)': 'resetPluginConfigErrorSuccess'
        'reset plugin config error failure (scenes.plugins.pluginsLogic)': 'resetPluginConfigErrorFailure'
        'save plugin orders success (scenes.plugins.pluginsLogic)': 'savePluginOrdersSuccess'
        'save plugin orders failure (scenes.plugins.pluginsLogic)': 'savePluginOrdersFailure'
        'load repository (scenes.plugins.pluginsLogic)': 'loadRepository'
        'load repository success (scenes.plugins.pluginsLogic)': 'loadRepositorySuccess'
        'load repository failure (scenes.plugins.pluginsLogic)': 'loadRepositoryFailure'
    }
    actionTypes: {
        editPlugin: 'edit plugin (scenes.plugins.pluginsLogic)'
        savePluginConfig: 'save plugin config (scenes.plugins.pluginsLogic)'
        installPlugin: 'install plugin (scenes.plugins.pluginsLogic)'
        uninstallPlugin: 'uninstall plugin (scenes.plugins.pluginsLogic)'
        setCustomPluginUrl: 'set custom plugin url (scenes.plugins.pluginsLogic)'
        setLocalPluginUrl: 'set local plugin url (scenes.plugins.pluginsLogic)'
        setSourcePluginName: 'set source plugin name (scenes.plugins.pluginsLogic)'
        setPluginTab: 'set plugin tab (scenes.plugins.pluginsLogic)'
        setEditingSource: 'set editing source (scenes.plugins.pluginsLogic)'
        resetPluginConfigError: 'reset plugin config error (scenes.plugins.pluginsLogic)'
        checkForUpdates: 'check for updates (scenes.plugins.pluginsLogic)'
        checkedForUpdates: 'checked for updates (scenes.plugins.pluginsLogic)'
        setUpdateStatus: 'set update status (scenes.plugins.pluginsLogic)'
        setUpdateError: 'set update error (scenes.plugins.pluginsLogic)'
        updatePlugin: 'update plugin (scenes.plugins.pluginsLogic)'
        pluginUpdated: 'plugin updated (scenes.plugins.pluginsLogic)'
        patchPlugin: 'patch plugin (scenes.plugins.pluginsLogic)'
        generateApiKeysIfNeeded: 'generate api keys if needed (scenes.plugins.pluginsLogic)'
        rearrange: 'rearrange (scenes.plugins.pluginsLogic)'
        setTemporaryOrder: 'set temporary order (scenes.plugins.pluginsLogic)'
        makePluginOrderSaveable: 'make plugin order saveable (scenes.plugins.pluginsLogic)'
        savePluginOrders: 'save plugin orders (scenes.plugins.pluginsLogic)'
        cancelRearranging: 'cancel rearranging (scenes.plugins.pluginsLogic)'
        showPluginLogs: 'show plugin logs (scenes.plugins.pluginsLogic)'
        hidePluginLogs: 'hide plugin logs (scenes.plugins.pluginsLogic)'
        processSearchInput: 'process search input (scenes.plugins.pluginsLogic)'
        setSearchTerm: 'set search term (scenes.plugins.pluginsLogic)'
        setPluginConfigPollTimeout: 'set plugin config poll timeout (scenes.plugins.pluginsLogic)'
        toggleSectionOpen: 'toggle section open (scenes.plugins.pluginsLogic)'
        syncFrontendAppState: 'sync frontend app state (scenes.plugins.pluginsLogic)'
        loadPlugins: 'load plugins (scenes.plugins.pluginsLogic)'
        loadPluginsSuccess: 'load plugins success (scenes.plugins.pluginsLogic)'
        loadPluginsFailure: 'load plugins failure (scenes.plugins.pluginsLogic)'
        installPluginSuccess: 'install plugin success (scenes.plugins.pluginsLogic)'
        installPluginFailure: 'install plugin failure (scenes.plugins.pluginsLogic)'
        uninstallPluginSuccess: 'uninstall plugin success (scenes.plugins.pluginsLogic)'
        uninstallPluginFailure: 'uninstall plugin failure (scenes.plugins.pluginsLogic)'
        updatePluginSuccess: 'update plugin success (scenes.plugins.pluginsLogic)'
        updatePluginFailure: 'update plugin failure (scenes.plugins.pluginsLogic)'
        patchPluginSuccess: 'patch plugin success (scenes.plugins.pluginsLogic)'
        patchPluginFailure: 'patch plugin failure (scenes.plugins.pluginsLogic)'
        loadPluginConfigs: 'load plugin configs (scenes.plugins.pluginsLogic)'
        loadPluginConfigsSuccess: 'load plugin configs success (scenes.plugins.pluginsLogic)'
        loadPluginConfigsFailure: 'load plugin configs failure (scenes.plugins.pluginsLogic)'
        savePluginConfigSuccess: 'save plugin config success (scenes.plugins.pluginsLogic)'
        savePluginConfigFailure: 'save plugin config failure (scenes.plugins.pluginsLogic)'
        toggleEnabled: 'toggle enabled (scenes.plugins.pluginsLogic)'
        toggleEnabledSuccess: 'toggle enabled success (scenes.plugins.pluginsLogic)'
        toggleEnabledFailure: 'toggle enabled failure (scenes.plugins.pluginsLogic)'
        resetPluginConfigErrorSuccess: 'reset plugin config error success (scenes.plugins.pluginsLogic)'
        resetPluginConfigErrorFailure: 'reset plugin config error failure (scenes.plugins.pluginsLogic)'
        savePluginOrdersSuccess: 'save plugin orders success (scenes.plugins.pluginsLogic)'
        savePluginOrdersFailure: 'save plugin orders failure (scenes.plugins.pluginsLogic)'
        loadRepository: 'load repository (scenes.plugins.pluginsLogic)'
        loadRepositorySuccess: 'load repository success (scenes.plugins.pluginsLogic)'
        loadRepositoryFailure: 'load repository failure (scenes.plugins.pluginsLogic)'
    }
    actions: {
        editPlugin: (id: number | null, pluginConfigChanges?: Record<string, any>) => void
        savePluginConfig: (pluginConfigChanges: Record<string, any>) => void
        installPlugin: (pluginUrl: string, pluginType: PluginInstallationType) => void
        uninstallPlugin: (name: string) => void
        setCustomPluginUrl: (customPluginUrl: string) => void
        setLocalPluginUrl: (localPluginUrl: string) => void
        setSourcePluginName: (sourcePluginName: string) => void
        setPluginTab: (tab: PluginTab) => void
        setEditingSource: (editingSource: boolean) => void
        resetPluginConfigError: (id: number) => void
        checkForUpdates: (checkAll: boolean, initialUpdateStatus?: Record<string, PluginUpdateStatusType>) => void
        checkedForUpdates: () => void
        setUpdateStatus: (id: number, tag: string, latestTag: string) => void
        setUpdateError: (id: number) => void
        updatePlugin: (id: number) => void
        pluginUpdated: (id: number) => void
        patchPlugin: (id: number, pluginChanges?: Partial<PluginType>) => void
        generateApiKeysIfNeeded: (form: PluginForm) => void
        rearrange: () => void
        setTemporaryOrder: (temporaryOrder: Record<number, number>, movedPluginId: number) => void
        makePluginOrderSaveable: () => void
        savePluginOrders: (newOrders: Record<number, number>) => void
        cancelRearranging: () => void
        showPluginLogs: (id: number) => void
        hidePluginLogs: () => void
        processSearchInput: (term: string) => void
        setSearchTerm: (term: string | null) => void
        setPluginConfigPollTimeout: (timeout: number | null) => void
        toggleSectionOpen: (section: PluginSection) => void
        syncFrontendAppState: (id: number) => void
        loadPlugins: () => void
        loadPluginsSuccess: (plugins: Record<string, PluginType>, payload?: any) => void
        loadPluginsFailure: (error: string, errorObject?: any) => void
        installPluginSuccess: (
            plugins: { [x: number]: any },
            payload?: {
                pluginUrl: string
                pluginType: PluginInstallationType
            }
        ) => void
        installPluginFailure: (error: string, errorObject?: any) => void
        uninstallPluginSuccess: (
            plugins: Record<number, PluginType>,
            payload?: {
                name: string
            }
        ) => void
        uninstallPluginFailure: (error: string, errorObject?: any) => void
        updatePluginSuccess: (
            plugins: { [x: number]: any },
            payload?: {
                id: number
            }
        ) => void
        updatePluginFailure: (error: string, errorObject?: any) => void
        patchPluginSuccess: (
            plugins: { [x: number]: any },
            payload?: {
                id: number
                pluginChanges: Partial<PluginType>
            }
        ) => void
        patchPluginFailure: (error: string, errorObject?: any) => void
        loadPluginConfigs: () => void
        loadPluginConfigsSuccess: (pluginConfigs: Record<string, PluginConfigType>, payload?: any) => void
        loadPluginConfigsFailure: (error: string, errorObject?: any) => void
        savePluginConfigSuccess: (
            pluginConfigs: Record<string, PluginConfigType>,
            payload?: {
                pluginConfigChanges: Record<string, any>
            }
        ) => void
        savePluginConfigFailure: (error: string, errorObject?: any) => void
        toggleEnabled: ({ id, enabled }: any) => void
        toggleEnabledSuccess: (pluginConfigs: Record<string, PluginConfigType>, payload?: any) => void
        toggleEnabledFailure: (error: string, errorObject?: any) => void
        resetPluginConfigErrorSuccess: (
            pluginConfigs: Record<string, PluginConfigType>,
            payload?: {
                id: number
            }
        ) => void
        resetPluginConfigErrorFailure: (error: string, errorObject?: any) => void
        savePluginOrdersSuccess: (
            pluginConfigs: Record<string, PluginConfigType>,
            payload?: {
                newOrders: Record<number, number>
            }
        ) => void
        savePluginOrdersFailure: (error: string, errorObject?: any) => void
        loadRepository: () => void
        loadRepositorySuccess: (repository: Record<string, PluginRepositoryEntry>, payload?: any) => void
        loadRepositoryFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        editPlugin: (id: number | null, pluginConfigChanges?: Record<string, any>) => Promise<any>
        savePluginConfig: (pluginConfigChanges: Record<string, any>) => Promise<any>
        installPlugin: (pluginUrl: string, pluginType: PluginInstallationType) => Promise<any>
        uninstallPlugin: (name: string) => Promise<any>
        setCustomPluginUrl: (customPluginUrl: string) => Promise<any>
        setLocalPluginUrl: (localPluginUrl: string) => Promise<any>
        setSourcePluginName: (sourcePluginName: string) => Promise<any>
        setPluginTab: (tab: PluginTab) => Promise<any>
        setEditingSource: (editingSource: boolean) => Promise<any>
        resetPluginConfigError: (id: number) => Promise<any>
        checkForUpdates: (
            checkAll: boolean,
            initialUpdateStatus?: Record<string, PluginUpdateStatusType>
        ) => Promise<any>
        checkedForUpdates: () => Promise<any>
        setUpdateStatus: (id: number, tag: string, latestTag: string) => Promise<any>
        setUpdateError: (id: number) => Promise<any>
        updatePlugin: (id: number) => Promise<any>
        pluginUpdated: (id: number) => Promise<any>
        patchPlugin: (id: number, pluginChanges?: Partial<PluginType>) => Promise<any>
        generateApiKeysIfNeeded: (form: PluginForm) => Promise<any>
        rearrange: () => Promise<any>
        setTemporaryOrder: (temporaryOrder: Record<number, number>, movedPluginId: number) => Promise<any>
        makePluginOrderSaveable: () => Promise<any>
        savePluginOrders: (newOrders: Record<number, number>) => Promise<any>
        cancelRearranging: () => Promise<any>
        showPluginLogs: (id: number) => Promise<any>
        hidePluginLogs: () => Promise<any>
        processSearchInput: (term: string) => Promise<any>
        setSearchTerm: (term: string | null) => Promise<any>
        setPluginConfigPollTimeout: (timeout: number | null) => Promise<any>
        toggleSectionOpen: (section: PluginSection) => Promise<any>
        syncFrontendAppState: (id: number) => Promise<any>
        loadPlugins: () => Promise<any>
        loadPluginsSuccess: (plugins: Record<string, PluginType>, payload?: any) => Promise<any>
        loadPluginsFailure: (error: string, errorObject?: any) => Promise<any>
        installPluginSuccess: (
            plugins: { [x: number]: any },
            payload?: {
                pluginUrl: string
                pluginType: PluginInstallationType
            }
        ) => Promise<any>
        installPluginFailure: (error: string, errorObject?: any) => Promise<any>
        uninstallPluginSuccess: (
            plugins: Record<number, PluginType>,
            payload?: {
                name: string
            }
        ) => Promise<any>
        uninstallPluginFailure: (error: string, errorObject?: any) => Promise<any>
        updatePluginSuccess: (
            plugins: { [x: number]: any },
            payload?: {
                id: number
            }
        ) => Promise<any>
        updatePluginFailure: (error: string, errorObject?: any) => Promise<any>
        patchPluginSuccess: (
            plugins: { [x: number]: any },
            payload?: {
                id: number
                pluginChanges: Partial<PluginType>
            }
        ) => Promise<any>
        patchPluginFailure: (error: string, errorObject?: any) => Promise<any>
        loadPluginConfigs: () => Promise<any>
        loadPluginConfigsSuccess: (pluginConfigs: Record<string, PluginConfigType>, payload?: any) => Promise<any>
        loadPluginConfigsFailure: (error: string, errorObject?: any) => Promise<any>
        savePluginConfigSuccess: (
            pluginConfigs: Record<string, PluginConfigType>,
            payload?: {
                pluginConfigChanges: Record<string, any>
            }
        ) => Promise<any>
        savePluginConfigFailure: (error: string, errorObject?: any) => Promise<any>
        toggleEnabled: ({ id, enabled }: any) => Promise<any>
        toggleEnabledSuccess: (pluginConfigs: Record<string, PluginConfigType>, payload?: any) => Promise<any>
        toggleEnabledFailure: (error: string, errorObject?: any) => Promise<any>
        resetPluginConfigErrorSuccess: (
            pluginConfigs: Record<string, PluginConfigType>,
            payload?: {
                id: number
            }
        ) => Promise<any>
        resetPluginConfigErrorFailure: (error: string, errorObject?: any) => Promise<any>
        savePluginOrdersSuccess: (
            pluginConfigs: Record<string, PluginConfigType>,
            payload?: {
                newOrders: Record<number, number>
            }
        ) => Promise<any>
        savePluginOrdersFailure: (error: string, errorObject?: any) => Promise<any>
        loadRepository: () => Promise<any>
        loadRepositorySuccess: (repository: Record<string, PluginRepositoryEntry>, payload?: any) => Promise<any>
        loadRepositoryFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        plugins: Record<number, PluginType>
        pluginsLoading: boolean
        pluginConfigs: Record<string, PluginConfigType>
        pluginConfigsLoading: boolean
        repository: Record<string, PluginRepositoryEntry>
        repositoryLoading: boolean
        installingPluginUrl: string | null
        editingPluginId: number | null
        editingPluginInitialChanges: Record<string, any>
        editingSource: boolean
        customPluginUrl: string
        localPluginUrl: string
        sourcePluginName: string
        pluginError: null | string
        pluginTab: PluginTab
        updateStatus: Record<string, PluginUpdateStatusType>
        pluginsUpdating: number[]
        checkingForUpdates: boolean
        pluginOrderSaveable: boolean
        rearranging: boolean
        temporaryOrder: Record<number, number>
        movedPlugins: Record<number, boolean>
        showingLogsPluginId: number | null
        lastShownLogsPluginId: number | null
        searchTerm: string | null
        sectionsOpen: PluginSection[]
    }
    events: {}
    key: undefined
    listeners: {
        toggleEnabledSuccess: ((
            action: {
                type: 'toggle enabled success (scenes.plugins.pluginsLogic)'
                payload: {
                    pluginConfigs: Record<string, PluginConfigType>
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        syncFrontendAppState: ((
            action: {
                type: 'sync frontend app state (scenes.plugins.pluginsLogic)'
                payload: {
                    id: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        checkForUpdates: ((
            action: {
                type: 'check for updates (scenes.plugins.pluginsLogic)'
                payload: {
                    checkAll: boolean
                    initialUpdateStatus: Record<string, PluginUpdateStatusType>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadPluginsSuccess: ((
            action: {
                type: 'load plugins success (scenes.plugins.pluginsLogic)'
                payload: {
                    plugins: Record<string, PluginType>
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        generateApiKeysIfNeeded: ((
            action: {
                type: 'generate api keys if needed (scenes.plugins.pluginsLogic)'
                payload: {
                    form: PluginForm
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'plugins', 'pluginsLogic']
    pathString: 'scenes.plugins.pluginsLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        plugins: Record<number, PluginType>
        pluginsLoading: boolean
        pluginConfigs: Record<string, PluginConfigType>
        pluginConfigsLoading: boolean
        repository: Record<string, PluginRepositoryEntry>
        repositoryLoading: boolean
        installingPluginUrl: string | null
        editingPluginId: number | null
        editingPluginInitialChanges: Record<string, any>
        editingSource: boolean
        customPluginUrl: string
        localPluginUrl: string
        sourcePluginName: string
        pluginError: null | string
        pluginTab: PluginTab
        updateStatus: Record<string, PluginUpdateStatusType>
        pluginsUpdating: number[]
        checkingForUpdates: boolean
        pluginOrderSaveable: boolean
        rearranging: boolean
        temporaryOrder: Record<number, number>
        movedPlugins: Record<number, boolean>
        showingLogsPluginId: number | null
        lastShownLogsPluginId: number | null
        searchTerm: string | null
        sectionsOpen: PluginSection[]
    }
    reducers: {
        plugins: (state: Record<number, PluginType>, action: any, fullState: any) => Record<number, PluginType>
        pluginsLoading: (state: boolean, action: any, fullState: any) => boolean
        pluginConfigs: (
            state: Record<string, PluginConfigType>,
            action: any,
            fullState: any
        ) => Record<string, PluginConfigType>
        pluginConfigsLoading: (state: boolean, action: any, fullState: any) => boolean
        repository: (
            state: Record<string, PluginRepositoryEntry>,
            action: any,
            fullState: any
        ) => Record<string, PluginRepositoryEntry>
        repositoryLoading: (state: boolean, action: any, fullState: any) => boolean
        installingPluginUrl: (state: string | null, action: any, fullState: any) => string | null
        editingPluginId: (state: number | null, action: any, fullState: any) => number | null
        editingPluginInitialChanges: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
        editingSource: (state: boolean, action: any, fullState: any) => boolean
        customPluginUrl: (state: string, action: any, fullState: any) => string
        localPluginUrl: (state: string, action: any, fullState: any) => string
        sourcePluginName: (state: string, action: any, fullState: any) => string
        pluginError: (state: null | string, action: any, fullState: any) => null | string
        pluginTab: (state: PluginTab, action: any, fullState: any) => PluginTab
        updateStatus: (
            state: Record<string, PluginUpdateStatusType>,
            action: any,
            fullState: any
        ) => Record<string, PluginUpdateStatusType>
        pluginsUpdating: (state: number[], action: any, fullState: any) => number[]
        checkingForUpdates: (state: boolean, action: any, fullState: any) => boolean
        pluginOrderSaveable: (state: boolean, action: any, fullState: any) => boolean
        rearranging: (state: boolean, action: any, fullState: any) => boolean
        temporaryOrder: (state: Record<number, number>, action: any, fullState: any) => Record<number, number>
        movedPlugins: (state: Record<number, boolean>, action: any, fullState: any) => Record<number, boolean>
        showingLogsPluginId: (state: number | null, action: any, fullState: any) => number | null
        lastShownLogsPluginId: (state: number | null, action: any, fullState: any) => number | null
        searchTerm: (state: string | null, action: any, fullState: any) => string | null
        sectionsOpen: (state: PluginSection[], action: any, fullState: any) => PluginSection[]
    }
    selector: (state: any) => {
        plugins: Record<number, PluginType>
        pluginsLoading: boolean
        pluginConfigs: Record<string, PluginConfigType>
        pluginConfigsLoading: boolean
        repository: Record<string, PluginRepositoryEntry>
        repositoryLoading: boolean
        installingPluginUrl: string | null
        editingPluginId: number | null
        editingPluginInitialChanges: Record<string, any>
        editingSource: boolean
        customPluginUrl: string
        localPluginUrl: string
        sourcePluginName: string
        pluginError: null | string
        pluginTab: PluginTab
        updateStatus: Record<string, PluginUpdateStatusType>
        pluginsUpdating: number[]
        checkingForUpdates: boolean
        pluginOrderSaveable: boolean
        rearranging: boolean
        temporaryOrder: Record<number, number>
        movedPlugins: Record<number, boolean>
        showingLogsPluginId: number | null
        lastShownLogsPluginId: number | null
        searchTerm: string | null
        sectionsOpen: PluginSection[]
    }
    selectors: {
        plugins: (state: any, props?: any) => Record<number, PluginType>
        pluginsLoading: (state: any, props?: any) => boolean
        pluginConfigs: (state: any, props?: any) => Record<string, PluginConfigType>
        pluginConfigsLoading: (state: any, props?: any) => boolean
        repository: (state: any, props?: any) => Record<string, PluginRepositoryEntry>
        repositoryLoading: (state: any, props?: any) => boolean
        installingPluginUrl: (state: any, props?: any) => string | null
        editingPluginId: (state: any, props?: any) => number | null
        editingPluginInitialChanges: (state: any, props?: any) => Record<string, any>
        editingSource: (state: any, props?: any) => boolean
        customPluginUrl: (state: any, props?: any) => string
        localPluginUrl: (state: any, props?: any) => string
        sourcePluginName: (state: any, props?: any) => string
        pluginError: (state: any, props?: any) => null | string
        pluginTab: (state: any, props?: any) => PluginTab
        updateStatus: (state: any, props?: any) => Record<string, PluginUpdateStatusType>
        pluginsUpdating: (state: any, props?: any) => number[]
        checkingForUpdates: (state: any, props?: any) => boolean
        pluginOrderSaveable: (state: any, props?: any) => boolean
        rearranging: (state: any, props?: any) => boolean
        temporaryOrder: (state: any, props?: any) => Record<number, number>
        movedPlugins: (state: any, props?: any) => Record<number, boolean>
        showingLogsPluginId: (state: any, props?: any) => number | null
        lastShownLogsPluginId: (state: any, props?: any) => number | null
        searchTerm: (state: any, props?: any) => string | null
        sectionsOpen: (state: any, props?: any) => PluginSection[]
        getPluginConfig: (state: any, props?: any) => (id: number) => PluginConfigType | undefined
        installedPlugins: (state: any, props?: any) => PluginTypeWithConfig[]
        enabledPlugins: (state: any, props?: any) => PluginTypeWithConfig[]
        nextPluginOrder: (state: any, props?: any) => number
        disabledPlugins: (state: any, props?: any) => PluginTypeWithConfig[]
        pluginsNeedingUpdates: (state: any, props?: any) => PluginTypeWithConfig[]
        installedPluginUrls: (state: any, props?: any) => Record<string, boolean>
        updatablePlugins: (state: any, props?: any) => PluginTypeWithConfig[]
        hasUpdatablePlugins: (state: any, props?: any) => boolean
        uninstalledPlugins: (state: any, props?: any) => PluginRepositoryEntry[]
        editingPlugin: (state: any, props?: any) => PluginTypeWithConfig | null | undefined
        loading: (state: any, props?: any) => boolean
        showingLogsPlugin: (state: any, props?: any) => PluginTypeWithConfig | null | undefined
        lastShownLogsPlugin: (state: any, props?: any) => PluginTypeWithConfig | null | undefined
        filteredUninstalledPlugins: (state: any, props?: any) => PluginRepositoryEntry[]
        filteredDisabledPlugins: (state: any, props?: any) => PluginTypeWithConfig[]
        filteredEnabledPlugins: (state: any, props?: any) => PluginTypeWithConfig[]
        filteredPluginsNeedingUpdates: (state: any, props?: any) => PluginTypeWithConfig[]
        sortableEnabledPlugins: (state: any, props?: any) => PluginTypeWithConfig[]
        unsortableEnabledPlugins: (state: any, props?: any) => PluginTypeWithConfig[]
        pluginUrlToMaintainer: (state: any, props?: any) => Record<string, string>
        allPossiblePlugins: (state: any, props?: any) => PluginSelectionType[]
        shouldShowAppMetrics: (state: any, props?: any) => boolean
        showAppMetricsForPlugin: (
            state: any,
            props?: any
        ) => (plugin: Partial<PluginTypeWithConfig> | undefined) => number | false | undefined
    }
    sharedListeners: {}
    values: {
        plugins: Record<number, PluginType>
        pluginsLoading: boolean
        pluginConfigs: Record<string, PluginConfigType>
        pluginConfigsLoading: boolean
        repository: Record<string, PluginRepositoryEntry>
        repositoryLoading: boolean
        installingPluginUrl: string | null
        editingPluginId: number | null
        editingPluginInitialChanges: Record<string, any>
        editingSource: boolean
        customPluginUrl: string
        localPluginUrl: string
        sourcePluginName: string
        pluginError: null | string
        pluginTab: PluginTab
        updateStatus: Record<string, PluginUpdateStatusType>
        pluginsUpdating: number[]
        checkingForUpdates: boolean
        pluginOrderSaveable: boolean
        rearranging: boolean
        temporaryOrder: Record<number, number>
        movedPlugins: Record<number, boolean>
        showingLogsPluginId: number | null
        lastShownLogsPluginId: number | null
        searchTerm: string | null
        sectionsOpen: PluginSection[]
        getPluginConfig: (id: number) => PluginConfigType | undefined
        installedPlugins: PluginTypeWithConfig[]
        enabledPlugins: PluginTypeWithConfig[]
        nextPluginOrder: number
        disabledPlugins: PluginTypeWithConfig[]
        pluginsNeedingUpdates: PluginTypeWithConfig[]
        installedPluginUrls: Record<string, boolean>
        updatablePlugins: PluginTypeWithConfig[]
        hasUpdatablePlugins: boolean
        uninstalledPlugins: PluginRepositoryEntry[]
        editingPlugin: PluginTypeWithConfig | null | undefined
        loading: boolean
        showingLogsPlugin: PluginTypeWithConfig | null | undefined
        lastShownLogsPlugin: PluginTypeWithConfig | null | undefined
        filteredUninstalledPlugins: PluginRepositoryEntry[]
        filteredDisabledPlugins: PluginTypeWithConfig[]
        filteredEnabledPlugins: PluginTypeWithConfig[]
        filteredPluginsNeedingUpdates: PluginTypeWithConfig[]
        sortableEnabledPlugins: PluginTypeWithConfig[]
        unsortableEnabledPlugins: PluginTypeWithConfig[]
        pluginUrlToMaintainer: Record<string, string>
        allPossiblePlugins: PluginSelectionType[]
        shouldShowAppMetrics: boolean
        showAppMetricsForPlugin: (plugin: Partial<PluginTypeWithConfig> | undefined) => number | false | undefined
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        getPluginConfig: (
            pluginConfigs: Record<string, PluginConfigType>
        ) => (id: number) => PluginConfigType | undefined
        installedPlugins: (
            plugins: Record<number, PluginType>,
            pluginConfigs: Record<string, PluginConfigType>,
            updateStatus: Record<string, PluginUpdateStatusType>
        ) => PluginTypeWithConfig[]
        enabledPlugins: (
            installedPlugins: PluginTypeWithConfig[],
            movedPlugins: Record<number, boolean>,
            temporaryOrder: Record<number, number>
        ) => PluginTypeWithConfig[]
        nextPluginOrder: (enabledPlugins: PluginTypeWithConfig[]) => number
        disabledPlugins: (installedPlugins: PluginTypeWithConfig[]) => PluginTypeWithConfig[]
        pluginsNeedingUpdates: (
            installedPlugins: PluginTypeWithConfig[],
            user:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').UserType
                | null
        ) => PluginTypeWithConfig[]
        installedPluginUrls: (
            installedPlugins: PluginTypeWithConfig[],
            user:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').UserType
                | null
        ) => Record<string, boolean>
        updatablePlugins: (
            installedPlugins: PluginTypeWithConfig[],
            user:
                | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').UserType
                | null
        ) => PluginTypeWithConfig[]
        hasUpdatablePlugins: (updatablePlugins: PluginTypeWithConfig[]) => boolean
        uninstalledPlugins: (
            installedPluginUrls: Record<string, boolean>,
            repository: Record<string, PluginRepositoryEntry>
        ) => PluginRepositoryEntry[]
        editingPlugin: (
            editingPluginId: number | null,
            installedPlugins: PluginTypeWithConfig[]
        ) => PluginTypeWithConfig | null | undefined
        loading: (pluginsLoading: boolean, repositoryLoading: boolean, pluginConfigsLoading: boolean) => boolean
        showingLogsPlugin: (
            showingLogsPluginId: number | null,
            installedPlugins: PluginTypeWithConfig[]
        ) => PluginTypeWithConfig | null | undefined
        lastShownLogsPlugin: (
            lastShownLogsPluginId: number | null,
            installedPlugins: PluginTypeWithConfig[]
        ) => PluginTypeWithConfig | null | undefined
        filteredUninstalledPlugins: (
            searchTerm: string | null,
            uninstalledPlugins: PluginRepositoryEntry[]
        ) => PluginRepositoryEntry[]
        filteredDisabledPlugins: (
            searchTerm: string | null,
            disabledPlugins: PluginTypeWithConfig[]
        ) => PluginTypeWithConfig[]
        filteredEnabledPlugins: (
            searchTerm: string | null,
            enabledPlugins: PluginTypeWithConfig[]
        ) => PluginTypeWithConfig[]
        filteredPluginsNeedingUpdates: (
            searchTerm: string | null,
            pluginsNeedingUpdates: PluginTypeWithConfig[]
        ) => PluginTypeWithConfig[]
        sortableEnabledPlugins: (filteredEnabledPlugins: PluginTypeWithConfig[]) => PluginTypeWithConfig[]
        unsortableEnabledPlugins: (
            filteredEnabledPlugins: PluginTypeWithConfig[],
            sortableEnabledPlugins: PluginTypeWithConfig[]
        ) => PluginTypeWithConfig[]
        pluginUrlToMaintainer: (repository: Record<string, PluginRepositoryEntry>) => Record<string, string>
        allPossiblePlugins: (
            repository: Record<string, PluginRepositoryEntry>,
            plugins: Record<number, PluginType>
        ) => PluginSelectionType[]
        shouldShowAppMetrics: (
            hasAvailableFeature: (feature: AvailableFeature, currentUsage?: number | undefined) => boolean
        ) => boolean
        showAppMetricsForPlugin: (
            shouldShowAppMetrics: boolean
        ) => (plugin: Partial<PluginTypeWithConfig> | undefined) => number | false | undefined
    }
}
