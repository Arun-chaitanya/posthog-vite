// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:21 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PluginLogsProps } from './pluginLogsLogic'
import type { CheckboxValueType } from '../../../../../node_modules/.pnpm/antd@4.17.1_react-dom@16.14.0_react@16.14.0/node_modules/antd/lib/checkbox/Group.d'
import type { PluginLogEntry, PluginLogEntryType } from '../../../types'

export interface pluginLogsLogicType extends Logic {
    actionCreators: {
        clearPluginLogsBackground: () => {
            type: 'clear plugin logs background (scenes.plugins.plugin.pluginLogsLogic.*)'
            payload: {
                value: true
            }
        }
        markLogsEnd: () => {
            type: 'mark logs end (scenes.plugins.plugin.pluginLogsLogic.*)'
            payload: {
                value: true
            }
        }
        setPluginLogsTypes: (typeFilters: CheckboxValueType[]) => {
            type: 'set plugin logs types (scenes.plugins.plugin.pluginLogsLogic.*)'
            payload: {
                typeFilters: CheckboxValueType[]
            }
        }
        setSearchTerm: (searchTerm: string) => {
            type: 'set search term (scenes.plugins.plugin.pluginLogsLogic.*)'
            payload: {
                searchTerm: string
            }
        }
        loadPluginLogs: () => {
            type: 'load plugin logs (scenes.plugins.plugin.pluginLogsLogic.*)'
            payload: any
        }
        loadPluginLogsSuccess: (
            pluginLogs: PluginLogEntry[],
            payload?: any
        ) => {
            type: 'load plugin logs success (scenes.plugins.plugin.pluginLogsLogic.*)'
            payload: {
                pluginLogs: PluginLogEntry[]
                payload?: any
            }
        }
        loadPluginLogsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load plugin logs failure (scenes.plugins.plugin.pluginLogsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadPluginLogsMore: () => {
            type: 'load plugin logs more (scenes.plugins.plugin.pluginLogsLogic.*)'
            payload: any
        }
        loadPluginLogsMoreSuccess: (
            pluginLogs: PluginLogEntry[],
            payload?: any
        ) => {
            type: 'load plugin logs more success (scenes.plugins.plugin.pluginLogsLogic.*)'
            payload: {
                pluginLogs: PluginLogEntry[]
                payload?: any
            }
        }
        loadPluginLogsMoreFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load plugin logs more failure (scenes.plugins.plugin.pluginLogsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        revealBackground: () => {
            type: 'reveal background (scenes.plugins.plugin.pluginLogsLogic.*)'
            payload: any
        }
        revealBackgroundSuccess: (
            pluginLogs: PluginLogEntry[],
            payload?: any
        ) => {
            type: 'reveal background success (scenes.plugins.plugin.pluginLogsLogic.*)'
            payload: {
                pluginLogs: PluginLogEntry[]
                payload?: any
            }
        }
        revealBackgroundFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'reveal background failure (scenes.plugins.plugin.pluginLogsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadPluginLogsBackgroundPoll: () => {
            type: 'load plugin logs background poll (scenes.plugins.plugin.pluginLogsLogic.*)'
            payload: any
        }
        loadPluginLogsBackgroundPollSuccess: (
            pluginLogsBackground: PluginLogEntry[],
            payload?: any
        ) => {
            type: 'load plugin logs background poll success (scenes.plugins.plugin.pluginLogsLogic.*)'
            payload: {
                pluginLogsBackground: PluginLogEntry[]
                payload?: any
            }
        }
        loadPluginLogsBackgroundPollFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load plugin logs background poll failure (scenes.plugins.plugin.pluginLogsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'clear plugin logs background (scenes.plugins.plugin.pluginLogsLogic.*)': 'clearPluginLogsBackground'
        'mark logs end (scenes.plugins.plugin.pluginLogsLogic.*)': 'markLogsEnd'
        'set plugin logs types (scenes.plugins.plugin.pluginLogsLogic.*)': 'setPluginLogsTypes'
        'set search term (scenes.plugins.plugin.pluginLogsLogic.*)': 'setSearchTerm'
        'load plugin logs (scenes.plugins.plugin.pluginLogsLogic.*)': 'loadPluginLogs'
        'load plugin logs success (scenes.plugins.plugin.pluginLogsLogic.*)': 'loadPluginLogsSuccess'
        'load plugin logs failure (scenes.plugins.plugin.pluginLogsLogic.*)': 'loadPluginLogsFailure'
        'load plugin logs more (scenes.plugins.plugin.pluginLogsLogic.*)': 'loadPluginLogsMore'
        'load plugin logs more success (scenes.plugins.plugin.pluginLogsLogic.*)': 'loadPluginLogsMoreSuccess'
        'load plugin logs more failure (scenes.plugins.plugin.pluginLogsLogic.*)': 'loadPluginLogsMoreFailure'
        'reveal background (scenes.plugins.plugin.pluginLogsLogic.*)': 'revealBackground'
        'reveal background success (scenes.plugins.plugin.pluginLogsLogic.*)': 'revealBackgroundSuccess'
        'reveal background failure (scenes.plugins.plugin.pluginLogsLogic.*)': 'revealBackgroundFailure'
        'load plugin logs background poll (scenes.plugins.plugin.pluginLogsLogic.*)': 'loadPluginLogsBackgroundPoll'
        'load plugin logs background poll success (scenes.plugins.plugin.pluginLogsLogic.*)': 'loadPluginLogsBackgroundPollSuccess'
        'load plugin logs background poll failure (scenes.plugins.plugin.pluginLogsLogic.*)': 'loadPluginLogsBackgroundPollFailure'
    }
    actionTypes: {
        clearPluginLogsBackground: 'clear plugin logs background (scenes.plugins.plugin.pluginLogsLogic.*)'
        markLogsEnd: 'mark logs end (scenes.plugins.plugin.pluginLogsLogic.*)'
        setPluginLogsTypes: 'set plugin logs types (scenes.plugins.plugin.pluginLogsLogic.*)'
        setSearchTerm: 'set search term (scenes.plugins.plugin.pluginLogsLogic.*)'
        loadPluginLogs: 'load plugin logs (scenes.plugins.plugin.pluginLogsLogic.*)'
        loadPluginLogsSuccess: 'load plugin logs success (scenes.plugins.plugin.pluginLogsLogic.*)'
        loadPluginLogsFailure: 'load plugin logs failure (scenes.plugins.plugin.pluginLogsLogic.*)'
        loadPluginLogsMore: 'load plugin logs more (scenes.plugins.plugin.pluginLogsLogic.*)'
        loadPluginLogsMoreSuccess: 'load plugin logs more success (scenes.plugins.plugin.pluginLogsLogic.*)'
        loadPluginLogsMoreFailure: 'load plugin logs more failure (scenes.plugins.plugin.pluginLogsLogic.*)'
        revealBackground: 'reveal background (scenes.plugins.plugin.pluginLogsLogic.*)'
        revealBackgroundSuccess: 'reveal background success (scenes.plugins.plugin.pluginLogsLogic.*)'
        revealBackgroundFailure: 'reveal background failure (scenes.plugins.plugin.pluginLogsLogic.*)'
        loadPluginLogsBackgroundPoll: 'load plugin logs background poll (scenes.plugins.plugin.pluginLogsLogic.*)'
        loadPluginLogsBackgroundPollSuccess: 'load plugin logs background poll success (scenes.plugins.plugin.pluginLogsLogic.*)'
        loadPluginLogsBackgroundPollFailure: 'load plugin logs background poll failure (scenes.plugins.plugin.pluginLogsLogic.*)'
    }
    actions: {
        clearPluginLogsBackground: () => void
        markLogsEnd: () => void
        setPluginLogsTypes: (typeFilters: CheckboxValueType[]) => void
        setSearchTerm: (searchTerm: string) => void
        loadPluginLogs: () => void
        loadPluginLogsSuccess: (pluginLogs: PluginLogEntry[], payload?: any) => void
        loadPluginLogsFailure: (error: string, errorObject?: any) => void
        loadPluginLogsMore: () => void
        loadPluginLogsMoreSuccess: (pluginLogs: PluginLogEntry[], payload?: any) => void
        loadPluginLogsMoreFailure: (error: string, errorObject?: any) => void
        revealBackground: () => void
        revealBackgroundSuccess: (pluginLogs: PluginLogEntry[], payload?: any) => void
        revealBackgroundFailure: (error: string, errorObject?: any) => void
        loadPluginLogsBackgroundPoll: () => void
        loadPluginLogsBackgroundPollSuccess: (pluginLogsBackground: PluginLogEntry[], payload?: any) => void
        loadPluginLogsBackgroundPollFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        clearPluginLogsBackground: () => Promise<any>
        markLogsEnd: () => Promise<any>
        setPluginLogsTypes: (typeFilters: CheckboxValueType[]) => Promise<any>
        setSearchTerm: (searchTerm: string) => Promise<any>
        loadPluginLogs: () => Promise<any>
        loadPluginLogsSuccess: (pluginLogs: PluginLogEntry[], payload?: any) => Promise<any>
        loadPluginLogsFailure: (error: string, errorObject?: any) => Promise<any>
        loadPluginLogsMore: () => Promise<any>
        loadPluginLogsMoreSuccess: (pluginLogs: PluginLogEntry[], payload?: any) => Promise<any>
        loadPluginLogsMoreFailure: (error: string, errorObject?: any) => Promise<any>
        revealBackground: () => Promise<any>
        revealBackgroundSuccess: (pluginLogs: PluginLogEntry[], payload?: any) => Promise<any>
        revealBackgroundFailure: (error: string, errorObject?: any) => Promise<any>
        loadPluginLogsBackgroundPoll: () => Promise<any>
        loadPluginLogsBackgroundPollSuccess: (pluginLogsBackground: PluginLogEntry[], payload?: any) => Promise<any>
        loadPluginLogsBackgroundPollFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        pluginLogs: PluginLogEntry[]
        pluginLogsLoading: boolean
        pluginLogsBackground: PluginLogEntry[]
        pluginLogsBackgroundLoading: boolean
        pluginLogsTypes: PluginLogEntryType[]
        searchTerm: string
        typeFilters: CheckboxValueType[]
        isThereMoreToLoad: boolean
    }
    events: {
        afterMount: () => void
        beforeUnmount: () => void
    }
    key: number
    listeners: {
        setPluginLogsTypes: ((
            action: {
                type: 'set plugin logs types (scenes.plugins.plugin.pluginLogsLogic.*)'
                payload: {
                    typeFilters: CheckboxValueType[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setSearchTerm: ((
            action: {
                type: 'set search term (scenes.plugins.plugin.pluginLogsLogic.*)'
                payload: {
                    searchTerm: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'plugins', 'plugin', 'pluginLogsLogic', '*']
    pathString: 'scenes.plugins.plugin.pluginLogsLogic.*'
    props: PluginLogsProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        pluginLogs: PluginLogEntry[]
        pluginLogsLoading: boolean
        pluginLogsBackground: PluginLogEntry[]
        pluginLogsBackgroundLoading: boolean
        pluginLogsTypes: PluginLogEntryType[]
        searchTerm: string
        typeFilters: CheckboxValueType[]
        isThereMoreToLoad: boolean
    }
    reducers: {
        pluginLogs: (state: PluginLogEntry[], action: any, fullState: any) => PluginLogEntry[]
        pluginLogsLoading: (state: boolean, action: any, fullState: any) => boolean
        pluginLogsBackground: (state: PluginLogEntry[], action: any, fullState: any) => PluginLogEntry[]
        pluginLogsBackgroundLoading: (state: boolean, action: any, fullState: any) => boolean
        pluginLogsTypes: (state: PluginLogEntryType[], action: any, fullState: any) => PluginLogEntryType[]
        searchTerm: (state: string, action: any, fullState: any) => string
        typeFilters: (state: CheckboxValueType[], action: any, fullState: any) => CheckboxValueType[]
        isThereMoreToLoad: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        pluginLogs: PluginLogEntry[]
        pluginLogsLoading: boolean
        pluginLogsBackground: PluginLogEntry[]
        pluginLogsBackgroundLoading: boolean
        pluginLogsTypes: PluginLogEntryType[]
        searchTerm: string
        typeFilters: CheckboxValueType[]
        isThereMoreToLoad: boolean
    }
    selectors: {
        pluginLogs: (state: any, props?: any) => PluginLogEntry[]
        pluginLogsLoading: (state: any, props?: any) => boolean
        pluginLogsBackground: (state: any, props?: any) => PluginLogEntry[]
        pluginLogsBackgroundLoading: (state: any, props?: any) => boolean
        pluginLogsTypes: (state: any, props?: any) => PluginLogEntryType[]
        searchTerm: (state: any, props?: any) => string
        typeFilters: (state: any, props?: any) => CheckboxValueType[]
        isThereMoreToLoad: (state: any, props?: any) => boolean
        currentTeamId: (state: any, props?: any) => number | null
        leadingEntry: (state: any, props?: any) => PluginLogEntry | null
        trailingEntry: (state: any, props?: any) => PluginLogEntry | null
    }
    sharedListeners: {}
    values: {
        pluginLogs: PluginLogEntry[]
        pluginLogsLoading: boolean
        pluginLogsBackground: PluginLogEntry[]
        pluginLogsBackgroundLoading: boolean
        pluginLogsTypes: PluginLogEntryType[]
        searchTerm: string
        typeFilters: CheckboxValueType[]
        isThereMoreToLoad: boolean
        currentTeamId: number | null
        leadingEntry: PluginLogEntry | null
        trailingEntry: PluginLogEntry | null
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        leadingEntry: (pluginLogs: PluginLogEntry[], pluginLogsBackground: PluginLogEntry[]) => PluginLogEntry | null
        trailingEntry: (pluginLogs: PluginLogEntry[], pluginLogsBackground: PluginLogEntry[]) => PluginLogEntry | null
    }
}
