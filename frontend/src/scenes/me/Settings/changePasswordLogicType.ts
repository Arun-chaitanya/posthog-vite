// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:25 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { UserType } from '../../../types'
import type { ChangePasswordForm } from './changePasswordLogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../../node_modules/kea-forms'

export interface changePasswordLogicType extends Logic {
    actionCreators: {
        setChangePasswordValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set change password value (scenes.me.settings.changePasswordLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setChangePasswordValues: (values: DeepPartial<ChangePasswordForm>) => {
            type: 'set change password values (scenes.me.settings.changePasswordLogic)'
            payload: {
                values: DeepPartial<ChangePasswordForm>
            }
        }
        setChangePasswordManualErrors: (errors: Record<string, any>) => {
            type: 'set change password manual errors (scenes.me.settings.changePasswordLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchChangePasswordField: (key: string) => {
            type: 'touch change password field (scenes.me.settings.changePasswordLogic)'
            payload: {
                key: string
            }
        }
        resetChangePassword: (values?: ChangePasswordForm) => {
            type: 'reset change password (scenes.me.settings.changePasswordLogic)'
            payload: {
                values?: ChangePasswordForm
            }
        }
        submitChangePassword: () => {
            type: 'submit change password (scenes.me.settings.changePasswordLogic)'
            payload: {
                value: boolean
            }
        }
        submitChangePasswordRequest: (changePassword: ChangePasswordForm) => {
            type: 'submit change password request (scenes.me.settings.changePasswordLogic)'
            payload: {
                changePassword: ChangePasswordForm
            }
        }
        submitChangePasswordSuccess: (changePassword: ChangePasswordForm) => {
            type: 'submit change password success (scenes.me.settings.changePasswordLogic)'
            payload: {
                changePassword: ChangePasswordForm
            }
        }
        submitChangePasswordFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit change password failure (scenes.me.settings.changePasswordLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'set change password value (scenes.me.settings.changePasswordLogic)': 'setChangePasswordValue'
        'set change password values (scenes.me.settings.changePasswordLogic)': 'setChangePasswordValues'
        'set change password manual errors (scenes.me.settings.changePasswordLogic)': 'setChangePasswordManualErrors'
        'touch change password field (scenes.me.settings.changePasswordLogic)': 'touchChangePasswordField'
        'reset change password (scenes.me.settings.changePasswordLogic)': 'resetChangePassword'
        'submit change password (scenes.me.settings.changePasswordLogic)': 'submitChangePassword'
        'submit change password request (scenes.me.settings.changePasswordLogic)': 'submitChangePasswordRequest'
        'submit change password success (scenes.me.settings.changePasswordLogic)': 'submitChangePasswordSuccess'
        'submit change password failure (scenes.me.settings.changePasswordLogic)': 'submitChangePasswordFailure'
    }
    actionTypes: {
        setChangePasswordValue: 'set change password value (scenes.me.settings.changePasswordLogic)'
        setChangePasswordValues: 'set change password values (scenes.me.settings.changePasswordLogic)'
        setChangePasswordManualErrors: 'set change password manual errors (scenes.me.settings.changePasswordLogic)'
        touchChangePasswordField: 'touch change password field (scenes.me.settings.changePasswordLogic)'
        resetChangePassword: 'reset change password (scenes.me.settings.changePasswordLogic)'
        submitChangePassword: 'submit change password (scenes.me.settings.changePasswordLogic)'
        submitChangePasswordRequest: 'submit change password request (scenes.me.settings.changePasswordLogic)'
        submitChangePasswordSuccess: 'submit change password success (scenes.me.settings.changePasswordLogic)'
        submitChangePasswordFailure: 'submit change password failure (scenes.me.settings.changePasswordLogic)'
    }
    actions: {
        setChangePasswordValue: (key: FieldName, value: any) => void
        setChangePasswordValues: (values: DeepPartial<ChangePasswordForm>) => void
        setChangePasswordManualErrors: (errors: Record<string, any>) => void
        touchChangePasswordField: (key: string) => void
        resetChangePassword: (values?: ChangePasswordForm) => void
        submitChangePassword: () => void
        submitChangePasswordRequest: (changePassword: ChangePasswordForm) => void
        submitChangePasswordSuccess: (changePassword: ChangePasswordForm) => void
        submitChangePasswordFailure: (error: Error, errors: Record<string, any>) => void
    }
    asyncActions: {
        setChangePasswordValue: (key: FieldName, value: any) => Promise<any>
        setChangePasswordValues: (values: DeepPartial<ChangePasswordForm>) => Promise<any>
        setChangePasswordManualErrors: (errors: Record<string, any>) => Promise<any>
        touchChangePasswordField: (key: string) => Promise<any>
        resetChangePassword: (values?: ChangePasswordForm) => Promise<any>
        submitChangePassword: () => Promise<any>
        submitChangePasswordRequest: (changePassword: ChangePasswordForm) => Promise<any>
        submitChangePasswordSuccess: (changePassword: ChangePasswordForm) => Promise<any>
        submitChangePasswordFailure: (error: Error, errors: Record<string, any>) => Promise<any>
    }
    defaults: {
        changePassword: ChangePasswordForm
        isChangePasswordSubmitting: boolean
        showChangePasswordErrors: boolean
        changePasswordChanged: boolean
        changePasswordTouches: Record<string, boolean>
        changePasswordManualErrors: Record<string, any>
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'me', 'settings', 'changePasswordLogic']
    pathString: 'scenes.me.settings.changePasswordLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        changePassword: ChangePasswordForm
        isChangePasswordSubmitting: boolean
        showChangePasswordErrors: boolean
        changePasswordChanged: boolean
        changePasswordTouches: Record<string, boolean>
        changePasswordManualErrors: Record<string, any>
    }
    reducers: {
        changePassword: (state: ChangePasswordForm, action: any, fullState: any) => ChangePasswordForm
        isChangePasswordSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showChangePasswordErrors: (state: boolean, action: any, fullState: any) => boolean
        changePasswordChanged: (state: boolean, action: any, fullState: any) => boolean
        changePasswordTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        changePasswordManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        changePassword: ChangePasswordForm
        isChangePasswordSubmitting: boolean
        showChangePasswordErrors: boolean
        changePasswordChanged: boolean
        changePasswordTouches: Record<string, boolean>
        changePasswordManualErrors: Record<string, any>
    }
    selectors: {
        changePassword: (state: any, props?: any) => ChangePasswordForm
        isChangePasswordSubmitting: (state: any, props?: any) => boolean
        showChangePasswordErrors: (state: any, props?: any) => boolean
        changePasswordChanged: (state: any, props?: any) => boolean
        changePasswordTouches: (state: any, props?: any) => Record<string, boolean>
        changePasswordManualErrors: (state: any, props?: any) => Record<string, any>
        user: (state: any, props?: any) => UserType | null
        changePasswordTouched: (state: any, props?: any) => boolean
        changePasswordValidationErrors: (
            state: any,
            props?: any
        ) => DeepPartialMap<ChangePasswordForm, ValidationErrorType>
        changePasswordAllErrors: (state: any, props?: any) => Record<string, any>
        changePasswordHasErrors: (state: any, props?: any) => boolean
        changePasswordErrors: (state: any, props?: any) => DeepPartialMap<ChangePasswordForm, ValidationErrorType>
        isChangePasswordValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        changePassword: ChangePasswordForm
        isChangePasswordSubmitting: boolean
        showChangePasswordErrors: boolean
        changePasswordChanged: boolean
        changePasswordTouches: Record<string, boolean>
        changePasswordManualErrors: Record<string, any>
        user: UserType | null
        changePasswordTouched: boolean
        changePasswordValidationErrors: DeepPartialMap<ChangePasswordForm, ValidationErrorType>
        changePasswordAllErrors: Record<string, any>
        changePasswordHasErrors: boolean
        changePasswordErrors: DeepPartialMap<ChangePasswordForm, ValidationErrorType>
        isChangePasswordValid: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
