// Generated by kea-typegen on Thu, 20 Jul 2023 11:20:07 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ActionStepType, FilterType } from '../../types'
import type { PaginatedResponse } from '../../lib/api'
import type { CountedHTMLElement, ElementsEventType } from '../types'

export interface heatmapLogicType extends Logic {
    actionCreators: {
        getElementStats: (url?: string | null) => {
            type: 'get element stats (toolbar.elements.heatmapLogic)'
            payload: {
                url: string | null | undefined
            }
        }
        enableHeatmap: () => {
            type: 'enable heatmap (toolbar.elements.heatmapLogic)'
            payload: {
                value: true
            }
        }
        disableHeatmap: () => {
            type: 'disable heatmap (toolbar.elements.heatmapLogic)'
            payload: {
                value: true
            }
        }
        setShowHeatmapTooltip: (showHeatmapTooltip: boolean) => {
            type: 'set show heatmap tooltip (toolbar.elements.heatmapLogic)'
            payload: {
                showHeatmapTooltip: boolean
            }
        }
        setShiftPressed: (shiftPressed: boolean) => {
            type: 'set shift pressed (toolbar.elements.heatmapLogic)'
            payload: {
                shiftPressed: boolean
            }
        }
        setHeatmapFilter: (filter: Partial<FilterType>) => {
            type: 'set heatmap filter (toolbar.elements.heatmapLogic)'
            payload: {
                filter: Partial<FilterType>
            }
        }
        loadMoreElementStats: () => {
            type: 'load more element stats (toolbar.elements.heatmapLogic)'
            payload: {
                value: true
            }
        }
        setMatchLinksByHref: (matchLinksByHref: boolean) => {
            type: 'set match links by href (toolbar.elements.heatmapLogic)'
            payload: {
                matchLinksByHref: boolean
            }
        }
        resetElementStats: () => {
            type: 'reset element stats (toolbar.elements.heatmapLogic)'
            payload: any
        }
        resetElementStatsSuccess: (
            elementStats: PaginatedResponse<ElementsEventType>,
            payload?: any
        ) => {
            type: 'reset element stats success (toolbar.elements.heatmapLogic)'
            payload: {
                elementStats: PaginatedResponse<ElementsEventType>
                payload?: any
            }
        }
        resetElementStatsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'reset element stats failure (toolbar.elements.heatmapLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        getElementStatsSuccess: (
            elementStats: PaginatedResponse<ElementsEventType>,
            payload?: {
                url: string | null | undefined
            }
        ) => {
            type: 'get element stats success (toolbar.elements.heatmapLogic)'
            payload: {
                elementStats: PaginatedResponse<ElementsEventType>
                payload?: {
                    url: string | null | undefined
                }
            }
        }
        getElementStatsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'get element stats failure (toolbar.elements.heatmapLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'get element stats (toolbar.elements.heatmapLogic)': 'getElementStats'
        'enable heatmap (toolbar.elements.heatmapLogic)': 'enableHeatmap'
        'disable heatmap (toolbar.elements.heatmapLogic)': 'disableHeatmap'
        'set show heatmap tooltip (toolbar.elements.heatmapLogic)': 'setShowHeatmapTooltip'
        'set shift pressed (toolbar.elements.heatmapLogic)': 'setShiftPressed'
        'set heatmap filter (toolbar.elements.heatmapLogic)': 'setHeatmapFilter'
        'load more element stats (toolbar.elements.heatmapLogic)': 'loadMoreElementStats'
        'set match links by href (toolbar.elements.heatmapLogic)': 'setMatchLinksByHref'
        'reset element stats (toolbar.elements.heatmapLogic)': 'resetElementStats'
        'reset element stats success (toolbar.elements.heatmapLogic)': 'resetElementStatsSuccess'
        'reset element stats failure (toolbar.elements.heatmapLogic)': 'resetElementStatsFailure'
        'get element stats success (toolbar.elements.heatmapLogic)': 'getElementStatsSuccess'
        'get element stats failure (toolbar.elements.heatmapLogic)': 'getElementStatsFailure'
    }
    actionTypes: {
        getElementStats: 'get element stats (toolbar.elements.heatmapLogic)'
        enableHeatmap: 'enable heatmap (toolbar.elements.heatmapLogic)'
        disableHeatmap: 'disable heatmap (toolbar.elements.heatmapLogic)'
        setShowHeatmapTooltip: 'set show heatmap tooltip (toolbar.elements.heatmapLogic)'
        setShiftPressed: 'set shift pressed (toolbar.elements.heatmapLogic)'
        setHeatmapFilter: 'set heatmap filter (toolbar.elements.heatmapLogic)'
        loadMoreElementStats: 'load more element stats (toolbar.elements.heatmapLogic)'
        setMatchLinksByHref: 'set match links by href (toolbar.elements.heatmapLogic)'
        resetElementStats: 'reset element stats (toolbar.elements.heatmapLogic)'
        resetElementStatsSuccess: 'reset element stats success (toolbar.elements.heatmapLogic)'
        resetElementStatsFailure: 'reset element stats failure (toolbar.elements.heatmapLogic)'
        getElementStatsSuccess: 'get element stats success (toolbar.elements.heatmapLogic)'
        getElementStatsFailure: 'get element stats failure (toolbar.elements.heatmapLogic)'
    }
    actions: {
        getElementStats: (url?: string | null) => void
        enableHeatmap: () => void
        disableHeatmap: () => void
        setShowHeatmapTooltip: (showHeatmapTooltip: boolean) => void
        setShiftPressed: (shiftPressed: boolean) => void
        setHeatmapFilter: (filter: Partial<FilterType>) => void
        loadMoreElementStats: () => void
        setMatchLinksByHref: (matchLinksByHref: boolean) => void
        resetElementStats: () => void
        resetElementStatsSuccess: (elementStats: PaginatedResponse<ElementsEventType>, payload?: any) => void
        resetElementStatsFailure: (error: string, errorObject?: any) => void
        getElementStatsSuccess: (
            elementStats: PaginatedResponse<ElementsEventType>,
            payload?: {
                url: string | null | undefined
            }
        ) => void
        getElementStatsFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        getElementStats: (url?: string | null) => Promise<any>
        enableHeatmap: () => Promise<any>
        disableHeatmap: () => Promise<any>
        setShowHeatmapTooltip: (showHeatmapTooltip: boolean) => Promise<any>
        setShiftPressed: (shiftPressed: boolean) => Promise<any>
        setHeatmapFilter: (filter: Partial<FilterType>) => Promise<any>
        loadMoreElementStats: () => Promise<any>
        setMatchLinksByHref: (matchLinksByHref: boolean) => Promise<any>
        resetElementStats: () => Promise<any>
        resetElementStatsSuccess: (elementStats: PaginatedResponse<ElementsEventType>, payload?: any) => Promise<any>
        resetElementStatsFailure: (error: string, errorObject?: any) => Promise<any>
        getElementStatsSuccess: (
            elementStats: PaginatedResponse<ElementsEventType>,
            payload?: {
                url: string | null | undefined
            }
        ) => Promise<any>
        getElementStatsFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        matchLinksByHref: boolean
        canLoadMoreElementStats: boolean
        heatmapEnabled: boolean
        heatmapLoading: boolean
        showHeatmapTooltip: boolean
        shiftPressed: boolean
        heatmapFilter: Partial<FilterType>
        elementStats: PaginatedResponse<ElementsEventType> | null
        elementStatsLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {
        loadMoreElementStats: ((
            action: {
                type: 'load more element stats (toolbar.elements.heatmapLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        'set href (toolbar.stats.currentPageLogic)': ((
            action: {
                type: 'set href (toolbar.stats.currentPageLogic)'
                payload: {
                    href: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        'set wildcard href (toolbar.stats.currentPageLogic)': ((
            action: {
                type: 'set wildcard href (toolbar.stats.currentPageLogic)'
                payload: {
                    href: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        enableHeatmap: ((
            action: {
                type: 'enable heatmap (toolbar.elements.heatmapLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        disableHeatmap: ((
            action: {
                type: 'disable heatmap (toolbar.elements.heatmapLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        getElementStatsSuccess: ((
            action: {
                type: 'get element stats success (toolbar.elements.heatmapLogic)'
                payload: {
                    elementStats: PaginatedResponse<ElementsEventType>
                    payload?: {
                        url: string | null | undefined
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setShowHeatmapTooltip: ((
            action: {
                type: 'set show heatmap tooltip (toolbar.elements.heatmapLogic)'
                payload: {
                    showHeatmapTooltip: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setHeatmapFilter: ((
            action: {
                type: 'set heatmap filter (toolbar.elements.heatmapLogic)'
                payload: {
                    filter: Partial<FilterType>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['toolbar', 'elements', 'heatmapLogic']
    pathString: 'toolbar.elements.heatmapLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        matchLinksByHref: boolean
        canLoadMoreElementStats: boolean
        heatmapEnabled: boolean
        heatmapLoading: boolean
        showHeatmapTooltip: boolean
        shiftPressed: boolean
        heatmapFilter: Partial<FilterType>
        elementStats: PaginatedResponse<ElementsEventType> | null
        elementStatsLoading: boolean
    }
    reducers: {
        matchLinksByHref: (state: boolean, action: any, fullState: any) => boolean
        canLoadMoreElementStats: (state: boolean, action: any, fullState: any) => boolean
        heatmapEnabled: (state: boolean, action: any, fullState: any) => boolean
        heatmapLoading: (state: boolean, action: any, fullState: any) => boolean
        showHeatmapTooltip: (state: boolean, action: any, fullState: any) => boolean
        shiftPressed: (state: boolean, action: any, fullState: any) => boolean
        heatmapFilter: (state: Partial<FilterType>, action: any, fullState: any) => Partial<FilterType>
        elementStats: (
            state: PaginatedResponse<ElementsEventType> | null,
            action: any,
            fullState: any
        ) => PaginatedResponse<ElementsEventType> | null
        elementStatsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        matchLinksByHref: boolean
        canLoadMoreElementStats: boolean
        heatmapEnabled: boolean
        heatmapLoading: boolean
        showHeatmapTooltip: boolean
        shiftPressed: boolean
        heatmapFilter: Partial<FilterType>
        elementStats: PaginatedResponse<ElementsEventType> | null
        elementStatsLoading: boolean
    }
    selectors: {
        matchLinksByHref: (state: any, props?: any) => boolean
        canLoadMoreElementStats: (state: any, props?: any) => boolean
        heatmapEnabled: (state: any, props?: any) => boolean
        heatmapLoading: (state: any, props?: any) => boolean
        showHeatmapTooltip: (state: any, props?: any) => boolean
        shiftPressed: (state: any, props?: any) => boolean
        heatmapFilter: (state: any, props?: any) => Partial<FilterType>
        elementStats: (state: any, props?: any) => PaginatedResponse<ElementsEventType> | null
        elementStatsLoading: (state: any, props?: any) => boolean
        apiURL: (state: any, props?: any) => string
        dateRange: (state: any, props?: any) => string | null
        elements: (state: any, props?: any) => CountedHTMLElement[]
        countedElements: (
            state: any,
            props?: any
        ) => {
            position: number
            count: number
            clickCount: number
            rageclickCount: number
            element: HTMLElement
            hash: string
            selector: string
            actionStep?: ActionStepType | undefined
            type: '$autocapture' | '$rageclick'
        }[]
        elementCount: (state: any, props?: any) => number
        clickCount: (state: any, props?: any) => number
        highestClickCount: (state: any, props?: any) => number
    }
    sharedListeners: {}
    values: {
        matchLinksByHref: boolean
        canLoadMoreElementStats: boolean
        heatmapEnabled: boolean
        heatmapLoading: boolean
        showHeatmapTooltip: boolean
        shiftPressed: boolean
        heatmapFilter: Partial<FilterType>
        elementStats: PaginatedResponse<ElementsEventType> | null
        elementStatsLoading: boolean
        apiURL: string
        dateRange: string | null
        elements: CountedHTMLElement[]
        countedElements: {
            position: number
            count: number
            clickCount: number
            rageclickCount: number
            element: HTMLElement
            hash: string
            selector: string
            actionStep?: ActionStepType | undefined
            type: '$autocapture' | '$rageclick'
        }[]
        elementCount: number
        clickCount: number
        highestClickCount: number
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        dateRange: (heatmapFilter: Partial<FilterType>) => string | null
        elements: (
            elementStats: PaginatedResponse<ElementsEventType> | null,
            dataAttributes: string[],
            href: string,
            matchLinksByHref: boolean
        ) => CountedHTMLElement[]
        countedElements: (
            elements: CountedHTMLElement[],
            dataAttributes: string[]
        ) => {
            position: number
            count: number
            clickCount: number
            rageclickCount: number
            element: HTMLElement
            hash: string
            selector: string
            actionStep?: ActionStepType | undefined
            type: '$autocapture' | '$rageclick'
        }[]
        elementCount: (
            countedElements: {
                position: number
                count: number
                clickCount: number
                rageclickCount: number
                element: HTMLElement
                hash: string
                selector: string
                actionStep?:
                    | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').ActionStepType
                    | undefined
                type: '$autocapture' | '$rageclick'
            }[]
        ) => number
        clickCount: (
            countedElements: {
                position: number
                count: number
                clickCount: number
                rageclickCount: number
                element: HTMLElement
                hash: string
                selector: string
                actionStep?:
                    | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').ActionStepType
                    | undefined
                type: '$autocapture' | '$rageclick'
            }[]
        ) => number
        highestClickCount: (
            countedElements: {
                position: number
                count: number
                clickCount: number
                rageclickCount: number
                element: HTMLElement
                hash: string
                selector: string
                actionStep?:
                    | import('/Users/arunchaitanya/Desktop/open-source/posthog-forked/posthog/frontend/src/types').ActionStepType
                    | undefined
                type: '$autocapture' | '$rageclick'
            }[]
        ) => number
    }
    __keaTypeGenInternalReducerActions: {
        'set href (toolbar.stats.currentPageLogic)': (href: string) => {
            type: 'set href (toolbar.stats.currentPageLogic)'
            payload: {
                href: string
            }
        }
        'set wildcard href (toolbar.stats.currentPageLogic)': (href: string) => {
            type: 'set wildcard href (toolbar.stats.currentPageLogic)'
            payload: {
                href: string
            }
        }
    }
}
