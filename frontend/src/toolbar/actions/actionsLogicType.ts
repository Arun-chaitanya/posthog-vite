// Generated by kea-typegen on Thu, 20 Jul 2023 11:20:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ActionType } from '../../types'

export interface actionsLogicType extends Logic {
    actionCreators: {
        setSearchTerm: (searchTerm: string) => {
            type: 'set search term (toolbar.actions.actionsLogic)'
            payload: {
                searchTerm: string
            }
        }
        getActions: (_?: any) => {
            type: 'get actions (toolbar.actions.actionsLogic)'
            payload: any
        }
        getActionsSuccess: (
            allActions: ActionType[],
            payload?: any
        ) => {
            type: 'get actions success (toolbar.actions.actionsLogic)'
            payload: {
                allActions: ActionType[]
                payload?: any
            }
        }
        getActionsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'get actions failure (toolbar.actions.actionsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateAction: ({ action }: { action: ActionType }) => {
            type: 'update action (toolbar.actions.actionsLogic)'
            payload: {
                action: ActionType
            }
        }
        updateActionSuccess: (
            allActions: ActionType[],
            payload?: {
                action: ActionType
            }
        ) => {
            type: 'update action success (toolbar.actions.actionsLogic)'
            payload: {
                allActions: ActionType[]
                payload?: {
                    action: ActionType
                }
            }
        }
        updateActionFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update action failure (toolbar.actions.actionsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deleteAction: ({ id }: { id: number }) => {
            type: 'delete action (toolbar.actions.actionsLogic)'
            payload: {
                id: number
            }
        }
        deleteActionSuccess: (
            allActions: ActionType[],
            payload?: {
                id: number
            }
        ) => {
            type: 'delete action success (toolbar.actions.actionsLogic)'
            payload: {
                allActions: ActionType[]
                payload?: {
                    id: number
                }
            }
        }
        deleteActionFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete action failure (toolbar.actions.actionsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set search term (toolbar.actions.actionsLogic)': 'setSearchTerm'
        'get actions (toolbar.actions.actionsLogic)': 'getActions'
        'get actions success (toolbar.actions.actionsLogic)': 'getActionsSuccess'
        'get actions failure (toolbar.actions.actionsLogic)': 'getActionsFailure'
        'update action (toolbar.actions.actionsLogic)': 'updateAction'
        'update action success (toolbar.actions.actionsLogic)': 'updateActionSuccess'
        'update action failure (toolbar.actions.actionsLogic)': 'updateActionFailure'
        'delete action (toolbar.actions.actionsLogic)': 'deleteAction'
        'delete action success (toolbar.actions.actionsLogic)': 'deleteActionSuccess'
        'delete action failure (toolbar.actions.actionsLogic)': 'deleteActionFailure'
    }
    actionTypes: {
        setSearchTerm: 'set search term (toolbar.actions.actionsLogic)'
        getActions: 'get actions (toolbar.actions.actionsLogic)'
        getActionsSuccess: 'get actions success (toolbar.actions.actionsLogic)'
        getActionsFailure: 'get actions failure (toolbar.actions.actionsLogic)'
        updateAction: 'update action (toolbar.actions.actionsLogic)'
        updateActionSuccess: 'update action success (toolbar.actions.actionsLogic)'
        updateActionFailure: 'update action failure (toolbar.actions.actionsLogic)'
        deleteAction: 'delete action (toolbar.actions.actionsLogic)'
        deleteActionSuccess: 'delete action success (toolbar.actions.actionsLogic)'
        deleteActionFailure: 'delete action failure (toolbar.actions.actionsLogic)'
    }
    actions: {
        setSearchTerm: (searchTerm: string) => void
        getActions: (_?: any) => void
        getActionsSuccess: (allActions: ActionType[], payload?: any) => void
        getActionsFailure: (error: string, errorObject?: any) => void
        updateAction: ({ action }: { action: ActionType }) => void
        updateActionSuccess: (
            allActions: ActionType[],
            payload?: {
                action: ActionType
            }
        ) => void
        updateActionFailure: (error: string, errorObject?: any) => void
        deleteAction: ({ id }: { id: number }) => void
        deleteActionSuccess: (
            allActions: ActionType[],
            payload?: {
                id: number
            }
        ) => void
        deleteActionFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setSearchTerm: (searchTerm: string) => Promise<any>
        getActions: (_?: any) => Promise<any>
        getActionsSuccess: (allActions: ActionType[], payload?: any) => Promise<any>
        getActionsFailure: (error: string, errorObject?: any) => Promise<any>
        updateAction: ({ action }: { action: ActionType }) => Promise<any>
        updateActionSuccess: (
            allActions: ActionType[],
            payload?: {
                action: ActionType
            }
        ) => Promise<any>
        updateActionFailure: (error: string, errorObject?: any) => Promise<any>
        deleteAction: ({ id }: { id: number }) => Promise<any>
        deleteActionSuccess: (
            allActions: ActionType[],
            payload?: {
                id: number
            }
        ) => Promise<any>
        deleteActionFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        searchTerm: string
        allActions: ActionType[]
        allActionsLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['toolbar', 'actions', 'actionsLogic']
    pathString: 'toolbar.actions.actionsLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        searchTerm: string
        allActions: ActionType[]
        allActionsLoading: boolean
    }
    reducers: {
        searchTerm: (state: string, action: any, fullState: any) => string
        allActions: (state: ActionType[], action: any, fullState: any) => ActionType[]
        allActionsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        searchTerm: string
        allActions: ActionType[]
        allActionsLoading: boolean
    }
    selectors: {
        searchTerm: (state: any, props?: any) => string
        allActions: (state: any, props?: any) => ActionType[]
        allActionsLoading: (state: any, props?: any) => boolean
        sortedActions: (state: any, props?: any) => ActionType[]
        actionCount: (state: any, props?: any) => number
    }
    sharedListeners: {}
    values: {
        searchTerm: string
        allActions: ActionType[]
        allActionsLoading: boolean
        sortedActions: ActionType[]
        actionCount: number
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        sortedActions: (allActions: ActionType[], searchTerm: string) => ActionType[]
        actionCount: (allActions: ActionType[]) => number
    }
}
