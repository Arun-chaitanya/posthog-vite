// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:46 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { CohortType, TeamPublicType, TeamType } from '../types'

export interface cohortsModelType extends Logic {
    actionCreators: {
        setPollTimeout: (pollTimeout: number | null) => {
            type: 'set poll timeout (models.cohortsModel)'
            payload: {
                pollTimeout: number | null
            }
        }
        updateCohort: (cohort: CohortType) => {
            type: 'update cohort (models.cohortsModel)'
            payload: {
                cohort: CohortType
            }
        }
        deleteCohort: (cohort: Partial<CohortType>) => {
            type: 'delete cohort (models.cohortsModel)'
            payload: {
                cohort: Partial<CohortType>
            }
        }
        cohortCreated: (cohort: CohortType) => {
            type: 'cohort created (models.cohortsModel)'
            payload: {
                cohort: CohortType
            }
        }
        exportCohortPersons: (
            id: CohortType['id'],
            columns?: string[]
        ) => {
            type: 'export cohort persons (models.cohortsModel)'
            payload: {
                id: number | 'new'
                columns: string[] | undefined
            }
        }
        loadCohorts: () => {
            type: 'load cohorts (models.cohortsModel)'
            payload: any
        }
        loadCohortsSuccess: (
            cohorts: CohortType[],
            payload?: any
        ) => {
            type: 'load cohorts success (models.cohortsModel)'
            payload: {
                cohorts: CohortType[]
                payload?: any
            }
        }
        loadCohortsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load cohorts failure (models.cohortsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set poll timeout (models.cohortsModel)': 'setPollTimeout'
        'update cohort (models.cohortsModel)': 'updateCohort'
        'delete cohort (models.cohortsModel)': 'deleteCohort'
        'cohort created (models.cohortsModel)': 'cohortCreated'
        'export cohort persons (models.cohortsModel)': 'exportCohortPersons'
        'load cohorts (models.cohortsModel)': 'loadCohorts'
        'load cohorts success (models.cohortsModel)': 'loadCohortsSuccess'
        'load cohorts failure (models.cohortsModel)': 'loadCohortsFailure'
    }
    actionTypes: {
        setPollTimeout: 'set poll timeout (models.cohortsModel)'
        updateCohort: 'update cohort (models.cohortsModel)'
        deleteCohort: 'delete cohort (models.cohortsModel)'
        cohortCreated: 'cohort created (models.cohortsModel)'
        exportCohortPersons: 'export cohort persons (models.cohortsModel)'
        loadCohorts: 'load cohorts (models.cohortsModel)'
        loadCohortsSuccess: 'load cohorts success (models.cohortsModel)'
        loadCohortsFailure: 'load cohorts failure (models.cohortsModel)'
    }
    actions: {
        setPollTimeout: (pollTimeout: number | null) => void
        updateCohort: (cohort: CohortType) => void
        deleteCohort: (cohort: Partial<CohortType>) => void
        cohortCreated: (cohort: CohortType) => void
        exportCohortPersons: (id: CohortType['id'], columns?: string[]) => void
        loadCohorts: () => void
        loadCohortsSuccess: (cohorts: CohortType[], payload?: any) => void
        loadCohortsFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        setPollTimeout: (pollTimeout: number | null) => Promise<any>
        updateCohort: (cohort: CohortType) => Promise<any>
        deleteCohort: (cohort: Partial<CohortType>) => Promise<any>
        cohortCreated: (cohort: CohortType) => Promise<any>
        exportCohortPersons: (id: CohortType['id'], columns?: string[]) => Promise<any>
        loadCohorts: () => Promise<any>
        loadCohortsSuccess: (cohorts: CohortType[], payload?: any) => Promise<any>
        loadCohortsFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        cohorts: CohortType[]
        cohortsLoading: boolean
        pollTimeout: number | null
    }
    events: {
        afterMount: () => void
        beforeUnmount: () => void
    }
    key: undefined
    listeners: {
        loadCohortsSuccess: ((
            action: {
                type: 'load cohorts success (models.cohortsModel)'
                payload: {
                    cohorts: CohortType[]
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        exportCohortPersons: ((
            action: {
                type: 'export cohort persons (models.cohortsModel)'
                payload: {
                    id: number | 'new'
                    columns: string[] | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        deleteCohort: ((
            action: {
                type: 'delete cohort (models.cohortsModel)'
                payload: {
                    cohort: Partial<CohortType>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['models', 'cohortsModel']
    pathString: 'models.cohortsModel'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        cohorts: CohortType[]
        cohortsLoading: boolean
        pollTimeout: number | null
    }
    reducers: {
        cohorts: (state: CohortType[], action: any, fullState: any) => CohortType[]
        cohortsLoading: (state: boolean, action: any, fullState: any) => boolean
        pollTimeout: (state: number | null, action: any, fullState: any) => number | null
    }
    selector: (state: any) => {
        cohorts: CohortType[]
        cohortsLoading: boolean
        pollTimeout: number | null
    }
    selectors: {
        cohorts: (state: any, props?: any) => CohortType[]
        cohortsLoading: (state: any, props?: any) => boolean
        pollTimeout: (state: any, props?: any) => number | null
        currentTeam: (state: any, props?: any) => TeamType | TeamPublicType | null
        cohortsWithAllUsers: (state: any, props?: any) => (CohortType | { id: 'all'; name: string })[]
        cohortsById: (state: any, props?: any) => Partial<Record<string | number, CohortType>>
    }
    sharedListeners: {}
    values: {
        cohorts: CohortType[]
        cohortsLoading: boolean
        pollTimeout: number | null
        currentTeam: TeamType | TeamPublicType | null
        cohortsWithAllUsers: (CohortType | { id: 'all'; name: string })[]
        cohortsById: Partial<Record<string | number, CohortType>>
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        cohortsWithAllUsers: (cohorts: CohortType[]) => (CohortType | { id: 'all'; name: string })[]
        cohortsById: (cohorts: CohortType[]) => Partial<Record<string | number, CohortType>>
    }
}
