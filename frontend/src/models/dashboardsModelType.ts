// Generated by kea-typegen on Wed, 02 Aug 2023 17:21:15 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DashboardBasicType, DashboardTile, DashboardType, InsightModel, InsightShortId } from '../types'
import type { DashboardEventSource } from '../lib/utils/eventUsageLogic'
import type { PaginatedResponse } from '../lib/api'

export interface dashboardsModelType extends Logic {
    actionCreators: {
        loadTags: () => {
            type: 'load tags (models.dashboardsModel)'
            payload: any
        }
        dashboardsFullyLoaded: () => {
            type: 'dashboards fully loaded (models.dashboardsModel)'
            payload: {
                value: true
            }
        }
        delayedDeleteDashboard: (id: number) => {
            type: 'delayed delete dashboard (models.dashboardsModel)'
            payload: {
                id: number
            }
        }
        setDiveSourceId: (id: InsightShortId | null) => {
            type: 'set dive source id (models.dashboardsModel)'
            payload: {
                id: InsightShortId | null
            }
        }
        setLastDashboardId: (id: number) => {
            type: 'set last dashboard id (models.dashboardsModel)'
            payload: {
                id: number
            }
        }
        addDashboardSuccess: (dashboard: DashboardType) => {
            type: 'add dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType
            }
        }
        updateDashboardInsight: (
            insight: InsightModel,
            extraDashboardIds?: number[],
            updateTileOnDashboards?: [number]
        ) => {
            type: 'update dashboard insight (models.dashboardsModel)'
            payload: {
                insight: InsightModel
                extraDashboardIds: number[] | undefined
                updateTileOnDashboards: [number] | undefined
            }
        }
        updateDashboardTile: (
            tile: DashboardTile,
            extraDashboardIds?: number[]
        ) => {
            type: 'update dashboard tile (models.dashboardsModel)'
            payload: {
                tile: DashboardTile
                extraDashboardIds: number[] | undefined
            }
        }
        updateDashboardRefreshStatus: (
            shortId: string | undefined | null,
            refreshing: boolean | null,
            last_refresh: string | null
        ) => {
            type: 'update dashboard refresh status (models.dashboardsModel)'
            payload: {
                shortId: string | null | undefined
                refreshing: boolean | null
                last_refresh: string | null
            }
        }
        pinDashboard: (
            id: number,
            source: DashboardEventSource
        ) => {
            type: 'pin dashboard (models.dashboardsModel)'
            payload: {
                id: number
                source: DashboardEventSource
            }
        }
        unpinDashboard: (
            id: number,
            source: DashboardEventSource
        ) => {
            type: 'unpin dashboard (models.dashboardsModel)'
            payload: {
                id: number
                source: DashboardEventSource
            }
        }
        duplicateDashboard: ({
            id,
            name,
            show,
            duplicateTiles,
        }: {
            id: number
            name?: string
            show?: boolean
            duplicateTiles?: boolean
        }) => {
            type: 'duplicate dashboard (models.dashboardsModel)'
            payload: {
                id: number
                name: string
                show: boolean
                duplicateTiles: boolean
            }
        }
        tileMovedToDashboard: (
            tile: DashboardTile,
            dashboardId: number
        ) => {
            type: 'tile moved to dashboard (models.dashboardsModel)'
            payload: {
                tile: DashboardTile
                dashboardId: number
            }
        }
        tileRemovedFromDashboard: ({ tile, dashboardId }: { tile?: DashboardTile; dashboardId?: number }) => {
            type: 'tile removed from dashboard (models.dashboardsModel)'
            payload: {
                tile: DashboardTile | undefined
                dashboardId: number | undefined
            }
        }
        tileAddedToDashboard: (dashboardId: number) => {
            type: 'tile added to dashboard (models.dashboardsModel)'
            payload: {
                dashboardId: number
            }
        }
        loadDashboards: (url?: string) => {
            type: 'load dashboards (models.dashboardsModel)'
            payload: string
        }
        loadDashboardsSuccess: (
            pagedDashboards: PaginatedResponse<DashboardBasicType> | null,
            payload?: string
        ) => {
            type: 'load dashboards success (models.dashboardsModel)'
            payload: {
                pagedDashboards: PaginatedResponse<DashboardBasicType> | null
                payload?: string
            }
        }
        loadDashboardsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load dashboards failure (models.dashboardsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateDashboard: ({ id, allowUndo, ...payload }: any) => {
            type: 'update dashboard (models.dashboardsModel)'
            payload: any
        }
        updateDashboardSuccess: (
            dashboard: DashboardType | undefined,
            payload?: any
        ) => {
            type: 'update dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType | undefined
                payload?: any
            }
        }
        updateDashboardFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update dashboard failure (models.dashboardsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deleteDashboard: ({ id, deleteInsights }: any) => {
            type: 'delete dashboard (models.dashboardsModel)'
            payload: any
        }
        deleteDashboardSuccess: (
            dashboard: DashboardType,
            payload?: any
        ) => {
            type: 'delete dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType
                payload?: any
            }
        }
        deleteDashboardFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete dashboard failure (models.dashboardsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        restoreDashboard: ({ id }: any) => {
            type: 'restore dashboard (models.dashboardsModel)'
            payload: any
        }
        restoreDashboardSuccess: (
            dashboard: DashboardType,
            payload?: any
        ) => {
            type: 'restore dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType
                payload?: any
            }
        }
        restoreDashboardFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'restore dashboard failure (models.dashboardsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        pinDashboardSuccess: (
            dashboard: DashboardType,
            payload?: {
                id: number
                source: DashboardEventSource
            }
        ) => {
            type: 'pin dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType
                payload?: {
                    id: number
                    source: DashboardEventSource
                }
            }
        }
        pinDashboardFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'pin dashboard failure (models.dashboardsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        unpinDashboardSuccess: (
            dashboard: DashboardType,
            payload?: {
                id: number
                source: DashboardEventSource
            }
        ) => {
            type: 'unpin dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType
                payload?: {
                    id: number
                    source: DashboardEventSource
                }
            }
        }
        unpinDashboardFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'unpin dashboard failure (models.dashboardsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        duplicateDashboardSuccess: (
            dashboard: DashboardType,
            payload?: {
                id: number
                name: string
                show: boolean
                duplicateTiles: boolean
            }
        ) => {
            type: 'duplicate dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType
                payload?: {
                    id: number
                    name: string
                    show: boolean
                    duplicateTiles: boolean
                }
            }
        }
        duplicateDashboardFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'duplicate dashboard failure (models.dashboardsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load tags (models.dashboardsModel)': 'loadTags'
        'dashboards fully loaded (models.dashboardsModel)': 'dashboardsFullyLoaded'
        'delayed delete dashboard (models.dashboardsModel)': 'delayedDeleteDashboard'
        'set dive source id (models.dashboardsModel)': 'setDiveSourceId'
        'set last dashboard id (models.dashboardsModel)': 'setLastDashboardId'
        'add dashboard success (models.dashboardsModel)': 'addDashboardSuccess'
        'update dashboard insight (models.dashboardsModel)': 'updateDashboardInsight'
        'update dashboard tile (models.dashboardsModel)': 'updateDashboardTile'
        'update dashboard refresh status (models.dashboardsModel)': 'updateDashboardRefreshStatus'
        'pin dashboard (models.dashboardsModel)': 'pinDashboard'
        'unpin dashboard (models.dashboardsModel)': 'unpinDashboard'
        'duplicate dashboard (models.dashboardsModel)': 'duplicateDashboard'
        'tile moved to dashboard (models.dashboardsModel)': 'tileMovedToDashboard'
        'tile removed from dashboard (models.dashboardsModel)': 'tileRemovedFromDashboard'
        'tile added to dashboard (models.dashboardsModel)': 'tileAddedToDashboard'
        'load dashboards (models.dashboardsModel)': 'loadDashboards'
        'load dashboards success (models.dashboardsModel)': 'loadDashboardsSuccess'
        'load dashboards failure (models.dashboardsModel)': 'loadDashboardsFailure'
        'update dashboard (models.dashboardsModel)': 'updateDashboard'
        'update dashboard success (models.dashboardsModel)': 'updateDashboardSuccess'
        'update dashboard failure (models.dashboardsModel)': 'updateDashboardFailure'
        'delete dashboard (models.dashboardsModel)': 'deleteDashboard'
        'delete dashboard success (models.dashboardsModel)': 'deleteDashboardSuccess'
        'delete dashboard failure (models.dashboardsModel)': 'deleteDashboardFailure'
        'restore dashboard (models.dashboardsModel)': 'restoreDashboard'
        'restore dashboard success (models.dashboardsModel)': 'restoreDashboardSuccess'
        'restore dashboard failure (models.dashboardsModel)': 'restoreDashboardFailure'
        'pin dashboard success (models.dashboardsModel)': 'pinDashboardSuccess'
        'pin dashboard failure (models.dashboardsModel)': 'pinDashboardFailure'
        'unpin dashboard success (models.dashboardsModel)': 'unpinDashboardSuccess'
        'unpin dashboard failure (models.dashboardsModel)': 'unpinDashboardFailure'
        'duplicate dashboard success (models.dashboardsModel)': 'duplicateDashboardSuccess'
        'duplicate dashboard failure (models.dashboardsModel)': 'duplicateDashboardFailure'
    }
    actionTypes: {
        loadTags: 'load tags (models.dashboardsModel)'
        dashboardsFullyLoaded: 'dashboards fully loaded (models.dashboardsModel)'
        delayedDeleteDashboard: 'delayed delete dashboard (models.dashboardsModel)'
        setDiveSourceId: 'set dive source id (models.dashboardsModel)'
        setLastDashboardId: 'set last dashboard id (models.dashboardsModel)'
        addDashboardSuccess: 'add dashboard success (models.dashboardsModel)'
        updateDashboardInsight: 'update dashboard insight (models.dashboardsModel)'
        updateDashboardTile: 'update dashboard tile (models.dashboardsModel)'
        updateDashboardRefreshStatus: 'update dashboard refresh status (models.dashboardsModel)'
        pinDashboard: 'pin dashboard (models.dashboardsModel)'
        unpinDashboard: 'unpin dashboard (models.dashboardsModel)'
        duplicateDashboard: 'duplicate dashboard (models.dashboardsModel)'
        tileMovedToDashboard: 'tile moved to dashboard (models.dashboardsModel)'
        tileRemovedFromDashboard: 'tile removed from dashboard (models.dashboardsModel)'
        tileAddedToDashboard: 'tile added to dashboard (models.dashboardsModel)'
        loadDashboards: 'load dashboards (models.dashboardsModel)'
        loadDashboardsSuccess: 'load dashboards success (models.dashboardsModel)'
        loadDashboardsFailure: 'load dashboards failure (models.dashboardsModel)'
        updateDashboard: 'update dashboard (models.dashboardsModel)'
        updateDashboardSuccess: 'update dashboard success (models.dashboardsModel)'
        updateDashboardFailure: 'update dashboard failure (models.dashboardsModel)'
        deleteDashboard: 'delete dashboard (models.dashboardsModel)'
        deleteDashboardSuccess: 'delete dashboard success (models.dashboardsModel)'
        deleteDashboardFailure: 'delete dashboard failure (models.dashboardsModel)'
        restoreDashboard: 'restore dashboard (models.dashboardsModel)'
        restoreDashboardSuccess: 'restore dashboard success (models.dashboardsModel)'
        restoreDashboardFailure: 'restore dashboard failure (models.dashboardsModel)'
        pinDashboardSuccess: 'pin dashboard success (models.dashboardsModel)'
        pinDashboardFailure: 'pin dashboard failure (models.dashboardsModel)'
        unpinDashboardSuccess: 'unpin dashboard success (models.dashboardsModel)'
        unpinDashboardFailure: 'unpin dashboard failure (models.dashboardsModel)'
        duplicateDashboardSuccess: 'duplicate dashboard success (models.dashboardsModel)'
        duplicateDashboardFailure: 'duplicate dashboard failure (models.dashboardsModel)'
    }
    actions: {
        loadTags: () => void
        dashboardsFullyLoaded: () => void
        delayedDeleteDashboard: (id: number) => void
        setDiveSourceId: (id: InsightShortId | null) => void
        setLastDashboardId: (id: number) => void
        addDashboardSuccess: (dashboard: DashboardType) => void
        updateDashboardInsight: (
            insight: InsightModel,
            extraDashboardIds?: number[],
            updateTileOnDashboards?: [number]
        ) => void
        updateDashboardTile: (tile: DashboardTile, extraDashboardIds?: number[]) => void
        updateDashboardRefreshStatus: (
            shortId: string | undefined | null,
            refreshing: boolean | null,
            last_refresh: string | null
        ) => void
        pinDashboard: (id: number, source: DashboardEventSource) => void
        unpinDashboard: (id: number, source: DashboardEventSource) => void
        duplicateDashboard: ({
            id,
            name,
            show,
            duplicateTiles,
        }: {
            id: number
            name?: string
            show?: boolean
            duplicateTiles?: boolean
        }) => void
        tileMovedToDashboard: (tile: DashboardTile, dashboardId: number) => void
        tileRemovedFromDashboard: ({ tile, dashboardId }: { tile?: DashboardTile; dashboardId?: number }) => void
        tileAddedToDashboard: (dashboardId: number) => void
        loadDashboards: (url?: string) => void
        loadDashboardsSuccess: (pagedDashboards: PaginatedResponse<DashboardBasicType> | null, payload?: string) => void
        loadDashboardsFailure: (error: string, errorObject?: any) => void
        updateDashboard: ({ id, allowUndo, ...payload }: any) => void
        updateDashboardSuccess: (dashboard: DashboardType | undefined, payload?: any) => void
        updateDashboardFailure: (error: string, errorObject?: any) => void
        deleteDashboard: ({ id, deleteInsights }: any) => void
        deleteDashboardSuccess: (dashboard: DashboardType, payload?: any) => void
        deleteDashboardFailure: (error: string, errorObject?: any) => void
        restoreDashboard: ({ id }: any) => void
        restoreDashboardSuccess: (dashboard: DashboardType, payload?: any) => void
        restoreDashboardFailure: (error: string, errorObject?: any) => void
        pinDashboardSuccess: (
            dashboard: DashboardType,
            payload?: {
                id: number
                source: DashboardEventSource
            }
        ) => void
        pinDashboardFailure: (error: string, errorObject?: any) => void
        unpinDashboardSuccess: (
            dashboard: DashboardType,
            payload?: {
                id: number
                source: DashboardEventSource
            }
        ) => void
        unpinDashboardFailure: (error: string, errorObject?: any) => void
        duplicateDashboardSuccess: (
            dashboard: DashboardType,
            payload?: {
                id: number
                name: string
                show: boolean
                duplicateTiles: boolean
            }
        ) => void
        duplicateDashboardFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadTags: () => Promise<any>
        dashboardsFullyLoaded: () => Promise<any>
        delayedDeleteDashboard: (id: number) => Promise<any>
        setDiveSourceId: (id: InsightShortId | null) => Promise<any>
        setLastDashboardId: (id: number) => Promise<any>
        addDashboardSuccess: (dashboard: DashboardType) => Promise<any>
        updateDashboardInsight: (
            insight: InsightModel,
            extraDashboardIds?: number[],
            updateTileOnDashboards?: [number]
        ) => Promise<any>
        updateDashboardTile: (tile: DashboardTile, extraDashboardIds?: number[]) => Promise<any>
        updateDashboardRefreshStatus: (
            shortId: string | undefined | null,
            refreshing: boolean | null,
            last_refresh: string | null
        ) => Promise<any>
        pinDashboard: (id: number, source: DashboardEventSource) => Promise<any>
        unpinDashboard: (id: number, source: DashboardEventSource) => Promise<any>
        duplicateDashboard: ({
            id,
            name,
            show,
            duplicateTiles,
        }: {
            id: number
            name?: string
            show?: boolean
            duplicateTiles?: boolean
        }) => Promise<any>
        tileMovedToDashboard: (tile: DashboardTile, dashboardId: number) => Promise<any>
        tileRemovedFromDashboard: ({
            tile,
            dashboardId,
        }: {
            tile?: DashboardTile
            dashboardId?: number
        }) => Promise<any>
        tileAddedToDashboard: (dashboardId: number) => Promise<any>
        loadDashboards: (url?: string) => Promise<any>
        loadDashboardsSuccess: (
            pagedDashboards: PaginatedResponse<DashboardBasicType> | null,
            payload?: string
        ) => Promise<any>
        loadDashboardsFailure: (error: string, errorObject?: any) => Promise<any>
        updateDashboard: ({ id, allowUndo, ...payload }: any) => Promise<any>
        updateDashboardSuccess: (dashboard: DashboardType | undefined, payload?: any) => Promise<any>
        updateDashboardFailure: (error: string, errorObject?: any) => Promise<any>
        deleteDashboard: ({ id, deleteInsights }: any) => Promise<any>
        deleteDashboardSuccess: (dashboard: DashboardType, payload?: any) => Promise<any>
        deleteDashboardFailure: (error: string, errorObject?: any) => Promise<any>
        restoreDashboard: ({ id }: any) => Promise<any>
        restoreDashboardSuccess: (dashboard: DashboardType, payload?: any) => Promise<any>
        restoreDashboardFailure: (error: string, errorObject?: any) => Promise<any>
        pinDashboardSuccess: (
            dashboard: DashboardType,
            payload?: {
                id: number
                source: DashboardEventSource
            }
        ) => Promise<any>
        pinDashboardFailure: (error: string, errorObject?: any) => Promise<any>
        unpinDashboardSuccess: (
            dashboard: DashboardType,
            payload?: {
                id: number
                source: DashboardEventSource
            }
        ) => Promise<any>
        unpinDashboardFailure: (error: string, errorObject?: any) => Promise<any>
        duplicateDashboardSuccess: (
            dashboard: DashboardType,
            payload?: {
                id: number
                name: string
                show: boolean
                duplicateTiles: boolean
            }
        ) => Promise<any>
        duplicateDashboardFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        pagedDashboards: PaginatedResponse<DashboardBasicType> | null
        pagedDashboardsLoading: boolean
        dashboard: null | DashboardType
        dashboardLoading: boolean
        pagingDashboardsCompleted: boolean
        redirect: boolean
        rawDashboards: Record<string, DashboardBasicType | DashboardType>
        lastDashboardId: null | number
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {
        loadDashboardsSuccess: ((
            action: {
                type: 'load dashboards success (models.dashboardsModel)'
                payload: {
                    pagedDashboards: PaginatedResponse<DashboardBasicType> | null
                    payload?: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        addDashboardSuccess: ((
            action: {
                type: 'add dashboard success (models.dashboardsModel)'
                payload: {
                    dashboard: DashboardType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        restoreDashboardSuccess: ((
            action: {
                type: 'restore dashboard success (models.dashboardsModel)'
                payload: {
                    dashboard: DashboardType
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        deleteDashboardSuccess: ((
            action: {
                type: 'delete dashboard success (models.dashboardsModel)'
                payload: {
                    dashboard: DashboardType
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        duplicateDashboardSuccess: ((
            action: {
                type: 'duplicate dashboard success (models.dashboardsModel)'
                payload: {
                    dashboard: DashboardType
                    payload?: {
                        id: number
                        name: string
                        show: boolean
                        duplicateTiles: boolean
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['models', 'dashboardsModel']
    pathString: 'models.dashboardsModel'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        pagedDashboards: PaginatedResponse<DashboardBasicType> | null
        pagedDashboardsLoading: boolean
        dashboard: null | DashboardType
        dashboardLoading: boolean
        pagingDashboardsCompleted: boolean
        redirect: boolean
        rawDashboards: Record<string, DashboardBasicType | DashboardType>
        lastDashboardId: null | number
    }
    reducers: {
        pagedDashboards: (
            state: PaginatedResponse<DashboardBasicType> | null,
            action: any,
            fullState: any
        ) => PaginatedResponse<DashboardBasicType> | null
        pagedDashboardsLoading: (state: boolean, action: any, fullState: any) => boolean
        dashboard: (state: null | DashboardType, action: any, fullState: any) => null | DashboardType
        dashboardLoading: (state: boolean, action: any, fullState: any) => boolean
        pagingDashboardsCompleted: (state: boolean, action: any, fullState: any) => boolean
        redirect: (state: boolean, action: any, fullState: any) => boolean
        rawDashboards: (
            state: Record<string, DashboardBasicType | DashboardType>,
            action: any,
            fullState: any
        ) => Record<string, DashboardBasicType | DashboardType>
        lastDashboardId: (state: null | number, action: any, fullState: any) => null | number
    }
    selector: (state: any) => {
        pagedDashboards: PaginatedResponse<DashboardBasicType> | null
        pagedDashboardsLoading: boolean
        dashboard: null | DashboardType
        dashboardLoading: boolean
        pagingDashboardsCompleted: boolean
        redirect: boolean
        rawDashboards: Record<string, DashboardBasicType | DashboardType>
        lastDashboardId: null | number
    }
    selectors: {
        pagedDashboards: (state: any, props?: any) => PaginatedResponse<DashboardBasicType> | null
        pagedDashboardsLoading: (state: any, props?: any) => boolean
        dashboard: (state: any, props?: any) => null | DashboardType
        dashboardLoading: (state: any, props?: any) => boolean
        pagingDashboardsCompleted: (state: any, props?: any) => boolean
        redirect: (state: any, props?: any) => boolean
        rawDashboards: (state: any, props?: any) => Record<string, DashboardBasicType | DashboardType>
        lastDashboardId: (state: any, props?: any) => null | number
        nameSortedDashboards: (state: any, props?: any) => (DashboardType | DashboardBasicType)[]
        pinSortedDashboards: (state: any, props?: any) => (DashboardType | DashboardBasicType)[]
        dashboardsLoading: (state: any, props?: any) => boolean
        pinnedDashboards: (state: any, props?: any) => (DashboardType | DashboardBasicType)[]
    }
    sharedListeners: {}
    values: {
        pagedDashboards: PaginatedResponse<DashboardBasicType> | null
        pagedDashboardsLoading: boolean
        dashboard: null | DashboardType
        dashboardLoading: boolean
        pagingDashboardsCompleted: boolean
        redirect: boolean
        rawDashboards: Record<string, DashboardBasicType | DashboardType>
        lastDashboardId: null | number
        nameSortedDashboards: (DashboardType | DashboardBasicType)[]
        pinSortedDashboards: (DashboardType | DashboardBasicType)[]
        dashboardsLoading: boolean
        pinnedDashboards: (DashboardType | DashboardBasicType)[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        nameSortedDashboards: (
            rawDashboards: Record<string, DashboardType | DashboardBasicType>
        ) => (DashboardType | DashboardBasicType)[]
        pinSortedDashboards: (
            nameSortedDashboards: (DashboardType | DashboardBasicType)[]
        ) => (DashboardType | DashboardBasicType)[]
        dashboardsLoading: (pagedDashboardsLoading: boolean, pagingDashboardsCompleted: boolean) => boolean
        pinnedDashboards: (
            nameSortedDashboards: (DashboardType | DashboardBasicType)[]
        ) => (DashboardType | DashboardBasicType)[]
    }
}
