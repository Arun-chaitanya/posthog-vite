// Generated by kea-typegen on Thu, 20 Jul 2023 11:14:20 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PropertyDefinition, PropertyDefinitionType } from '../types'
import type { FormatPropertyValueForDisplayFunction, Option, PropValue, PropertyDefinitionStorage } from './propertyDefinitionsModel'
import type { TaxonomicFilterValue } from '../lib/components/TaxonomicFilter/types'

export interface propertyDefinitionsModelType extends Logic {
    actionCreators: {
        loadPropertyDefinitions: (
            propertyKeys: string[],
            type: PropertyDefinitionType
        ) => {
            type: 'load property definitions (models.propertyDefinitionsModel)'
            payload: {
                propertyKeys: string[]
                type: PropertyDefinitionType
            }
        }
        updatePropertyDefinitions: (propertyDefinitions: PropertyDefinitionStorage) => {
            type: 'update property definitions (models.propertyDefinitionsModel)'
            payload: {
                propertyDefinitions: PropertyDefinitionStorage
            }
        }
        loadPropertyValues: (payload: {
            endpoint: string | undefined
            type: PropertyDefinitionType
            newInput: string | undefined
            propertyKey: string
            eventNames?: string[]
        }) => {
            type: 'load property values (models.propertyDefinitionsModel)'
            payload: {
                endpoint: string | undefined
                type: PropertyDefinitionType
                newInput: string | undefined
                propertyKey: string
                eventNames?: string[] | undefined
            }
        }
        setOptionsLoading: (key: string) => {
            type: 'set options loading (models.propertyDefinitionsModel)'
            payload: {
                key: string
            }
        }
        setOptions: (
            key: string,
            values: PropValue[]
        ) => {
            type: 'set options (models.propertyDefinitionsModel)'
            payload: {
                key: string
                values: PropValue[]
            }
        }
        fetchAllPendingDefinitions: () => {
            type: 'fetch all pending definitions (models.propertyDefinitionsModel)'
            payload: {
                value: true
            }
        }
        abortAnyRunningQuery: () => {
            type: 'abort any running query (models.propertyDefinitionsModel)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'load property definitions (models.propertyDefinitionsModel)': 'loadPropertyDefinitions'
        'update property definitions (models.propertyDefinitionsModel)': 'updatePropertyDefinitions'
        'load property values (models.propertyDefinitionsModel)': 'loadPropertyValues'
        'set options loading (models.propertyDefinitionsModel)': 'setOptionsLoading'
        'set options (models.propertyDefinitionsModel)': 'setOptions'
        'fetch all pending definitions (models.propertyDefinitionsModel)': 'fetchAllPendingDefinitions'
        'abort any running query (models.propertyDefinitionsModel)': 'abortAnyRunningQuery'
    }
    actionTypes: {
        loadPropertyDefinitions: 'load property definitions (models.propertyDefinitionsModel)'
        updatePropertyDefinitions: 'update property definitions (models.propertyDefinitionsModel)'
        loadPropertyValues: 'load property values (models.propertyDefinitionsModel)'
        setOptionsLoading: 'set options loading (models.propertyDefinitionsModel)'
        setOptions: 'set options (models.propertyDefinitionsModel)'
        fetchAllPendingDefinitions: 'fetch all pending definitions (models.propertyDefinitionsModel)'
        abortAnyRunningQuery: 'abort any running query (models.propertyDefinitionsModel)'
    }
    actions: {
        loadPropertyDefinitions: (propertyKeys: string[], type: PropertyDefinitionType) => void
        updatePropertyDefinitions: (propertyDefinitions: PropertyDefinitionStorage) => void
        loadPropertyValues: (payload: {
            endpoint: string | undefined
            type: PropertyDefinitionType
            newInput: string | undefined
            propertyKey: string
            eventNames?: string[]
        }) => void
        setOptionsLoading: (key: string) => void
        setOptions: (key: string, values: PropValue[]) => void
        fetchAllPendingDefinitions: () => void
        abortAnyRunningQuery: () => void
    }
    asyncActions: {
        loadPropertyDefinitions: (propertyKeys: string[], type: PropertyDefinitionType) => Promise<any>
        updatePropertyDefinitions: (propertyDefinitions: PropertyDefinitionStorage) => Promise<any>
        loadPropertyValues: (payload: {
            endpoint: string | undefined
            type: PropertyDefinitionType
            newInput: string | undefined
            propertyKey: string
            eventNames?: string[]
        }) => Promise<any>
        setOptionsLoading: (key: string) => Promise<any>
        setOptions: (key: string, values: PropValue[]) => Promise<any>
        fetchAllPendingDefinitions: () => Promise<any>
        abortAnyRunningQuery: () => Promise<any>
    }
    defaults: {
        propertyDefinitionStorage: PropertyDefinitionStorage
        options: Record<string, Option>
    }
    events: {}
    key: undefined
    listeners: {
        loadPropertyDefinitions: ((
            action: {
                type: 'load property definitions (models.propertyDefinitionsModel)'
                payload: {
                    propertyKeys: string[]
                    type: PropertyDefinitionType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        fetchAllPendingDefinitions: ((
            action: {
                type: 'fetch all pending definitions (models.propertyDefinitionsModel)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadPropertyValues: ((
            action: {
                type: 'load property values (models.propertyDefinitionsModel)'
                payload: {
                    endpoint: string | undefined
                    type: PropertyDefinitionType
                    newInput: string | undefined
                    propertyKey: string
                    eventNames?: string[] | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        abortAnyRunningQuery: ((
            action: {
                type: 'abort any running query (models.propertyDefinitionsModel)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['models', 'propertyDefinitionsModel']
    pathString: 'models.propertyDefinitionsModel'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        propertyDefinitionStorage: PropertyDefinitionStorage
        options: Record<string, Option>
    }
    reducers: {
        propertyDefinitionStorage: (
            state: PropertyDefinitionStorage,
            action: any,
            fullState: any
        ) => PropertyDefinitionStorage
        options: (state: Record<string, Option>, action: any, fullState: any) => Record<string, Option>
    }
    selector: (state: any) => {
        propertyDefinitionStorage: PropertyDefinitionStorage
        options: Record<string, Option>
    }
    selectors: {
        propertyDefinitionStorage: (state: any, props?: any) => PropertyDefinitionStorage
        options: (state: any, props?: any) => Record<string, Option>
        pendingProperties: (state: any, props?: any) => string[]
        propertyDefinitionsByType: (state: any, props?: any) => (type: string) => PropertyDefinition[]
        getPropertyDefinition: (
            state: any,
            props?: any
        ) => (s: TaxonomicFilterValue, type: PropertyDefinitionType) => PropertyDefinition | null
        describeProperty: (
            state: any,
            props?: any
        ) => (s: TaxonomicFilterValue, type: PropertyDefinitionType) => string | null
        formatPropertyValueForDisplay: (state: any, props?: any) => FormatPropertyValueForDisplayFunction
    }
    sharedListeners: {}
    values: {
        propertyDefinitionStorage: PropertyDefinitionStorage
        options: Record<string, Option>
        pendingProperties: string[]
        propertyDefinitionsByType: (type: string) => PropertyDefinition[]
        getPropertyDefinition: (s: TaxonomicFilterValue, type: PropertyDefinitionType) => PropertyDefinition | null
        describeProperty: (s: TaxonomicFilterValue, type: PropertyDefinitionType) => string | null
        formatPropertyValueForDisplay: FormatPropertyValueForDisplayFunction
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        pendingProperties: (propertyDefinitionStorage: PropertyDefinitionStorage) => string[]
        propertyDefinitionsByType: (
            propertyDefinitionStorage: PropertyDefinitionStorage
        ) => (type: string) => PropertyDefinition[]
        getPropertyDefinition: (
            propertyDefinitionStorage: PropertyDefinitionStorage
        ) => (s: TaxonomicFilterValue, type: PropertyDefinitionType) => PropertyDefinition | null
        describeProperty: (
            propertyDefinitionStorage: PropertyDefinitionStorage
        ) => (s: TaxonomicFilterValue, type: PropertyDefinitionType) => string | null
        formatPropertyValueForDisplay: (
            propertyDefinitionStorage: PropertyDefinitionStorage
        ) => FormatPropertyValueForDisplayFunction
    }
}
