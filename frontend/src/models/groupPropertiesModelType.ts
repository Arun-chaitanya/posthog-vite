// Generated by kea-typegen on Thu, 20 Jul 2023 11:23:47 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { GroupTypeProperties, PersonProperty } from '../types'

export interface groupPropertiesModelType extends Logic {
    actionCreators: {
        loadAllGroupProperties: () => {
            type: 'load all group properties (models.groupPropertiesModel)'
            payload: any
        }
        loadAllGroupPropertiesSuccess: (
            allGroupProperties: GroupTypeProperties,
            payload?: any
        ) => {
            type: 'load all group properties success (models.groupPropertiesModel)'
            payload: {
                allGroupProperties: GroupTypeProperties
                payload?: any
            }
        }
        loadAllGroupPropertiesFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load all group properties failure (models.groupPropertiesModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load all group properties (models.groupPropertiesModel)': 'loadAllGroupProperties'
        'load all group properties success (models.groupPropertiesModel)': 'loadAllGroupPropertiesSuccess'
        'load all group properties failure (models.groupPropertiesModel)': 'loadAllGroupPropertiesFailure'
    }
    actionTypes: {
        loadAllGroupProperties: 'load all group properties (models.groupPropertiesModel)'
        loadAllGroupPropertiesSuccess: 'load all group properties success (models.groupPropertiesModel)'
        loadAllGroupPropertiesFailure: 'load all group properties failure (models.groupPropertiesModel)'
    }
    actions: {
        loadAllGroupProperties: () => void
        loadAllGroupPropertiesSuccess: (allGroupProperties: GroupTypeProperties, payload?: any) => void
        loadAllGroupPropertiesFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadAllGroupProperties: () => Promise<any>
        loadAllGroupPropertiesSuccess: (allGroupProperties: GroupTypeProperties, payload?: any) => Promise<any>
        loadAllGroupPropertiesFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        allGroupProperties: GroupTypeProperties
        allGroupPropertiesLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {}
    path: ['models', 'groupPropertiesModel']
    pathString: 'models.groupPropertiesModel'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        allGroupProperties: GroupTypeProperties
        allGroupPropertiesLoading: boolean
    }
    reducers: {
        allGroupProperties: (state: GroupTypeProperties, action: any, fullState: any) => GroupTypeProperties
        allGroupPropertiesLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        allGroupProperties: GroupTypeProperties
        allGroupPropertiesLoading: boolean
    }
    selectors: {
        allGroupProperties: (state: any, props?: any) => GroupTypeProperties
        allGroupPropertiesLoading: (state: any, props?: any) => boolean
        currentTeamId: (state: any, props?: any) => number | null
        groupsEnabled: (state: any, props?: any) => boolean
        groupProperties: (state: any, props?: any) => (groupTypeIndex: number) => PersonProperty[]
        groupProperties_0: (state: any, props?: any) => PersonProperty[]
        groupProperties_1: (state: any, props?: any) => PersonProperty[]
        groupProperties_2: (state: any, props?: any) => PersonProperty[]
        groupProperties_3: (state: any, props?: any) => PersonProperty[]
        groupProperties_4: (state: any, props?: any) => PersonProperty[]
    }
    sharedListeners: {}
    values: {
        allGroupProperties: GroupTypeProperties
        allGroupPropertiesLoading: boolean
        currentTeamId: number | null
        groupsEnabled: boolean
        groupProperties: (groupTypeIndex: number) => PersonProperty[]
        groupProperties_0: PersonProperty[]
        groupProperties_1: PersonProperty[]
        groupProperties_2: PersonProperty[]
        groupProperties_3: PersonProperty[]
        groupProperties_4: PersonProperty[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        groupProperties: (allGroupProperties: GroupTypeProperties) => (groupTypeIndex: number) => PersonProperty[]
        groupProperties_0: (allGroupProperties: GroupTypeProperties) => PersonProperty[]
        groupProperties_1: (allGroupProperties: GroupTypeProperties) => PersonProperty[]
        groupProperties_2: (allGroupProperties: GroupTypeProperties) => PersonProperty[]
        groupProperties_3: (allGroupProperties: GroupTypeProperties) => PersonProperty[]
        groupProperties_4: (allGroupProperties: GroupTypeProperties) => PersonProperty[]
    }
}
