// Generated by kea-typegen on Thu, 20 Jul 2023 11:31:45 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { GroupsAccessStatus } from '../lib/introductions/groupsAccessLogic'
import type { GroupType } from '../types'
import type { TaxonomicFilterGroupType } from '../lib/components/TaxonomicFilter/types'
import type { Noun } from './groupsModel'

export interface groupsModelType extends Logic {
    actionCreators: {
        loadAllGroupTypes: () => {
            type: 'load all group types (models.groupsModel)'
            payload: any
        }
        loadAllGroupTypesSuccess: (
            groupTypes: Array<GroupType>,
            payload?: any
        ) => {
            type: 'load all group types success (models.groupsModel)'
            payload: {
                groupTypes: Array<GroupType>
                payload?: any
            }
        }
        loadAllGroupTypesFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load all group types failure (models.groupsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateGroupTypesMetadata: (payload: Array<GroupType>) => {
            type: 'update group types metadata (models.groupsModel)'
            payload: Array<GroupType>
        }
        updateGroupTypesMetadataSuccess: (
            groupTypes: Array<GroupType>,
            payload?: Array<GroupType>
        ) => {
            type: 'update group types metadata success (models.groupsModel)'
            payload: {
                groupTypes: Array<GroupType>
                payload?: Array<GroupType>
            }
        }
        updateGroupTypesMetadataFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update group types metadata failure (models.groupsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load all group types (models.groupsModel)': 'loadAllGroupTypes'
        'load all group types success (models.groupsModel)': 'loadAllGroupTypesSuccess'
        'load all group types failure (models.groupsModel)': 'loadAllGroupTypesFailure'
        'update group types metadata (models.groupsModel)': 'updateGroupTypesMetadata'
        'update group types metadata success (models.groupsModel)': 'updateGroupTypesMetadataSuccess'
        'update group types metadata failure (models.groupsModel)': 'updateGroupTypesMetadataFailure'
    }
    actionTypes: {
        loadAllGroupTypes: 'load all group types (models.groupsModel)'
        loadAllGroupTypesSuccess: 'load all group types success (models.groupsModel)'
        loadAllGroupTypesFailure: 'load all group types failure (models.groupsModel)'
        updateGroupTypesMetadata: 'update group types metadata (models.groupsModel)'
        updateGroupTypesMetadataSuccess: 'update group types metadata success (models.groupsModel)'
        updateGroupTypesMetadataFailure: 'update group types metadata failure (models.groupsModel)'
    }
    actions: {
        loadAllGroupTypes: () => void
        loadAllGroupTypesSuccess: (groupTypes: Array<GroupType>, payload?: any) => void
        loadAllGroupTypesFailure: (error: string, errorObject?: any) => void
        updateGroupTypesMetadata: (payload: Array<GroupType>) => void
        updateGroupTypesMetadataSuccess: (groupTypes: Array<GroupType>, payload?: Array<GroupType>) => void
        updateGroupTypesMetadataFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadAllGroupTypes: () => Promise<any>
        loadAllGroupTypesSuccess: (groupTypes: Array<GroupType>, payload?: any) => Promise<any>
        loadAllGroupTypesFailure: (error: string, errorObject?: any) => Promise<any>
        updateGroupTypesMetadata: (payload: Array<GroupType>) => Promise<any>
        updateGroupTypesMetadataSuccess: (groupTypes: Array<GroupType>, payload?: Array<GroupType>) => Promise<any>
        updateGroupTypesMetadataFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        groupTypes: Array<GroupType>
        groupTypesLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {}
    path: ['models', 'groupsModel']
    pathString: 'models.groupsModel'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        groupTypes: Array<GroupType>
        groupTypesLoading: boolean
    }
    reducers: {
        groupTypes: (state: Array<GroupType>, action: any, fullState: any) => Array<GroupType>
        groupTypesLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        groupTypes: Array<GroupType>
        groupTypesLoading: boolean
    }
    selectors: {
        groupTypes: (state: any, props?: any) => Array<GroupType>
        groupTypesLoading: (state: any, props?: any) => boolean
        currentTeamId: (state: any, props?: any) => number | null
        groupsEnabled: (state: any, props?: any) => boolean
        groupsAccessStatus: (state: any, props?: any) => GroupsAccessStatus
        showGroupsOptions: (state: any, props?: any) => boolean
        groupsTaxonomicTypes: (state: any, props?: any) => TaxonomicFilterGroupType[]
        groupNamesTaxonomicTypes: (state: any, props?: any) => TaxonomicFilterGroupType[]
        aggregationLabel: (
            state: any,
            props?: any
        ) => (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun
    }
    sharedListeners: {}
    values: {
        groupTypes: Array<GroupType>
        groupTypesLoading: boolean
        currentTeamId: number | null
        groupsEnabled: boolean
        groupsAccessStatus: GroupsAccessStatus
        showGroupsOptions: boolean
        groupsTaxonomicTypes: TaxonomicFilterGroupType[]
        groupNamesTaxonomicTypes: TaxonomicFilterGroupType[]
        aggregationLabel: (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        showGroupsOptions: (
            groupsAccessStatus: GroupsAccessStatus,
            groupsEnabled: boolean,
            groupTypes: GroupType[]
        ) => boolean
        groupsTaxonomicTypes: (groupTypes: GroupType[]) => TaxonomicFilterGroupType[]
        groupNamesTaxonomicTypes: (groupTypes: GroupType[]) => TaxonomicFilterGroupType[]
        aggregationLabel: (
            groupTypes: GroupType[]
        ) => (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun
    }
}
