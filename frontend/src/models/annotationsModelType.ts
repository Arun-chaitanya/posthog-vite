// Generated by kea-typegen on Thu, 20 Jul 2023 11:19:48 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AnnotationType, RawAnnotationType, TeamPublicType, TeamType } from '../types'
import type { AnnotationData, AnnotationDataWithoutInsight } from './annotationsModel'

export interface annotationsModelType extends Logic {
    actionCreators: {
        deleteAnnotation: (annotation: AnnotationType) => {
            type: 'delete annotation (models.annotationsModel)'
            payload: {
                annotation: AnnotationType
            }
        }
        loadAnnotationsNext: () => {
            type: 'load annotations next (models.annotationsModel)'
            payload: boolean
        }
        setNext: (next: string | null) => {
            type: 'set next (models.annotationsModel)'
            payload: {
                next: string | null
            }
        }
        appendAnnotations: (annotations: RawAnnotationType[]) => {
            type: 'append annotations (models.annotationsModel)'
            payload: {
                annotations: RawAnnotationType[]
            }
        }
        replaceAnnotation: (annotation: RawAnnotationType) => {
            type: 'replace annotation (models.annotationsModel)'
            payload: {
                annotation: RawAnnotationType
            }
        }
        loadAnnotations: () => {
            type: 'load annotations (models.annotationsModel)'
            payload: any
        }
        loadAnnotationsSuccess: (
            rawAnnotations: RawAnnotationType[],
            payload?: any
        ) => {
            type: 'load annotations success (models.annotationsModel)'
            payload: {
                rawAnnotations: RawAnnotationType[]
                payload?: any
            }
        }
        loadAnnotationsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load annotations failure (models.annotationsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        createAnnotationGenerically: (annotationData: AnnotationData) => {
            type: 'create annotation generically (models.annotationsModel)'
            payload: AnnotationData
        }
        createAnnotationGenericallySuccess: (
            rawAnnotations: void,
            payload?: AnnotationData
        ) => {
            type: 'create annotation generically success (models.annotationsModel)'
            payload: {
                rawAnnotations: void
                payload?: AnnotationData
            }
        }
        createAnnotationGenericallyFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'create annotation generically failure (models.annotationsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateAnnotation: ({
            annotationId,
            annotationData,
        }: {
            annotationId: RawAnnotationType['id']
            annotationData: AnnotationDataWithoutInsight
        }) => {
            type: 'update annotation (models.annotationsModel)'
            payload: {
                annotationId: RawAnnotationType[]
                annotationData: AnnotationDataWithoutInsight
            }
        }
        updateAnnotationSuccess: (
            rawAnnotations: void,
            payload?: {
                annotationId: RawAnnotationType[]
                annotationData: AnnotationDataWithoutInsight
            }
        ) => {
            type: 'update annotation success (models.annotationsModel)'
            payload: {
                rawAnnotations: void
                payload?: {
                    annotationId: RawAnnotationType[]
                    annotationData: AnnotationDataWithoutInsight
                }
            }
        }
        updateAnnotationFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update annotation failure (models.annotationsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deleteAnnotationSuccess: (
            rawAnnotations: AnnotationType[],
            payload?: {
                annotation: AnnotationType
            }
        ) => {
            type: 'delete annotation success (models.annotationsModel)'
            payload: {
                rawAnnotations: AnnotationType[]
                payload?: {
                    annotation: AnnotationType
                }
            }
        }
        deleteAnnotationFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete annotation failure (models.annotationsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'delete annotation (models.annotationsModel)': 'deleteAnnotation'
        'load annotations next (models.annotationsModel)': 'loadAnnotationsNext'
        'set next (models.annotationsModel)': 'setNext'
        'append annotations (models.annotationsModel)': 'appendAnnotations'
        'replace annotation (models.annotationsModel)': 'replaceAnnotation'
        'load annotations (models.annotationsModel)': 'loadAnnotations'
        'load annotations success (models.annotationsModel)': 'loadAnnotationsSuccess'
        'load annotations failure (models.annotationsModel)': 'loadAnnotationsFailure'
        'create annotation generically (models.annotationsModel)': 'createAnnotationGenerically'
        'create annotation generically success (models.annotationsModel)': 'createAnnotationGenericallySuccess'
        'create annotation generically failure (models.annotationsModel)': 'createAnnotationGenericallyFailure'
        'update annotation (models.annotationsModel)': 'updateAnnotation'
        'update annotation success (models.annotationsModel)': 'updateAnnotationSuccess'
        'update annotation failure (models.annotationsModel)': 'updateAnnotationFailure'
        'delete annotation success (models.annotationsModel)': 'deleteAnnotationSuccess'
        'delete annotation failure (models.annotationsModel)': 'deleteAnnotationFailure'
    }
    actionTypes: {
        deleteAnnotation: 'delete annotation (models.annotationsModel)'
        loadAnnotationsNext: 'load annotations next (models.annotationsModel)'
        setNext: 'set next (models.annotationsModel)'
        appendAnnotations: 'append annotations (models.annotationsModel)'
        replaceAnnotation: 'replace annotation (models.annotationsModel)'
        loadAnnotations: 'load annotations (models.annotationsModel)'
        loadAnnotationsSuccess: 'load annotations success (models.annotationsModel)'
        loadAnnotationsFailure: 'load annotations failure (models.annotationsModel)'
        createAnnotationGenerically: 'create annotation generically (models.annotationsModel)'
        createAnnotationGenericallySuccess: 'create annotation generically success (models.annotationsModel)'
        createAnnotationGenericallyFailure: 'create annotation generically failure (models.annotationsModel)'
        updateAnnotation: 'update annotation (models.annotationsModel)'
        updateAnnotationSuccess: 'update annotation success (models.annotationsModel)'
        updateAnnotationFailure: 'update annotation failure (models.annotationsModel)'
        deleteAnnotationSuccess: 'delete annotation success (models.annotationsModel)'
        deleteAnnotationFailure: 'delete annotation failure (models.annotationsModel)'
    }
    actions: {
        deleteAnnotation: (annotation: AnnotationType) => void
        loadAnnotationsNext: () => void
        setNext: (next: string | null) => void
        appendAnnotations: (annotations: RawAnnotationType[]) => void
        replaceAnnotation: (annotation: RawAnnotationType) => void
        loadAnnotations: () => void
        loadAnnotationsSuccess: (rawAnnotations: RawAnnotationType[], payload?: any) => void
        loadAnnotationsFailure: (error: string, errorObject?: any) => void
        createAnnotationGenerically: (annotationData: AnnotationData) => void
        createAnnotationGenericallySuccess: (rawAnnotations: void, payload?: AnnotationData) => void
        createAnnotationGenericallyFailure: (error: string, errorObject?: any) => void
        updateAnnotation: ({
            annotationId,
            annotationData,
        }: {
            annotationId: RawAnnotationType['id']
            annotationData: AnnotationDataWithoutInsight
        }) => void
        updateAnnotationSuccess: (
            rawAnnotations: void,
            payload?: {
                annotationId: RawAnnotationType[]
                annotationData: AnnotationDataWithoutInsight
            }
        ) => void
        updateAnnotationFailure: (error: string, errorObject?: any) => void
        deleteAnnotationSuccess: (
            rawAnnotations: AnnotationType[],
            payload?: {
                annotation: AnnotationType
            }
        ) => void
        deleteAnnotationFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        deleteAnnotation: (annotation: AnnotationType) => Promise<any>
        loadAnnotationsNext: () => Promise<any>
        setNext: (next: string | null) => Promise<any>
        appendAnnotations: (annotations: RawAnnotationType[]) => Promise<any>
        replaceAnnotation: (annotation: RawAnnotationType) => Promise<any>
        loadAnnotations: () => Promise<any>
        loadAnnotationsSuccess: (rawAnnotations: RawAnnotationType[], payload?: any) => Promise<any>
        loadAnnotationsFailure: (error: string, errorObject?: any) => Promise<any>
        createAnnotationGenerically: (annotationData: AnnotationData) => Promise<any>
        createAnnotationGenericallySuccess: (rawAnnotations: void, payload?: AnnotationData) => Promise<any>
        createAnnotationGenericallyFailure: (error: string, errorObject?: any) => Promise<any>
        updateAnnotation: ({
            annotationId,
            annotationData,
        }: {
            annotationId: RawAnnotationType['id']
            annotationData: AnnotationDataWithoutInsight
        }) => Promise<any>
        updateAnnotationSuccess: (
            rawAnnotations: void,
            payload?: {
                annotationId: RawAnnotationType[]
                annotationData: AnnotationDataWithoutInsight
            }
        ) => Promise<any>
        updateAnnotationFailure: (error: string, errorObject?: any) => Promise<any>
        deleteAnnotationSuccess: (
            rawAnnotations: AnnotationType[],
            payload?: {
                annotation: AnnotationType
            }
        ) => Promise<any>
        deleteAnnotationFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        rawAnnotations: RawAnnotationType[]
        rawAnnotationsLoading: boolean
        next: string | null
        loadingNext: boolean
    }
    events: {}
    key: undefined
    listeners: {
        loadAnnotationsNext: ((
            action: {
                type: 'load annotations next (models.annotationsModel)'
                payload: boolean
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['models', 'annotationsModel']
    pathString: 'models.annotationsModel'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        rawAnnotations: RawAnnotationType[]
        rawAnnotationsLoading: boolean
        next: string | null
        loadingNext: boolean
    }
    reducers: {
        rawAnnotations: (state: RawAnnotationType[], action: any, fullState: any) => RawAnnotationType[]
        rawAnnotationsLoading: (state: boolean, action: any, fullState: any) => boolean
        next: (state: string | null, action: any, fullState: any) => string | null
        loadingNext: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        rawAnnotations: RawAnnotationType[]
        rawAnnotationsLoading: boolean
        next: string | null
        loadingNext: boolean
    }
    selectors: {
        rawAnnotations: (state: any, props?: any) => RawAnnotationType[]
        rawAnnotationsLoading: (state: any, props?: any) => boolean
        next: (state: any, props?: any) => string | null
        loadingNext: (state: any, props?: any) => boolean
        currentTeam: (state: any, props?: any) => TeamType | TeamPublicType | null
        timezone: (state: any, props?: any) => string
        annotations: (state: any, props?: any) => AnnotationType[]
        annotationsLoading: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        rawAnnotations: RawAnnotationType[]
        rawAnnotationsLoading: boolean
        next: string | null
        loadingNext: boolean
        currentTeam: TeamType | TeamPublicType | null
        timezone: string
        annotations: AnnotationType[]
        annotationsLoading: boolean
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        annotations: (rawAnnotations: RawAnnotationType[], timezone: string) => AnnotationType[]
        annotationsLoading: (rawAnnotationsLoading: boolean) => boolean
    }
}
